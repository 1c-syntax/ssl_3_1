///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет данные регистра при полном обновлении вспомогательных данных.
//
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьДанныеРегистра(ЕстьИзменения = Неопределено) Экспорт
	
	Если Не УправлениеДоступомСлужебный.ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоРазделенныйРежимСеансаБезРазделителей()
	   И ДоступноВыполнениеФоновыхЗаданий() Тогда
		
		ОбновитьДанныеРегистраВФоне(ЕстьИзменения);
	Иначе
		ОбновитьДанныеРегистраНеВФоне(ЕстьИзменения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоступноВыполнениеФоновыхЗаданий()
	
	Если ТекущийРежимЗапуска() = Неопределено
	   И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
		Если Сеанс.ИмяПриложения = "COMConnection"
		 Или Сеанс.ИмяПриложения = "BackgroundJob" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьДанныеРегистраНеВФоне(ЕстьИзменения)
	
	УправлениеДоступомСлужебный.ДействующиеПараметрыОграниченияДоступа(Неопределено,
		Неопределено, Истина, Ложь, Ложь, ЕстьИзменения);
	
КонецПроцедуры

Процедура ОбновитьДанныеРегистраВФоне(ЕстьИзменения)
	
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Управление доступом: Обновление параметров ограничения доступа (из сеанса %1 от %2)'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		Формат(ТекущийСеанс.НомерСеанса, "ЧГ="),
		Формат(ТекущийСеанс.НачалоСеанса, "ДЛФ=DT"));
	
	ПараметрыОперации = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыОперации.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыОперации.СРасширениямиБазыДанных = Истина;
	ПараметрыОперации.ОжидатьЗавершение = Неопределено;
	
	ИмяПроцедуры = "РегистрыСведений.ПараметрыОграниченияДоступа.ОбработчикДлительнойОперацииОбновленияВФоне";
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, Неопределено, ПараметрыОперации);
	ЗаголовокОшибки = НСтр("ru = 'Не удалось обновить параметры ограничения доступа по причине:'") + Символы.ПС;
	
	Если ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			ТекстОшибки = ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
			ТекстОшибки = НСтр("ru = 'Фоновое задание отменено'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Ошибка выполнения фонового задания'");
		КонецЕсли;
		ВызватьИсключение ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ТекстОшибки = НСтр("ru = 'Фоновое задание не вернуло результат'");
		ВызватьИсключение ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
	
	Если Результат.ТребуетсяПерезапускСеанса Тогда
		УправлениеДоступомСлужебный.ПроверитьАктуальностьМетаданных();
		СтандартныеПодсистемыСервер.УстановитьТребуетсяПерезапускСеанса(Результат.ТекстОшибки);
		ВызватьИсключение ЗаголовокОшибки + Результат.ТекстОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ВызватьИсключение ЗаголовокОшибки + Результат.ТекстОшибки;
	КонецЕсли;
	
	Если Результат.ЕстьИзменения Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Параметры - Неопределено
//  АдресРезультата - Строка
//
Процедура ОбработчикДлительнойОперацииОбновленияВФоне(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ТребуетсяПерезапускСеанса", Ложь);
	
	Попытка
		ОбновитьДанныеРегистраНеВФоне(Результат.ЕстьИзменения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если СтандартныеПодсистемыСервер.ТребуетсяПерезапускСеанса(Результат.ТекстОшибки) Тогда
			Результат.ТребуетсяПерезапускСеанса = Истина;
		КонецЕсли;
		Если Не Результат.ТребуетсяПерезапускСеанса
		 Или Не СтандартныеПодсистемыСервер.ЭтоОшибкаТребованияПерезапускаСеанса(ИнформацияОбОшибке) Тогда
			Результат.ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Обновляет версию текстов ограничений доступа.
//
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если изменения найдены,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьВерсиюТекстовОграниченияДоступа(ЕстьИзменения = Неопределено) Экспорт
	
	ВерсияТекстов = ВерсияТекстовОграниченияДоступа();
	
	НачатьТранзакцию();
	Попытка
		ЕстьТекущиеИзменения = Ложь;
		
		СтандартныеПодсистемыСервер.ОбновитьПараметрРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ВерсияТекстовОграниченияДоступа",
			ВерсияТекстов, ЕстьТекущиеИзменения);
		
		СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ВерсияТекстовОграниченияДоступа",
			?(ЕстьТекущиеИзменения,
			  Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина),
			  Новый ФиксированнаяСтруктура()) );
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЕстьТекущиеИзменения Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет вспомогательные данные регистра по результату изменения
// возможных прав по значениям доступа, сохраненных в параметрах ограничения доступа.
//
Процедура ЗапланироватьОбновлениеДоступаПоИзменениямКонфигурации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УправлениеДоступомСлужебный.ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		
		ПоследниеИзменения = СтандартныеПодсистемыСервер.ИзмененияПараметраРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ВерсияТекстовОграниченияДоступа");
			
		Если ПоследниеИзменения = Неопределено Тогда
			ТребуетсяОбновление = Истина;
		Иначе
			ТребуетсяОбновление = Ложь;
			Для Каждого ЧастьИзменений Из ПоследниеИзменения Цикл
				
				Если ТипЗнч(ЧастьИзменений) = Тип("ФиксированнаяСтруктура")
				   И ЧастьИзменений.Свойство("ЕстьИзменения")
				   И ТипЗнч(ЧастьИзменений.ЕстьИзменения) = Тип("Булево") Тогда
					
					Если ЧастьИзменений.ЕстьИзменения Тогда
						ТребуетсяОбновление = Истина;
						Прервать;
					КонецЕсли;
				Иначе
					ТребуетсяОбновление = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			УправлениеДоступомСлужебный.ЗапланироватьОбновлениеПараметровОграниченияДоступа(
				"ЗапланироватьОбновлениеДоступаПоИзменениямКонфигурации");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СтараяВерсияСтруктурыКэша - Строка
//  НовыеПараметры - см. УправлениеДоступомСлужебный.НоваяСтруктураХранимыхПараметровЗаписи
//
Процедура ПриИзмененииВерсииСтруктурыКэша(СтараяВерсияСтруктурыКэша, НовыеПараметры) Экспорт
	
	СтараяВерсия = СоставВерсии(СтараяВерсияСтруктурыКэша);
	
	Если СтараяВерсия.Основная < 19 Тогда
		ЗапланироватьОбновление(НовыеПараметры, Истина, Истина, "НоваяСтруктураКэша19");
		ЗапланироватьОбновлениеНаборовГруппДоступа(НовыеПараметры, "НоваяСтруктураКэша19");
	КонецЕсли;
	
	Если СтараяВерсия.Основная < 25 Тогда
		РегистрыСведений.ИспользуемыеВидыДоступа.ЗапланироватьОбновлениеПриИзмененииИспользованияВидовДоступа();
		ЗапланироватьОбновление(НовыеПараметры, Ложь, Истина, "НоваяСтруктураКэша25");
	КонецЕсли;
	
	Если СтараяВерсия.Основная < 26 Тогда
		ЗапланироватьОбновление1(НовыеПараметры, "НоваяСтруктураКэша26");
		ЗапланироватьОбновление2(НовыеПараметры, "НоваяСтруктураКэша26");
		ЗапланироватьОбновление3(НовыеПараметры, "НоваяСтруктураКэша26");
	КонецЕсли;
	
КонецПроцедуры

Функция СоставВерсии(Версия)
	
	ЧастиВерсии = СтрРазделить(СтрРазделить(Версия, "/", Истина)[0], ".", Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("Основная", 0);
	Результат.Вставить("Дополнительная", 0);
	
	Если ЧастиВерсии.Количество() > 0
	   И ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ЧастиВерсии[0]) Тогда
		
		Результат.Основная = Число(ЧастиВерсии[0]);
	КонецЕсли;
	
	Если ЧастиВерсии.Количество() > 1
	   И ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ЧастиВерсии[1]) Тогда
		
		Результат.Дополнительная = Число(ЧастиВерсии[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для процедуры ОбновитьДанныеРегистраПоИзменениямКонфигурации.
Процедура ЗапланироватьОбновление(Параметры, КлючиДоступаКДанным, РазрешенныеКлючиДоступа, Описание)
	
	ОписаниеОграниченийДанных = УправлениеДоступомСлужебный.ОписаниеОграниченийДанных();
	ВнешниеПользователиВключены = Константы.ИспользоватьВнешнихПользователей.Получить();
	
	Списки = Новый Массив;
	СпискиДляВнешнихПользователей = Новый Массив;
	Для Каждого КлючИЗначение Из ОписаниеОграниченийДанных Цикл
		Списки.Добавить(КлючИЗначение.Ключ);
		Если ВнешниеПользователиВключены Тогда
			СпискиДляВнешнихПользователей.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПланирования = УправлениеДоступомСлужебный.ПараметрыПланированияОбновленияДоступа();
	ПараметрыПланирования.ВерсииОграниченийСписков = Параметры.ВерсииОграниченийСписков;
	
	ПараметрыПланирования.КлючиДоступаКДанным = КлючиДоступаКДанным;
	ПараметрыПланирования.РазрешенныеКлючиДоступа = РазрешенныеКлючиДоступа;
	ПараметрыПланирования.ДляВнешнихПользователей = Ложь;
	ПараметрыПланирования.ЭтоПродолжениеОбновления = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(Списки, ПараметрыПланирования);
	
	ПараметрыПланирования.ДляПользователей = Ложь;
	ПараметрыПланирования.ДляВнешнихПользователей = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(СпискиДляВнешнихПользователей, ПараметрыПланирования);
	
КонецПроцедуры

// Для процедуры ОбновитьДанныеРегистраПоИзменениямКонфигурации.
Процедура ЗапланироватьОбновлениеНаборовГруппДоступа(Параметры, Описание)
	
	ПараметрыПланирования = УправлениеДоступомСлужебный.ПараметрыПланированияОбновленияДоступа(Ложь);
	ПараметрыПланирования.ВерсииОграниченийСписков = Параметры.ВерсииОграниченийСписков;
	
	ПараметрыПланирования.РазрешенныеКлючиДоступа = Ложь;
	ПараметрыПланирования.ЭтоПродолжениеОбновления = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа("Справочник.НаборыГруппДоступа",
		ПараметрыПланирования);
	
КонецПроцедуры

// Для процедуры ОбновитьДанныеРегистраПоИзменениямКонфигурации.
Процедура ЗапланироватьОбновление1(Параметры, Описание)
	
	ДополнительныйКонтекст = Параметры.ДополнительныйКонтекст;
	
	Списки = Новый Массив;
	СпискиДляВнешнихПользователей = Новый Массив;
	ВнешниеПользователиВключены = Константы.ИспользоватьВнешнихПользователей.Получить();
	
	ДобавитьСписки1(Списки, ДополнительныйКонтекст.ДляПользователей);
	Если ВнешниеПользователиВключены Тогда
		ДобавитьСписки1(СпискиДляВнешнихПользователей,
			ДополнительныйКонтекст.ДляВнешнихПользователей);
	КонецЕсли;
	
	ПараметрыПланирования = УправлениеДоступомСлужебный.ПараметрыПланированияОбновленияДоступа();
	ПараметрыПланирования.ВерсииОграниченийСписков = Параметры.ВерсииОграниченийСписков;
	
	ПараметрыПланирования.КлючиДоступаКДанным = Ложь;
	ПараметрыПланирования.РазрешенныеКлючиДоступа = Истина;
	ПараметрыПланирования.ДляВнешнихПользователей = Ложь;
	ПараметрыПланирования.ЭтоПродолжениеОбновления = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(Списки, ПараметрыПланирования);
	
	ПараметрыПланирования.ДляПользователей = Ложь;
	ПараметрыПланирования.ДляВнешнихПользователей = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(СпискиДляВнешнихПользователей, ПараметрыПланирования);
	
КонецПроцедуры

// Для процедуры ЗапланироватьОбновление1.
Процедура ДобавитьСписки1(Списки, ДополнительныйКонтекст)
	
	СпискиСЗаписьюКлючейДляЗависимыхСписковБезКлючей =
		ДополнительныйКонтекст.СпискиСЗаписьюКлючейДляЗависимыхСписковБезКлючей;
	
	Для Каждого КлючИЗначение Из ДополнительныйКонтекст.СпискиСОтключеннымОграничением Цикл
		Если СпискиСЗаписьюКлючейДляЗависимыхСписковБезКлючей.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(КлючИЗначение.Ключ);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Списки.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОбновитьДанныеРегистраПоИзменениямКонфигурации.
Процедура ЗапланироватьОбновление2(Параметры, Описание)
	
	Списки = Новый Массив;
	СпискиДляВнешнихПользователей = Новый Массив;
	ВнешниеПользователиВключены = Константы.ИспользоватьВнешнихПользователей.Получить();
	
	ДобавитьСписки2(Списки, Ложь);
	Если ВнешниеПользователиВключены Тогда
		ДобавитьСписки2(СпискиДляВнешнихПользователей, Истина);
	КонецЕсли;
	
	ПараметрыПланирования = УправлениеДоступомСлужебный.ПараметрыПланированияОбновленияДоступа();
	ПараметрыПланирования.ВерсииОграниченийСписков = Параметры.ВерсииОграниченийСписков;
	
	ПараметрыПланирования.КлючиДоступаКДанным = Истина;
	ПараметрыПланирования.РазрешенныеКлючиДоступа = Ложь;
	ПараметрыПланирования.ДляВнешнихПользователей = Ложь;
	ПараметрыПланирования.ЭтоПродолжениеОбновления = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(Списки, ПараметрыПланирования);
	
	ПараметрыПланирования.ДляПользователей = Ложь;
	ПараметрыПланирования.ДляВнешнихПользователей = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(СпискиДляВнешнихПользователей, ПараметрыПланирования);
	
КонецПроцедуры

// Для процедуры ЗапланироватьОбновление2.
Процедура ДобавитьСписки2(Списки, ДляВнешнихПользователей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДляВнешнихПользователей", ДляВнешнихПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючиДоступа.Список КАК Список
	|ИЗ
	|	Справочник.КлючиДоступа КАК КлючиДоступа
	|ГДЕ
	|	КлючиДоступа.СоставПолей >= 16
	|	И КлючиДоступа.ДляВнешнихПользователей = &ДляВнешнихПользователей";
	
	Списки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Список");
	
КонецПроцедуры

// Для процедуры ОбновитьДанныеРегистраПоИзменениямКонфигурации.
Процедура ЗапланироватьОбновление3(Параметры, Описание)
	
	ДополнительныйКонтекст = Параметры.ДополнительныйКонтекст;
	
	Списки = Новый Массив;
	СпискиДляВнешнихПользователей = Новый Массив;
	ВнешниеПользователиВключены = Константы.ИспользоватьВнешнихПользователей.Получить();
	
	ДобавитьСписки3(Списки, ДополнительныйКонтекст.ДляПользователей);
	Если ВнешниеПользователиВключены Тогда
		ДобавитьСписки3(СпискиДляВнешнихПользователей,
			ДополнительныйКонтекст.ДляВнешнихПользователей);
	КонецЕсли;
	
	ПараметрыПланирования = УправлениеДоступомСлужебный.ПараметрыПланированияОбновленияДоступа();
	ПараметрыПланирования.ВерсииОграниченийСписков = Параметры.ВерсииОграниченийСписков;
	
	ПараметрыПланирования.КлючиДоступаКДанным = Ложь;
	ПараметрыПланирования.РазрешенныеКлючиДоступа = Истина;
	ПараметрыПланирования.ДляВнешнихПользователей = Ложь;
	ПараметрыПланирования.ЭтоПродолжениеОбновления = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(Списки, ПараметрыПланирования);
	
	ПараметрыПланирования.ДляПользователей = Ложь;
	ПараметрыПланирования.ДляВнешнихПользователей = Истина;
	ПараметрыПланирования.Описание = Описание;
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(СпискиДляВнешнихПользователей, ПараметрыПланирования);
	
КонецПроцедуры

// Для процедуры ЗапланироватьОбновление3.
Процедура ДобавитьСписки3(Списки, ДополнительныйКонтекст)
	
	Для Каждого КлючИЗначение Из ДополнительныйКонтекст.СвойстваОграниченияСписков Цикл
		Если Не КлючИЗначение.Значение.РассчитыватьПраваПользователей Тогда
			Продолжить;
		КонецЕсли;
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(КлючИЗначение.Ключ);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Списки.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОбновитьВерсиюТекстовОграниченияДоступа.
Функция ВерсияТекстовОграниченияДоступа(ОписаниеОграничений = Неопределено) Экспорт
	
	Если ОписаниеОграничений = Неопределено Тогда
		ОписаниеОграничений = УправлениеДоступомСлужебный.ОписаниеОграниченийДанных();
	КонецЕсли;
	
	ВсеТексты = Новый СписокЗначений;
	Для Каждого ОписаниеОграничения Из ОписаниеОграничений Цикл
		Ограничение = ОписаниеОграничения.Значение;
		Тексты = Новый Массив;
		Тексты.Добавить(ОписаниеОграничения.Ключ);
		ДобавитьСвойство(Тексты, Ограничение, "Текст");
		ДобавитьСвойство(Тексты, Ограничение, "ТекстДляВнешнихПользователей");
		ДобавитьСвойство(Тексты, Ограничение, "ПоВладельцуБезЗаписиКлючейДоступа");
		ДобавитьСвойство(Тексты, Ограничение, "ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей");
		ДобавитьСвойство(Тексты, Ограничение, "ТекстВМодулеМенеджера");
		ВсеТексты.Добавить(СтрСоединить(Тексты, Символы.ПС), ОписаниеОграничения.Ключ);
	КонецЦикла;
	ВсеТексты.СортироватьПоПредставлению();
	ВсеТексты.Вставить(0, УправлениеДоступомСлужебный.ВерсияСтруктурыКэша());
	ПолныйТекст = СтрСоединить(ВсеТексты.ВыгрузитьЗначения(), Символы.ПС +  Символы.ПС);
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(ПолныйТекст);
	
	Возврат Base64Строка(Хеширование.ХешСумма);
	
КонецФункции

// Для функции ВерсияТекстовОграниченияДоступа.
Процедура ДобавитьСвойство(Тексты, Ограничение, ИмяСвойства)
	
	
	Значение = Ограничение[ИмяСвойства];
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Строки = СтрРазделить(Значение, Символы.ПС);
		Текст = ?(Строки.Количество() > 1, Символы.ПС + "		", "")
			+ СтрСоединить(Строки, Символы.ПС + "		");
	ИначеЕсли Значение = Неопределено Тогда
		Текст = "Неопределено"; // АПК:1297 Имя значения (должно быть без НСтр).
	ИначеЕсли Значение = Истина Тогда
		Текст = "Истина"; // АПК:1297 Имя значения (должно быть без НСтр).
	ИначеЕсли Значение = Ложь Тогда
		Текст = "Ложь"; // АПК:1297 Имя значения (должно быть без НСтр).
	Иначе
		Текст = XMLСтрока(Значение);
	КонецЕсли;
	
	Тексты.Добавить("	" + ИмяСвойства + ": " + Текст);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация данных не требуется.
	Возврат;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ВключитьОграничениеДоступаНаУровнеЗаписейУниверсально();
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ВключитьОграничениеДоступаНаУровнеЗаписейУниверсально() Экспорт
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ОграничиватьДоступНаУровнеЗаписейУниверсально.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
