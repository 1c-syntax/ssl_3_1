///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления.

// Регистрирует на плане обмена ОбновлениеИнформационнойБазы объекты,
// для которых необходимо обновить записи в регистре.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыСведений.НаличиеФайлов.ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "ОбъектСФайлами";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НаличиеФайлов";
	
	ТекстПервогоЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
		|ПОМЕСТИТЬ ВладельцыФайловДляАнализа
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Служебный = ИСТИНА
		|	И ПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВладелецФайла";
	
	ТекстВторогоЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВладельцыФайловДляАнализа.ВладелецФайла КАК ОбъектСФайлами
		|ИЗ
		|	ВладельцыФайловДляАнализа КАК ВладельцыФайловДляАнализа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ВладельцыФайловДляАнализа.ВладелецФайла = НаличиеФайлов.ОбъектСФайлами
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					&ИмяСправочника КАК ПрисоединенныеФайлы
		|				ГДЕ
		|					ВладельцыФайловДляАнализа.ВладелецФайла = ПрисоединенныеФайлы.ВладелецФайла
		|					И ПрисоединенныеФайлы.Служебный = ЛОЖЬ
		|					И ПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
		|	И НаличиеФайлов.ЕстьФайлы = ИСТИНА
		|	И ВладельцыФайловДляАнализа.ВладелецФайла > &СсылкаВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВладелецФайла";
	
	ОбъектыСФайлами = Метаданные.РегистрыСведений.НаличиеФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	ОбработанныеОбъектыСФайлами = Новый Соответствие;
	
	Для Каждого ОбъектСФайлами Из ОбъектыСФайлами Цикл
		ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ОбъектСФайлами, Истина);
				
		Для Каждого КлючИЗначение Из ИменаСправочников Цикл
			
			Если ОбработанныеОбъектыСФайлами[КлючИЗначение.Ключ] = Истина Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Служебный", Метаданные.Справочники[КлючИЗначение.Ключ]) = Ложь Тогда
				Продолжить;
			КонецЕсли;
						
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =  СтрЗаменить(ТекстПервогоЗапроса,"&ИмяСправочника","Справочник." + КлючИЗначение.Ключ);
			// @skip-check query-in-loop - Порционная обработка данных
			Запрос.Выполнить();
			
			Запрос.Текст = СтрЗаменить(ТекстВторогоЗапроса,"&ИмяСправочника","Справочник." + КлючИЗначение.Ключ);
			ОтработаныВсеВладельцыФайлов = Ложь;
			СсылкаВладелецФайла = "";
			
			Пока Не ОтработаныВсеВладельцыФайлов Цикл
				
				Запрос.УстановитьПараметр("СсылкаВладелецФайла", СсылкаВладелецФайла);
				
				// @skip-check query-in-loop - Порционная обработка данных
				ТаблицаЗначений = Запрос.Выполнить().Выгрузить(); 
			
				ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаЗначений, ДополнительныеПараметры);
				
				КоличествоСсылок = ТаблицаЗначений.Количество();
				Если КоличествоСсылок < 1000 Тогда
					ОтработаныВсеВладельцыФайлов = Истина;
				КонецЕсли;
				
				Если КоличествоСсылок > 0 Тогда
					СсылкаВладелецФайла = ТаблицаЗначений[КоличествоСсылок-1].ОбъектСФайлами;
				КонецЕсли;
		
			КонецЦикла;
			
			ОбработанныеОбъектыСФайлами.Вставить(КлючИЗначение.Ключ,Истина);
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

// Обновить записи регистра.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Выборка данных для многопоточного обновления.
	ОбрабатываемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПолноеИмяРегистра = "РегистрСведений.НаличиеФайлов";
	
	Если ОбрабатываемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,
			ПолноеИмяРегистра);
		Возврат;	
	КонецЕсли;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДопПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДопПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ОбъектСФайлами");
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
		ЭлементБлокировки.ИсточникДанных = ОбрабатываемыеДанные;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбъектСФайлами", "ОбъектСФайлами");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		// Соединение с таблицей нужно, чтобы в результате были объекты, по которым в регистре записей на момент выполнения нет,
		// чтобы отметить выполнение по этим объектам
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбрабатываемыеДанные.ОбъектСФайлами КАК Ссылка
			|ПОМЕСТИТЬ ДанныеДляОбработки
			|ИЗ
			|	&ОбрабатываемыеДанные КАК ОбрабатываемыеДанные
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеДляОбработки.Ссылка КАК Ссылка,
			|	НаличиеФайлов.ОбъектСФайлами КАК ОбъектСФайлами,
			|	НаличиеФайлов.ЕстьФайлы КАК ЕстьФайлы,
			|	НаличиеФайлов.ИдентификаторОбъекта КАК ИдентификаторОбъекта
			|ИЗ
			|	ДанныеДляОбработки КАК ДанныеДляОбработки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|		ПО ДанныеДляОбработки.Ссылка = НаличиеФайлов.ОбъектСФайлами";
		
		Запрос.УстановитьПараметр("ОбрабатываемыеДанные", ОбрабатываемыеДанные);
	
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		
		ОбновляемыеДанныеУспешноОбработаны = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НаборЗаписейНаличиеФайлов = Неопределено;
			
			ПредставлениеСсылки = Строка(ВыборкаДетальныеЗаписи.Ссылка);
						
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектСФайлами) Тогда
				// Записи по объекту нет в регистре, добавим в таблицу для установки отметки обработки
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.ОбъектСФайлами = ВыборкаДетальныеЗаписи.Ссылка;
				
			ИначеЕсли РаботаСФайламиСлужебный.ЕстьФайлыУВладельца(ВыборкаДетальныеЗаписи.ОбъектСФайлами) = Истина Тогда
				// Если файлы есть, то ничего делать не требуется, добавим в таблицу для установки отметки обработки.						
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ВыборкаДетальныеЗаписи);
				
			Иначе
				// У владельца только служебные файлы и запись в регистре есть.
				НаборЗаписейНаличиеФайлов = СоздатьНаборЗаписей();
				НаборЗаписейНаличиеФайлов.Отбор.ОбъектСФайлами.Установить(ВыборкаДетальныеЗаписи.ОбъектСФайлами);
				ЗаписьНабораНаличиеФайлов = НаборЗаписейНаличиеФайлов.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабораНаличиеФайлов,ВыборкаДетальныеЗаписи);
				
				ЗаписьНабораНаличиеФайлов.ЕстьФайлы = Ложь;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНаличиеФайлов, Истина);
					
			КонецЕсли;
										
		КонецЦикла;
				
		Если ТаблицаДанных.Количество() Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДопПараметры,Параметры.Очередь);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Регистр сведений ""Наличие файлов"". Обработана порция объектов: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбрабатываемыеДанные.Количество());
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , ,
				ТекстСообщения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ОбновляемыеДанныеУспешноОбработаны = Ложь;
	КонецПопытки;

	Если ОбновляемыеДанныеУспешноОбработаны = Ложь Тогда
		ОбъектовОбработано = 0;
		ПроблемныхОбъектов = 0;

		СписокОписаний = Новый Массив;
		СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать объекты по обработчику регистра сведений ""Наличие файлов"":'"));

		Для Каждого ТекущийЭлемент Из ОбрабатываемыеДанные Цикл
			
			ПричинаИсключения = 0;
            ПредставлениеСсылки = Строка(ТекущийЭлемент.ОбъектСФайлами);
			
			НачатьТранзакцию();

			Попытка

				ПричинаИсключения = 1; // Блокировка

				Блокировка = Новый БлокировкаДанных;
				
				// Блокировка регистра "Наличие файлов".
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НаличиеФайлов");
				ЭлементБлокировки.УстановитьЗначение("ОбъектСФайлами", ТекущийЭлемент.ОбъектСФайлами);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				Блокировка.Заблокировать();
				
				ПричинаИсключения = 2; // Плохие данные
				
				ЕстьФайлы = РаботаСФайламиСлужебный.ЕстьФайлыУВладельца(ТекущийЭлемент.ОбъектСФайлами);
				
				ЗаписыватьНабор = Ложь;				
				Если ЕстьФайлы = Истина Тогда
					// Если файлы есть, то ничего делать не требуется, добавим в таблицу для установки отметки обработки.						
					ТаблицаДанных.Очистить();
					ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ТекущийЭлемент);
				Иначе
												
					НаборЗаписейНаличиеФайлов = СоздатьНаборЗаписей();
					НаборЗаписейНаличиеФайлов.Отбор.ОбъектСФайлами.Установить(ТекущийЭлемент.ОбъектСФайлами);
	                НаборЗаписейНаличиеФайлов.Прочитать();
					
					Если НаборЗаписейНаличиеФайлов.Количество() = 1 Тогда
						// У владельца только служебные файлы и запись в регистре есть.
						ЗаписьНабораНаличиеФайлов = НаборЗаписейНаличиеФайлов[0];
						Если ЗаписьНабораНаличиеФайлов.ЕстьФайлы = Истина Тогда
							ЗаписьНабораНаличиеФайлов.ЕстьФайлы = Ложь;
							ЗаписыватьНабор = Истина;
						Иначе
							ТаблицаДанных.Очистить();
							ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ТекущийЭлемент);
						КонецЕсли;
					Иначе
						// У владельца только служебные файлы, но записи в РС НаличиеФайлов нет, установим отметку обработки.					
						ТаблицаДанных.Очистить();
						ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ТекущийЭлемент);
					КонецЕсли;
				КонецЕсли;
				
				ПричинаИсключения = 3; // Запись
				Если ЗаписыватьНабор Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНаличиеФайлов, Истина);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДопПараметры,Параметры.Очередь);
				КонецЕсли;
				
				ОбъектовОбработано = ОбъектовОбработано + 1;
				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();

				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обновить сведения о наличие файлов %1 по причине:
						|%2'"), 
					ПредставлениеСсылки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					ТекущийЭлемент.ОбъектСФайлами.Метаданные(), ТекущийЭлемент.ОбъектСФайлами, ТекстСообщения);
					
				Если ПричинаИсключения = 2 Тогда
					
					ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ТекущийЭлемент.ОбъектСФайлами, ТекстСообщения);
					
					// пропуск проблемных объектов, чтобы не блокировало обновление
					ТаблицаДанных.Очистить();
					ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ТекущийЭлемент);
					
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДопПараметры);

				ИначеЕсли ПричинаИсключения = 3 Тогда
					
					ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ТекущийЭлемент.ОбъектСФайлами, ТекстСообщения);
					// пропуск проблемных объектов, чтобы не блокировало обновление
					
					ТаблицаДанных.Очистить();
					ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ТекущийЭлемент);
					
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДопПараметры);
																
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
			КонецПопытки;

		КонецЦикла;

		Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда

			СписокОписаний.Добавить(НСтр("ru = 'Всего пропущено: %1'"));
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСоединить(СписокОписаний, Символы.ПС), 
				ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;

		Иначе

			ШаблонСообщения = НСтр("ru = 'Регистр сведений ""Наличие файлов"". Обработана порция объектов: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , ,
				ТекстСообщения);

		КонецЕсли;
	
	КонецЕсли;	
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,
		ПолноеИмяРегистра);
					
КонецПроцедуры

#КонецОбласти

#КонецЕсли

