///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления.

// Регистрирует на плане обмена ОбновлениеИнформационнойБазы объекты,
// для которых необходимо обновить записи в регистре.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.НаличиеФайлов";
	
	ТекстПервогоЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
		|ПОМЕСТИТЬ ВладельцыФайловДляАнализа
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Служебный = ИСТИНА
		|	И ПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВладелецФайла";
	
	ТекстВторогоЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВладельцыФайловДляАнализа.ВладелецФайла КАК ОбъектСФайлами
		|ИЗ
		|	ВладельцыФайловДляАнализа КАК ВладельцыФайловДляАнализа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ВладельцыФайловДляАнализа.ВладелецФайла = НаличиеФайлов.ОбъектСФайлами
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					&ИмяСправочника КАК ПрисоединенныеФайлы
		|				ГДЕ
		|					ВладельцыФайловДляАнализа.ВладелецФайла = ПрисоединенныеФайлы.ВладелецФайла
		|					И ПрисоединенныеФайлы.Служебный = ЛОЖЬ
		|					И ПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
		|	И НаличиеФайлов.ЕстьФайлы = ИСТИНА
		|	И ВладельцыФайловДляАнализа.ВладелецФайла > &СсылкаВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВладелецФайла";
	
	ОбъектыСФайлами = Метаданные.РегистрыСведений.НаличиеФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	ОбработанныеОбъектыСФайлами = Новый Соответствие;
	
	Для Каждого ОбъектСФайлами Из ОбъектыСФайлами Цикл
		ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ОбъектСФайлами, Истина);
				
		Для Каждого КлючИЗначение Из ИменаСправочников Цикл
			
			Если ОбработанныеОбъектыСФайлами[КлючИЗначение.Ключ] = Истина Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Служебный", Метаданные.Справочники[КлючИЗначение.Ключ]) = Ложь Тогда
				Продолжить;
			КонецЕсли;
						
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =  СтрЗаменить(ТекстПервогоЗапроса,"&ИмяСправочника","Справочник." + КлючИЗначение.Ключ);
			// @skip-check query-in-loop - Порционная обработка данных
			Запрос.Выполнить();
			
			Запрос.Текст = СтрЗаменить(ТекстВторогоЗапроса,"&ИмяСправочника","Справочник." + КлючИЗначение.Ключ);
			ОтработаныВсеВладельцыФайлов = Ложь;
			СсылкаВладелецФайла = "";
			
			Пока Не ОтработаныВсеВладельцыФайлов Цикл
				
				Запрос.УстановитьПараметр("СсылкаВладелецФайла", СсылкаВладелецФайла);
				
				// @skip-check query-in-loop - Порционная обработка данных
				ТаблицаЗначений = Запрос.Выполнить().Выгрузить(); 
			
				ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаЗначений, ДополнительныеПараметры);
				
				КоличествоСсылок = ТаблицаЗначений.Количество();
				Если КоличествоСсылок < 1000 Тогда
					ОтработаныВсеВладельцыФайлов = Истина;
				КонецЕсли;
				
				Если КоличествоСсылок > 0 Тогда
					СсылкаВладелецФайла = ТаблицаЗначений[КоличествоСсылок-1].ОбъектСФайлами;
				КонецЕсли;
		
			КонецЦикла;
			
			ОбработанныеОбъектыСФайлами.Вставить(КлючИЗначение.Ключ,Истина);
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

// Обновить записи регистра.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	ПолноеИмяРегистра = "РегистрСведений.НаличиеФайлов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
			
	ВыборкаРегистра = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра,
		ДополнительныеПараметры);
	
	Если ВыборкаРегистра.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ОбъектСФайлами");
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДопПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДопПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока ВыборкаРегистра.Следующий() Цикл
		
		ПредставлениеСсылки = Строка(ВыборкаРегистра.ОбъектСФайлами);
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("ОбъектСФайлами", ВыборкаРегистра.ОбъектСФайлами);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			Если РаботаСФайламиСлужебный.ЕстьФайлыУВладельца(ВыборкаРегистра.ОбъектСФайлами) = Истина Тогда
				// Если файлы есть, то ничего делать не требуется, установим отметку обработки.
				ТаблицаДанных.Очистить();		
				
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ВыборкаРегистра);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДопПараметры,Параметры.Очередь);
		
			Иначе	
			
				НаборЗаписейНаличиеФайлов = СоздатьНаборЗаписей();
				НаборЗаписейНаличиеФайлов.Отбор.ОбъектСФайлами.Установить(ВыборкаРегистра.ОбъектСФайлами);
				НаборЗаписейНаличиеФайлов.Прочитать();
				
				Если НаборЗаписейНаличиеФайлов.Количество() = 1 Тогда
					// У владельца только служебные файлы и запись в регистре есть.
					ЗаписьНабораНаличиеФайлов                      = НаборЗаписейНаличиеФайлов[0];
					ЗаписьНабораНаличиеФайлов.ЕстьФайлы            = Ложь;
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНаличиеФайлов, Истина);
				Иначе
					// У владельца только служебные файлы, но записи в РС НаличиеФайлов нет, установим отметку обработки.
					ТаблицаДанных.Очистить();		
				
					ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(),ВыборкаРегистра);
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДопПараметры,Параметры.Очередь);	
				КонецЕсли;
			КонецЕсли;		
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить сведения о наличие файлов %1 по причине:
					|%2'"), 
				ПредставлениеСсылки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаРегистра.ОбъектСФайлами.Метаданные(), ВыборкаРегистра.ОбъектСФайлами, ТекстСообщения);
		КонецПопытки;
			
	КонецЦикла;
	
	
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать сведения о наличие файлов (пропущены): %1'"), 
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обработана очередная порция сведений о наличие файлов: %1'"),
				ОбъектовОбработано));
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь,
		ПолноеИмяРегистра);
			
КонецПроцедуры

#КонецОбласти

#КонецЕсли

