///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет все данные регистра.
//
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьДанныеРегистра(ЕстьИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнешниеПользователи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыВнешнихПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		// Обновление связей пользователей.
		ИзмененияСоставов = ПользователиСлужебный.НовыеИзмененияСоставовГрупп();
		
		ПользователиСлужебный.ОбновитьСоставГруппыВсеПользователи(
			Справочники.Пользователи.ПустаяСсылка(), ИзмененияСоставов);
		
		ПользователиСлужебный.ОбновитьСоставыИерархическихГруппПользователей(
			Справочники.ГруппыПользователей.ПустаяСсылка(), ИзмененияСоставов);
		
		ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(ИзмененияСоставов, ЕстьИзменения);
		
		// Обновление связей внешних пользователей.
		ИзмененияСоставов = ПользователиСлужебный.НовыеИзмененияСоставовГрупп();
		
		ПользователиСлужебный.ОбновитьСоставГруппыВсеПользователи(
			Справочники.ВнешниеПользователи.ПустаяСсылка(), ИзмененияСоставов);
		
		ПользователиСлужебный.ОбновитьСоставыГруппПоТипамОбъектовАвторизации(Неопределено,
			Неопределено, ИзмененияСоставов);
		
		ПользователиСлужебный.ОбновитьСоставыИерархическихГруппПользователей(
			Справочники.ГруппыВнешнихПользователей.ПустаяСсылка(), ИзмененияСоставов);
		
		ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(ИзмененияСоставов, ЕстьИзменения);
		
		ПользователиСлужебный.ОбновитьРолиВнешнихПользователей();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обновляет все данные регистров ИерархияГруппПользователей и СоставыГруппПользователей.
//
// Параметры:
//  ЕстьИзмененияИерархии - Булево - (возвращаемое значение) - если производилась запись,
//                            устанавливается Истина, иначе не изменяется.
//  ЕстьИзмененияСоставов - Булево - (возвращаемое значение) - если производилась запись,
//                            устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьИерархиюИСоставы(ЕстьИзмененияИерархии = Неопределено, ЕстьИзмененияСоставов = Неопределено) Экспорт

	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ИерархияГруппПользователей");
	Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнешниеПользователи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыВнешнихПользователей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		РегистрыСведений.ИерархияГруппПользователей.ОбновитьДанныеРегистра(ЕстьИзмененияИерархии);
		ОбновитьДанныеРегистра(ЕстьИзмененияСоставов);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли