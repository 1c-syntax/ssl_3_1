///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения СКД отчета.
//
// Параметры:
//   Контекст - Произвольный
//   КлючСхемы - Строка
//   КлючВарианта - Строка
//                - Неопределено
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных
//                    - Неопределено
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных
//                                    - Неопределено
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы <> "1" Тогда
		КлючСхемы = "1";
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
		   И НовыеНастройкиКД <> Неопределено
		   И Контекст.Параметры.Свойство("ПараметрКоманды") Тогда
			
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(Контекст.Параметры.ПараметрКоманды);
			ПользователиСлужебный.УстановитьОтборДляПараметра("Пользователь",
				СписокЗначений, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВыполнитьПроверкуПравДоступа("АдминистрированиеДанных", Метаданные);
	Иначе
		ВыполнитьПроверкуПравДоступа("Администрирование", Метаданные);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Изменения", ИзмененияУчетныхЗаписей(Настройки));
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзмененияУчетныхЗаписей(Настройки)
	
	ИмяКолонкиСоединение = КонтрольРаботыПользователейСлужебный.ИмяКолонкиСоединение();
	Отбор = Новый Структура;
	
	СтатусыТранзакции = Новый Массив;
	СтатусыТранзакции.Добавить(СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована);
	СтатусыТранзакции.Добавить(СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции);
	Отбор.Вставить("СтатусТранзакции", СтатусыТранзакции);
	
	ОтборПользователей = ОтборПользователей(ЗначениеПараметра(Настройки, "Пользователь", Неопределено));
	
	Период = ЗначениеПараметра(Настройки, "Период", Новый СтандартныйПериод);
	Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		Отбор.Вставить("StartDate", Период.ДатаНачала);
	КонецЕсли;
	Если ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		Отбор.Вставить("EndDate", Период.ДатаОкончания);
	КонецЕсли;
	
	ОтборСобытий = Новый Массив;
	ОтборСобытий.Добавить("_$User$_.New");
	ОтборСобытий.Добавить("_$User$_.Update");
	ОтборСобытий.Добавить("_$User$_.Delete");
	ОтборСобытий.Добавить(ПользователиСлужебный.ИмяСобытияИзменениеДополнительноДляЖурналаРегистрации());
	Отбор.Вставить("Событие", ОтборСобытий);
	
	Автор = ЗначениеПараметра(Настройки, "Автор", Null);
	Если Автор <> Null Тогда
		Отбор.Вставить("Пользователь", Строка(Автор));
	КонецЕсли;
	
	КолонкиЖурнала = "Дата,Пользователь,ИмяПользователя,Компьютер,
	|ИмяПриложения,Событие,ПредставлениеСобытия,Данные,Сеанс," + ИмяКолонкиСоединение;
	
	ТипБулево     = Новый ОписаниеТипов("Булево");
	ТипДата       = Новый ОписаниеТипов("Дата");
	ТипЧисло      = Новый ОписаниеТипов("Число");
	ТипСтрока     = Новый ОписаниеТипов("Строка");
	ТипСтрока20   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	ТипСтрока36   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	ТипСтрока100  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ТипСтрока255  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255));
	ТипСтрока1024 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024));
	ТипПользователь = Новый ОписаниеТипов("СправочникСсылка.Пользователи,
		|СправочникСсылка.ВнешниеПользователи");
	ТипПредставление = Новый ОписаниеТипов(ТипСтрока1024, ТипПользователь.Типы());
	
	Свойства = Новый Структура;
	Свойства.Вставить("Идентификатор",                                 ТипСтрока36);
	Свойства.Вставить("Представление",                                 ТипПредставление);
	Свойства.Вставить("Ссылка",                                        ТипПользователь);
	Свойства.Вставить("Недействителен",                                ТипБулево);
	Свойства.Вставить("ПометкаУдаления",                               ТипБулево);
	Свойства.Вставить("Имя",                                           ТипСтрока100);
	Свойства.Вставить("ПолноеИмя",                                     ТипСтрока255);
	Свойства.Вставить("ВходВПрограммуРазрешен",                        ТипБулево);
	Свойства.Вставить("АутентификацияСтандартная",                     ТипБулево);
	Свойства.Вставить("АутентификацияOpenID",                          ТипБулево);
	Свойства.Вставить("АутентификацияOpenIDConnect",                   ТипБулево);
	Свойства.Вставить("АутентификацияТокеномДоступа",                  ТипБулево);
	Свойства.Вставить("АутентификацияОС",                              ТипБулево);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",                       ТипБулево);
	Свойства.Вставить("ЗапрещеноВосстанавливатьПароль",                ТипБулево);
	Свойства.Вставить("ЗащитаОтОпасныхДействий",                       ТипБулево);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",                       ТипБулево);
	Свойства.Вставить("ПарольИзменен",                                 ТипБулево);
	Свойства.Вставить("ПарольУстановлен",                              ТипБулево);
	Свойства.Вставить("ДатаУстановкиПароля",                           ТипДата);
	Свойства.Вставить("ПотребоватьСменуПароляПриВходе",                ТипБулево);
	Свойства.Вставить("СрокДействияНеОграничен",                       ТипБулево);
	Свойства.Вставить("СрокДействия",                                  ТипДата);
	Свойства.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода",    ТипЧисло);
	Свойства.Вставить("НастройкиВторогоФактораАутентификации",         ТипСтрока);
	Свойства.Вставить("ОбработкаНастроекВторогоФактораАутентификации", ТипСтрока);
	Свойства.Вставить("ПользовательОС",                                ТипСтрока1024);
	Свойства.Вставить("ИмяПолитикиПаролей",                            ТипСтрока100);
	Свойства.Вставить("АдресЭлектроннойПочты",                         ТипСтрока255);
	Свойства.Вставить("РежимЗапуска",                                  ТипСтрока100);
	Свойства.Вставить("Язык",                                          ТипСтрока100);
	Свойства.Вставить("Роли",                                          ТипСтрока);
	
	СвойстваПользователя = Свойства;
	
	Изменения = Новый ТаблицаЗначений;
	Колонки = Изменения.Колонки;
	Колонки.Добавить("Дата",                ТипДата);
	Колонки.Добавить("ВидСобытия",          ТипСтрока);
	Колонки.Добавить("Автор",               ТипСтрока100);
	Колонки.Добавить("ИдентификаторАвтора", ТипСтрока36);
	Колонки.Добавить("Приложение",          ТипСтрока20);
	Колонки.Добавить("Компьютер",           ТипСтрока);
	Колонки.Добавить("НачалоСеанса",        ТипДата);
	Колонки.Добавить("Сеанс",               ТипЧисло);
	Колонки.Добавить(ИмяКолонкиСоединение,  ТипЧисло);
	
	ТипИзменено = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	Для Каждого КлючИЗначение Из СвойстваПользователя Цикл
		ИмяПоля = КлючИЗначение.Ключ;
		Колонки.Добавить(ИмяПоля, КлючИЗначение.Значение);
		Если ИмяПоля = "Идентификатор" Или ИмяПоля = "Представление" Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля_Изменено = ИмяПоля + "_" + "Изменено";
		Колонки.Добавить(ИмяПоля_Изменено, ТипИзменено);
		СвойстваПользователя[ИмяПоля] = ИмяПоля_Изменено;
	КонецЦикла;
	
	Колонки.Добавить("РолиТолькоИзменения", ТипСтрока);
	Колонки.Добавить("ИменаРолей");
	Колонки.Добавить("ПредыдущееСобытие");
	
	ПредставлениеРежимовЗапуска = Новый Соответствие;
	Для Каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		ПредставлениеРежимовЗапуска.Вставить(ВРег(ИмяЗначения), Строка(РежимЗапуска));
	КонецЦикла;
	
	ПредставлениеЯзыков = Новый Соответствие;
	Для Каждого Язык Из Метаданные.Языки Цикл
		ПредставлениеЯзыков.Вставить(ВРег(Язык.ПолноеИмя()), Язык.Представление());
	КонецЦикла;
	
	ПредставлениеРолей = Новый Соответствие;
	Для Каждого Роль Из Метаданные.Роли Цикл
		ПредставлениеРолей.Вставить(ВРег(Роль.ПолноеИмя()), Роль.Представление());
	КонецЦикла;
	
	ПредставлениеСобытияДобавление = НСтр("ru = 'Добавление'");
	ПредставленияСобытияИзменение  = НСтр("ru = 'Изменение'");
	ПредставленияСобытияУдаление   = НСтр("ru = 'Удаление'");
	ПредставлениеНеИспользовать    = НСтр("ru = 'Не использовать'");
	ПредставлениеИспользовать      = НСтр("ru = 'Использовать следующую при ошибке'");
	
	УстановитьПривилегированныйРежим(Истина);
	События = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(События, Отбор, КолонкиЖурнала);
	
	ПоследниеСобытия = Новый Соответствие;
	Идентификаторы = Новый Соответствие;
	ЕстьСобытияБезИдентификатора = Ложь;
	
	Для Каждого Событие Из События Цикл
		
		ИмяСобытия = Событие.Событие;
		
		Если СтрНачинаетсяС(ИмяСобытия, "_$User$_.") Тогда
			Данные = Событие.Данные;
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяСобытия = "_$User$_.New" Тогда
				ВидСобытия = ПредставлениеСобытияДобавление;
			ИначеЕсли ИмяСобытия = "_$User$_.Update" Тогда
				ВидСобытия = ПредставленияСобытияИзменение;
			Иначе // "_$User$_.Delete"
				ВидСобытия = ПредставленияСобытияУдаление;
			КонецЕсли;
			Если Данные.Свойство("АутентификацияСтандартная") Тогда
				Данные.Вставить("ВходВПрограммуРазрешен", Пользователи.ВходВПрограммуРазрешен(Данные));
			КонецЕсли;
			Если Данные.Свойство("УникальныйИдентификатор") Тогда
				ПоследнееСобытие = ПоследниеСобытия.Получить(НРег(Данные.УникальныйИдентификатор));
			Иначе
				ЕстьСобытияБезИдентификатора = Истина;
				ПоследнееСобытие = ПоследниеСобытия.Получить(ВРег(Данные.Имя));
			КонецЕсли;
			Если Данные.Свойство("РежимЗапуска") Тогда
				Представление = ПредставлениеРежимовЗапуска.Получить(ВРег(Данные.РежимЗапуска));
				Если Представление <> Неопределено Тогда
					Данные.РежимЗапуска = Представление;
				КонецЕсли;
			КонецЕсли;
			Если Данные.Свойство("Язык") Тогда
				Представление = ПредставлениеЯзыков.Получить(ВРег(Данные.Язык));
				Если Представление <> Неопределено Тогда
					Данные.Язык = Представление;
				КонецЕсли;
			КонецЕсли;
			Если Данные.Свойство("Роли") Тогда
				ИменаРолей = Новый Соответствие;
				СписокРолей = Новый СписокЗначений;
				Для Каждого ПолноеИмяРоли Из Данные.Роли Цикл
					ИменаРолей.Вставить(ВРег(ПолноеИмяРоли), ПолноеИмяРоли);
					Представление = ПредставлениеРолей.Получить(ВРег(ПолноеИмяРоли));
					Если Представление = Неопределено Тогда
						ЧастиИмени = СтрРазделить(ПолноеИмяРоли, ".", Ложь);
						Представление = ?(ЧастиИмени.Количество() = 2, ЧастиИмени[1], ПолноеИмяРоли);
					КонецЕсли;
					СписокРолей.Добавить(Представление);
				КонецЦикла;
				СписокРолей.СортироватьПоЗначению();
				Данные.Роли = СтрСоединить(СписокРолей.ВыгрузитьЗначения(), Символы.ПС);
				Данные.Вставить("ИменаРолей", ИменаРолей);
			КонецЕсли;
			Если Данные.Свойство("ОбработкаНастроекВторогоФактораАутентификации") Тогда
				ОбработкаНастроек = Данные.ОбработкаНастроекВторогоФактораАутентификации;
				Если ОбработкаНастроек = "НеИспользовать" Тогда
					Представление = ПредставлениеНеИспользовать;
				ИначеЕсли ОбработкаНастроек = "ИспользоватьСледующуюПриОшибке" Тогда
					Представление = ПредставлениеИспользовать;
				Иначе
					Представление = "";
				КонецЕсли;
				Данные.ОбработкаНастроекВторогоФактораАутентификации = Представление;
			КонецЕсли;
			Если Данные.Свойство("НастройкиВторогоФактораАутентификации") Тогда
				Если ТипЗнч(Данные.НастройкиВторогоФактораАутентификации) = Тип("Массив") Тогда
					СписокНастроек = Новый Массив;
					Для Каждого Настройка Из Данные.НастройкиВторогоФактораАутентификации Цикл
						СписокНастроек.Добавить(Строка(Настройка));
					КонецЦикла;
					Данные.НастройкиВторогоФактораАутентификации = СтрСоединить(СписокНастроек, Символы.ПС);
				Иначе
					Данные.НастройкиВторогоФактораАутентификации = Строка(Данные.НастройкиВторогоФактораАутентификации);
				КонецЕсли;
			КонецЕсли;
			Если Данные.Свойство("ИмяПолитикиПаролей")
			   И ТипЗнч(Данные.ИмяПолитикиПаролей) = Тип("Массив") Тогда
				
				Данные.ИмяПолитикиПаролей = СтрСоединить(Данные.ИмяПолитикиПаролей, ", ");
			КонецЕсли;
			
		Иначе // ИмяСобытияИзменениеДополнительно
			ВидСобытия = ПредставленияСобытияИзменение;
			Данные = РасширенныеДанныеИзменения(Событие.Данные);
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЕстьСобытияБезИдентификатора Тогда
				ПоследнееСобытие = ПоследниеСобытия.Получить(Данные.УникальныйИдентификатор);
			ИначеЕсли ЗначениеЗаполнено(Данные.Имя) Тогда
				ПоследнееСобытие = ПоследниеСобытия.Получить(ВРег(Данные.Имя));
			Иначе
				Продолжить;
			КонецЕсли;
			Если ПоследнееСобытие <> Неопределено Тогда
				Если ПоследнееСобытие.Сеанс = Событие.Сеанс
				   И Событие.Дата - ПоследнееСобытие.Дата >= -1
				   И Событие.Дата - ПоследнееСобытие.Дата <= 3 Тогда
					
					ИменаСвойств = "Недействителен, ПометкаУдаления, ПотребоватьСменуПароляПриВходе,
					|СрокДействияНеОграничен, СрокДействия, ПросрочкаРаботыВПрограммеДоЗапрещенияВхода";
					
					ЗаполнитьЗначенияСвойств(ПоследнееСобытие, Данные, ИменаСвойств);
					ТекущиеСвойства = Новый Структура(ИменаСвойств);
					ПредыдущееСобытие = ПоследнееСобытие.ПредыдущееСобытие;
					Для Каждого КлючИЗначение Из ТекущиеСвойства Цикл
						ИмяПоля = КлючИЗначение.Ключ;
						ИмяПоля_Изменено = ИмяПоля + "_" + "Изменено";
						ПоследнееСобытие[ИмяПоля_Изменено] =
							?(ПредыдущееСобытие = Неопределено Или ПредыдущееСобытие[ИмяПоля_Изменено] = 2,
								0, Число(ПредыдущееСобытие[ИмяПоля] <> ПоследнееСобытие[ИмяПоля]));
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтборПользователей <> Неопределено
		   И ОтборПользователей.Получить(ВРег(Данные.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Изменения.Добавить();
		НоваяСтрока.ПредыдущееСобытие = ПоследнееСобытие;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Данные);
		
		Для Каждого КлючИЗначение Из СвойстваПользователя Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ИмяПоля_Изменено = КлючИЗначение.Значение;
			Если ТипЗнч(ИмяПоля_Изменено) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если Не Данные.Свойство(ИмяПоля) Тогда
				Если ПоследнееСобытие = Неопределено
				 Или ПоследнееСобытие[ИмяПоля_Изменено] = 2 Тогда
					НоваяСтрока[ИмяПоля_Изменено] = 2;
				Иначе
					НоваяСтрока[ИмяПоля] = ПоследнееСобытие[ИмяПоля];
					НоваяСтрока[ИмяПоля_Изменено] = 0;
					Если ИмяПоля = "Роли" Тогда
						НоваяСтрока.ИменаРолей = ПоследнееСобытие.ИменаРолей;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПоследнееСобытие = Неопределено
				 Или ПоследнееСобытие[ИмяПоля_Изменено] = 2 Тогда
				НоваяСтрока[ИмяПоля_Изменено] = 0;
			Иначе
				НоваяСтрока[ИмяПоля_Изменено] = Число(Данные[ИмяПоля] <> ПоследнееСобытие[ИмяПоля]);
				Если НоваяСтрока[ИмяПоля_Изменено] И ИмяПоля = "Роли" Тогда
					НоваяСтрока.РолиТолькоИзменения = ИзмененныеРоли(Данные, ПоследнееСобытие, ПредставлениеРолей);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Данные.Свойство("УникальныйИдентификатор") Тогда
			НоваяСтрока.Идентификатор = НРег(Данные.УникальныйИдентификатор);
			ПоследниеСобытия.Вставить(НоваяСтрока.Идентификатор, НоваяСтрока);
		КонецЕсли;
		ПоследниеСобытия.Вставить(ВРег(НоваяСтрока.Имя), НоваяСтрока);
		
		НоваяСтрока.Дата                  = Событие.Дата;
		НоваяСтрока.ВидСобытия            = ВидСобытия;
		НоваяСтрока.Автор                 = Событие.ИмяПользователя;
		НоваяСтрока.ИдентификаторАвтора   = Событие.Пользователь;
		НоваяСтрока.Приложение            = Событие.ИмяПриложения;
		НоваяСтрока.Компьютер             = Событие.Компьютер;
		НоваяСтрока.Сеанс                 = Событие.Сеанс;
		НоваяСтрока[ИмяКолонкиСоединение] = Событие[ИмяКолонкиСоединение];
	КонецЦикла;
	
	Отбор = Новый Структура("Идентификатор", "");
	Строки = Изменения.НайтиСтроки(Отбор);
	ТаблицаИмен = Изменения.Скопировать(Строки, "Имя");
	ТаблицаИмен.Свернуть("Имя");
	Отбор = Новый Структура("Имя", "");
	Для Каждого ОписаниеИмени Из ТаблицаИмен Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ОписаниеИмени.Имя);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Идентификатор = НРег(ПользовательИБ.УникальныйИдентификатор);
		Отбор.Имя = ОписаниеИмени.Имя;
		Строки = Изменения.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл
			Строка.Идентификатор = Идентификатор;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаИдентификаторов = Изменения.Скопировать(, "Идентификатор");
	ТаблицаИдентификаторов.Свернуть("Идентификатор");
	Идентификаторы = Новый Массив;
	Для Каждого Строка Из ТаблицаИдентификаторов Цикл
		Если ЗначениеЗаполнено(Строка.Идентификатор) Тогда
			Идентификаторы.Добавить(Новый УникальныйИдентификатор(Строка.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор,
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ,
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ В(&Идентификаторы)";
	
	СвойстваПользователей = Запрос.Выполнить().Выгрузить();
	СвойстваПользователей.Индексы.Добавить("Идентификатор");
	
	Для Каждого Строка Из Изменения Цикл
		Если ЗначениеЗаполнено(Строка.Идентификатор) Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор(Строка.Идентификатор);
			Свойства = СвойстваПользователей.Найти(УникальныйИдентификатор, "Идентификатор");
			Если Свойства = Неопределено Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
				Если ПользовательИБ = Неопределено Тогда
					ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Строка.Имя);
				КонецЕсли;
				Если ПользовательИБ <> Неопределено Тогда
					Строка.Представление = ПользовательИБ.ПолноеИмя;
					Продолжить;
				КонецЕсли;
			Иначе
				Строка.Представление = Свойства.Ссылка;
				Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
					Строка.Ссылка = Свойства.Ссылка;
					Строка.Ссылка_Изменено =
						?(Строка.ПредыдущееСобытие = Неопределено Или Строка.ПредыдущееСобытие.Ссылка_Изменено = 2,
							0, Число(Строка.ПредыдущееСобытие.Ссылка <> Строка.Ссылка));
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		Иначе
			Строка.Идентификатор = Строка.Имя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ПолноеИмя) Тогда
			Строка.Представление = Строка.ПолноеИмя;
		Иначе
			Строка.Представление = Строка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Изменения.Колонки.Удалить("ИменаРолей");
	Изменения.Колонки.Удалить("ПредыдущееСобытие");
	
	Возврат Изменения;
	
КонецФункции

Функция ЗначениеПараметра(Настройки, ИмяПараметра, ЗначениеПоУмолчанию)
	
	Поле = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Поле <> Неопределено И Поле.Использование Тогда
		Возврат Поле.Значение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция ОтборПользователей(ВыбранныеЗначения)
	
	Если ВыбранныеЗначения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныеЗначения) = Тип("СписокЗначений") Тогда
		Значения = ВыбранныеЗначения.ВыгрузитьЗначения();
	Иначе
		Значения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеЗначения);
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Пользователи,
		|СправочникСсылка.ГруппыПользователей,
		|СправочникСсылка.ВнешниеПользователи,
		|СправочникСсылка.ГруппыВнешнихПользователей");
	
	Результат = Новый Соответствие;
	Список = Новый Массив;
	
	Для Каждого Значение Из Значения Цикл
		ТипЗначения = ТипЗнч(Значение);
		Если ОписаниеТипов.СодержитТип(ТипЗначения) Тогда
			Список.Добавить(Значение);
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Значение) Тогда
				Результат.Вставить(НРег(Значение), Истина);
				Идентификатор = Новый УникальныйИдентификатор(Значение);
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
				Если ПользовательИБ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Результат.Вставить(ВРег(ПользовательИБ.Имя), Истина);
			Иначе
				Результат.Вставить(ВРег(Значение), Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Список) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", Список);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.Пользователь.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В (&Список)";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	ИдентификаторыПользователейИБ = Выгрузка.ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	
	Для Каждого Идентификатор Из ИдентификаторыПользователейИБ Цикл
		Результат.Вставить(НРег(Идентификатор), Истина);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(ВРег(ПользовательИБ.Имя), Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеСобытия - Строка
//
// Возвращаемое значение:
//  Структура:
//   * Ссылка - СправочникСсылка.Пользователи
//            - СправочникСсылка.ВнешниеПользователи
//   * Имя    - Строка
//   * УникальныйИдентификатор - Строка - уникальный идентификатор в нижнем регистре.
//   * Недействителен - Булево
//   * ПометкаУдаления - Булево
//   * ПотребоватьСменуПароляПриВходе - Булево
//   * СрокДействияНеОграничен - Булево
//   * СрокДействия - Дата
//   * ПросрочкаРаботыВПрограммеДоЗапрещенияВхода - Число
//
Функция РасширенныеДанныеИзменения(ДанныеСобытия)
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Данные = ОбщегоНазначения.ЗначениеИзСтрокиXML(ДанныеСобытия);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранениеВерсии = Новый Структура;
	ХранениеВерсии.Вставить("ВерсияСтруктурыДанных");
	ЗаполнитьЗначенияСвойств(ХранениеВерсии, Данные);
	Если ХранениеВерсии.ВерсияСтруктурыДанных <> 1
	   И ХранениеВерсии.ВерсияСтруктурыДанных <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Хранение = Новый Структура;
	Хранение.Вставить("ТипСсылки", "");
	Хранение.Вставить("ИдентификаторСсылки", "");
	Хранение.Вставить("Имя", "");
	Хранение.Вставить("ИдентификаторПользователяИБ", "");
	Хранение.Вставить("Недействителен", Ложь);
	Хранение.Вставить("ПометкаУдаления", Ложь);
	Хранение.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	Хранение.Вставить("СрокДействияНеОграничен", Ложь);
	Хранение.Вставить("СрокДействия", '00010101');
	Хранение.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	
	Для Каждого КлючИЗначение Из Хранение Цикл
		Если Не Данные.Свойство(КлючИЗначение.Ключ)
		 Или ТипЗнч(Данные[КлючИЗначение.Ключ]) <> ТипЗнч(КлючИЗначение.Значение)
		   И Не (КлючИЗначение.Ключ = "Имя" И Данные[КлючИЗначение.Ключ] = Неопределено)
		   И Не (КлючИЗначение.Ключ = "ИдентификаторПользователяИБ" И Данные[КлючИЗначение.Ключ] = Неопределено)
		   И Не (КлючИЗначение.Ключ = "Недействителен" И Данные[КлючИЗначение.Ключ] = Неопределено)
		   И Не (КлючИЗначение.Ключ = "ПометкаУдаления" И Данные[КлючИЗначение.Ключ] = Неопределено) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Данные.ИдентификаторПользователяИБ)
	   И Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Данные.ИдентификаторПользователяИБ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Имя", "");
	Результат.Вставить("УникальныйИдентификатор", "");
	Результат.Вставить("Недействителен", Ложь);
	Результат.Вставить("ПометкаУдаления", Ложь);
	Результат.Вставить("ПотребоватьСменуПароляПриВходе", Ложь);
	Результат.Вставить("СрокДействияНеОграничен", Ложь);
	Результат.Вставить("СрокДействия", '00010101');
	Результат.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
	
	ЗаполнитьЗначенияСвойств(Результат, Данные);
	Результат.УникальныйИдентификатор = НРег(Данные.ИдентификаторПользователяИБ);
	
	Если ЗначениеЗаполнено(Данные.ИдентификаторСсылки) Тогда
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Данные.ИдентификаторСсылки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Идентификатор = Новый УникальныйИдентификатор(Данные.ИдентификаторСсылки);
		
		Если Данные.ТипСсылки = "Справочник.Пользователи" Тогда
			Результат.Ссылка = Справочники.Пользователи.ПолучитьСсылку(Идентификатор);
			
		ИначеЕсли Данные.ТипСсылки = "Справочник.ВнешниеПользователи" Тогда
			Результат.Ссылка = Справочники.ВнешниеПользователи.ПолучитьСсылку(Идентификатор);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Результат.Ссылка = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзмененныеРоли(Данные, ПоследнееСобытие, ПредставлениеРолей)
	
	ИзмененныеРоли = Новый СписокЗначений;
	
	Для Каждого КлючИЗначение Из Данные.ИменаРолей Цикл
		Если ПоследнееСобытие.ИменаРолей.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
			ИзмененныеРоли.Добавить("+", КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПоследнееСобытие.ИменаРолей Цикл
		Если Данные.ИменаРолей.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
			ИзмененныеРоли.Добавить("-", КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ИзмененныеРоли Цикл
		ПолноеИмяРоли = ЭлементСписка.Представление;
		Представление = ПредставлениеРолей.Получить(ВРег(ПолноеИмяРоли));
		Если Представление = Неопределено Тогда
			ЧастиИмени = СтрРазделить(ПолноеИмяРоли, ".", Ложь);
			Представление = ?(ЧастиИмени.Количество() = 2, ЧастиИмени[1], ПолноеИмяРоли);
		КонецЕсли;
		ЭлементСписка.Значение = ЭлементСписка.Значение + Представление;
		ЭлементСписка.Представление = Представление;
	КонецЦикла;
	ИзмененныеРоли.СортироватьПоПредставлению();
	
	Возврат СтрСоединить(ИзмененныеРоли.ВыгрузитьЗначения(), Символы.ПС);
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли