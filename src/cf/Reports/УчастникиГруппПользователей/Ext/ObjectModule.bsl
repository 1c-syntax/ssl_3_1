///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ФормироватьСразу = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	Настройки.События.ПриОпределенииИспользуемыхТаблиц = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения СКД отчета.
//
// Параметры:
//   Контекст - Произвольный
//   КлючСхемы - Строка
//   КлючВарианта - Строка
//                - Неопределено
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных
//                    - Неопределено
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных
//                                    - Неопределено
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы <> "1" Тогда
		КлючСхемы = "1";
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
		   И НовыеНастройкиКД <> Неопределено
		   И Контекст.Параметры.Свойство("ПараметрКоманды") Тогда
			
			Значения = Контекст.Параметры.ПараметрКоманды;
			ИмяПараметра = ?(ЗначениеЗаполнено(Значения) И ТипЗнч(Значения[0]) = Тип("СправочникСсылка.Пользователи"),
				"Пользователь", "ГруппаПользователей");
			
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(Значения);
			ПользователиСлужебный.УстановитьОтборДляПараметра(ИмяПараметра,
				СписокЗначений, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   КлючВарианта - Строка
//                - Неопределено
//   ИспользуемыеТаблицы - Массив из Строка
//
Процедура ПриОпределенииИспользуемыхТаблиц(КлючВарианта, ИспользуемыеТаблицы) Экспорт
	
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.Пользователи.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.ГруппыПользователей.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных
//  СтандартнаяОбработка - Булево
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПоказыватьНедействительных = Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказыватьНедействительныхУчастников");
	ПараметрВключитьТолькоДействительных = Настройки.ПараметрыДанных.Элементы.Найти(
		"ВключитьТолькоДействительныхУчастников");
	
	ПараметрВключитьТолькоДействительных.Использование = Истина;
	ПараметрВключитьТолькоДействительных.Значение =
		Не ПараметрПоказыватьНедействительных.Использование
		Или Не ПараметрПоказыватьНедействительных.Значение;
	
	ПараметрГруппаПользователей = Настройки.ПараметрыДанных.Элементы.Найти("ГруппаПользователей");
	ПараметрГруппаПользователейВСписке = Настройки.ПараметрыДанных.Элементы.Найти("ГруппаПользователейВСписке");
	ПараметрГруппаПользователейВИерархии = Настройки.ПараметрыДанных.Элементы.Найти("ГруппаПользователейВИерархии");
	ПараметрСкрыватьПользователейНижестоящихГрупп = Настройки.ПараметрыДанных.Элементы.Найти(
		"СкрыватьПользователейНижестоящихГрупп");
	
	Скрывать = ПараметрСкрыватьПользователейНижестоящихГрупп.Использование
		И ПараметрСкрыватьПользователейНижестоящихГрупп.Значение;
	
	Если Не ПараметрГруппаПользователей.Использование И Скрывать Тогда
		ПараметрСкрыватьПользователейНижестоящихГрупп.Использование = Ложь;
		Скрывать = Ложь;
	КонецЕсли;
	
	ПараметрГруппаПользователейВСписке.Значение = ПараметрГруппаПользователей.Значение;
	ПараметрГруппаПользователейВСписке.Использование =
		ПараметрГруппаПользователей.Использование И Скрывать;
	
	ПараметрГруппаПользователейВИерархии.Значение = ПараметрГруппаПользователей.Значение;
	ПараметрГруппаПользователейВИерархии.Использование =
		ПараметрГруппаПользователей.Использование И Не Скрывать;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли