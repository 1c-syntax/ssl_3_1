///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ФормироватьСразу = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	Настройки.События.ПриОпределенииИспользуемыхТаблиц = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения СКД отчета.
//
// Параметры:
//   Контекст - Произвольный
//   КлючСхемы - Строка
//   КлючВарианта - Строка
//                - Неопределено
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных
//                    - Неопределено
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных
//                                    - Неопределено
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы <> "1" Тогда
		КлючСхемы = "1";
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
		   И НовыеНастройкиКД <> Неопределено
		   И Контекст.Параметры.Свойство("ПараметрКоманды") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылки", Контекст.Параметры.ПараметрКоманды);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	Справочник.ГруппыДоступа КАК ГруппыДоступа
			|ГДЕ
			|	ГруппыДоступа.Ссылка В (&Ссылки)
			|	И ГруппыДоступа.ЭтоГруппа";
			ВИерархии = Не Запрос.Выполнить().Пустой();
			
			СписокГруппДоступа = Новый СписокЗначений;
			СписокГруппДоступа.ЗагрузитьЗначения(Контекст.Параметры.ПараметрКоманды);
			ПользователиСлужебный.УстановитьОтборДляПоля("ГруппаДоступа",
				СписокГруппДоступа, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД, ВИерархии);
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьСхему = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей") Тогда
		Поле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ВходитКакУчастникГруппы");
		Если Поле <> Неопределено Тогда
			Поле.ОграничениеИспользования.Группировка = Истина;
			Поле.ОграничениеИспользования.Поле = Истина;
			Поле.ОграничениеИспользования.Порядок = Истина;
			Поле.ОграничениеИспользования.Условие = Истина;
			ПодключитьСхему = Истина;
			УдалитьИспользованиеПоляИзГруппировок(НовыеНастройкиКД.Структура, "ВходитКакУчастникГруппы");
		КонецЕсли;
	КонецЕсли;
	
	Если ПодключитьСхему Тогда
		МодульОтчетыСервер = ОбщегоНазначения.ОбщийМодуль("ОтчетыСервер");
		МодульОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   КлючВарианта - Строка
//                - Неопределено
//   ИспользуемыеТаблицы - Массив из Строка
//
Процедура ПриОпределенииИспользуемыхТаблиц(КлючВарианта, ИспользуемыеТаблицы) Экспорт
	
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.ГруппыДоступа.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.Пользователи.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.ГруппыПользователей.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя());
	ИспользуемыеТаблицы.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

// Параметры:
//  ДокументРезультат - ТабличныйДокумент
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных
//  СтандартнаяОбработка - Булево
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПоказыватьНедействительных = Настройки.ПараметрыДанных.Элементы.Найти(
		"ПоказыватьНедействительныхУчастников");
	ПараметрВключитьТолькоДействительных = Настройки.ПараметрыДанных.Элементы.Найти(
		"ВключитьТолькоДействительныхУчастников");
	
	ПараметрВключитьТолькоДействительных.Использование = Истина;
	ПараметрВключитьТолькоДействительных.Значение =
		Не ПараметрПоказыватьНедействительных.Использование
		Или Не ПараметрПоказыватьНедействительных.Значение;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Структура - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
//  ИмяПоля - Строка
//
Процедура УдалитьИспользованиеПоляИзГруппировок(Структура, ИмяПоля);
	
	Для Каждого Группировка Из Структура Цикл
		Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		УдалитьИспользованиеПоляИзВыбранных(Группировка.Выбор, ИмяПоля);
		УдалитьИспользованиеПоляИзГруппировок(Группировка.Структура, ИмяПоля);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Структура - ВыбранныеПоляКомпоновкиДанных
//            - ГруппаВыбранныхПолейКомпоновкиДанных
//  ИмяПоля - Строка
//
Процедура УдалитьИспользованиеПоляИзВыбранных(ВыбранныеПоля, ИмяПоля)
	
	НайденноеПоле = Неопределено;
	ИскомоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля.Элементы Цикл
		
		Если ТипЗнч(ВыбранноеПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			УдалитьИспользованиеПоляИзВыбранных(ВыбранноеПоле, ИмяПоля);
		
		ИначеЕсли ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных")
		        И ВыбранноеПоле.Поле = ИскомоеПоле Тогда
			
			НайденноеПоле = ВыбранноеПоле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденноеПоле <> Неопределено Тогда
		ВыбранныеПоля.Элементы.Удалить(НайденноеПоле);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли