///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Токен) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.Токен);
		
		Если ЭтоСервер Тогда
			ШаблонЗаголовка = НСтр("ru = '%1 на сервере'");
		Иначе
			ШаблонЗаголовка = НСтр("ru = '%1 на компьютере'");
		КонецЕсли;
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовка, Параметры.Токен.Представление);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВнутренниеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗапомнитьПарольПриИзменении(Элемент)
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	ДополнительныеПараметры.Вставить("ПриИзмененииРеквизитаЗапомнитьПароль", Истина);

	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// АПК:78-выкл: для безопасной передачи данных на клиенте между формами, не отправляя их на сервер.
&НаКлиенте
Процедура ПродолжитьОткрытие(Оповещение, ОбщиеВнутренниеДанные, КлиентскиеПараметры) Экспорт
// АПК:78-вкл: для безопасной передачи данных на клиенте между формами, не отправляя их на сервер.
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
	Открыть();
	ЗаполнитьСписокСертификатов();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьСписокСертификатов()
	
	Если Не ЗначениеЗаполнено(СвойстваПароля.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Токен = Новый Структура;
	Токен.Вставить("Слот");
	Токен.Вставить("СерийныйНомер");
	ЗаполнитьЗначенияСвойств(Токен, ЭтотОбъект);
	Токен.Вставить("ЗначениеПароля", СвойстваПароля.Значение);
	
	Элементы.ГруппаОбновлениеСертификатов.Видимость = Истина;
	Результат = Ждать ЭлектроннаяПодписьКлиентЛокализация.СертификатыНаТокене(Токен, Неопределено, Истина);
	
	ТекстОшибки = "";
	Если Результат.ПроверкаВыполнена Тогда
		Ошибки = Новый Массив;
		ЗаполнитьСписокСертификатовНаСервере(Результат.Сертификаты, Ошибки);
		Если Ошибки.Количество() > 0 Тогда
			ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
		КонецЕсли;
		
		ДополнительныеПараметры = ДополнительныеПараметры();
		ДополнительныеПараметры.Вставить("ПриУспешномВыполненииОперации", Истина);
		ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
			ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
		
	Иначе
		ТекстОшибки = Результат.Ошибка;
		Если ЭлектроннаяПодписьКлиентЛокализация.ЭтоОшибкаНеправильныйПинКод(Результат.Ошибка) Тогда
			ТекстОшибки = НСтр("ru = 'Введен неверный пин-код пользователя токена.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокПредупреждения", НСтр("ru = 'Не удалось прочитать сертификаты на токене'"));
		ПараметрыФормы.Вставить("ТекстОшибкиКлиент", ТекстОшибки);
		ПараметрыФормы.Вставить("ПоказатьТребуетсяПомощь", Истина);
		ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьФормуРасширенногоПредставленияОшибки(ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ГруппаОбновлениеСертификатов.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	ДополнительныеПараметры.Вставить("ПриИзмененииРеквизитаПароль", Истина);
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОбработатьПарольВФорме(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПолеПароляНачалоВыбора(ЭтотОбъект,
		ВнутренниеДанные, СвойстваПароля, СтандартнаяОбработка, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьСписокСертификатов()
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСертификатовНаСервере(СертификатыСтрокой, Ошибки)
	
	Сертификаты.Очистить();
	
	Для Каждого Сертификат Из СертификатыСтрокой Цикл
		
		Сертификат = СтрЗаменить(Сертификат, "-----BEGIN CERTIFICATE-----", "");
		Сертификат = СтрЗаменить(Сертификат, "-----END CERTIFICATE-----", "");
		Сертификат = СтрЗаменить(Сертификат, Символы.ПС, "");
		
		Попытка
			ДанныеСертификата = Base64Значение(Сертификат);
		Исключение
			Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;

		Если ТипЗнч(ДанныеСертификата) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
		Исключение
			Ошибки.Добавить(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		СвойстваСертификата = ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваСертификата(
			СертификатКриптографии, ЭлектроннаяПодписьСлужебный.РазницаСУниверсальнымВременем(), ДанныеСертификата);
		
		НоваяСтрока = Сертификаты.Добавить();
		НоваяСтрока.ДействуетДо = СвойстваСертификата.ДействителенДо;
		НоваяСтрока.Отпечаток = СвойстваСертификата.Отпечаток;
		НоваяСтрока.Представление = СвойстваСертификата.Представление;
		НоваяСтрока.КемВыдан = СвойстваСертификата.КемВыдан;
		НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(СертификатКриптографии.Выгрузить(), УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаСертификат = ПолучитьСсылкуНаСертификат(Элементы.Сертификаты.ТекущиеДанные.Отпечаток);
	Если Не ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(Элементы.Сертификаты.ТекущиеДанные.АдресСертификата);
	Иначе
		ЭлектроннаяПодписьКлиент.ОткрытьСертификат(СсылкаНаСертификат);
	КонецЕсли;
	
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаСертификат(Отпечаток)
    Возврат ЭлектроннаяПодпись.СсылкаНаСертификат(Отпечаток);
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметры()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПриЧтенииСертификатовТокена", Истина);
	ДополнительныеПараметры.Вставить("Сертификат", СерийныйНомер);
	ДополнительныеПараметры.Вставить("ВводитьПарольВПрограммеЭлектроннойПодписи", Ложь);

	Возврат ДополнительныеПараметры;
КонецФункции

#КонецОбласти