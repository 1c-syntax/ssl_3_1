///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Корреспондент")
		Или Не Параметры.Свойство("ИдентификаторТранспорта")
		Или Не Параметры.Свойство("АдресДляВосстановленияПароляУчетнойЗаписи")
		Или Не Параметры.Свойство("НастройкаАвтоматическойСинхронизации") Тогда
		
		ВызватьИсключение НСтр("ru = 'Эта форма не предназначена для непосредственного открытия.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	АдресДляВосстановленияПароляУчетнойЗаписи = Параметры.АдресДляВосстановленияПароляУчетнойЗаписи;
	НастройкаАвтоматическойСинхронизации = Параметры.НастройкаАвтоматическойСинхронизации;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Элементы.ПараметрыДоступаВИнтернет.Видимость = Истина;
	Иначе
		Элементы.ПараметрыДоступаВИнтернет.Видимость = Ложь;
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Корреспондент,ИдентификаторТранспорта,АдресДляВосстановленияПароляУчетнойЗаписи,НастройкаАвтоматическойСинхронизации");
	
	НастройкиТранспорта = ТранспортСообщенийОбмена.НастройкиТранспорта(Корреспондент, ИдентификаторТранспорта);
		
	Если Не ПустаяСтрока(НастройкиТранспорта.ИмяПользователя) Тогда
		Пользователь = Пользователи.НайтиПоИмени(НастройкиТранспорта.ИмяПользователя);
	КонецЕсли;
	
	Для Каждого ПользовательСинхронизации Из ПользователиСинхронизацииДанных() Цикл
		Элементы.Пользователь.СписокВыбора.Добавить(ПользовательСинхронизации.Пользователь, ПользовательСинхронизации.Представление);
	КонецЦикла;
		
	Элементы.ЗабылиПароль.Видимость = Не ПустаяСтрока(АдресДляВосстановленияПароляУчетнойЗаписи);
	
	Если ЗначениеЗаполнено(НастройкиТранспорта.Пароль) Тогда
		
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкиТранспорта.Пароль);
						
	Иначе
		
		НастройкиТранспорта.Пароль = Строка(Новый УникальныйИдентификатор); 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеИЗакрыть(Команда)
	
	Отказ = Ложь;
	ПроверитьПодключениеКСервису(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаАвтоматическойСинхронизации Тогда
		
		Оповестить("Запись_НастройкиТранспортаОбмена",
			Новый Структура("НастройкаАвтоматическойСинхронизации"));
		
	КонецЕсли;

	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗабылиПароль(Команда)
	
	ТранспортСообщенийОбменаКлиент.ОткрытьИнструкциюКакИзменитьПарольСинхронизацииДанных(АдресДляВосстановленияПароляУчетнойЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДоступаВИнтернет(Команда)
	
	ТранспортСообщенийОбменаКлиент.ОткрытьФормуПараметровПроксиСервера();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьПодключениеКСервису(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определяем имя пользователя.
	СвойстваПользователя = Пользователи.СвойстваПользователяИБ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));

	ПараметрыТранспорта = ТранспортСообщенийОбмена.ПараметрыИнициализации();
	ПараметрыТранспорта.Корреспондент = Корреспондент;
	ПараметрыТранспорта.ИдентификаторТранспорта = ИдентификаторТранспорта;
	ПараметрыТранспорта.НастройкиТранспорта = НастройкиТранспорта;
	
	Транспорт = ТранспортСообщенийОбмена.Инициализация(ПараметрыТранспорта); // ОбработкаОбъект.ТранспортСообщенийОбменаWS
	Транспорт.Пароль = Пароль;
	
	Если СвойстваПользователя <> Неопределено Тогда
		Транспорт.ИмяПользователя = СвойстваПользователя.Имя
	КонецЕсли;
	
	Если Транспорт.ПодключениеУстановлено() Тогда
		
		НастройкиТранспорта.ИмяПользователя = Транспорт.ИмяПользователя;
		НастройкиТранспорта.ЗапомнитьПароль = Истина;
		
		ТранспортСообщенийОбмена.СохранитьНастройкиТранспорта(Корреспондент, ИдентификаторТранспорта, НастройкиТранспорта, Истина);
		
		// Проверка подключения прошла успешно, записываем пароль, если он был изменен
		Если ПарольИзменен Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкиТранспорта.Пароль, Пароль);
		КонецЕсли
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(Транспорт.СообщениеОбОшибке,, "Пароль",, Отказ);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПользователиСинхронизацииДанных()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Пользователь"); // Тип: СправочникСсылка.Пользователи
	Результат.Колонки.Добавить("Представление");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Представление,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			
			Если ПользовательИБ <> Неопределено
				И ОбменДаннымиСервер.СинхронизацияДанныхРазрешена(ПользовательИБ) Тогда
				
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
