///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьНастройки(СтруктураНастроек) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиТранспортаСообщенийОбмена");
		ЭлементБлокировки.УстановитьЗначение("Корреспондент", СтруктураНастроек.Корреспондент);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторТранспорта", СтруктураНастроек.ИдентификаторТранспорта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиТранспорта.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта
			|ГДЕ
			|	НастройкиТранспорта.Корреспондент = &Корреспондент
			|	И НастройкиТранспорта.ИдентификаторТранспорта = &ИдентификаторТранспорта";
			
		Запрос.УстановитьПараметр("Корреспондент", СтруктураНастроек.Корреспондент);
		Запрос.УстановитьПараметр("ИдентификаторТранспорта", СтруктураНастроек.ИдентификаторТранспорта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Объект = Справочники.НастройкиТранспортаСообщенийОбмена.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек, , "Настройки");
		
		Объект.Настройки.Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураНастроек.Настройки Цикл
			
			НоваяСтрока = Объект.Настройки.Добавить();
			НоваяСтрока.Настройка = КлючИЗначение.Ключ;
			НоваяСтрока.Значение = КлючИЗначение.Значение;
			
		КонецЦикла;
		
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьВсеНастройки(Корреспондент) Экспорт

	ТипКорреспондента = ТипЗнч(Корреспондент);
	Если НЕ Метаданные.ОпределяемыеТипы.ПланыОбменаБСД.Тип.СодержитТип(ТипКорреспондента) Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиТранспортаСообщенийОбмена");
		ЭлементБлокировки.УстановитьЗначение("Корреспондент", Корреспондент);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиТранспорта.Ссылка КАК Ссылка,
			|	НастройкиТранспорта.ИдентификаторТранспорта КАК ИдентификаторТранспорта,
			|	НастройкиТранспорта.Настройки.(
			|		Настройка КАК Настройка,
			|		Значение КАК Значение
			|	) КАК Настройки
			|ИЗ
			|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта
			|ГДЕ
			|	НастройкиТранспорта.Корреспондент = &Корреспондент";
			
		Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РеквизитыДляБезопасногоХранилища = ТранспортСообщенийОбмена.ПараметрТранспорта(
				Выборка.ИдентификаторТранспорта, "РеквизитыДляБезопасногоХранилища");
				
			Если РеквизитыДляБезопасногоХранилища.Количество() > 0 Тогда
				
				ВыборкаПоНастройкам = Выборка.Настройки.Выбрать();
				
				Пока ВыборкаПоНастройкам.Следующий() Цикл
					
					Если РеквизитыДляБезопасногоХранилища.Найти(ВыборкаПоНастройкам.Настройка) <> Неопределено 
						И ЗначениеЗаполнено(ВыборкаПоНастройкам.Значение) Тогда
						ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ВыборкаПоНастройкам.Значение);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
				
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Удалить();
		
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
	
	КонецПопытки;
		
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Выборка = СохраненныеНастройкиТранспорта();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыЗапроса = ПараметрыЗапросаНаИспользованиеВнешнихРесурсов();
		ЗапросНаИспользованиеВнешнихРесурсов(ЗапросыРазрешений, Выборка, ПараметрыЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТранспортПоУмолчанию(Корреспондент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Возвращаемое значение функции.
	ИдентификаторТранспорта = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиТранспорта.ИдентификаторТранспорта КАК ИдентификаторТранспорта
		|ИЗ
		|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта
		|ГДЕ
		|	НастройкиТранспорта.Корреспондент = &Корреспондент
		|	И НастройкиТранспорта.НастройкаПоУмолчанию";
	
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИдентификаторТранспорта = Выборка.ИдентификаторТранспорта;
	КонецЕсли;
	
	Возврат ИдентификаторТранспорта;
	
КонецФункции

Функция НастройкиТранспорта(Корреспондент, ИдентификаторТранспорта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Настройки.Настройка КАК Настройка,
		|	Настройки.Значение КАК Значение
		|ИЗ
		|	Справочник.НастройкиТранспортаСообщенийОбмена.Настройки КАК Настройки
		|ГДЕ
		|	Настройки.Ссылка.Корреспондент = &Корреспондент
		|	И Настройки.Ссылка.ИдентификаторТранспорта = &ИдентификаторТранспорта";
	
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.УстановитьПараметр("ИдентификаторТранспорта", ИдентификаторТранспорта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НастройкиТранспорта = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НастройкиТранспорта;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НастройкиТранспорта.Вставить(Выборка.Настройка, Выборка.Значение);
	КонецЦикла;
		
	Возврат НастройкиТранспорта;
	
КонецФункции

Функция НастройкиТранспортаПоУмолчанию(Корреспондент, ИдентификаторТранспорта = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиТранспорта.ИдентификаторТранспорта КАК ИдентификаторТранспорта,
		|	НастройкиТранспорта.Настройки.(
		|		Настройка КАК Настройка,
		|		Значение КАК Значение
		|	) КАК Настройки
		|ИЗ
		|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта
		|ГДЕ
		|	НастройкиТранспорта.Корреспондент = &Корреспондент
		|	И НастройкиТранспорта.НастройкаПоУмолчанию";
	
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НастройкиТранспорта = Новый Структура;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторТранспорта = Выборка.ИдентификаторТранспорта;
		
		ВыборкаПоНастройкам = Выборка.Настройки.Выбрать();
		
		Пока ВыборкаПоНастройкам.Следующий() Цикл
			НастройкиТранспорта.Вставить(ВыборкаПоНастройкам.Настройка, ВыборкаПоНастройкам.Значение);
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат НастройкиТранспорта;
	
КонецФункции

Функция НастроенныеТипыТранспорта(Корреспондент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиТранспорта.ИдентификаторТранспорта КАК ИдентификаторТранспорта
		|ИЗ
		|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта
		|ГДЕ
		|	НастройкиТранспорта.Корреспондент = &Корреспондент";
	
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура НазначитьТранспортПоУмолчанию(Корреспондент, ИдентификаторТранспорта) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиТранспортаСообщенийОбмена");
	ЭлементБлокировки.УстановитьЗначение("Корреспондент", Корреспондент);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиТранспорта.Ссылка КАК Ссылка,
			|	НастройкиТранспорта.ИдентификаторТранспорта КАК ИдентификаторТранспорта,
			|	НастройкиТранспорта.ИдентификаторТранспорта = &ИдентификаторТранспорта КАК НастройкаПоУмолчанию
			|ИЗ
			|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта
			|ГДЕ
			|	НастройкиТранспорта.Корреспондент = &Корреспондент
			|	И НастройкиТранспорта.НастройкаПоУмолчанию <> (НастройкиТранспорта.ИдентификаторТранспорта = &ИдентификаторТранспорта)";
		
		Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
		Запрос.УстановитьПараметр("ИдентификаторТранспорта", ИдентификаторТранспорта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СправочникНастроек = Выборка.Ссылка.ПолучитьОбъект();
			СправочникНастроек.НастройкаПоУмолчанию = Выборка.НастройкаПоУмолчанию;
			СправочникНастроек.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
		
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт

	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.УдалитьНастройкиТранспортаОбменаДанными");
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса") Тогда
			
			Блокировка.Добавить("РегистрСведений.НастройкиТранспортаОбменаОбластиДанных");
			
		КонецЕсли;
		
		Блокировка.Добавить("Справочник.СценарииОбменовДанными");
		Блокировка.Добавить("Справочник.НастройкиТранспортаСообщенийОбмена");
		Блокировка.Заблокировать();
		
		ПеренестиНастройкиТранспорта();
		
		Если ОбщегоНазначения.РазделениеВключено()
			И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			ПеренестиНастройкиТранспортаМенеджераСервсиа();
			
		КонецЕсли;
		
		ПеренестиНастройкиТранспортаСценариевОбмена();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиНастройкиТранспорта()
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиТранспортаСообщенийОбмена");
		Блокировка.Заблокировать();
	
		Набор = РегистрыСведений.УдалитьНастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
		Набор.Прочитать();
	
		Для Каждого Запись Из Набор Цикл
			
			Если НЕ ЗначениеЗаполнено(Запись.Корреспондент)
				ИЛИ Запись.Корреспондент.ПолучитьОбъект() = Неопределено Тогда
				
				// Пропускаем настройки с пустой или "битой" ссылкой (защита от ошибки в данных)
				Продолжить;
				
			КонецЕсли;
			
			ПеренестиНастройкиТранспортаДляЗаписи(Запись)
			
		КонецЦикла;
		
		Набор.Очистить();
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиНастройкиТранспортаДляЗаписи(Запись)
	
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Запись.Корреспондент,
		"COMПарольПользователя, FTPСоединениеПароль, WSПароль, ПарольАрхиваСообщенияОбмена");
	
	НастроенныеВидыТранспорта = НастроенныеВидыТранспорта(Запись);
	
	Для Каждого ВидТранспорта Из НастроенныеВидыТранспорта Цикл
		
		НовыйСправочник = Справочники.НастройкиТранспортаСообщенийОбмена.СоздатьЭлемент();
		НовыйСправочник.Корреспондент = Запись.Корреспондент;
		НовыйСправочник.НастройкаПоУмолчанию = (Запись.ВидТранспортаСообщенийОбменаПоУмолчанию = ВидТранспорта);
		НовыйСправочник.ИдентификаторТранспорта = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидТранспорта);
		Настройки = НовыйСправочник.Настройки;
	
		Если ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL Тогда
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "МаксимальныйДопустимыйРазмерСообщения";
			НоваяСтрока.Значение = Запись.EMAILМаксимальныйДопустимыйРазмерСообщения;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "СжиматьФайлИсходящегоСообщения";
			НоваяСтрока.Значение = Запись.EMAILСжиматьФайлИсходящегоСообщения;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "УчетнаяЗапись";
			НоваяСтрока.Значение = Запись.EMAILУчетнаяЗапись;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "Транслитерация";
			НоваяСтрока.Значение = Запись.EMAILТранслитерироватьИменаФайловСообщенийОбмена;
			
			Если ЗначениеЗаполнено(Пароли.ПарольАрхиваСообщенияОбмена) Тогда
				ПарольАрхиваСообщенияОбмена = Строка(Новый УникальныйИдентификатор);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПарольАрхиваСообщенияОбмена, Пароли.ПарольАрхиваСообщенияОбмена);
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ПарольАрхиваСообщенияОбмена";
				НоваяСтрока.Значение = ПарольАрхиваСообщенияОбмена;
			КонецЕсли;
	
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "КаталогОбменаИнформацией";
			НоваяСтрока.Значение = Запись.FILEКаталогОбменаИнформацией;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "СжиматьФайлИсходящегоСообщения";
			НоваяСтрока.Значение = Запись.FILEСжиматьФайлИсходящегоСообщения;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "Транслитерация";
			НоваяСтрока.Значение = Запись.FILEТранслитерироватьИменаФайловСообщенийОбмена;
			
			Если ЗначениеЗаполнено(Пароли.ПарольАрхиваСообщенияОбмена) Тогда
				ПарольАрхиваСообщенияОбмена = Строка(Новый УникальныйИдентификатор);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПарольАрхиваСообщенияОбмена, Пароли.ПарольАрхиваСообщенияОбмена);
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ПарольАрхиваСообщенияОбмена";
				НоваяСтрока.Значение = ПарольАрхиваСообщенияОбмена;
			КонецЕсли;
			
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "МаксимальныйДопустимыйРазмерСообщения";
			НоваяСтрока.Значение = Запись.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "ПассивноеСоединение";
			НоваяСтрока.Значение = Запись.FTPСоединениеПассивноеСоединение;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "Пользователь";
			НоваяСтрока.Значение = Запись.FTPСоединениеПользователь;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "Порт";
			НоваяСтрока.Значение = Запись.FTPСоединениеПорт;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "Путь";
			НоваяСтрока.Значение = Запись.FTPСоединениеПуть;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "СжиматьФайлИсходящегоСообщения";
			НоваяСтрока.Значение = Запись.FTPСжиматьФайлИсходящегоСообщения;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "Транслитерация";
			НоваяСтрока.Значение = Запись.FTPТранслитерироватьИменаФайловСообщенийОбмена;
			
			Если ЗначениеЗаполнено(Пароли.ПарольАрхиваСообщенияОбмена) Тогда
				ПарольАрхиваСообщенияОбмена = Строка(Новый УникальныйИдентификатор);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПарольАрхиваСообщенияОбмена, Пароли.ПарольАрхиваСообщенияОбмена);
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ПарольАрхиваСообщенияОбмена";
				НоваяСтрока.Значение = ПарольАрхиваСообщенияОбмена;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Пароли.FTPСоединениеПароль) Тогда
				Пароль = Строка(Новый УникальныйИдентификатор);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пароль, Пароли.FTPСоединениеПароль);
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "Пароль";
				НоваяСтрока.Значение = Пароль;
			КонецЕсли;
			
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
			
			Если ЗначениеЗаполнено(Запись.WSКонечнаяТочкаКорреспондента) Тогда
				
				НовыйСправочник.ИдентификаторТранспорта = "SM";
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ВнутренняяПубликация";
				НоваяСтрока.Значение = Истина;
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "КонечнаяТочкаКорреспондента";
				НоваяСтрока.Значение = Запись.WSКонечнаяТочкаКорреспондента;
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ОбластьДанныхКорреспондента";
				НоваяСтрока.Значение = Запись.WSОбластьДанныхКорреспондента;
				
			Иначе
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "АдресВебСервиса";
				НоваяСтрока.Значение = Запись.WSURLВебСервиса;
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ИмяПользователя";
				НоваяСтрока.Значение = Запись.WSИмяПользователя;
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ЗапомнитьПароль";
				НоваяСтрока.Значение = Запись.WSЗапомнитьПароль;
					
				Если Запись.WSЗапомнитьПароль И ЗначениеЗаполнено(Пароли.WSПароль) Тогда
				
					Пароль = Строка(Новый УникальныйИдентификатор);
					ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Пароль, Пароли.WSПароль);
					
					НоваяСтрока = НовыйСправочник.Настройки.Добавить();
					НоваяСтрока.Настройка = "Пароль";
					НоваяСтрока.Значение = Пароль;
					
				КонецЕсли;
			
			КонецЕсли;
			
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "ВариантРаботыИнформационнойБазы";
			НоваяСтрока.Значение = Запись.COMВариантРаботыИнформационнойБазы;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "КаталогИнформационнойБазы";
			НоваяСтрока.Значение = Запись.COMКаталогИнформационнойБазы;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "АутентификацияОперационнойСистемы";
			НоваяСтрока.Значение = Запись.COMАутентификацияОперационнойСистемы;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "ИмяПользователя";
			НоваяСтрока.Значение = Запись.COMИмяПользователя;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "ИмяСервера1СПредприятия";
			НоваяСтрока.Значение = Запись.COMИмяСервера1СПредприятия;
			
			НоваяСтрока = НовыйСправочник.Настройки.Добавить();
			НоваяСтрока.Настройка = "ИмяИнформационнойБазыНаСервере1СПредприятия";
			НоваяСтрока.Значение = Запись.COMИмяИнформационнойБазыНаСервере1СПредприятия;
			
			Если ЗначениеЗаполнено(Пароли.COMПарольПользователя) Тогда
				ПарольПользователя = Строка(Новый УникальныйИдентификатор);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПарольПользователя, Пароли.COMПарольПользователя);
				
				НоваяСтрока = НовыйСправочник.Настройки.Добавить();
				НоваяСтрока.Настройка = "ПарольПользователя";
				НоваяСтрока.Значение = ПарольПользователя;
			КонецЕсли;
			
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим Тогда
			
			НовыйСправочник.ИдентификаторТранспорта = "ПассивныйРежим";
			
		КонецЕсли;
		
		НовыйСправочник.Записать();
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Запись.Корреспондент, "");
			
КонецПроцедуры

Функция НастроенныеВидыТранспорта(Запись)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(Запись.COMКаталогИнформационнойБазы) 
		Или ЗначениеЗаполнено(Запись.COMИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.EMAILУчетнаяЗапись) Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.FILEКаталогОбменаИнформацией) Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.FTPСоединениеПуть) Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.WSURLВебСервиса)
		Или ЗначениеЗаполнено(Запись.WSКонечнаяТочкаКорреспондента) Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	КонецЕсли;
	
	Если Запись.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим);  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиНастройкиТранспортаМенеджераСервсиа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиТранспортаОбменаОбластиДанных.Корреспондент КАК Корреспондент,
		|	НастройкиТранспортаОбменаОбластиДанных.КонечнаяТочкаКорреспондента КАК КонечнаяТочкаКорреспондента,
		|	НастройкиТранспортаСообщенийОбмена.ИдентификаторТранспорта КАК ИдентификаторТранспорта
		|ИЗ
		|	РегистрСведений.НастройкиТранспортаОбменаОбластиДанных КАК НастройкиТранспортаОбменаОбластиДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспортаСообщенийОбмена
		|		ПО НастройкиТранспортаОбменаОбластиДанных.Корреспондент = НастройкиТранспортаСообщенийОбмена.Корреспондент
		|			И (НастройкиТранспортаСообщенийОбмена.ИдентификаторТранспорта = ""SM"")
		|ГДЕ
		|	НастройкиТранспортаСообщенийОбмена.Корреспондент ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыйСправочник = Справочники.НастройкиТранспортаСообщенийОбмена.СоздатьЭлемент();
		НовыйСправочник.Корреспондент = Выборка.Корреспондент;
		НовыйСправочник.ИдентификаторТранспорта = "SM";
		НовыйСправочник.НастройкаПоУмолчанию = Истина;
		
		НоваяСтрока = НовыйСправочник.Настройки.Добавить();
		НоваяСтрока.Настройка = "КонечнаяТочкаКорреспондента";
		НоваяСтрока.Значение = Выборка.КонечнаяТочкаКорреспондента;
		
		НоваяСтрока = НовыйСправочник.Настройки.Добавить();
		НоваяСтрока.Настройка = "НаименованиеКорреспондента";
		НоваяСтрока.Значение = Строка(Выборка.Корреспондент);
		
		НовыйСправочник.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиНастройкиТранспортаСценариевОбмена()

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиОбмена
		|ГДЕ
		|	(ВЫРАЗИТЬ(НастройкиОбмена.ИдентификаторТранспорта КАК СТРОКА(100))) = """"";

	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.СценарииОбменовДанными");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
				
			Сценарий = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого Настройка Из Сценарий.НастройкиОбмена Цикл
				
				Если ЗначениеЗаполнено(Настройка.ИдентификаторТранспорта) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Настройка.УдалитьВидТранспортаОбмена) Тогда
					Продолжить; // Пропускаем строки с пустым транспортом
				КонецЕсли;
				
				Если ОбщегоНазначения.РазделениеВключено()
					И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				
					Настройка.ИдентификаторТранспорта = "SM";
					
				Иначе
					
					ИдентификаторТранспорта = ОбщегоНазначения.ИмяЗначенияПеречисления(Настройка.УдалитьВидТранспортаОбмена);
					
					Если ИдентификаторТранспорта = "WSПассивныйРежим" Тогда 
						
						ИдентификаторТранспорта = "ПассивныйРежим";
						
					ИначеЕсли ИдентификаторТранспорта = "ВнешняяСистема" Тогда
						
						ИдентификаторТранспорта = "";
						
					КонецЕсли;
					
					Настройка.ИдентификаторТранспорта = ИдентификаторТранспорта;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Сценарий.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция СохраненныеНастройкиТранспорта()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиТранспорта.ИдентификаторТранспорта КАК ИдентификаторТранспорта,
		|	НастройкиТранспорта.Корреспондент КАК Корреспондент,
		|	НастройкиТранспорта.Настройки.(
		|		Настройка КАК Настройка,
		|		Значение КАК Значение
		|	) КАК Настройки
		|ИЗ
		|	Справочник.НастройкиТранспортаСообщенийОбмена КАК НастройкиТранспорта";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПараметрыЗапросаНаИспользованиеВнешнихРесурсов()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЗапрашиватьCOM",  Истина);
	Параметры.Вставить("ЗапрашиватьFILE", Истина);
	Параметры.Вставить("ЗапрашиватьWS",   Истина);
	Параметры.Вставить("ЗапрашиватьFTP",  Истина);
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗапросНаИспользованиеВнешнихРесурсов(ЗапросыРазрешений, Запись, ПараметрыЗапроса) Экспорт
	
	Разрешения = Новый Массив;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	ИдентификаторТранспорта = Запись.ИдентификаторТранспорта;
	Корреспондент = Запись.Корреспондент;
	
	НастройкиТранспорта = Новый Структура;
	ВыборкаПоНастройкам = Запись.Настройки.Выбрать();
	Пока ВыборкаПоНастройкам.Следующий() Цикл
		НастройкиТранспорта.Вставить(ВыборкаПоНастройкам.Настройка, ВыборкаПоНастройкам.Значение);
	КонецЦикла;
		
	Если Не ЗначениеЗаполнено(НастройкиТранспорта) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЗапрашиватьFTP 
		И ИдентификаторТранспорта = "FTP"
		И Не ПустаяСтрока(НастройкиТранспорта.Путь) Тогда
		
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиТранспорта.Путь);
		Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			СтруктураАдреса.Схема, СтруктураАдреса.Хост, НастройкиТранспорта.Порт));
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЗапрашиватьFILE 
		И ИдентификаторТранспорта = "FILE"
		И Не ПустаяСтрока(НастройкиТранспорта.КаталогОбменаИнформацией) Тогда
		
		Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы(
			НастройкиТранспорта.КаталогОбменаИнформацией, Истина, Истина));
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЗапрашиватьWS 
		И (ИдентификаторТранспорта = "WS" Или ИдентификаторТранспорта = "HTTP")
		И Не ПустаяСтрока(НастройкиТранспорта.АдресВебСервиса) Тогда
		
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиТранспорта.АдресВебСервиса);
		Если ЗначениеЗаполнено(СтруктураАдреса.Схема) Тогда
			Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				СтруктураАдреса.Схема, СтруктураАдреса.Хост, СтруктураАдреса.Порт));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЗапрашиватьCOM 
		И ИдентификаторТранспорта = "COM"
		И (Не ПустаяСтрока(НастройкиТранспорта.КаталогИнформационнойБазы)
		Или Не ПустаяСтрока(НастройкиТранспорта.ИмяИнформационнойБазыНаСервере1СПредприятия)) Тогда
		
		ИмяCOMСоединителя = ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя();
		Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса(
			ИмяCOMСоединителя, ОбщегоНазначения.ИдентификаторCOMСоединителя(ИмяCOMСоединителя)));
		
	КонецЕсли;
	
	// Разрешения для обмена через почту запрашиваются в подсистеме Работе с почтовыми сообщениями.
	
	Если Разрешения.Количество() > 0 Тогда
		
		ЗапросыРазрешений.Добавить(
			МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, Корреспондент));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли