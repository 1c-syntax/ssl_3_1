///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Элементы.ГруппаАвтоматическийПеревод.Видимость = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность.ПереводТекста") Тогда
		МодульПереводТекстаНаДругиеЯзыки = ОбщегоНазначения.ОбщийМодуль("ПереводТекстаНаДругиеЯзыки");
		ВключитьАвтоматическийПеревод = МодульПереводТекстаНаДругиеЯзыки.ДоступенПереводТекста();
		Элементы.ГруппаАвтоматическийПеревод.Видимость = Истина;
		Переводчик = МодульПереводТекстаНаДругиеЯзыки.СервисПереводаТекста();
		Если ЗначениеЗаполнено(Переводчик) Тогда
			Элементы.Параметры.Заголовок = Переводчик;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВключитьАвтоматическийПереводПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Переводчик) Или Не ВключитьАвтоматическийПеревод Тогда
		УстановитьИспользованиеСервисаПереводаТекста(ВключитьАвтоматическийПеревод);
	ИначеЕсли ВключитьАвтоматическийПеревод Тогда
		ПерейтиКНастройкамПереводчика();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыНажатие(Элемент)
	
	ПерейтиКНастройкамПереводчика();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого Строка Из Строки Цикл
		Строка.Значение.Данные["Наименование"] = МультиязычностьСервер.ПредставлениеЯзыка(Строка.Значение.Данные["Код"]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Создать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореЯзыка", ЭтотОбъект);
	ОткрытьФорму("Справочник.ЯзыкиПечатныхФорм.Форма.ПодборЯзыкаИзСпискаДоступных", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//  ВыбранныеЯзыки - Массив из Структура:
//   * Код - Строка
//   * Наименование - Строка
//
&НаКлиенте
Процедура ПриВыбореЯзыка(ВыбранныеЯзыки, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеЯзыки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеЯзыки = ДобавитьЯзыки(ВыбранныеЯзыки);
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(ДобавленныеЯзыки);
	Элементы.Список.ТекущаяСтрока = ДобавленныеЯзыки[0];
	Элементы.Список.ВыделенныеСтроки.Очистить();
	Для Каждого Язык Из ДобавленныеЯзыки Цикл
		Элементы.Список.ВыделенныеСтроки.Добавить(Язык);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЯзыки(ВыбранныеЯзыки)
	
	Результат = Новый Массив;
	Для Каждого ОписаниеЯзыка Из ВыбранныеЯзыки Цикл
		ЯзыкСсылка = Справочники.ЯзыкиПечатныхФорм.НайтиПоКоду(ОписаниеЯзыка.Код);
		Если ЗначениеЗаполнено(ЯзыкСсылка) Тогда
			ЯзыкОбъект = ЯзыкСсылка.ПолучитьОбъект();
		Иначе
			ЯзыкОбъект = Справочники.ЯзыкиПечатныхФорм.СоздатьЭлемент();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЯзыкОбъект, ОписаниеЯзыка);
		ЯзыкОбъект.ПометкаУдаления = Ложь;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЯзыкиПечатныхФорм");
		ЭлементБлокировки.УстановитьЗначение("Код", ЯзыкОбъект.Код);
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ЯзыкОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Результат.Добавить(ЯзыкОбъект.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеСервисаПереводаТекста(Использовать);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность.ПереводТекста") Тогда
		МодульПереводТекстаНаДругиеЯзыки = ОбщегоНазначения.ОбщийМодуль("ПереводТекстаНаДругиеЯзыки");
		МодульПереводТекстаНаДругиеЯзыки.УстановитьИспользованиеСервисаПереводаТекста(Использовать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкамПереводчика()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииНастройки", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкаПереводаТекста", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииНастройки(Знач ВыбранныйПереводчик, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйПереводчик = Неопределено Тогда
		ВыбранныйПереводчик = ТекущийПереводчик();
	КонецЕсли;
	
	Если ВключитьАвтоматическийПеревод Тогда
		Если Не ЗначениеЗаполнено(ВыбранныйПереводчик) Тогда
			ВключитьАвтоматическийПеревод = Ложь;
		КонецЕсли;
		УстановитьИспользованиеСервисаПереводаТекста(ВключитьАвтоматическийПеревод);
	КонецЕсли;
	
	Переводчик = ВыбранныйПереводчик;
	
	Если ЗначениеЗаполнено(Переводчик) Тогда
		Элементы.Параметры.Заголовок = Переводчик;
	Иначе
		Элементы.Параметры.Заголовок = НСтр("ru = '<настроить>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущийПереводчик()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность.ПереводТекста") Тогда
		МодульПереводТекстаНаДругиеЯзыки = ОбщегоНазначения.ОбщийМодуль("ПереводТекстаНаДругиеЯзыки");
		Возврат МодульПереводТекстаНаДругиеЯзыки.СервисПереводаТекста();
	КонецЕсли;
	
КонецФункции

#КонецОбласти
