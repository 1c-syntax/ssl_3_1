///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	МашиночитаемыеДоверенностиФНССлужебный.ПриСозданииНаСервере(ЭтотОбъект);
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	Элементы.ПолномочияДоверенности.Видимость = Элементы.Список.РежимВыбора;
	
	Если Параметры.МножественныйВыбор <> Неопределено Тогда
		Элементы.Список.МножественныйВыбор = Параметры.МножественныйВыбор;
	КонецЕсли;
	
	Если Параметры.РежимВыбора И Не ЗначениеЗаполнено(Параметры.КлючПользовательскихНастроек) Тогда
		Параметры.КлючПользовательскихНастроек = "РежимВыбора";
		Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	Заголовок = НСтр("ru='Машиночитаемые доверенности'");
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ОтборПоСостоянию, ТолькоДействующие, СертификатПредставителя, СертификатДоверителя");
	
	ДоверенностиПоРоли = ?(ЗначениеЗаполнено(Параметры.ДоверенностиПоРоли), Параметры.ДоверенностиПоРоли, Элементы.ДоверенностиПоРоли.СписокВыбора[0].Значение);
	
	Если ДоверенностиПоРоли = "Представитель" Тогда
		ФизическоеЛицо = ФизическоеЛицоПользователя(АвторизованныйПользователь);
		Представитель = ?(ЗначениеЗаполнено(ФизическоеЛицо), ФизическоеЛицо, ТекстОшибкиФизическоеЛицо());
		Доверитель = "";
	ИначеЕсли ДоверенностиПоРоли = "Доверитель" Тогда
		ФизическоеЛицо = ФизическоеЛицоПользователя(АвторизованныйПользователь);
		Доверитель = ?(ЗначениеЗаполнено(ФизическоеЛицо), ФизическоеЛицо, ТекстОшибкиФизическоеЛицо());
		Представитель = "";
	Иначе
		Доверитель = ?(ЗначениеЗаполнено(Параметры.Доверитель), Параметры.Доверитель, "");
		Представитель = ?(ЗначениеЗаполнено(Параметры.Представитель), Параметры.Представитель, "");
	КонецЕсли;
	
	Элементы.Представитель.Доступность = ДоверенностиПоРоли <> "Представитель";
	Элементы.Доверитель.Доступность = ДоверенностиПоРоли <> "Доверитель";
	
	Полномочия = ?(ЗначениеЗаполнено(Параметры.Полномочия), Параметры.Полномочия, Полномочия);
	
	Если ТипЗнч(СертификатПредставителя) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		Сертификат = СертификатПредставителя;
	ИначеЕсли ТипЗнч(СертификатПредставителя) = Тип("ДвоичныеДанные") Или ЭтоАдресВременногоХранилища(СертификатПредставителя) Тогда
		СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СертификатПредставителя);
		Сертификат = СвойстваСертификата.Представление;
	Иначе
		Сертификат = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = КоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ДополнительныеКоманды;
	ПараметрыРазмещения.ПрефиксГрупп = "КонтекстноеМеню";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЕстьПравоДобавления = ПравоДоступа("Добавление", Метаданные.Справочники.МашиночитаемыеДоверенности);
	
	Элементы.СписокЗагрузитьИзФайла.Видимость = ЕстьПравоДобавления;
	Элементы.СписокЗагрузитьИзРеестраФНС.Видимость = ЕстьПравоДобавления;
	Элементы.СписокПолучитьСтатус.Видимость = ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенности);
	
	Настройки = МашиночитаемыеДоверенностиФНССлужебный.НастройкиПодсистемы();
	
	Элементы.ГруппаСтатусВДругомРеестре.Видимость = Настройки.ПоказыватьСтатусВФормеСписка;
	
	Если Настройки.ПоказыватьСтатусВФормеСписка Тогда
		
		Если ЗначениеЗаполнено(Настройки.ЗаголовокКолонкиСтатуса) Тогда
			Элементы.СтатусВДругомРеестре.Заголовок = Настройки.ЗаголовокКолонкиСтатуса;
		Иначе
			Элементы.СтатусВДругомРеестре.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		Если Настройки.КартинкаКолонкиСтатуса <> Неопределено Тогда
			Элементы.СтатусВДругомРеестре.КартинкаШапки = Настройки.КартинкаКолонкиСтатуса;
		КонецЕсли;
		Если Настройки.КоллекцияКартинокДляСтроки <> Неопределено Тогда
			Элементы.ИндексСтатусаВДругомРеестре.КартинкаЗначений = Настройки.КоллекцияКартинокДляСтроки;
		Иначе
			Элементы.ИндексСтатусаВДругомРеестре.Видимость = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СтатусВДругомРеестре", "");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СтатусВДругомРеестре", "НетСтатусов");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОтбор();
	УстановитьПредставлениеПолномочий();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТолькоДействующиеПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПредставительПриИзменении(Элемент)
	ОтборПоПредставителю = Неопределено;
	УстановитьОтбор();
КонецПроцедуры 

&НаКлиенте
Процедура ДоверительПриИзменении(Элемент)
	ОтборПоДоверителю = Неопределено;
	УстановитьОтбор();
КонецПроцедуры 

&НаКлиенте
Процедура ДоверенностиПоРолиПриИзменении(Элемент)
	
	Если ДоверенностиПоРоли = "Представитель" Тогда
		ФизическоеЛицо = ФизическоеЛицоПользователя(АвторизованныйПользователь);
		Представитель = ?(ЗначениеЗаполнено(ФизическоеЛицо), ФизическоеЛицо, ТекстОшибкиФизическоеЛицо());
		Доверитель = "";
	ИначеЕсли ДоверенностиПоРоли = "Доверитель" Тогда
		ФизическоеЛицо = ФизическоеЛицоПользователя(АвторизованныйПользователь);
		Доверитель = ?(ЗначениеЗаполнено(ФизическоеЛицо), ФизическоеЛицо, ТекстОшибкиФизическоеЛицо());
		Представитель = "";
	Иначе
		Доверитель = "";
		Представитель = "";
	КонецЕсли;
	
	Элементы.Представитель.Доступность = ДоверенностиПоРоли <> "Представитель";
	Элементы.Доверитель.Доступность = ДоверенностиПоРоли <> "Доверитель";
	
	УстановитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура ДоверительОчистка(СтандартнаяОбработка)
	ОчисткаОтбора("Доверитель");
КонецПроцедуры

&НаКлиенте
Процедура ПредставительОчистка(СтандартнаяОбработка)
	ОчисткаОтбора("Представитель");
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПолномочий", ЭтотОбъект);
	
	СтруктураДанных = Новый Структура("ПолномочияВТекстовомВиде, ТекстПолномочий, Полномочия", Ложь);
	Если ТипЗнч(Полномочия) = Тип("СписокЗначений") Тогда
		МассивПолномочий = Полномочия.ВыгрузитьЗначения();
	Иначе
		МассивПолномочий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Полномочия);
	КонецЕсли;
	
	СтруктураДанных.Полномочия = ПоместитьВоВременноеХранилище(МассивПолномочий, УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ТолькоПросмотр, ВыбранныеПолномочия, РежимКлассификатора", Ложь, СтруктураДанных, Истина);

	ОткрытьФорму(
		"Справочник.МашиночитаемыеДоверенности.Форма.ФормаВводаПолномочий",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Ложь);
	ПараметрыФормы.Вставить("ВыбранныйСертификат", СертификатПредставителя);
	ПараметрыФормы.Вставить("ВыполнятьНаСервере");
	ПараметрыФормы.Вставить("РежимВыбораСсылки", Истина);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("СертификатОкончаниеВыбора", ЭтотОбъект);
	МодульЭлектроннаяПодписьСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиент");
	МодульЭлектроннаяПодписьСлужебныйКлиент.ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, Элемент, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОчистка(Элемент, СтандартнаяОбработка)
	СертификатПредставителя = Неопределено;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ДоверительПредставительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;

	Запрос = СокрЛП(Текст);

	ПодходящиеЗначения = ПодходящиеЗначенияУниверсальногоПоиска(Запрос, Элемент.Имя);
	
	ДанныеВыбора = ПодходящиеЗначения;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоверительПредставительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ЭтотОбъект[Элемент.Имя] = ВыбранноеЗначение[0].ПравоеЗначение;
	Если Элемент.Имя = "Доверитель" Тогда
		ОтборПоДоверителю = ВыбранноеЗначение[0];
	Иначе
		ОтборПоПредставителю = ВыбранноеЗначение[0];
	КонецЕсли;

	УстановитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьМашиночитаемыеДоверенностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МашиночитаемыеДоверенностиФНССлужебныйКлиент.ОткрытьСписокМЧД(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ПараметрыДанных.Элементы.Найти("ВидимостьПолномочий").Значение = Истина Тогда
		Запрос = Неопределено;
		Для Каждого СтрокаСписка Из Строки Цикл
			Если СтрокаСписка.Значение.Данные.ПолномочияВТекстовомВиде = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запрос = Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	МашиночитаемыеДоверенности.Ограничения.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		ИдентификаторПолномочия КАК ИдентификаторПолномочия,
				|		Код КАК Код,
				|		Наименование КАК Наименование,
				|		НаименованиеЗначения КАК НаименованиеЗначения,
				|		КодЗначения КАК КодЗначения,
				|		ТекстовоеЗначение КАК ТекстовоеЗначение
				|	) КАК Ограничения,
				|	МашиночитаемыеДоверенности.Полномочия.(
				|		Ссылка КАК Ссылка,
				|		НомерСтроки КАК НомерСтроки,
				|		Код КАК Код,
				|		ИдентификаторПолномочия КАК ИдентификаторПолномочия,
				|		Мнемокод КАК Мнемокод,
				|		Наименование КАК Наименование
				|	) КАК Полномочия,
				|	МашиночитаемыеДоверенности.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
				|ГДЕ
				|	НЕ МашиночитаемыеДоверенности.ПолномочияВТекстовомВиде
				|	И МашиночитаемыеДоверенности.Ссылка В(&Ссылки)";
				
				Запрос.УстановитьПараметр("Ссылки", Строки.ПолучитьКлючи());
				РезультатЗапроса = Запрос.Выполнить(); // @skip-check query-in-loop - Запрос выполняется один раз
				ВыборкаСсылка = РезультатЗапроса.Выбрать();
			КонецЕсли;
			
			Если ВыборкаСсылка.НайтиСледующий(СтрокаСписка.Значение.Данные["Ссылка"], "Ссылка") Тогда
				
				Полномочия = ВыборкаСсылка.Полномочия.Выгрузить();
				Ограничения = ВыборкаСсылка.Ограничения.Выгрузить();
				
				ПредставлениеПолномочий = Новый Массив;
				Для Каждого СтрокаПолномочия Из Полномочия Цикл
					
					ПредставлениеПолномочия = ?(ЗначениеЗаполнено(СтрокаПолномочия.Наименование),
					СтрокаПолномочия.Наименование, СтрокаПолномочия.Код);
					
					МассивОграничений = Новый Массив;
					Найдено = Ограничения.НайтиСтроки(
					Новый Структура("ИдентификаторПолномочия", СтрокаПолномочия.ИдентификаторПолномочия));
					
					Для Каждого СтрокаОграничение Из Найдено Цикл
						Массив = Новый Массив;
						Если ЗначениеЗаполнено(СтрокаОграничение.Наименование) Тогда
							Массив.Добавить(СтрокаОграничение.Наименование + ":");
						ИначеЕсли ЗначениеЗаполнено(СтрокаОграничение.Код) Тогда
							Массив.Добавить(СтрокаОграничение.Код + ":");
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОграничение.НаименованиеЗначения) Тогда
							Массив.Добавить(СтрокаОграничение.НаименованиеЗначения);
						ИначеЕсли ЗначениеЗаполнено(СтрокаОграничение.КодЗначения) Тогда
							Массив.Добавить(СтрокаОграничение.КодЗначения);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОграничение.ТекстовоеЗначение) Тогда
							Массив.Добавить(СтрокаОграничение.ТекстовоеЗначение);
						КонецЕсли;
						МассивОграничений.Добавить(СтрСоединить(Массив, " "));
					КонецЦикла;
					
					Если ПустаяСтрока(ПредставлениеПолномочия) Тогда
						ПредставлениеПолномочия = НСтр("ru = '<Не заполнено>'");
					КонецЕсли;
					
					ПредставлениеПолномочия = ПредставлениеПолномочия + ?(МассивОграничений.Количество()>0,
					Символы.ПС + Символы.Таб + СтрСоединить(МассивОграничений, Символы.ПС + Символы.Таб), "");
					
					ПредставлениеПолномочий.Добавить(ПредставлениеПолномочия);
					
				КонецЦикла;
				
				СтрокаСписка.Значение.Данные.ТекстПолномочий = СтрСоединить(ПредставлениеПолномочий, ";" + Символы.ПС);
				
				ВыборкаСсылка.Сбросить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Настройки.ПараметрыДанных.Элементы.Найти("СтатусВДругомРеестре").Значение = "НетСтатусов" Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКолонкаСтатус = Ложь;
	ЕстьКолонкаИндекс = Ложь;
	
	Для Каждого Строка Из Строки Цикл
		ЕстьКолонкаСтатус = Строка.Значение.Данные.Свойство("СтатусВДругомРеестре");
		ЕстьКолонкаИндекс = Строка.Значение.Данные.Свойство("ИндексСтатусаВДругомРеестре");
		Прервать;
	КонецЦикла;
	
	Если Не ЕстьКолонкаСтатус И Не ЕстьКолонкаИндекс Тогда
		Возврат;
	КонецЕсли;
	
	Доверенности = Новый Соответствие;
	МассивДоверенностей = Строки.ПолучитьКлючи();
	
	МашиночитаемыеДоверенностиФНСПереопределяемый.ПриПолученииСтатусов(МассивДоверенностей, Доверенности);
	
	Если Доверенности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл
		Статус = Доверенности[Строка.Значение.Данные.Ссылка];
		Если Статус = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЕстьКолонкаСтатус Тогда
			Строка.Значение.Данные.СтатусВДругомРеестре = Статус.Статус;
		КонецЕсли;
		Если ЕстьКолонкаИндекс Тогда
			Строка.Значение.Данные.ИндексСтатусаВДругомРеестре = Статус.ИндексКартинки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	МашиночитаемыеДоверенностиФНССлужебныйКлиент.ВыгрузитьДоверенностиВФайлы(Элементы.Список.ВыделенныеСтроки);
КонецПроцедуры  

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
	
	Если ЗначениеЗаполнено(РезультатАвторизации.Ошибка) Тогда
		
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.ДиалогВосклицание;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Загрузка доверенности из файла'");
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Загрузить",  НСтр("ru = 'Загрузить доверенность'"));
		Кнопки.Добавить("Отменить", НСтр("ru = 'Отменить загрузку'"));
		Кнопки.Добавить("ПоказатьОшибку",      НСтр("ru = 'Подробности...'"));
		
		ТекстОшибки = НСтр("ru = 'Нет возможности проверить доверенность в распределенном реестре, доверенность будет загружена без признака ""Зарегистрирована в реестре ФНС""'");
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗагрузкеДоверенности", ЭтотОбъект, РезультатАвторизации.Ошибка);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстОшибки, Кнопки, ПараметрыВопроса);
		
		Возврат;
	КонецЕсли;
	
	ПослеОтветаНаВопросОЗагрузкеДоверенности(Новый Структура("Значение", "Загрузить"), Неопределено);
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция АвторизоватьсяНаСервереМЧДРР()
	Возврат МашиночитаемыеДоверенностиФНССлужебный.АвторизоватьсяНаСервереМЧДРР();
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзРеестраФНС(Команда)
	ПослеЗагрузкиДоверенности = Новый ОписаниеОповещения("ПослеЗагрузкиДоверенности", ЭтотОбъект);
	МашиночитаемыеДоверенностиФНССлужебныйКлиент.ПолучитьДоверенностьИзРеестраФНС(ПослеЗагрузкиДоверенности);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусИзРеестраФНС(Команда)
	ДлительнаяОперация = ПолучитьСтатусНаСервере();
	Контекст = Новый Структура("ВыделенныеСтроки", Элементы.Список.ВыделенныеСтроки);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПолученияСтатуса", ЭтотОбъект, Контекст);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';Запрашивается статус для %1 документа;;Запрашивается статус для %1 документов;Запрашивается статус для %1 документов;|Запрашивается статус для %1 документов'"), 
		Контекст.ВыделенныеСтроки.Количество(),, "ЧДЦ=0");
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Обновление статусов из Реестра ФНС'"),
		,
		ТекстСообщения,
		БиблиотекаКартинок.ДиалогИнформация,
		СтатусОповещенияПользователя.Информация);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗагрузкеДоверенности(Результат, Ошибка) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ПоказатьОшибку" Тогда
		
		КонтекстОшибки = МашиночитаемыеДоверенностиФНССлужебныйКлиент.КонтекстДляОбработкиОшибкиРР();
		КонтекстОшибки.ЗаголовокПредупреждения = Ошибка.ЗаголовокОшибки;
		КонтекстОшибки.Форма = ЭтотОбъект;
		МашиночитаемыеДоверенностиФНССлужебныйКлиент.ОбработатьОшибкуВзаимодействияРР(Ошибка, КонтекстОшибки);
		
		Возврат;
	
	КонецЕсли;

	Если Результат.Значение <> "Загрузить" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Загрузка доверенности из файла'");
	ПараметрыЗагрузки.Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы доверенностей (%1)|%1'"), "*.xml;*.p7s;*.sig;*.zip");
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗагрузкеФайлов", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(Знач ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьОтбор()
	
	Если ЗначениеЗаполнено(Параметры.НаДату) Тогда
		ТекущаяДатаСеанса = КонецДня(Параметры.НаДату);
	Иначе
		ТекущаяДатаСеанса = КонецДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Действует", Истина, ВидСравненияКомпоновкиДанных.Равно,,ТолькоДействующие);
	
	ВсеОтборыПоПолям = ВсеОтборыПоПолям();
	
	НастроитьОтборыДляУчастника(ВсеОтборыПоПолям, Доверитель, "Доверитель", ОтборПоДоверителю);
	НастроитьОтборыДляУчастника(ВсеОтборыПоПолям, Представитель, "Представитель", ОтборПоПредставителю);
	
	НастроитьОтборыСертификата(ВсеОтборыПоПолям, СертификатПредставителя, Истина);
	НастроитьОтборыСертификата(ВсеОтборыПоПолям, СертификатДоверителя, Ложь);
	
	Для Каждого ЭлементОтбора Из ВсеОтборыПоПолям Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ЭлементОтбора.Значение <> Неопределено);
	КонецЦикла;
	
	УстановитьОтборСоСтрокойПоиска(Полномочия, "Полномочия");
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", ТекущаяДатаСеанса);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВидимостьПолномочий", Элементы.ПолномочияДоверенности.Видимость);
	
	Если ОтборПоСостоянию = "СИстекающимСрокомДействия" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ДатаОкончания", ТекущаяДатаСеанса, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Список.Отбор, "ДатаОкончания", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
			МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ДатаОкончанияПериодаИстекающихДоверенностей(ТекущаяДатаСеанса));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", ПредопределенноеЗначение("Перечисление.СтатусыМЧД.Действует"), ВидСравненияКомпоновкиДанных.Равно);
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (с истекающим сроком)'"), Заголовок);
	ИначеЕсли ОтборПоСостоянию = "ТребуютВнимания" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ДатаОкончания", ТекущаяДатаСеанса, ВидСравненияКомпоновкиДанных.Больше);
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.ТехническиеСтатусыМЧД.ОшибкаРегистрации"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.ТехническиеСтатусыМЧД.Регистрация"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.ТехническиеСтатусыМЧД.РегистрацияОтмены"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ТехническийСтатус", МассивСтатусов, ВидСравненияКомпоновкиДанных.ВСписке);
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (требуют внимания)'"), Заголовок);
	ИначеЕсли ОтборПоСостоянию = "ОжидаютПодписания" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ДатаОкончания", ТекущаяДатаСеанса, ВидСравненияКомпоновкиДанных.Больше);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", ПредопределенноеЗначение("Перечисление.СтатусыМЧД.Черновик"), ВидСравненияКомпоновкиДанных.Равно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Подписана", Ложь, ВидСравненияКомпоновкиДанных.Равно);
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (ожидают подписания)'"), Заголовок);
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СрокИстекающихДоверенностей",
		МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ДатаОкончанияПериодаИстекающихДоверенностей(ТекущаяДатаСеанса));
КонецПроцедуры    

&НаКлиенте
Процедура УстановитьОтборСоСтрокойПоиска(Значение, ИмяПоля)
	
	Отбор = Новый Структура("Значение,СтрокаПоиска");
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Отбор.СтрокаПоиска = "%"+СформироватьСтрокуДляПоискаВЗапросе(Значение)+"%"; 
		Иначе
			Отбор.Значение = Значение;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		ИмяПоляОтбора = ?(ЭлементОтбора.Ключ = "Значение", ИмяПоля, ИмяПоля+ЭлементОтбора.Ключ);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, ИмяПоляОтбора, ЭлементОтбора.Значение, ЗначениеЗаполнено(ЭлементОтбора.Значение));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборыДляУчастника(ВсеОтборыПоПолям, Значение, ИмяПоля, ОтборПоУчастнику)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если ЗначениеЗаполнено(ОтборПоУчастнику) Тогда
				Отбор = Новый Структура(ИмяПоля + ОтборПоУчастнику.ЛевоеЗначение, ОтборПоУчастнику.ПравоеЗначение);
			Иначе
				Отбор = Новый Структура(ИмяПоля + "СтрокаПоиска", "%"+СформироватьСтрокуДляПоискаВЗапросе(Значение)+"%");
			КонецЕсли;
		Иначе
			Отбор = ОтборДляСправочника(ИмяПоля, Значение);
		КонецЕсли;
	Иначе
		Отбор = Новый Структура(ИмяПоля + "СтрокаПоиска," + ИмяПоля + "НаименованиеОрганизации," + ИмяПоля + "ФИО," + ИмяПоля + "ИНН," + ИмяПоля + "ИННФЛ," + ИмяПоля + "СНИЛС," + ИмяПоля +"ОГРН," + ИмяПоля +"КПП");
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Если Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
			ВсеОтборыПоПолям.Вставить(ЭлементОтбора.Ключ, Неопределено);
		Иначе
			ВсеОтборыПоПолям.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборДляСправочника(ИмяПоля, Значение)
    Возврат МашиночитаемыеДоверенностиФНССлужебный.ОтборДляСправочника(ИмяПоля, Значение)
КонецФункции

&НаСервереБезКонтекста
Функция ФизическоеЛицоПользователя(Знач АвторизованныйПользователь)
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АвторизованныйПользователь, "ФизическоеЛицо, Наименование");
	ФизическоеЛицо = Реквизиты.ФизическоеЛицо;
	Если Не ЗначениеЗаполнено(Реквизиты.ФизическоеЛицо) Тогда
		ФизическоеЛицо = Реквизиты.Наименование;
	КонецЕсли;
	Возврат ФизическоеЛицо;
КонецФункции 

&НаСервереБезКонтекста
Функция СформироватьСтрокуДляПоискаВЗапросе(Знач Значение)
	Возврат ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Значение);
КонецФункции  

&НаКлиенте
Процедура ПослеЗагрузкиДоверенности(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Или Не ЗначениеЗаполнено(Результат.Доверенность) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.Обновить();
	Элементы.Список.ВыделенныеСтроки.Очистить();

	Для Каждого Ссылка Из Результат.ЦепочкаДоверенностей Цикл
		Элементы.Список.ВыделенныеСтроки.Добавить(Ссылка);
	КонецЦикла;
	
	Элементы.Список.ТекущаяСтрока = Результат.Доверенность;
	
	Если Результат.ЦепочкаДоверенностей.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, Результат.Доверенность);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Загрузка завершена'"),
			ПолучитьНавигационнуюСсылку(Результат.Доверенность),
			Результат.Доверенность,
			БиблиотекаКартинок.ДиалогИнформация,
			СтатусОповещенияПользователя.Информация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусНаСервере()
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "МашиночитаемыеДоверенностиФНССлужебный.ОбновитьИПрочитатьСтатусДоверенностей", Элементы.Список.ВыделенныеСтроки);
КонецФункции

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ПослеПолученияСтатуса(Результат, Контекст) Экспорт
	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(
			Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	СостоянияДоверенностей = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	СОшибками = 0;
	
	Для Каждого СостояниеДоверенности Из СостоянияДоверенностей Цикл
		СОшибками = СОшибками + (СостояниеДоверенности.Значение.ДанныеОшибкиЗапросаСтатуса <> Неопределено);
		ОповеститьОбИзменении(СостояниеДоверенности.Ключ);
	КонецЦикла;
	
	Если СОшибками = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Успешно загружен статус для %1 доверенностей'"), СостоянияДоверенностей.Количество());
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Успешно: %1, с ошибками: %2'"), СостоянияДоверенностей.Количество() - СОшибками, СОшибками);
	КонецЕсли;
	Контекст = Новый Структура("Доверенности", СостоянияДоверенностей);
	
	ОткрытьСписокСобытий = Новый ОписаниеОповещения("ОткрытьСписокСобытий", ЭтотОбъект, Контекст);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Получение статуса завершено'"),
		ОткрытьСписокСобытий,
		ТекстСообщения,
		БиблиотекаКартинок.ДиалогИнформация,
		СтатусОповещенияПользователя.Информация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗагрузкеФайлов(ЗагруженныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗагруженныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ИмеющиесяДоверенности = НомераСуществующихДоверенностейВИнформационнойБазе(ЗагруженныеФайлы);

	Если ЗначениеЗаполнено(ИмеющиесяДоверенности) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Пропустить", НСтр("ru = 'Пропустить'"));
		Кнопки.Добавить("Заменить", НСтр("ru = 'Заменить'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииДиалогаЗамены", ЭтотОбъект, ЗагруженныеФайлы);
		
		Если ИмеющиесяДоверенности.Количество() = 1 Тогда
			ШаблонВопроса = НСтр("ru = 'Следующая доверенность уже существует:
				|
				|%1'");
		Иначе
			ШаблонВопроса = НСтр("ru = 'Следующие доверенности уже существуют:
				|
				|%1'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонВопроса, СтрСоединить(ИмеющиесяДоверенности, Символы.ПС + Символы.ПС)),
			Кнопки, , "Пропустить");
		Возврат;
	КонецЕсли; 
	
	ПродолжитьЗаписьДоверенностейВИнформационнуюБазу(ЗагруженныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииДиалогаЗамены(ВыбранноеДействие, ЗагруженныеФайлы) Экспорт
	
	Если ВыбранноеДействие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьЗаписьДоверенностейВИнформационнуюБазу(ЗагруженныеФайлы, ВыбранноеДействие = "Заменить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаписьДоверенностейВИнформационнуюБазу(ЗагруженныеФайлы, Замещать = Ложь)
	
	РезультатЗагрузки = ЗагрузитьДоверенностиИзФайлов(ЗагруженныеФайлы, Замещать);
	ЗагруженныеДоверенности = РезультатЗагрузки.Доверенности;
	
	Элементы.Список.Обновить();
	Элементы.Список.ВыделенныеСтроки.Очистить();
	
	Для Каждого Ссылка Из ЗагруженныеДоверенности Цикл
		Элементы.Список.ВыделенныеСтроки.Добавить(Ссылка);
	КонецЦикла;
	
	Если ЗагруженныеДоверенности.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = ЗагруженныеДоверенности[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки) Тогда
		ВызватьИсключение РезультатЗагрузки.ТекстОшибки;
	КонецЕсли;
	
	Если ЗагруженныеДоверенности.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ЗагруженныеДоверенности[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НомераСуществующихДоверенностейВИнформационнойБазе(Знач ЗагруженныеФайлы)
	
	НайденныеДубликаты = Справочники.МашиночитаемыеДоверенности.НайтиДубликатыДоверенностейВИнформационнойБазе(ЗагруженныеФайлы);
	
	Результат = Новый Массив;
	Для Каждого Элемент Из НайденныеДубликаты Цикл
		Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (№%2)'"),
			Строка(Элемент.Значение),
			Элемент.Ключ));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗагрузитьДоверенностиИзФайлов(Знач ЗагруженныеФайлы, Знач Замещать)
	
	Возврат Справочники.МашиночитаемыеДоверенности.ЗагрузитьДоверенностиВИнформационнуюБазу(ЗагруженныеФайлы, Замещать);
	
КонецФункции

&НаКлиенте
Процедура ОчисткаОтбора(ИмяПоля)
	ЭтотОбъект[ИмяПоля] = "";
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПолномочий(Результат, Контекст) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Полномочия = Новый СписокЗначений;
	Для Каждого Полномочие Из Результат.Полномочия Цикл
		Полномочия.Добавить(Полномочие.Код, Полномочие.Наименование);
	КонецЦикла;
	
	УстановитьПредставлениеПолномочий();
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСобытий(Контекст) Экспорт
	ОткрытьФорму("РегистрСведений.МашиночитаемыеДоверенностиСтатусы.Форма.СписокРезультатов",Контекст,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеПолномочий()
	Если ЗначениеЗаполнено(Полномочия) Тогда
		Если ТипЗНЧ(Полномочия) = Тип("Строка") Тогда
			КоличествоПолномочий = 1;
		Иначе
			КоличествоПолномочий = Полномочия.Количество();
		КонецЕсли;         
		ПолномочияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отбор по полномочиям (%1)'"), КоличествоПолномочий);
	Иначе
		ПолномочияПредставление = НСтр("ru='Любые полномочия'");
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтборДляДоверенностейПоСертификату(Знач Сертификат, Знач Представитель)
	
	Если Представитель Тогда
		Префикс = "Представитель";
	Иначе
		Префикс = "Доверитель";
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		ДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "ДанныеСертификата");
		Возврат МашиночитаемыеДоверенностиФНС.ОтборДляДоверенностейПоСертификату(ДанныеСертификата.Получить(), Префикс);
	Иначе
		Возврат МашиночитаемыеДоверенностиФНС.ОтборДляДоверенностейПоСертификату(Сертификат, Префикс);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВсеОтборыПоПолям()
	Отбор = Новый Структура;
	КорниОтбора = СтрРазделить("Представитель,Доверитель", ",");
	СуффиксыОтбора = СтрРазделить("ОГРН,ИННФЛ,ИНН,СНИЛС,КПП,СтрокаПоиска,ФИО,НаименованиеОрганизации", ",");
	Для Каждого КореньОтбора Из КорниОтбора Цикл
		Для Каждого СуффиксОтбора Из СуффиксыОтбора Цикл
			Отбор.Вставить(КореньОтбора + СуффиксОтбора);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Отбор;
КонецФункции

&НаКлиенте
Процедура НастроитьОтборыСертификата(ВсеОтборыПоПолям, СертификатОтбора, Представитель)
	
	Если ЗначениеЗаполнено(СертификатОтбора) Тогда
		Если ТипЗнч(СертификатОтбора) = Тип("Структура") Тогда
			Отборы = Новый Структура;
			ТипСтороны = ?(Представитель, "Представитель", "Доверитель");
			Для Каждого ЭлементОтбора Из СертификатОтбора Цикл
				Отборы.Вставить(ТипСтороны + ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
		Иначе
			Отборы = ОтборДляДоверенностейПоСертификату(СертификатОтбора, Представитель);
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из Отборы Цикл
			Если Не ВсеОтборыПоПолям.Свойство(ЭлементОтбора.Ключ)Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементОтбора.Значение = Неопределено Тогда
				Если Не ЗначениеЗаполнено(ВсеОтборыПоПолям[ЭлементОтбора.Ключ]) Тогда
					ВсеОтборыПоПолям[ЭлементОтбора.Ключ] = Неопределено;
				КонецЕсли;
			Иначе
				ВсеОтборыПоПолям[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СертификатОкончаниеВыбора(Результат, Контекст) Экспорт
	Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		СвойстваСертификата = Ждать ЭлектроннаяПодписьСлужебныйКлиент.СвойстваСертификата(Новый СертификатКриптографии(Результат));
		Сертификат = СвойстваСертификата.Представление;
		СертификатПредставителя = Результат;
	Иначе
		Сертификат = Неопределено;
		СертификатПредставителя = Неопределено;
	КонецЕсли;
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Функция ПодходящиеЗначенияУниверсальногоПоиска(Запрос, ИмяЭлемента)

	ПодходящиеЗначения = Новый СписокЗначений;
	МаксимальноеКоличествоПодходящихЗначений = 48;
	ПараметрыПоиска = ПараметрыУниверсальногоПоиска(Запрос);

	Если Не ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда
		Возврат ПодходящиеЗначения;
	КонецЕсли;
	
	ПоляПоискаПоТипам = ПоляУниверсальногоПоискаПоТипам();
	НайтиПодходящиеЗначенияУниверсальногоПоиска(ПодходящиеЗначения, ПоляПоискаПоТипам, ПараметрыПоиска, ИмяЭлемента);
	
	Если ПодходящиеЗначения.Количество() = 0 Тогда

		Если СтрДлина(ПараметрыПоиска.СтрокаПоиска) > 2 Тогда
			СообщениеФорматированное = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				НСтр("ru = '<span style=""color: %1; font: %2"">%3</span> нет в списках'"),
				"РезультатУспехЦвет", "ВажнаяНадписьШрифт",
				ПараметрыПоиска.СтрокаПоиска);
		Иначе
			Сообщение = НСтр("ru = 'Продолжите ввод...'");
			СообщениеФорматированное = Новый ФорматированнаяСтрока(Сообщение, , WebЦвета.НейтральноСерый);
		КонецЕсли;
	
		ПодходящиеЗначения.Добавить("", СообщениеФорматированное);

	КонецЕсли;

	Если ПодходящиеЗначения.Количество() <= МаксимальноеКоличествоПодходящихЗначений Тогда
		Возврат ПодходящиеЗначения;
	КонецЕсли;

	ПодходящиеЗначенияНормализованные = Новый СписокЗначений;

	Для НомерЭлемента = 1 По МаксимальноеКоличествоПодходящихЗначений Цикл
		ЗаполнитьЗначенияСвойств(ПодходящиеЗначенияНормализованные.Добавить(), ПодходящиеЗначения[НомерЭлемента - 1]);
	КонецЦикла;

	Возврат ПодходящиеЗначенияНормализованные;

КонецФункции

&НаКлиенте
Функция ПараметрыУниверсальногоПоиска(Запрос)

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("СтрокаПоиска", Запрос);
	ПараметрыПоиска.Вставить("СтрокаПоискаНормализованная", Запрос);

	ПараметрыПоиска.СтрокаПоискаНормализованная = СтрЗаменить(ПараметрыПоиска.СтрокаПоиска, """", "_");

	Возврат ПараметрыПоиска;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска)

	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	""&ПолноеИмяОбъекта"" КАК ПолноеИмяОбъекта,
	|	Ссылка КАК Ссылка,
	|	&ДополнительныеДанные КАК ДополнительныеДанные
	|ИЗ
	|	&ПолноеИмяОбъекта
	|ГДЕ
	|	&Условие
	|";

	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПолноеИмяОбъекта", Объект.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", УсловиеТекстаЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска));

	Возврат СтрЗаменить(ТекстЗапроса, "&ДополнительныеДанные", ДополнительныеДанныеТекстаЗапросаПоОбъектуПоиска(Объект));

КонецФункции

&НаСервереБезКонтекста
Процедура НайтиПодходящиеЗначенияУниверсальногоПоиска(ПодходящиеЗначения, ПоляПоискаПоТипам, ПараметрыПоиска, ИмяЭлемента)

	Если Не ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;

	ТекстыЗапросов = Новый Массив;
	Для Каждого Элемент Из ПоляПоискаПоТипам Цикл

		Если Не ОбщегоНазначения.ЭтоСсылка(Элемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;

		ОбъектМетаданных = Метаданные.НайтиПоТипу(Элемент.Ключ);
		
		Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;

		ТекстЗапроса = ТекстЗапросаПоОбъектуПоиска(ОбъектМетаданных, ПараметрыПоиска);
		Если ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ"); // @query-part-1, @query-part-2
		КонецЕсли;
		ТекстыЗапросов.Добавить(ТекстЗапроса);

	КонецЦикла;

	Если ТекстыЗапросов.Количество() = 0 Тогда
		ДополнитьСписокПолямиДоверенности(ПодходящиеЗначения, ПараметрыПоиска, ИмяЭлемента);
		Возврат;
	КонецЕсли;

	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС); // @query-part
	Запрос = Новый Запрос(ТекстЗапроса);

	Выборка = Запрос.Выполнить().Выбрать();

	ИндексВариантовПоиска = Новый Соответствие;
	ИндексПредставленийПоиска = Новый Соответствие;

	Пока Выборка.Следующий() Цикл

		ПоляПоиска = ПоляПоискаПоТипам[ТипЗнч(Выборка.Ссылка)];
		Для Каждого ПолеПоиска Из ПоляПоиска Цикл

			СвойстваПоиска = СвойстваУниверсальногоПоиска(ПолеПоиска.Ключ, Выборка.Ссылка);
			ВариантыПоиска = ИндексВариантовПоиска[СвойстваПоиска.ПравоеЗначение];
			Если ВариантыПоиска = Неопределено Тогда

				ПредставлениеПоиска = ПредставлениеУниверсальногоПоискаСсылки(
					Выборка, ПолеПоиска.Значение, СвойстваПоиска.ВидСравнения, ПараметрыПоиска.СтрокаПоиска);

				ИндексПредставленийПоиска.Вставить(СвойстваПоиска.ПравоеЗначение, ПредставлениеПоиска);
				ВариантыПоиска = Новый Массив;

			КонецЕсли;

			ВариантыПоиска.Добавить(СвойстваПоиска);
			ИндексВариантовПоиска.Вставить(СвойстваПоиска.ПравоеЗначение, ВариантыПоиска);

		КонецЦикла;

	КонецЦикла;

	Для Каждого ИндексЗначения Из ИндексВариантовПоиска Цикл
		ПодходящиеЗначения.Добавить(ИндексЗначения.Значение, ИндексПредставленийПоиска[ИндексЗначения.Ключ]);
	КонецЦикла;

	ПодходящиеЗначения.СортироватьПоПредставлению();
	ДополнитьСписокПолямиДоверенности(ПодходящиеЗначения, ПараметрыПоиска, ИмяЭлемента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСписокПолямиДоверенности(ПодходящиеЗначения, ПараметрыПоиска, ИмяЭлемента)

	ПоляДоверенности = СтрРазделить("ИНН,ИННФЛ,ОГРН,СНИЛС,КПП,НаименованиеОрганизации,ФИО", ",");
	ПараметрыПоискаТолькоЦифры = Неопределено;
	ТолькоЦифры = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ТолькоЦифры(ПараметрыПоиска.СтрокаПоискаНормализованная);
	Если Не ПустаяСтрока(ТолькоЦифры) И ТолькоЦифры <> ПараметрыПоиска.СтрокаПоискаНормализованная Тогда
		ПараметрыПоискаТолькоЦифры = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПоиска);
		ПараметрыПоискаТолькоЦифры.СтрокаПоискаНормализованная = ТолькоЦифры;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;

	Для Каждого Поле Из ПоляДоверенности Цикл
		
		ТекстЗапроса = ТекстЗапросаПоПолюПоиска(Поле, ПараметрыПоиска, ИмяЭлемента);
		Если ТекстыЗапросов.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ"); // @query-part-1, @query-part-2
		КонецЕсли;
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Если ПараметрыПоискаТолькоЦифры <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапросаПоПолюПоиска(Поле, ПараметрыПоискаТолькоЦифры, ИмяЭлемента);
			Если ТекстыЗапросов.Количество() > 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ"); // @query-part-1, @query-part-2
			КонецЕсли;
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;

	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС); // @query-part
	Запрос = Новый Запрос(ТекстЗапроса);

	Выборка = Запрос.Выполнить().Выбрать();

	ИндексВариантовПоиска = Новый Соответствие;
	ИндексПредставленийПоиска = Новый Соответствие;

	Пока Выборка.Следующий() Цикл
	
		СвойстваПоиска = СвойстваУниверсальногоПоиска(Выборка.Поле, Выборка.ЗначениеПоля);
		ВариантыПоиска = ИндексВариантовПоиска[СвойстваПоиска.ПравоеЗначение];
		Если ВариантыПоиска = Неопределено Тогда
			
			ПредставлениеПоиска = ПредставлениеУниверсальногоПоискаПоля(
				Выборка.ЗначениеПоля, Выборка.Поле, СвойстваПоиска.ВидСравнения, ПараметрыПоиска.СтрокаПоиска, ТолькоЦифры);
			
			ИндексПредставленийПоиска.Вставить(СвойстваПоиска.ПравоеЗначение, ПредставлениеПоиска);
			
			ВариантыПоиска = Новый Массив;
			
		КонецЕсли;
		
		ВариантыПоиска.Добавить(СвойстваПоиска);
		ИндексВариантовПоиска.Вставить(СвойстваПоиска.ПравоеЗначение, ВариантыПоиска);
		
	КонецЦикла;

	Для Каждого ИндексЗначения Из ИндексВариантовПоиска Цикл
		ПодходящиеЗначения.Добавить(ИндексЗначения.Значение, ИндексПредставленийПоиска[ИндексЗначения.Ключ]);
	КонецЦикла;

	ПодходящиеЗначения.СортироватьПоПредставлению();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаПоПолюПоиска(Поле, ПараметрыПоиска, ИмяЭлемента)
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	""&ИмяПоля"" КАК Поле,
	|	&ЗначениеПоля КАК ЗначениеПоля
	|ИЗ
	|	РегистрСведений.МашиночитаемыеДоверенностиПредставителиИДоверители КАК МашиночитаемыеДоверенностиПредставителиИДоверители
	|ГДЕ
	|	&Условие
	|	И МашиночитаемыеДоверенностиПредставителиИДоверители.ТипУчастника = &ТипУчастника";
	
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоля", Поле);
	ИмяПоля = "МашиночитаемыеДоверенностиПредставителиИДоверители." + Поле;
	Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ВЫРАЗИТЬ(%1 КАК СТРОКА(150)) ПОДОБНО %2 СПЕЦСИМВОЛ ""~""", ИмяПоля, """%"
		+ ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ПараметрыПоиска.СтрокаПоискаНормализованная)
		+ "%""");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", Условие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗначениеПоля", ИмяПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипУчастника", "Значение(Перечисление.ТипыУчастниковМЧД." + ИмяЭлемента + ")");
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция ПоляУниверсальногоПоискаПоТипам()

	ПоляПоискаПоТипам = Новый Соответствие;
	
	Типы = Метаданные.ОпределяемыеТипы.СторонаМЧД.Тип.Типы();
	Для Каждого Тип Из Типы Цикл
		
		ПоляПоТипу = ПоляПоискаПоТипам[Тип];
		Если ПоляПоТипу = Неопределено Тогда
			ПоляПоТипу = Новый Соответствие;
		КонецЕсли;
		
		ПоляПоТипу.Вставить(Тип, Строка(Тип));
		ПоляПоискаПоТипам.Вставить(Тип, ПоляПоТипу);
		
	КонецЦикла;
	
	Возврат ПоляПоискаПоТипам;

КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
//  ПараметрыПоиска - Структура:
//    * СтрокаПоискаНормализованная - Строка
// 
// Возвращаемое значение:
//  Строка
//
&НаСервереБезКонтекста
Функция УсловиеТекстаЗапросаПоОбъектуПоиска(Объект, ПараметрыПоиска)

	Условия = Новый Массив;
	Поля = Объект.ВводПоСтроке; // СписокПолей

	ИменаПолей = Новый Массив;
	Для Каждого Поле Из Поля Цикл
		ИменаПолей.Добавить(Поле.Имя);
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл

		ТипРеквизита = ТипРеквизитаПоиска(Объект, ИмяПоля);
		Если ТипРеквизита.СодержитТип(Тип("Строка")) Тогда

			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫРАЗИТЬ(%1 КАК СТРОКА(150)) ПОДОБНО %2 СПЕЦСИМВОЛ ""~""", ИмяПоля, """%"
				+ ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(ПараметрыПоиска.СтрокаПоискаНормализованная)
				+ "%""");
		Иначе
			Продолжить;
		КонецЕсли;

		Условия.Добавить(Условие);

	КонецЦикла;

	Если Условия.Количество() = 0 Тогда
		Возврат "ЛОЖЬ";
	КонецЕсли;

	Возврат СтрСоединить(Условия, " ИЛИ "); //@query-part

КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Строка
//
&НаСервереБезКонтекста
Функция ДополнительныеДанныеТекстаЗапросаПоОбъектуПоиска(Объект)

	ДополнительныеДанные = Новый Массив;

	Исключения = Новый Массив;
	Исключения.Добавить("Наименование");
	Исключения.Добавить("Номер");

	Поля = Объект.ВводПоСтроке; // СписокПолей

	Для Каждого Поле Из Поля Цикл

		Если Исключения.Найти(Поле.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ТипРеквизита = ТипРеквизитаПоиска(Объект, Поле.Имя);

		Если Не ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;

		Данные = """" + ПредставлениеПоля(Поле.Имя, Объект) + ": "" + " + Поле.Имя;
		ДополнительныеДанные.Добавить(Данные);

	КонецЦикла;

	Если ДополнительныеДанные.Количество() = 0 Тогда
		Возврат """""";
	КонецЕсли;

	Возврат СтрСоединить(ДополнительныеДанные, " + "", """);

КонецФункции

// Параметры:
//  Объект - ОбъектМетаданных
//  ИмяПоля - Строка
// 
// Возвращаемое значение:
//  - ОписаниеТипов
//
&НаСервереБезКонтекста
Функция ТипРеквизитаПоиска(Объект, ИмяПоля)

	Для Каждого ОписаниеРеквизита Из Объект.СтандартныеРеквизиты Цикл

		Если ОписаниеРеквизита.Имя = ИмяПоля Тогда
			Возврат ОписаниеРеквизита.Тип;
		КонецЕсли;

	КонецЦикла;

	ОписаниеРеквизита = Объект.Реквизиты.Найти(ИмяПоля);

	Если ОписаниеРеквизита <> Неопределено Тогда
		Возврат ОписаниеРеквизита.Тип;
	КонецЕсли;

	Возврат Новый ОписаниеТипов;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПоля(ИмяПоля, Объект)
	
	РеквизитОбъекта = Объект.Реквизиты.Найти(ИмяПоля);
	
	Если РеквизитОбъекта = Неопределено Тогда
		Для каждого СтандартныйРеквизит Из Объект.СтандартныеРеквизиты Цикл
			Если СтрСравнить(СтандартныйРеквизит.Имя, ИмяПоля) = 0 Тогда
				РеквизитОбъекта = СтандартныйРеквизит;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитОбъекта <> Неопределено Тогда
		Возврат РеквизитОбъекта.Представление();
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваУниверсальногоПоиска(ПолеПоиска, ЗначениеПоиска)

	Свойства = Новый Структура;
	Свойства.Вставить("Использование", Истина);
	Свойства.Вставить("ЛевоеЗначение", ПолеПоиска);
	Свойства.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Содержит);
	Свойства.Вставить("ПравоеЗначение", ЗначениеПоиска);

	Возврат Свойства;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеУниверсальногоПоискаСсылки(Данные, ПолеПоиска, Условие, СтрокаПоиска)

	ПредставлениеЗначения = Строка(Данные.Ссылка);
	
	Если ЗначениеЗаполнено(Данные.ДополнительныеДанные) Тогда
		ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"), Строка(Данные.Ссылка), Данные.ДополнительныеДанные);
	КонецЕсли;

	ФрагментУсловия = СтроковыеФункции.ФорматированнаяСтрока(ШаблонФрагментаУсловия(Условие));

	НачалоСтрокиПоиска = СтрНайти(ВРег(ПредставлениеЗначения), ВРег(СтрокаПоиска));
	КонецСтрокиПоиска = НачалоСтрокиПоиска + СтрДлина(СтрокаПоиска);
	ДлинаНайденногоФрагмента = ?(НачалоСтрокиПоиска = 0, 0, СтрДлина(СтрокаПоиска));

	ФрагментДоСтрокиПоиска = Лев(ПредставлениеЗначения, НачалоСтрокиПоиска - 1);
	ФрагментСтрокиПоиска = СтроковыеФункции.ФорматированнаяСтрока(ШаблонФрагментаСтрокиПоиска(
		Сред(ПредставлениеЗначения, НачалоСтрокиПоиска, ДлинаНайденногоФрагмента)));
	ФрагментПослеСтрокиПоиска = Сред(ПредставлениеЗначения, КонецСтрокиПоиска);

	Возврат Новый ФорматированнаяСтрока(ПолеПоиска, ФрагментУсловия, ФрагментДоСтрокиПоиска, ФрагментСтрокиПоиска,
		ФрагментПослеСтрокиПоиска);

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеУниверсальногоПоискаПоля(ПредставлениеЗначения, Знач ПолеПоиска, Условие, СтрокаПоиска, ТолькоЦифры)
	
	ФрагментУсловия = СтроковыеФункции.ФорматированнаяСтрока(ШаблонФрагментаУсловия(Условие));
	
	НачалоСтрокиПоиска = СтрНайти(ВРег(ПредставлениеЗначения), ВРег(СтрокаПоиска));
	Если НачалоСтрокиПоиска = 0 Тогда
		НачалоСтрокиПоиска = СтрНайти(ВРег(ПредставлениеЗначения), ТолькоЦифры);
	КонецЕсли;
	КонецСтрокиПоиска = НачалоСтрокиПоиска + СтрДлина(СтрокаПоиска);
	ДлинаНайденногоФрагмента = ?(НачалоСтрокиПоиска = 0, 0, СтрДлина(СтрокаПоиска));
	
	ФрагментДоСтрокиПоиска = Лев(ПредставлениеЗначения, НачалоСтрокиПоиска - 1);
	ФрагментСтрокиПоиска = СтроковыеФункции.ФорматированнаяСтрока(ШаблонФрагментаСтрокиПоиска(
		Сред(ПредставлениеЗначения, НачалоСтрокиПоиска, ДлинаНайденногоФрагмента)));
	ФрагментПослеСтрокиПоиска = Сред(ПредставлениеЗначения, КонецСтрокиПоиска);
	
	Если ПолеПоиска = "ИННФЛ" Тогда
		ПолеПоиска = НСтр("ru='ИНН ФЛ'");
	ИначеЕсли ПолеПоиска = "НаименованиеОрганизации" Тогда
		ПолеПоиска = НСтр("ru='Наименование'");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПолеПоиска, ФрагментУсловия, ФрагментДоСтрокиПоиска, ФрагментСтрокиПоиска,
		ФрагментПослеСтрокиПоиска);

КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ШаблонФрагментаУсловия(Условие)

	Возврат ": ";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонФрагментаСтрокиПоиска(СтрокаПоиска)

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '<span style=""color: %1; font: %2"">%3</span>'"), "РезультатУспехЦвет", "ВажнаяНадписьШрифт",
		СтрокаПоиска);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиФизическоеЛицо()
	Возврат НСтр("ru = '<нет связи пользователя с физическим лицом>'");
КонецФункции

#КонецОбласти