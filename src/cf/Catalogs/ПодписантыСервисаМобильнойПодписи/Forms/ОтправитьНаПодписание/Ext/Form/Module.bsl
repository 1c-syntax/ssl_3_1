///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля, ОписаниеДанных, ФормаОбъекта, ОбработкаПослеПредупреждения, ТекущийСписокПредставлений;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НовыйПараметрТипПодписи = Новый Структура;
	НовыйПараметрТипПодписи.Вставить("ТипыПодписи", Новый Массив);
	НовыйПараметрТипПодписи.Вставить("Видимость", Ложь);
	НовыйПараметрТипПодписи.Вставить("Доступность", Ложь);
	НовыйПараметрТипПодписи.Вставить("ВыборДоверенности", Ложь);
	НовыйПараметрТипПодписи.Вставить("ПакетнаяОтправкаНаПодписание", Неопределено);
	
	Если ТипЗнч(Параметры.ПараметрыПодписи) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(НовыйПараметрТипПодписи, Параметры.ПараметрыПодписи);
	КонецЕсли;
	
	УстановитьТипПодписи(НовыйПараметрТипПодписи);
	
	Если ЗначениеЗаполнено(Параметры.Подписант) Тогда
		СервисМобильнойПодписиСлужебный.ПодписантПриСозданииНаСервере(ЭтотОбъект, Параметры.Подписант);
		Если ЗначениеЗаполнено(Подписант) И Параметры.БезПодтверждения Тогда
			БезПодтверждения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьПредставлениеДанных();
	
	Элементы.Комментарий.Видимость = Параметры.ПоказатьКомментарий;
	
	// СтандартныеПодсистемы.МашиночитаемыеДоверенности
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Элементы.ГруппаДоверенность.Видимость = НовыйПараметрТипПодписи.ВыборДоверенности;
		Если НовыйПараметрТипПодписи.ВыборДоверенности Тогда
			ПодобратьДоверенностьПоПодписанту();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.МашиночитаемыеДоверенности
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВнутренниеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПредставлениеДанныхНажатие(ЭтотОбъект,
		Элемент, СтандартнаяОбработка, ТекущийСписокПредставлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантОткрытие(Элемент, СтандартнаяОбработка)
	
	СервисМобильнойПодписиКлиент.ПодписантПриОткрытии(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписантСоздание(Элемент, СтандартнаяОбработка)
	
	СервисМобильнойПодписиКлиент.ПодписантПриСоздании(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ЗаполнениеПроверено() Тогда
		Если Не Открыта() Тогда
			Открыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ФормаОтправить.Доступность Тогда
		Возврат;
	КонецЕсли;

	Элементы.ФормаОтправить.Доступность = Ложь;
	ОтправитьНаПодписание(Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЗаполнениеПроверено()
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Подписант) Тогда
		Если ЗначениеЗаполнено(ПараметрыПодписанта) Тогда
			Если Не ЗначениеЗаполнено(ПараметрыПодписанта.ИННФЛ) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен ИНН физического лица подписанта'"), ,"Подписант", , Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПараметрыПодписанта.НомерТелефона) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен телефон подписанта'"), ,"Подписант", , Отказ);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен подписант'"), ,"Подписант", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
КонецФункции 

&НаСервере
Процедура УстановитьТипПодписи(Знач ПараметрТипПодписи)
	
	Если ПараметрТипПодписи.ТипыПодписи.Количество() = 0 Тогда
		
		СписокТипов = Новый СписокЗначений;
		ЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(СписокТипов, "Подписание",
			Константы.ТипПодписиКриптографииПоУмолчанию.Получить());
		Для Каждого Элемент Из СписокТипов Цикл
			ПараметрТипПодписи.ТипыПодписи.Добавить(Элемент.Значение);
		КонецЦикла;
		
		ПараметрТипПодписи.Доступность = ПараметрТипПодписи.ТипыПодписи.Количество() <> 1;
		ПараметрТипПодписи.Видимость = ПараметрТипПодписи.ТипыПодписи.Количество() <> 1;
		
	КонецЕсли;
	
	Элементы.ТипПодписи.СписокВыбора.Очистить();
	Элементы.ТипПодписи.СписокВыбора.ЗагрузитьЗначения(ПараметрТипПодписи.ТипыПодписи);
	
	ТипПодписи = ПараметрТипПодписи.ТипыПодписи[0];
	
	Элементы.ТипПодписи.Видимость = ПараметрТипПодписи.Видимость;
	Элементы.ТипПодписи.Доступность = ПараметрТипПодписи.Доступность;
	
	Элементы.ПакетнаяОтправка.Видимость = ПараметрТипПодписи.ПакетнаяОтправкаНаПодписание = Неопределено;
	ПакетнаяОтправка = ПараметрТипПодписи.ПакетнаяОтправкаНаПодписание;
	
	Элементы.ГруппаДоверенность.Видимость = Ложь;
	
	Если Элементы.ТипПодписи.Видимость Тогда
		СписокТипов = Новый СписокЗначений;
		ЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(СписокТипов);
		
		ТекстПодсказки = Новый Массив;
		Для Каждого ЭлементСписка Из Элементы.ТипПодписи.СписокВыбора Цикл
			Найдено = СписокТипов.НайтиПоЗначению(ЭлементСписка.Значение);
			Если Найдено <> Неопределено Тогда
				ТекстПодсказки.Добавить(Найдено.Представление);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ТипПодписи.РасширеннаяПодсказка.Заголовок = СтрСоединить(ТекстПодсказки, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

// АПК:78-выкл: для безопасной передачи данных на клиенте между формами, не отправляя их на сервер.
&НаКлиенте
Процедура ПродолжитьОткрытие(Оповещение, ОбщиеВнутренниеДанные, КлиентскиеПараметры) Экспорт
// АПК:78-вкл: для безопасной передачи данных на клиенте между формами, не отправляя их на сервер.
	
	Если КлиентскиеПараметры = ВнутренниеДанные Тогда
		КлиентскиеПараметры = Новый Структура("Сертификат, СвойстваПароля", Подписант, СвойстваПароля);
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных             = КлиентскиеПараметры.ОписаниеДанных;
	Элементы.ПакетнаяОтправка.Видимость = Элементы.ПакетнаяОтправка.Видимость И ОписаниеДанных.НаборДанных.Количество() > 1;
	ФормаОбъекта               = КлиентскиеПараметры.Форма;
	ТекущийСписокПредставлений = КлиентскиеПараметры.ТекущийСписокПредставлений;
	
	ВнутренниеДанные = ОбщиеВнутренниеДанные;
	Контекст = Новый Структура("Оповещение", Оповещение);
	
	ОткрытьДляВыбораДоверенности = Ложь;
	Если ПоДоверенности И Не ЗначениеЗаполнено(МашиночитаемаяДоверенность) Тогда
		ОткрытьДляВыбораДоверенности = Истина;
	КонецЕсли;
	
	Если БезПодтверждения И Не ОткрытьДляВыбораДоверенности Тогда
		ОбработкаПослеПредупреждения = Неопределено;
		ОтправитьНаПодписание(Новый ОписаниеОповещения("ПродолжитьОткрытиеПослеПодписанияДанных", ЭтотОбъект, Контекст));
		Возврат;
	КонецЕсли;
	
	Открыть();
	
	ПродолжитьОткрытиеЗавершение(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПродолжитьОткрытие.
&НаКлиенте
Процедура ПродолжитьОткрытиеПослеПодписанияДанных(Результат, Контекст) Экспорт
	
	ПродолжитьОткрытиеЗавершение(Контекст, Результат = Истина);
	
КонецПроцедуры

// Продолжение процедуры ПродолжитьОткрытие.
&НаКлиенте
Процедура ПродолжитьОткрытиеЗавершение(Контекст, Результат = Неопределено)
	
	Если Не Открыта() Тогда
		ОчиститьПеременныеФормы();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременныеФормы()
	
	ОписаниеДанных             = Неопределено;
	ФормаОбъекта               = Неопределено;
	ТекущийСписокПредставлений = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПодписание(Оповещение)

	ОписаниеДанных.Вставить("ПользовательНажалКнопкуПодписать", Истина);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтправить.Доступность = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("Ошибка", Новый Структура);

	Если ЗначениеЗаполнено(Подписант) Тогда
		ОписаниеДанных.Вставить("Подписант", Подписант);
	ИначеЕсли ТипЗнч(ПараметрыПодписанта) = Тип("Структура") Тогда
		ОписаниеДанных.Вставить("Подписант", ПараметрыПодписанта);
	КонецЕсли;
	
	ОписаниеДанных.Вставить("ВыбраннаяДоверенность", МашиночитаемаяДоверенность);
	ОписаниеДанных.Вставить("ТипПодписи", ТипПодписи);
	
	Если ОписаниеДанных.Свойство("ПередВыполнением")
	   И ТипЗнч(ОписаниеДанных.ПередВыполнением) = Тип("ОписаниеОповещения") Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОписаниеДанных", ОписаниеДанных);
		ПараметрыВыполнения.Вставить("Оповещение", Новый ОписаниеОповещения(
			"ОтправитьНаПодписаниеПослеОбработкиПередВыполнением", ЭтотОбъект, Контекст));
		
		ВыполнитьОбработкуОповещения(ОписаниеДанных.ПередВыполнением, ПараметрыВыполнения);
	Иначе
		ОтправитьНаПодписаниеПослеОбработкиПередВыполнением(Новый Структура, Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПодписаниеПослеОбработкиПередВыполнением(РезультатПослеОбработки, Контекст) Экспорт
	
	Если ПеременныеОчищены() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПослеОбработки.Свойство("ОписаниеОшибки") Тогда
		ОбработатьОшибку(Контекст.Оповещение, НоваяОшибка(НСтр("ru='Не удалось отправить данные в сервис мобильной подписи'"), РезультатПослеОбработки.ОписаниеОшибки), Новый Структура);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	Если ТипЗнч(ФормаОбъекта) = Тип("ФормаКлиентскогоПриложения") Тогда
		Контекст.ИдентификаторФормы = ФормаОбъекта.УникальныйИдентификатор;
	ИначеЕсли ТипЗнч(ФормаОбъекта) = Тип("УникальныйИдентификатор") Тогда
		Контекст.ИдентификаторФормы = ФормаОбъекта;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеДанных",     ОписаниеДанных);
	ПараметрыВыполнения.Вставить("Форма",              ЭтотОбъект);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", Контекст.ИдентификаторФормы);
	ПараметрыВыполнения.Вставить("ТребуетсяПроверка",  Истина);
	Если ЗначениеЗаполнено(Подписант) Тогда
		ОписаниеДанных.Вставить("ВыбранныйПодписант", 
			СервисМобильнойПодписиСлужебныйВызовСервера.ПараметрыПодписанта(Подписант));
	Иначе
		ОписаниеДанных.Вставить("ВыбранныйПодписант", ПараметрыПодписанта);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ПолноеПредставлениеДанных",
		ЭлектроннаяПодписьСлужебныйКлиент.ПолноеПредставлениеДанных(ЭтотОбъект));
	ПараметрыВыполнения.Вставить("ТекущийСписокПредставлений", ТекущийСписокПредставлений);
	
	Контекст.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	
	НаборДанных = Новый Массив;
	Успех = Истина;
	
	Индекс = -1;
	Для Каждого Элемент Из ОписаниеДанных.НаборДанных Цикл
		Индекс = Индекс +1;
		
		Если ТипЗнч(Элемент.Данные) <> Тип("Строка") И ТипЗнч(Элемент.Данные) <> Тип("ДвоичныеДанные") Тогда
			Контекст.ПараметрыВыполнения.ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", Контекст.Элемент);
			ОбработатьОшибку(Контекст.Оповещение,
				НоваяОшибка(НСтр("ru='Не удалось получить данные'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не поддерживается отправка в сервис данных с типом %1'"), ТипЗнч(Элемент.Данные))));
			Возврат;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("Данные", Элемент.Данные);
		
		Если Элемент.Свойство("Объект") Тогда
			Структура.Вставить("Объект", Элемент.Объект);
		КонецЕсли;
		Если Элемент.Свойство("ВерсияОбъекта") Тогда
			Структура.Вставить("ВерсияОбъекта", Элемент.ВерсияОбъекта);
		КонецЕсли;
		Структура.Вставить("Представление", Элемент.Представление.Представление);
		
		НаборДанных.Добавить(Структура);
	КонецЦикла;
	
	Результат = ОтправитьНаПодписаниеНаСервере(НаборДанных, ОписаниеДанных.Подписант, ОписаниеДанных.ТипПодписи, ОписаниеДанных.ВыбраннаяДоверенность);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		НаборДанных = Результат.НаборДанных;
	Иначе
		НаборДанных = Результат;
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого Элемент Из НаборДанных Цикл
		Если Элемент.Свойство("ИдентификаторДокумента") Тогда
			ОписаниеДанных.НаборДанных[Индекс].Вставить("ИдентификаторДокумента", Элемент.ИдентификаторДокумента);
		Иначе
			Успех = Ложь;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ОписаниеДанных.Вставить("Успех", Успех);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ОбработатьОшибку(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);

КонецПроцедуры

&НаСервере
Функция ОтправитьНаПодписаниеНаСервере(Знач НаборДанных, Знач Подписант, Знач ТипПодписи, Знач Доверенность)
	
	ПараметрыПодписания = Новый Структура;
	ПараметрыПодписания.Вставить("ТипПодписи", ТипПодписи);
	ПараметрыПодписания.Вставить("Доверенность", Доверенность);
	ПараметрыПодписания.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыПодписания.Вставить("Комментарий", Комментарий);
	ПараметрыПодписания.Вставить("ПакетнаяОтправкаНаПодписание", ПакетнаяОтправка);
	
	Возврат СервисМобильнойПодписиСлужебный.ОтправитьНаПодписание(НаборДанных, Подписант, ПараметрыПодписания);
	
КонецФункции

// Продолжение процедуры Подписать.
&НаКлиенте
Процедура ПодписатьЗавершение(Результат, Контекст) Экспорт
	
	Элементы.ФормаОтправить.Доступность = Истина;
	
	Если Результат = Истина Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьОшибку(Оповещение, Ошибка, ДополнительныеДанные = Неопределено, ПоказыватьОшибку = Истина)
	
	Если ОписаниеДанных.Свойство("ПрекратитьВыполнение") Тогда
		
		Если ПоказыватьОшибку Тогда
			
			Если Не ОписаниеДанных.Свойство("ОписаниеОшибки") Тогда
				ОписаниеДанных.Вставить("ОписаниеОшибки");
			КонецЕсли;
		
			ОписаниеДанных.ОписаниеОшибки = Ошибка.ЗаголовокОшибки + Символы.ПС + Ошибка.ТекстОшибки;

		КонецЕсли;
		
		Если Открыта() Тогда
			Закрыть(Ложь);
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецЕсли;
		
	Иначе
		
		Если Не Открыта() И ОбработкаПослеПредупреждения = Неопределено Тогда
			Открыть();
		КонецЕсли;
		
		Если ПоказыватьОшибку Тогда
			ДополнительныеПараметры = Новый Структура;
			Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				Для Каждого КлючИЗначение Из ДополнительныеДанные Цикл
					ДополнительныеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
			КонецЕсли;
			ДополнительныеПараметры.Вставить("Подписант", Подписант);
			
			ПараметрыФормыРасширенногоПредставленияОшибки = ЭлектроннаяПодписьКлиент.ПараметрыФормыРасширенногоПредставленияОшибки();
			ПараметрыФормыРасширенногоПредставленияОшибки.ЗаголовокПредупреждения = Ошибка.ЗаголовокОшибки;
			ПараметрыФормыРасширенногоПредставленияОшибки.ТекстОшибкиКлиент = Ошибка.ТекстОшибки;
			ПараметрыФормыРасширенногоПредставленияОшибки.ДополнительныеДанные = Новый Структура("ДополнительныеФайлы", Ошибка.ДополнительныеФайлы);
			ПараметрыФормыРасширенногоПредставленияОшибки.ПоказатьТребуетсяПомощь = Истина;
			ПараметрыФормыРасширенногоПредставленияОшибки.ПоказатьИнструкцию = Истина;
			ЭлектроннаяПодписьКлиент.ОткрытьФормуРасширенногоПредставленияОшибки(ПараметрыФормыРасширенногоПредставленияОшибки,
				,ОбработкаПослеПредупреждения);
		КонецЕсли;
			
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПеременныеОчищены()
	
	Возврат ОписаниеДанных = Неопределено
		И ФормаОбъекта = Неопределено
		И ТекущийСписокПредставлений = Неопределено;
	
КонецФункции

// СтандартныеПодсистемы.МашиночитаемыеДоверенности

&НаСервере
Процедура ПодобратьДоверенностьПоПодписанту()
	
	Если Не ЗначениеЗаполнено(Подписант) Тогда
		НастройкаПоДоверенности = Неопределено;
	Иначе
		НастройкаПоДоверенности = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				Подписант, "ПоДоверенности", Неопределено);
	КонецЕсли;

	Если НастройкаПоДоверенности = Неопределено Или НастройкаПоДоверенности = Истина Тогда
		ПодобратьДоверенность();
	КонецЕсли;

	ПоДоверенности = ЗначениеЗаполнено(МашиночитаемаяДоверенность) Или НастройкаПоДоверенности = Истина;
	Элементы.МашиночитаемаяДоверенность.Видимость = ПоДоверенности;

КонецПроцедуры

&НаКлиенте
Процедура ПоДоверенностиПриИзменении(Элемент)
	
	Элементы.МашиночитаемаяДоверенность.Видимость = ПоДоверенности;
	
	Если Не ПоДоверенности Тогда
		МашиночитаемаяДоверенность = Неопределено;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПодобратьДоверенность", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодобратьДоверенность()
	ПодобратьДоверенность();
КонецПроцедуры

&НаСервере
Процедура ПодобратьДоверенность()
	
	Элементы.МашиночитаемаяДоверенность.Видимость = ПоДоверенности;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
		
	МашиночитаемаяДоверенность = Неопределено;
	Элементы.МашиночитаемаяДоверенность.СписокВыбора.Очистить();
	
	МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");

	Если ЗначениеЗаполнено(Подписант) Тогда
		ОтборДляДоверенностей = Новый Структура("ПредставительИННФЛ",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подписант, "ИННФЛ"));
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПодписанта) И ЗначениеЗаполнено(ПараметрыПодписанта.ИННФЛ) Тогда
		ОтборДляДоверенностей = Новый Структура("ПредставительИННФЛ", ПараметрыПодписанта.ИННФЛ);
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля = Новый Массив;
	ВыбранныеПоля.Добавить("МашиночитаемаяДоверенность");
	ВыбранныеПоля.Добавить("Наименование");
	ВыбранныеПоля.Добавить("ДатаВыдачи");
	
	Доверенности = МодульМашиночитаемыеДоверенностиФНС.ДоверенностиСОтбором(ОтборДляДоверенностей, ВыбранныеПоля);
	
	Если Доверенности.Количество() > 0 Тогда
		Для Каждого Строка Из Доверенности Цикл
			Элементы.МашиночитаемаяДоверенность.СписокВыбора.Добавить(Строка.МашиночитаемаяДоверенность,
				СтрШаблон("%1, %2", Строка.Наименование, Формат(Строка.ДатаВыдачи, "ДЛФ=D")));
		КонецЦикла;
		МашиночитаемаяДоверенность = Элементы.МашиночитаемаяДоверенность.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.МашиночитаемыеДоверенности

&НаСервере
Процедура НастроитьПредставлениеДанных()
	
	ЭлементПредставлениеДанных = Элементы.ПредставлениеДанных; // ПолеФормы, РасширениеПоляФормыДляПоляНадписи
	Если ЗначениеЗаполнено(Параметры.ЗаголовокДанных) Тогда
		ЭлементПредставлениеДанных.Заголовок = Параметры.ЗаголовокДанных;
	Иначе
		ЭлементПредставлениеДанных.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	ПредставлениеДанных = Параметры.ПредставлениеДанных;
	ЭлементПредставлениеДанных.Гиперссылка = Параметры.ПредставлениеДанныхОткрывается;
	
	Если Не ЗначениеЗаполнено(ПредставлениеДанных) Тогда
		ЭлементПредставлениеДанных.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НоваяОшибка(ЗаголовокОшибки, ТекстОшибки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ДополнительныеФайлы", Новый Массив);
	Результат.Вставить("ИдентификаторЗапроса");
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти
