///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
//
// Возвращаемое значение:
//  Массив - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// СтандартныеПодсистемы.Печать

// Формирует печатные формы
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		МодульУправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ПроизводственныйКалендарь", НСтр("ru = 'Производственный календарь'"),
				ПечатнаяФормаПроизводственногоКалендаря(ПараметрыПечати),
				,
				"Справочник.ПроизводственныеКалендари.ПФ_MXL_ПроизводственныйКалендарь");
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция выявляет последний день, за который заполнены данные 
// указанного производственного календаря.
//
// Параметры:
//	ПроизводственныйКалендарь - СправочникСсылка.ПроизводственныеКалендари - календарь.
//
// Возвращаемое значение:
//  Дата - дата, по которую заполнен производственный календарь, Неопределено, если календарь не заполнен.
//
Функция ДатаОкончанияЗаполненияПроизводственногоКалендаря(ПроизводственныйКалендарь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеПроизводственногоКалендаря.Дата) КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ДанныеПроизводственногоКалендаря.Дата) ЕСТЬ НЕ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция читает данные производственного календаря из регистра.
//
// Параметры:
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника.
//	НомерГода							- Номер года, за который необходимо прочитать производственный календарь.
//
// Возвращаемое значение
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря.
//
Функция ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ТекущийГод",	НомерГода);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня,
		|	ДанныеПроизводственногоКалендаря.ДатаПереноса
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Год = &ТекущийГод
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет справочник Производственные календари из XML файла.
//
// Параметры:
//	- ТаблицаКалендарей - таблица значений с описанием производственных календарей.
//
Процедура ОбновитьПроизводственныеКалендари(ТаблицаКалендарей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторТаблица", ТаблицаКалендарей);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КлассификаторТаблица.Code КАК СТРОКА(2)) КАК Код,
		|	ВЫРАЗИТЬ(КлассификаторТаблица.Base КАК СТРОКА(2)) КАК КодБазового,
		|	ВЫРАЗИТЬ(КлассификаторТаблица.Description КАК СТРОКА(100)) КАК Наименование
		|ПОМЕСТИТЬ КлассификаторТаблица
		|ИЗ
		|	&КлассификаторТаблица КАК КлассификаторТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассификаторТаблица.Код КАК Код,
		|	КлассификаторТаблица.КодБазового КАК КодБазового,
		|	КлассификаторТаблица.Наименование КАК Наименование,
		|	ПроизводственныеКалендари.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ПроизводственныеКалендари.Код, """") КАК ПроизводственныйКалендарьКод,
		|	ЕСТЬNULL(ПроизводственныеКалендари.Наименование, """") КАК ПроизводственныйКалендарьНаименование,
		|	ЕСТЬNULL(ПроизводственныеКалендари.БазовыйКалендарь.Код, """") КАК ПроизводственныйКалендарьКодБазового
		|ИЗ
		|	КлассификаторТаблица КАК КлассификаторТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
		|		ПО КлассификаторТаблица.Код = ПроизводственныеКалендари.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодБазового";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.Код) = СокрЛП(Выборка.ПроизводственныйКалендарьКод)
			И СокрЛП(Выборка.Наименование) = СокрЛП(Выборка.ПроизводственныйКалендарьНаименование) 
			И СокрЛП(Выборка.КодБазового) = СокрЛП(Выборка.ПроизводственныйКалендарьКодБазового) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Если Не ОбщегоНазначения.РазделениеВключено() И ЗначениеЗаполнено(Выборка.КодБазового) Тогда
				// Зависимые календари не создаем автоматически при обновлении в локальном режиме.
				Продолжить;
			КонецЕсли;
			СправочникОбъект = СоздатьЭлемент();
		КонецЕсли;
		СправочникОбъект.Код = СокрЛП(Выборка.Код);
		СправочникОбъект.Наименование = СокрЛП(Выборка.Наименование);
		Если ЗначениеЗаполнено(Выборка.КодБазового) Тогда
			СправочникОбъект.БазовыйКалендарь = НайтиПоКоду(Выборка.КодБазового);
		КонецЕсли;
		Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Продолжить;
		КонецЕсли;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновляет данные производственных календарей по таблице данных.
//
Функция ОбновитьДанныеПроизводственныхКалендарей(Знач ТаблицаДанных) Экспорт
	
	ТаблицаИзменений = ТаблицаИзмененийПроизводственныхКалендарей();
	
	ОбновитьОсновныеДанныеПроизводственныхКалендарей(ТаблицаДанных, ТаблицаИзменений);
	
	ОбновитьДанныеЗависимыхПроизводственныхКалендарей(ТаблицаИзменений);
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Функция подготавливает результат заполнения производственного календаря 
//  данными по умолчанию.
// При наличии в конфигурации макета с предопределенными данными 
//  производственного календаря на этот год, используются данные макета,
//  в противном случае данные производственного календаря формируются на основе 
//  сведений о праздниках, а также с учетом действующих правил переноса выходных дней.
//
Функция РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию(КодКалендаря, НомерГода, Знач КодБазовогоКалендаря = Неопределено) Экспорт
	
	ВидыДней = Новый Соответствие;
	ПереносыДней = Новый Соответствие;
	
	// Если есть данные в макете - используем их.
	// Сразу получаем данные еще и по базовому календарю, если он задан.
	КодыКалендарей = Новый Массив;
	КодыКалендарей.Добавить(КодКалендаря);
	ЕстьБазовыйКалендарь = Ложь;
	Если КодБазовогоКалендаря <> Неопределено Тогда
		КодыКалендарей.Добавить(КодБазовогоКалендаря);
		ЕстьБазовыйКалендарь = Истина;
	КонецЕсли;
	
	// Отбираем данные из макета по обоим календарям.
	// Получаем не полный набор, а только праздничные дни и переносы.
	ДанныеИзМакета = ДанныеПроизводственныхКалендарейПоУмолчанию(КодыКалендарей);
	
	ОтборСтрок = Новый Структура("КодПроизводственногоКалендаря,Год");
	ОтборСтрок.Год = НомерГода;
	
	ЕстьДанныеКалендаря = Ложь;
	ОтборСтрок.КодПроизводственногоКалендаря = КодКалендаря;
	ДанныеКалендаря = ДанныеИзМакета.НайтиСтроки(ОтборСтрок);
	Если ДанныеКалендаря.Количество() > 0 Тогда
		ЕстьДанныеКалендаря = Истина;
		ЗаполнитьВидыДнейДаннымиКалендаря(ДанныеКалендаря, ВидыДней, ПереносыДней);
	КонецЕсли;
	
	// Проверяем, есть ли в макете данные базового календаря.
	ЕстьДанныеБазовогоКалендаря = Ложь;
	Если ЕстьБазовыйКалендарь Тогда
		ОтборСтрок.КодПроизводственногоКалендаря = КодБазовогоКалендаря;
		ДанныеКалендаря = ДанныеИзМакета.НайтиСтроки(ОтборСтрок);
		Если ДанныеКалендаря.Количество() > 0 Тогда
			ЕстьДанныеБазовогоКалендаря = Истина;
			Если Не ЕстьДанныеКалендаря Тогда
				ЗаполнитьВидыДнейДаннымиКалендаря(ДанныеКалендаря, ВидыДней, ПереносыДней);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Дополняем данными по умолчанию на остальные дни.
	ДатаДня = Дата(НомерГода, 1, 1);
	Пока ДатаДня <= Дата(НомерГода, 12, 31) Цикл
		Если ВидыДней[ДатаДня] = Неопределено Тогда
			ВидыДней.Вставить(ДатаДня, ВидДняПоДате(ДатаДня));
		КонецЕсли;
		ДатаДня = ДатаДня + ДлинаСуток();
	КонецЦикла;
	
	// Если данных в макете не было, то обращаемся к заполнению постоянных праздников.
	Если Не ЕстьДанныеКалендаря Тогда
		Если ЕстьБазовыйКалендарь И ЕстьДанныеБазовогоКалендаря Тогда
			// Постоянные праздники базового календаря запрашиваем только если их не было в макете.
			КодБазовогоКалендаря = Неопределено;
		КонецЕсли;
		ЗаполнитьПостоянныеПраздничныеДни(ВидыДней, ПереносыДней, НомерГода, КодКалендаря, КодБазовогоКалендаря);
	КонецЕсли;
	
	// Преобразовываем в таблицу.
	ДанныеПроизводственногоКалендаря = НовыеДанныеПроизводственныхКалендарей();
	Для Каждого КлючИЗначение Из ВидыДней Цикл
		НоваяСтрока = ДанныеПроизводственногоКалендаря.Добавить();
		НоваяСтрока.Дата = КлючИЗначение.Ключ;
		НоваяСтрока.ВидДня = КлючИЗначение.Значение;
		ДатаПереноса = ПереносыДней[НоваяСтрока.Дата];
		Если ДатаПереноса <> Неопределено Тогда
			НоваяСтрока.ДатаПереноса = ДатаПереноса;
		КонецЕсли;
		НоваяСтрока.Год = НомерГода;
		НоваяСтрока.КодПроизводственногоКалендаря = КодКалендаря;
	КонецЦикла;
	
	ДанныеПроизводственногоКалендаря.Сортировать("Дата");
	
	Возврат ДанныеПроизводственногоКалендаря;
	
КонецФункции

Функция РезультатЗаполненияПроизводственныхКалендарейПоУмолчанию(КодыКалендарей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыКалендарей", КодыКалендарей);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственныеКалендари.Ссылка КАК Ссылка,
		|	ПроизводственныеКалендари.Код КАК КодКалендаря,
		|	ПроизводственныеКалендари.БазовыйКалендарь КАК БазовыйКалендарь,
		|	ПроизводственныеКалендари.БазовыйКалендарь.Код КАК КодБазовогоКалендаря
		|ИЗ
		|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
		|ГДЕ
		|	ПроизводственныеКалендари.Код В(&КодыКалендарей)";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Запрашиваем данные всех календарей из макета для определения годов заполнения.
	КодыДанныхМакета = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("КодКалендаря");
	ДанныеИзМакета = ДанныеПроизводственныхКалендарейПоУмолчанию(КодыДанныхМакета);
	
	ТаблицаДанных = НовыеДанныеПроизводственныхКалендарей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтборСтрок = Новый Структура("КодПроизводственногоКалендаря");
		ОтборСтрок.КодПроизводственногоКалендаря = Выборка.КодКалендаря;
		ДанныеКалендаряИзМакета = ДанныеИзМакета.НайтиСтроки(ОтборСтрок);
		НомераГодов = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеКалендаряИзМакета, "Год", Истина);
		ТекущийГод = Год(ТекущаяДатаСеанса());
		Если НомераГодов.Найти(ТекущийГод) = Неопределено Тогда
			// Добавляем по умолчанию текущий год.
			НомераГодов.Добавить(ТекущийГод);
		КонецЕсли;
		Для Каждого НомерГода Из НомераГодов Цикл
			ДанныеКалендаря = РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию(Выборка.КодКалендаря, НомерГода, Выборка.КодБазовогоКалендаря);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеКалендаря, ТаблицаДанных);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Преобразовывает данные производственных календарей, поставляемые в виде макета в конфигурации.
//
// Параметры:
//	 КодыКалендарей - необязательный, массив, если не задан, то будут получены все имеющиеся данные из макета.
//	 ФормироватьПолныйНабор - необязательный, булево, если ложь, то будут сформированы только данные по отклонениям от календаря по умолчанию.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ДанныеПроизводственныхКалендарейИзXML.
//
Функция ДанныеПроизводственныхКалендарейИзМакета(КодыКалендарей = Неопределено, ФормироватьПолныйНабор = Истина) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗаполнениеКалендарныхГрафиков") = Неопределено Тогда
		Возврат НовыеДанныеПроизводственныхКалендарей();
	КонецЕсли;
	
	МодульКалендарныеГрафики = ОбщегоНазначения.ОбщийМодуль("Обработки.ЗаполнениеКалендарныхГрафиков");
	ТекстовыйДокумент = МодульКалендарныеГрафики.ПолучитьМакет("ДанныеПроизводственныхКалендарей");
	
	ДанныеXML = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст());
	
	ТаблицаКалендарей = ПроизводственныеКалендариИзМакета();
	
	Возврат ДанныеПроизводственныхКалендарейИзXML(ДанныеXML, ТаблицаКалендарей, КодыКалендарей, ФормироватьПолныйНабор);
	
КонецФункции

// Преобразовывает данные производственных календарей, представленные в виде XML.
//
// Параметры:
//	 ДанныеXML - структура, извлеченная из файла XML методом ОбщегоНазначения.ПрочитатьXMLВТаблицу.
//	 ТаблицаКалендарей - таблица значений, список производственных календарей, поддерживаемых в конфигурации.
//	 КодыКалендарей - необязательный, массив, если не задан, то отбор не будет установлен.
//	 ФормироватьПолныйНабор - необязательный, булево, если ложь, то будут сформированы только данные по отклонениям от календаря по умолчанию.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//	* КодПроизводственногоКалендаря
//	* ВидДня
//	* Год
//	* Дата
//	* ДатаПереноса.
//
Функция ДанныеПроизводственныхКалендарейИзXML(Знач ДанныеXML, ТаблицаКалендарей, КодыКалендарей = Неопределено, ФормироватьПолныйНабор = Истина) Экспорт
	
	ТаблицаДанных = НовыеДанныеПроизводственныхКалендарей();
	
	КлассификаторТаблица = ДанныеXML.Данные;
	
	ГодыКалендарей = КлассификаторТаблица.Скопировать(, "Calendar,Year");
	ГодыКалендарей.Свернуть("Calendar,Year");
	
	ОтборСтрок = Новый Структура("Calendar,Year");
	Для Каждого Сочетание Из ГодыКалендарей Цикл
		Если КодыКалендарей <> Неопределено И КодыКалендарей.Найти(Сочетание.Calendar) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДатыГода = Новый Соответствие;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
		СтрокиДанныхКалендаря = КлассификаторТаблица.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаКлассификатора Из СтрокиДанныхКалендаря Цикл
			НоваяСтрока = НоваяСтрокаДанныхКалендаряИзКлассификатора(ТаблицаДанных, СтрокаКлассификатора);
			ДатыГода.Вставить(НоваяСтрока.Дата, Истина);
		КонецЦикла;
		КодБазовогоКалендаря = КодБазовогоКалендаря(Сочетание.Calendar, ТаблицаКалендарей);
		Если КодБазовогоКалендаря <> Неопределено Тогда
			ОтборСтрок.Calendar = КодБазовогоКалендаря;
			СтрокиДанныхКалендаря = КлассификаторТаблица.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаКлассификатора Из СтрокиДанныхКалендаря Цикл
				СтрокаКлассификатора.Calendar = Сочетание.Calendar;
				НоваяСтрока = НоваяСтрокаДанныхКалендаряИзКлассификатора(ТаблицаДанных, СтрокаКлассификатора, Истина, Ложь);
				СтрокаКлассификатора.Calendar = КодБазовогоКалендаря;
				Если НоваяСтрока <> Неопределено Тогда
					ДатыГода.Вставить(НоваяСтрока.Дата, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ФормироватьПолныйНабор Тогда
			Продолжить;
		КонецЕсли;
		НомерГода = Число(Сочетание.Year);
		ДатаДня = Дата(НомерГода, 1, 1);
		Пока ДатаДня <= Дата(НомерГода, 12, 31) Цикл
			Если ДатыГода[ДатаДня] = Неопределено Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.КодПроизводственногоКалендаря = Сочетание.Calendar;
				НоваяСтрока.Год = НомерГода;
				НоваяСтрока.Дата = ДатаДня;
				НоваяСтрока.ВидДня = ВидДняПоДате(ДатаДня);
			КонецЕсли;
			ДатаДня = ДатаДня + ДлинаСуток();
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Получает таблицу поставляемых в составе программы производственных календарей.
//
// Возвращаемое значение:
//	 ТаблицаЗначений.
//
Функция ПроизводственныеКалендариИзМакета() Экспорт
	
	Если Метаданные.Обработки.Найти("ЗаполнениеКалендарныхГрафиков") = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	МодульКалендарныеГрафики = ОбщегоНазначения.ОбщийМодуль("Обработки.ЗаполнениеКалендарныхГрафиков");
	ТекстовыйДокумент = МодульКалендарныеГрафики.ПолучитьМакет("ПроизводственныеКалендари");
	ТаблицаКалендарей = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	Возврат ТаблицаКалендарей;
	
КонецФункции

Процедура ЗаполнитьПроизводственныеКалендариПоУмолчаниюДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	Календари = ПроизводственныеКалендариПоУмолчанию();
	ПоместитьВоВременноеХранилище(Календари, АдресРезультата);
	
КонецПроцедуры

Процедура ОбновитьОсновныеДанныеПроизводственныхКалендарей(ТаблицаДанных, ИзмененияКалендарей)
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторТаблица", ТаблицаДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторТаблица.КодПроизводственногоКалендаря КАК КалендарьКод,
		|	КлассификаторТаблица.Дата КАК Дата,
		|	КлассификаторТаблица.Год КАК Год,
		|	КлассификаторТаблица.ВидДня КАК ВидДня,
		|	КлассификаторТаблица.ДатаПереноса КАК ДатаПереноса
		|ПОМЕСТИТЬ ВТКлассификаторТаблица
		|ИЗ
		|	&КлассификаторТаблица КАК КлассификаторТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроизводственныеКалендари.Ссылка КАК ПроизводственныйКалендарь,
		|	КлассификаторТаблица.КалендарьКод КАК КодПроизводственногоКалендаря,
		|	КлассификаторТаблица.Год КАК Год
		|ПОМЕСТИТЬ ВТИзмененияКалендарей
		|ИЗ
		|	ВТКлассификаторТаблица КАК КлассификаторТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
		|		ПО КлассификаторТаблица.КалендарьКод = ПроизводственныеКалендари.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО (ПроизводственныеКалендари.Ссылка = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
		|			И КлассификаторТаблица.Год = ДанныеПроизводственногоКалендаря.Год
		|			И КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата
		|			И КлассификаторТаблица.ВидДня = ДанныеПроизводственногоКалендаря.ВидДня
		|			И КлассификаторТаблица.ДатаПереноса = ДанныеПроизводственногоКалендаря.ДатаПереноса
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзмененияКалендарей.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ИзмененияКалендарей.КодПроизводственногоКалендаря КАК КодПроизводственногоКалендаря,
		|	ИзмененияКалендарей.Год КАК Год,
		|	КлассификаторТаблица.Дата КАК Дата,
		|	КлассификаторТаблица.ВидДня КАК ВидДня,
		|	КлассификаторТаблица.ДатаПереноса КАК ДатаПереноса
		|ИЗ
		|	ВТИзмененияКалендарей КАК ИзмененияКалендарей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассификаторТаблица КАК КлассификаторТаблица
		|		ПО (КлассификаторТаблица.КалендарьКод = ИзмененияКалендарей.КодПроизводственногоКалендаря)
		|			И (КлассификаторТаблица.Год = ИзмененияКалендарей.Год)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмененияКалендарей.ПроизводственныйКалендарь,
		|	Год";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	
	КлючиРегистра = Новый Массив;
	КлючиРегистра.Добавить("ПроизводственныйКалендарь");
	КлючиРегистра.Добавить("Год");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
			НаборЗаписей.Очистить();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ИзмененияКалендарей.Добавить(), Выборка);
			Для Каждого Ключ Из КлючиРегистра Цикл 
				НаборЗаписей.Отбор[Ключ].Установить(Выборка[Ключ]);
			КонецЦикла;
			Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
	ИзмененияКалендарей.Свернуть("КодПроизводственногоКалендаря, Год");
	
КонецПроцедуры

Процедура ОбновитьДанныеЗависимыхПроизводственныхКалендарей(ИзмененияКалендарей) Экспорт
	
	Если ИзмененияКалендарей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененияКалендарей", ИзмененияКалендарей);
	Запрос.УстановитьПараметр("ГодНачалаОбновленияЗависимых", 2018);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененияКалендарей.КодПроизводственногоКалендаря КАК КодПроизводственногоКалендаря,
		|	ИзмененияКалендарей.Год КАК Год
		|ПОМЕСТИТЬ ВТИзмененияКалендарей
		|ИЗ
		|	&ИзмененияКалендарей КАК ИзмененияКалендарей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗависимыеКалендари.Ссылка КАК ПроизводственныйКалендарь,
		|	ЗависимыеКалендари.Код КАК Код,
		|	ИзмененияБазовыхКалендарей.Год КАК Год,
		|	ЗависимыеКалендари.БазовыйКалендарь.Код КАК КодБазовогоКалендаря
		|ИЗ
		|	Справочник.ПроизводственныеКалендари КАК ЗависимыеКалендари
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененияКалендарей КАК ИзмененияБазовыхКалендарей
		|		ПО ЗависимыеКалендари.БазовыйКалендарь.Код = ИзмененияБазовыхКалендарей.КодПроизводственногоКалендаря
		|			И (ЗависимыеКалендари.БазовыйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка))
		|			И (ИзмененияБазовыхКалендарей.Год >= &ГодНачалаОбновленияЗависимых)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмененияКалендарей КАК ИзмененияЗависимыхКалендарей
		|		ПО (ИзмененияЗависимыхКалендарей.КодПроизводственногоКалендаря = ЗависимыеКалендари.Код)
		|			И (ИзмененияЗависимыхКалендарей.Год = ИзмененияБазовыхКалендарей.Год)
		|ГДЕ
		|	ИзмененияЗависимыхКалендарей.Год ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КодыЗависимых = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код");
	ДанныеИзМакета = ДанныеПроизводственныхКалендарейПоУмолчанию(КодыЗависимых);
	
	ОтборСтрок = Новый Структура(
		"КодПроизводственногоКалендаря,
		|Год");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтборСтрок.КодПроизводственногоКалендаря = Выборка.Код;
		ОтборСтрок.Год = Выборка.Год;
		НайденныеСтроки = ДанныеИзМакета.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// Если есть данные в макете, считаем, что перезаполнять не нужно.
			Продолжить;
		КонецЕсли;
		ДанныеКалендаря = РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию(Выборка.Код, Выборка.Год, Выборка.КодБазовогоКалендаря);
		ДанныеКалендаря.Колонки.Добавить("ПроизводственныйКалендарь");
		ДанныеКалендаря.ЗаполнитьЗначения(Выборка.ПроизводственныйКалендарь, "ПроизводственныйКалендарь");
		НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ДанныеКалендаря);
		НаборЗаписей.Отбор.ПроизводственныйКалендарь.Установить(Выборка.ПроизводственныйКалендарь);
		НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
		Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Иначе
			НаборЗаписей.Записать();
		КонецЕсли;
		// Добавляем в таблицу изменений.
		НоваяСтрока = ИзмененияКалендарей.Добавить();
		НоваяСтрока.КодПроизводственногоКалендаря = Выборка.Код;
		НоваяСтрока.Год = Выборка.Год;
	КонецЦикла;
	
КонецПроцедуры

// Определяет источник актуального перечня поддерживаемых производственных календарей (макет или поставка классификатора).
//
// Возвращаемое значение:
//	 ТаблицаЗначений.
//
Функция ПроизводственныеКалендариПоУмолчанию()
	
	Если КалендарныеГрафики.ВерсияКалендарей() >= КалендарныеГрафики.ВерсияЗагруженныхКалендарей() Тогда
		Возврат ПроизводственныеКалендариИзМакета();
	КонецЕсли;
	
	Попытка
		Возврат ПроизводственныеКалендариИзФайлаКлассификатора();
	Исключение
		ИмяСобытия = НСтр("ru = 'Календарные графики.Получение календарей из классификатора'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить список производственных календарей из классификатора.
                  |Список календарей получен из поставляемого макета.
                  |%1'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	Возврат ПроизводственныеКалендариИзМакета();
	
КонецФункции

// Определяет источник актуальных данных производственного календаря (макет или поставка классификатора).
//
// Параметры:
//	 КодыКалендарей - Массив.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. Справочники.ПроизводственныеКалендари.ДанныеПроизводственныхКалендарейИзXML.
//
Функция ДанныеПроизводственныхКалендарейПоУмолчанию(КодыКалендарей)
	
	Если КалендарныеГрафики.ВерсияКалендарей() >= КалендарныеГрафики.ВерсияЗагруженныхКалендарей() Тогда
		Возврат ДанныеПроизводственныхКалендарейИзМакета(КодыКалендарей, Ложь);
	КонецЕсли;
	
	Возврат ДанныеПроизводственныхКалендарейИзФайлаКлассификатора(КодыКалендарей);
	
КонецФункции

Функция ПроизводственныеКалендариИзФайлаКлассификатора()
	
	ДанныеКлассификатора = КалендарныеГрафики.ДанныеКлассификатора();
	
	ТаблицаКалендарей = ДанныеКлассификатора["ПроизводственныеКалендари"].Данные;
	
	Возврат ТаблицаКалендарей;

КонецФункции

Функция ДанныеПроизводственныхКалендарейИзФайлаКлассификатора(КодыКалендарей)
	
	ДанныеКлассификатора = КалендарныеГрафики.ДанныеКлассификатора();
	
	Возврат ДанныеПроизводственныхКалендарейИзXML(
		ДанныеКлассификатора["ДанныеПроизводственныхКалендарей"], 
		ДанныеКлассификатора["ПроизводственныеКалендари"].Данные,
		КодыКалендарей, 
		Ложь);
	
КонецФункции

// Создает таблицу значений для описания изменений данных производственных календарей.
//
Функция ТаблицаИзмененийПроизводственныхКалендарей()
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("КодПроизводственногоКалендаря", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ТаблицаИзменений.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4)));
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Процедура записывает данные одного производственного календаря за 1 год.
//
// Параметры:
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника.
//	НомерГода							- Номер года, за который необходимо записать производственный календарь.
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря.
//
// Возвращаемое значение
//	Нет
//
Процедура ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода, ДанныеПроизводственногоКалендаря) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	
	Для Каждого КлючИЗначение Из ДанныеПроизводственногоКалендаря Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), КлючИЗначение);
	КонецЦикла;
	
	ЗначенияОтбора = Новый Структура("ПроизводственныйКалендарь, Год", ПроизводственныйКалендарь, НомерГода);
	
	Для Каждого КлючИЗначение Из ЗначенияОтбора Цикл
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ЗначенияОтбора);
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	УсловияОбновления = УсловийОбновленияГрафиковРаботы(ПроизводственныйКалендарь, НомерГода);
	КалендарныеГрафики.РаспространитьИзмененияДанныхПроизводственныхКалендарей(УсловияОбновления);
	
КонецПроцедуры
	
// Функция определяет соответствие видов дня производственного календаря и цвета оформления
// этого дня в поле календаря.
//
// Возвращаемое значение
//	ЦветаОформления - соответствие видов дня и цветов оформления.
//
Функция ЦветаОформленияВидовДнейПроизводственногоКалендаря() Экспорт
	
	ЦветаОформления = Новый Соответствие;
	
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий,			ЦветаСтиля.ВидДняПроизводственногоКалендаряРабочийЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота,			ЦветаСтиля.ВидДняПроизводственногоКалендаряСубботаЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье,		ЦветаСтиля.ВидДняПроизводственногоКалендаряВоскресеньеЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный,	ЦветаСтиля.ВидДняПроизводственногоКалендаряПредпраздничныйЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник,			ЦветаСтиля.ВидДняПроизводственногоКалендаряПраздникЦвет);
	
	Возврат ЦветаОформления;
	
КонецФункции

// Функция составляет список всевозможных видов дней производственного календаря 
// по метаданным перечисления ВидыДнейПроизводственногоКалендаря.
//
// Возвращаемое значение
//	СписокВидовДня - список значений, содержащий значение перечисления 
//  					и его синоним в качестве представления.
//
Функция СписокВидовДня() Экспорт
	
	СписокВидовДня = Новый СписокЗначений;
	
	Для Каждого МетаданныеВидаДней Из Метаданные.Перечисления.ВидыДнейПроизводственногоКалендаря.ЗначенияПеречисления Цикл
		СписокВидовДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря[МетаданныеВидаДней.Имя], МетаданныеВидаДней.Синоним);
	КонецЦикла;
	
	Возврат СписокВидовДня;
	
КонецФункции

// Функция составляет массив доступных производственных календарей
// для использования, например, в качестве шаблона.
//
Функция СписокПроизводственныхКалендарей() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	(НЕ ПроизводственныеКалендари.ПометкаУдаления)");
		
	СписокПроизводственныхКалендарей = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПроизводственныхКалендарей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокПроизводственныхКалендарей;
	
КонецФункции

// Заполняет массив дат праздничных дней по производственному календарю 
// для конкретного календарного года.
//
Функция ПраздничныеДниПроизводственногоКалендаря(КодПроизводственногоКалендаря, НомерГода)
	
	ПраздничныеДни = Новый ТаблицаЗначений;
	ПраздничныеДни.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ПраздничныеДни.Колонки.Добавить("ПереноситьВыходной", Новый ОписаниеТипов("Булево"));
	ПраздничныеДни.Колонки.Добавить("ДобавлятьПредпраздничный", Новый ОписаниеТипов("Булево"));
	ПраздничныеДни.Колонки.Добавить("ТолькоНерабочий", Новый ОписаниеТипов("Булево"));
	
	Если Метаданные.Обработки.Найти("ЗаполнениеКалендарныхГрафиков") <> Неопределено Тогда
		МодульКалендарныеГрафики = ОбщегоНазначения.ОбщийМодуль("Обработки.ЗаполнениеКалендарныхГрафиков");
		МодульКалендарныеГрафики.ЗаполнитьПраздничныеДни(КодПроизводственногоКалендаря, НомерГода, ПраздничныеДни);
	КонецЕсли;
	
	Возврат ПраздничныеДни;
	
КонецФункции

Функция УсловийОбновленияГрафиковРаботы(ПроизводственныйКалендарь, Год)
	
	УсловияОбновления = ТаблицаИзмененийПроизводственныхКалендарей();
	
	НоваяСтрока = УсловияОбновления.Добавить();
	НоваяСтрока.КодПроизводственногоКалендаря = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроизводственныйКалендарь, "Код");
	НоваяСтрока.Год = Год;

	Возврат УсловияОбновления;
	
КонецФункции

Функция ДлинаСуток()
	Возврат 24 * 3600;
КонецФункции
	
Функция НовыеДанныеПроизводственныхКалендарей()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КодПроизводственногоКалендаря", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2)));
	ТаблицаДанных.Колонки.Добавить("ВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаПереноса", Новый ОписаниеТипов("Дата"));
	Возврат ТаблицаДанных;
	
КонецФункции	

Процедура ЗаполнитьПостоянныеПраздничныеДни(ВидыДней, ПереносыДней, НомерГода, КодКалендаря, КодБазовогоКалендаря = Неопределено)
	
	// Если нет - заполняем праздники и переносы.
	ПраздничныеДни = ПраздничныеДниПроизводственногоКалендаря(КодКалендаря, НомерГода);
	// Дополним таблицу также праздниками следующего года, 
	// т.к. они влияют на заполнение текущего года (31 декабря - предпраздничный, например).
	ПраздничныеДниСледующегоГода = ПраздничныеДниПроизводственногоКалендаря(КодКалендаря, НомерГода + 1);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПраздничныеДниСледующегоГода, ПраздничныеДни);
	
	Если КодБазовогоКалендаря <> Неопределено Тогда
		// Дополним таблицу также праздниками базового календаря.
		ПраздничныеБазовогоКалендаря = ПраздничныеДниПроизводственногоКалендаря(КодБазовогоКалендаря, НомерГода);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПраздничныеБазовогоКалендаря, ПраздничныеДни);
		ПраздничныеДниСледующегоГода = ПраздничныеДниПроизводственногоКалендаря(КодБазовогоКалендаря, НомерГода + 1);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПраздничныеДниСледующегоГода, ПраздничныеДни);
	КонецЕсли;
	
	// При совпадении выходного и нерабочего праздничного дней 
	// выходной день переносится на следующий после праздничного рабочий день 
	// за исключением выходных дней, совпадающих с нерабочими праздничными днями 
	// в период Новогодних каникул и Рождества Христова.	
	
	Для Каждого СтрокаТаблицы Из ПраздничныеДни Цикл
		ПраздничныйДень = СтрокаТаблицы.Дата;
		// Отметим как предпраздничный день, 
		// рабочий день непосредственно предшествующий праздничному дню.
		Если СтрокаТаблицы.ДобавлятьПредпраздничный Тогда
			ДатаПредпраздничногоДня = ПраздничныйДень - ДлинаСуток();
			Если Год(ДатаПредпраздничногоДня) = НомерГода Тогда
				// Предпраздничные дни другого года пропускаем.
				Если ВидыДней[ДатаПредпраздничногоДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
					И ПраздничныеДни.Найти(ДатаПредпраздничногоДня, "Дата") = Неопределено Тогда
					ВидыДней.Вставить(ДатаПредпраздничногоДня, Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Год(ПраздничныйДень) <> НомерГода Тогда
			// Праздничные дни другого года далее также пропускаем.
			Продолжить;
		КонецЕсли;
		Если ВидыДней[ПраздничныйДень] <> Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
			И СтрокаТаблицы.ПереноситьВыходной Тогда
			// Если праздничный день выпадает на выходной, 
			// и выходной, на который выпадает этот праздник, переносится - 
			// переносим выходной на ближайший рабочий день.
			ДатаДня = ПраздничныйДень;
			Пока Истина Цикл
				ДатаДня = ДатаДня + ДлинаСуток();
				Если ВидыДней[ДатаДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
					И ПраздничныеДни.Найти(ДатаДня, "Дата") = Неопределено Тогда
					ВидыДней.Вставить(ДатаДня, ВидыДней[ПраздничныйДень]);
					ПереносыДней.Вставить(ДатаДня, ПраздничныйДень);
					ПереносыДней.Вставить(ПраздничныйДень, ДатаДня);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаТаблицы.ТолькоНерабочий Тогда
			ВидыДней.Вставить(ПраздничныйДень, Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий);
		Иначе
			ВидыДней.Вставить(ПраздничныйДень, Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыДнейДаннымиКалендаря(ДанныеКалендаря, ВидыДней, ПереносыДней)
	
	Для Каждого СтрокаДанных Из ДанныеКалендаря Цикл
		ВидыДней.Вставить(СтрокаДанных.Дата, СтрокаДанных.ВидДня);
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаПереноса) Тогда
			ПереносыДней.Вставить(СтрокаДанных.Дата, СтрокаДанных.ДатаПереноса);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВидДняПоДате(Дата)
	
	НомерДняНедели = ДеньНедели(Дата);
	
	Если НомерДняНедели <= 5 Тогда
		Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
	КонецЕсли;
	
	Если НомерДняНедели = 6 Тогда
		Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
	КонецЕсли;
	
	Если НомерДняНедели = 7 Тогда
		Возврат Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
	КонецЕсли;
	
КонецФункции

Функция КодБазовогоКалендаря(КодКалендаря, КлассификаторКалендарей)
	
	СтрокаКалендаря = КлассификаторКалендарей.Найти(КодКалендаря, "Code");
	
	Если СтрокаКалендаря = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаКалендаря["Base"]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаКалендаря["Base"];
	
КонецФункции

Функция НоваяСтрокаДанныхКалендаряИзКлассификатора(ДанныеКалендаря, СтрокаКлассификатора, Проверять = Ложь, Замещать = Ложь)
	
	Если Проверять Тогда
		ОтборСтрок = Новый Структура("КодПроизводственногоКалендаря,Дата");
		ОтборСтрок.КодПроизводственногоКалендаря = СтрокаКлассификатора.Calendar;
		ОтборСтрок.Дата = Дата(СтрокаКлассификатора.Date);
		НайденныеСтроки = ДанныеКалендаря.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если Не Замещать Тогда
				Возврат Неопределено;
			КонецЕсли;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ДанныеКалендаря.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ДанныеКалендаря.Добавить();
	НоваяСтрока.КодПроизводственногоКалендаря = СтрокаКлассификатора.Calendar;
	НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря[СтрокаКлассификатора.DayType];
	НоваяСтрока.Год = Число(СтрокаКлассификатора.Year);
	НоваяСтрока.Дата = Дата(СтрокаКлассификатора.Date);
	Если ЗначениеЗаполнено(СтрокаКлассификатора.SwapDate) Тогда
		НоваяСтрока.ДатаПереноса = Дата(СтрокаКлассификатора.SwapDate);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печатная форма производственного календаря.

Функция ПечатнаяФормаПроизводственногоКалендаря(ПараметрыПодготовкиПечатнойФормы)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_ПроизводственныйКалендарь");
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Макет = МодульУправлениеПечатью.МакетПечатнойФормы("Справочник.ПроизводственныеКалендари.ПФ_MXL_ПроизводственныйКалендарь");
	КонецЕсли;
	
	ПроизводственныйКалендарь = ПараметрыПодготовкиПечатнойФормы.ПроизводственныйКалендарь;
	НомерГода = ПараметрыПодготовкиПечатнойФормы.НомерГода;
	
	ЗаголовокПечати = Макет.ПолучитьОбласть("Заголовок");
	ЗаголовокПечати.Параметры.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	ЗаголовокПечати.Параметры.Год = Формат(НомерГода, "ЧГ=");
	ТабличныйДокумент.Вывести(ЗаголовокПечати);
	
	// Начальные значения, независимо от результата выполнения запроса.
	РабочееВремя40Год = 0;
	РабочееВремя36Год = 0;
	РабочееВремя24Год = 0;
	
	ВидыНерабочихДней = Новый Массив;
	ВидыНерабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	ВидыНерабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	ВидыНерабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	ВидыНерабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", НомерГода);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГОД(ДанныеКалендаря.Дата) КАК ГодКалендаря,
		|	КВАРТАЛ(ДанныеКалендаря.Дата) КАК КварталКалендаря,
		|	МЕСЯЦ(ДанныеКалендаря.Дата) КАК МесяцКалендаря,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеКалендаря.Дата) КАК КалендарныеДни,
		|	ДанныеКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеКалендаря
		|ГДЕ
		|	ДанныеКалендаря.Год = &Год
		|	И ДанныеКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеКалендаря.ВидДня,
		|	ГОД(ДанныеКалендаря.Дата),
		|	КВАРТАЛ(ДанныеКалендаря.Дата),
		|	МЕСЯЦ(ДанныеКалендаря.Дата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГодКалендаря,
		|	КварталКалендаря,
		|	МесяцКалендаря
		|ИТОГИ ПО
		|	ГодКалендаря,
		|	КварталКалендаря,
		|	МесяцКалендаря";
	Результат = Запрос.Выполнить();
	
	ВыборкаПоГоду = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоГоду.Следующий() Цикл
		
		ВыборкаПоКварталу = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКварталу.Следующий() Цикл
			НомерКвартала = Макет.ПолучитьОбласть("Квартал");
			НомерКвартала.Параметры.НомерКвартала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 квартал'"), ВыборкаПоКварталу.КварталКалендаря);
			ТабличныйДокумент.Вывести(НомерКвартала);
			
			ШапкаКвартала = Макет.ПолучитьОбласть("ШапкаКвартала");
			ТабличныйДокумент.Вывести(ШапкаКвартала);
			
			КалендарныеДниКв = 0;
			РабочееВремя40Кв = 0;
			РабочееВремя36Кв = 0;
			РабочееВремя24Кв = 0;
			РабочиеДниКв	 = 0;
			ВыходныеДниКв	 = 0;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 
				Или ВыборкаПоКварталу.КварталКалендаря = 3 Тогда
				КалендарныеДниПолугодие1	= 0;
				РабочееВремя40Полугодие1	= 0;
				РабочееВремя36Полугодие1	= 0;
				РабочееВремя24Полугодие1	= 0;
				РабочиеДниПолугодие1		= 0;
				ВыходныеДниПолугодие1		= 0;
			КонецЕсли;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 Тогда
				КалендарныеДниГод	= 0;
				РабочееВремя40Год	= 0;
				РабочееВремя36Год	= 0;
				РабочееВремя24Год	= 0;
				РабочиеДниГод		= 0;
				ВыходныеДниГод		= 0;
			КонецЕсли;
			
			ВыборкаПоМесяцу = ВыборкаПоКварталу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоМесяцу.Следующий() Цикл
				
				ВыходныеДни		= 0;
				РабочееВремя40	= 0;
				РабочееВремя36	= 0;
				РабочееВремя24	= 0;
				КалендарныеДни	= 0;
				РабочиеДни		= 0;
				ВыборкаПоВидуДня = ВыборкаПоМесяцу.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				Пока ВыборкаПоВидуДня.Следующий() Цикл
					Если ВидыНерабочихДней.Найти(ВыборкаПоВидуДня.ВидДня) <> Неопределено Тогда
						 ВыходныеДни = ВыходныеДни + ВыборкаПоВидуДня.КалендарныеДни
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда 
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 8;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни * 36 / 5;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни * 24 / 5;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 7;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни * (36 / 5 - 1);
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни * (24 / 5 - 1);
						 РабочиеДни		= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 КонецЕсли;
					 КалендарныеДни = КалендарныеДни + ВыборкаПоВидуДня.КалендарныеДни;
				КонецЦикла;
				
				КалендарныеДниКв = КалендарныеДниКв + КалендарныеДни;
				РабочееВремя40Кв = РабочееВремя40Кв + РабочееВремя40;
				РабочееВремя36Кв = РабочееВремя36Кв + РабочееВремя36;
				РабочееВремя24Кв = РабочееВремя24Кв + РабочееВремя24;
				РабочиеДниКв	 = РабочиеДниКв 	+ РабочиеДни;
				ВыходныеДниКв	 = ВыходныеДниКв	+ ВыходныеДни;
				
				КалендарныеДниПолугодие1 = КалендарныеДниПолугодие1 + КалендарныеДни;
				РабочееВремя40Полугодие1 = РабочееВремя40Полугодие1 + РабочееВремя40;
				РабочееВремя36Полугодие1 = РабочееВремя36Полугодие1 + РабочееВремя36;
				РабочееВремя24Полугодие1 = РабочееВремя24Полугодие1 + РабочееВремя24;
				РабочиеДниПолугодие1	 = РабочиеДниПолугодие1 	+ РабочиеДни;
				ВыходныеДниПолугодие1	 = ВыходныеДниПолугодие1	+ ВыходныеДни;
				
				КалендарныеДниГод = КалендарныеДниГод + КалендарныеДни;
				РабочееВремя40Год = РабочееВремя40Год + РабочееВремя40;
				РабочееВремя36Год = РабочееВремя36Год + РабочееВремя36;
				РабочееВремя24Год = РабочееВремя24Год + РабочееВремя24;
				РабочиеДниГод	 = РабочиеДниГод 	+ РабочиеДни;
				ВыходныеДниГод	 = ВыходныеДниГод	+ ВыходныеДни;
				
				КолонкаМесяца = Макет.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни = ВыходныеДни;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДни;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДни;
				КолонкаМесяца.Параметры.ИмяМесяца 		= Формат(Дата(НомерГода, ВыборкаПоМесяцу.МесяцКалендаря, 1), "ДФ='ММММ'");
				ТабличныйДокумент.Присоединить(КолонкаМесяца);
				
			КонецЦикла;
			КолонкаМесяца = Макет.ПолучитьОбласть("КолонкаМесяца");
			КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниКв;
			КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Кв;
			КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Кв;
			КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Кв;
			КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниКв;
			КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниКв;
			КолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 квартал'"), ВыборкаПоКварталу.КварталКалендаря);
			ТабличныйДокумент.Присоединить(КолонкаМесяца);
			
			Если ВыборкаПоКварталу.КварталКалендаря = 2 
				Или ВыборкаПоКварталу.КварталКалендаря = 4 Тогда 
				КолонкаМесяца = Макет.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Полугодие1;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниПолугодие1;
				КолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 полугодие'"), ВыборкаПоКварталу.КварталКалендаря / 2);
				ТабличныйДокумент.Присоединить(КолонкаМесяца);
			КонецЕсли;
			
		КонецЦикла;
		
		КолонкаМесяца = Макет.ПолучитьОбласть("КолонкаМесяца");
		КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниГод;
		КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
		КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
		КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
		КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниГод;
		КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниГод;
		КолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 год'"), Формат(ВыборкаПоГоду.ГодКалендаря, "ЧГ="));
		ТабличныйДокумент.Присоединить(КолонкаМесяца);
		
	КонецЦикла;
	
	КолонкаМесяца = Макет.ПолучитьОбласть("Среднемесячный");
	КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
	КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
	КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
	КолонкаМесяца.Параметры.ИмяМесяца 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 год'"), Формат(НомерГода, "ЧГ="));
	ТабличныйДокумент.Вывести(КолонкаМесяца);
	
	КолонкаМесяца = Макет.ПолучитьОбласть("КолонкаМесяцаСр");
	КолонкаМесяца.Параметры.РабочееВремя40 	= Формат(РабочееВремя40Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя36 	= Формат(РабочееВремя36Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя24 	= Формат(РабочееВремя24Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.ИмяМесяца 		= НСтр("ru = 'Среднемесячное количество'");
	ТабличныйДокумент.Присоединить(КолонкаМесяца);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли
