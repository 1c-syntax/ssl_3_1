///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Макет - УникальныйИдентификатор
//  
// Возвращаемое значение:
//  Массив из Строка
// 
Функция ЯзыкиМакета(Макет) Экспорт 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.Макет КАК Макет,
	|	&КодОсновногоЯзыка КАК КодЯзыка
	|ИЗ
	|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МакетыПечатныхФормПредставления.Макет,
	|	МакетыПечатныхФормПредставления.КодЯзыка
	|ИЗ
	|	Справочник.МакетыПечатныхФорм.Представления КАК МакетыПечатныхФормПредставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|		ПО МакетыПечатныхФормПредставления.Ссылка = МакетыПечатныхФорм.Ссылка
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Макет);
	Запрос.УстановитьПараметр("КодОсновногоЯзыка", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Результат = Новый Массив;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Макет.Получить() <> Неопределено Тогда
			Результат.Добавить(Выборка.КодЯзыка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаписатьМакет(ОписаниеМакета) Экспорт
	
	Ссылка = ОписаниеМакета.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Справочники.МакетыПечатныхФорм.СоздатьЭлемент();
		Объект.ИсточникДанных = ОписаниеМакета.Владелец;
		Объект.ТипМакета = ОписаниеМакета.ТипМакета;
		Объект.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;

	Наименование = ОписаниеМакета.Наименование;
	КодЯзыка = ОписаниеМакета.КодЯзыка;
	Макет = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ОписаниеМакета.АдресМакетаВоВременномХранилище));

	ОбщегоНазначения.УстановитьЗначениеРеквизита(Объект, "Наименование", Наименование, КодЯзыка);
	ОбщегоНазначения.УстановитьЗначениеРеквизита(Объект, "Макет", Макет, КодЯзыка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МакетыПечатныхФорм");
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат "ПФ_" + Строка(Объект.Идентификатор);
	
КонецФункции

// Параметры:
//  Макет - СправочникСсылка.МакетыПечатныхФорм
//  Используется - Булево
//
Процедура УстановитьИспользованиеМакета(Макет, Используется) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МакетыПечатныхФорм");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Макет);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Объект = Макет.ПолучитьОбъект();
		Объект.Используется = Используется;
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция МакетСуществует(Идентификатор) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Ссылка 
	|ИЗ
	|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция НайтиМакет(ПутьКМакету, КодЯзыка) Экспорт
	
	Идентификатор = ИдентификаторМакета(ПутьКМакету);
	Если Идентификатор <> Неопределено Тогда
		Возврат МакетПечатнойФормыПоИдентификатору(Идентификатор, КодЯзыка);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция МакетПечатнойФормыПоИдентификатору(Идентификатор, КодЯзыка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФормПредставления.Макет
	|ИЗ
	|	Справочник.МакетыПечатныхФорм.Представления КАК МакетыПечатныхФормПредставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|		ПО МакетыПечатныхФормПредставления.Ссылка = МакетыПечатныхФорм.Ссылка
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор
	|	И МакетыПечатныхФормПредставления.КодЯзыка = &КодЯзыка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МакетыПечатныхФорм.Макет
	|ИЗ
	|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("КодЯзыка", КодЯзыка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Макет = Выборка.Макет.Получить(); // ХранилищеЗначения
		Если Макет = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Макет.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		Возврат Макет;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВладелецМакета(ПутьКМакету) Экспорт
	
	Идентификатор = ИдентификаторМакета(ПутьКМакету);
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.ИсточникДанных КАК ИсточникДанных
	|ИЗ
	|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИсточникДанных;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИдентификаторМакета(ПутьКМакету)
	
	ЧастиПути = СтрРазделить(ПутьКМакету, ".", Истина);
	
	ИмяМакета = ЧастиПути[ЧастиПути.ВГраница()];
	Если СтрНачинаетсяС(ИмяМакета, "ПФ_") Тогда
		Идентификатор = Сред(ИмяМакета, 4);
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда
			Возврат Новый УникальныйИдентификатор(Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращаемое значение:
//  СправочникСсылка.МакетыПечатныхФорм
//
Функция СсылкаМакета(ПутьКМакету) Экспорт
	
	Идентификатор = ИдентификаторМакета(ПутьКМакету);
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|ГДЕ
	|	МакетыПечатныхФорм.Идентификатор = &Идентификатор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьМакет(Ссылка, КодЯзыка = Неопределено) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если КодЯзыка = Неопределено Или КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка() Тогда
		Объект.УстановитьПометкуУдаления(Истина);
	Иначе
		ОбщегоНазначения.УстановитьЗначениеРеквизита(Объект, "Макет", Новый ХранилищеЗначения(Неопределено), КодЯзыка);
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МакетыПечатныхФорм");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецЕсли