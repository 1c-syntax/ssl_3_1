///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив Из Строка -
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПоставляемыхДанных");
	НеРедактируемыеРеквизиты.Добавить("ПоставляемыйПрофильИзменен");
	НеРедактируемыеРеквизиты.Добавить("ВидыДоступа.*");
	НеРедактируемыеРеквизиты.Добавить("ЗначенияДоступа.*");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ПрофилиГруппДоступа
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|	ПО ГруппыДоступа.Профиль = ПрофилиГруппДоступа.Ссылка
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоГруппа
	|	ИЛИ Ссылка <> Значение(Справочник.ПрофилиГруппДоступа.Администратор)
	|	  И ЭтоАвторизованныйПользователь(ГруппыДоступа.Ответственный)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных.
Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
	
	УправлениеДоступомСлужебный.ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ);
	
КонецПроцедуры

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура Обновляет описание поставляемых профилей в
// параметрах ограничения доступа при изменении конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьОписаниеПоставляемыхПрофилей(ЕстьИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемыеПрофили = ПоставляемыеПрофили();
	
	НачатьТранзакцию();
	Попытка
		ЕстьТекущиеИзменения = Ложь;
		
		СтандартныеПодсистемыСервер.ОбновитьПараметрРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ОписаниеПоставляемыхПрофилей",
			ПоставляемыеПрофили, ЕстьТекущиеИзменения);
		
		СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ОписаниеПоставляемыхПрофилей",
			?(ЕстьТекущиеИзменения,
			  Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина),
			  Новый ФиксированнаяСтруктура()) );
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура Обновляет состав предопределенных профилей в
// параметрах ограничения доступа при изменении конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьСоставПредопределенныхПрофилей(ЕстьИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредопределенныеПрофили = Метаданные.Справочники.ПрофилиГруппДоступа.ПолучитьИменаПредопределенных();
	
	НачатьТранзакцию();
	Попытка
		ЕстьУдаленные = Ложь;
		ЕстьТекущиеИзменения = Ложь;
		СтароеЗначение = Неопределено;
		
		СтандартныеПодсистемыСервер.ОбновитьПараметрРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ПредопределенныеПрофилиГруппДоступа",
			ПредопределенныеПрофили, , СтароеЗначение);
		
		Если Не ПредопределенныеПрофилиСовпадают(ПредопределенныеПрофили, СтароеЗначение, ЕстьУдаленные) Тогда
			ЕстьТекущиеИзменения = Истина;
		КонецЕсли;
		
		СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ПредопределенныеПрофилиГруппДоступа",
			?(ЕстьУдаленные,
			  Новый ФиксированнаяСтруктура("ЕстьУдаленные", Истина),
			  Новый ФиксированнаяСтруктура()) );
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЕстьТекущиеИзменения Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет поставляемые профили справочника по результату изменения
// описаний поставляемых профилей, сохраненных в параметрах ограничения доступа.
//
Процедура ОбновитьПоставляемыеПрофилиПоИзменениямКонфигурации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследниеИзменения = СтандартныеПодсистемыСервер.ИзмененияПараметраРаботыПрограммы(
		"СтандартныеПодсистемы.УправлениеДоступом.ОписаниеПоставляемыхПрофилей");
		
	Если ПоследниеИзменения = Неопределено Тогда
		ТребуетсяОбновление = Истина;
	Иначе
		ТребуетсяОбновление = Ложь;
		Для каждого ЧастьИзменений Из ПоследниеИзменения Цикл
			
			Если ТипЗнч(ЧастьИзменений) = Тип("ФиксированнаяСтруктура")
			   И ЧастьИзменений.Свойство("ЕстьИзменения")
			   И ТипЗнч(ЧастьИзменений.ЕстьИзменения) = Тип("Булево") Тогда
				
				Если ЧастьИзменений.ЕстьИзменения Тогда
					ТребуетсяОбновление = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				ТребуетсяОбновление = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		ОбновитьПоставляемыеПрофили();
	КонецЕсли;
	
КонецПроцедуры

// Обновляет поставляемые профили, и при необходимости обновляет группы доступа этих профилей.
// Создаются не найденные поставляемые профили групп доступа.
//
// Особенности обновления настраиваются в процедуре ЗаполнитьПоставляемыеПрофилиГруппДоступа
// общего модуля УправлениеДоступомПереопределяемый (см. комментарий к процедуре).
//
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьПоставляемыеПрофили(ЕстьИзменения = Неопределено) Экспорт
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	
	ОписанияПрофилей    = ПоставляемыеПрофили.ОписанияПрофилейМассив;
	ПараметрыОбновления = ПоставляемыеПрофили.ПараметрыОбновления;
	ОбновленныеПрофили  = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен КАК ПоставляемыйПрофильИзменен,
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных КАК ИдентификаторПоставляемыхДанных,
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК Найден
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	НЕ ПрофилиГруппДоступа.ЭтоГруппа
	|	И ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных <> &ПустойУникальныйИдентификатор";
	ТекущиеПрофили = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СвойстваПрофиля Из ОписанияПрофилей Цикл
		
		СтрокаТекущегоПрофиля = ТекущиеПрофили.Найти(
			Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор),
			"ИдентификаторПоставляемыхДанных");
		
		ПрофильОбновлен = Ложь;
		
		Если СтрокаТекущегоПрофиля = Неопределено Тогда
			// Создание нового поставляемого профиля.
			Если ОбновитьПрофильГруппДоступа(СвойстваПрофиля, Истина) Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
			Профиль = ПоставляемыйПрофильПоИдентификатору(СвойстваПрофиля.Идентификатор);
			
		Иначе
			СтрокаТекущегоПрофиля.Найден = Истина;
			
			Профиль = СтрокаТекущегоПрофиля.Ссылка;
			Если НЕ СтрокаТекущегоПрофиля.ПоставляемыйПрофильИзменен
			 ИЛИ ПараметрыОбновления.ОбновлятьИзмененныеПрофили Тогда
				// Обновление поставляемого профиля.
				ПрофильОбновлен = ОбновитьПрофильГруппДоступа(СвойстваПрофиля, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОбновления.ОбновлятьГруппыДоступа Тогда
			ГруппыДоступаПрофиляОбновлены = Справочники.ГруппыДоступа.ОбновитьГруппыДоступаПрофиля(
				Профиль, ПараметрыОбновления.ОбновлятьГруппыДоступаСУстаревшимиНастройками);
			
			ПрофильОбновлен = ПрофильОбновлен ИЛИ ГруппыДоступаПрофиляОбновлены;
		КонецЕсли;
		
		Если ПрофильОбновлен Тогда
			ЕстьИзменения = Истина;
			ОбновленныеПрофили.Добавить(Профиль);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТекущегоПрофиля Из ТекущиеПрофили Цикл
		Если СтрокаТекущегоПрофиля.Найден Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТекущегоПрофиля.ПоставляемыйПрофильИзменен Тогда
			Продолжить;
		КонецЕсли;
		ПрофильОбъект = СтрокаТекущегоПрофиля.Ссылка.ПолучитьОбъект();
		Если ПрофильОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ПрофильОбъект.ПометкаУдаления = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		ОбновленныеПрофили.Добавить(ПрофильОбъект.Ссылка);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	ОбновитьВспомогательныеДанныеПрофилей(ОбновленныеПрофили, ЕстьИзменения);
	
КонецПроцедуры

Процедура ОбновитьВспомогательныеДанныеПрофилей(Профили = Неопределено, ЕстьИзменения = Ложь) Экспорт
	
	Если Профили = Неопределено Тогда
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра( , , ЕстьИзменения);
		РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра( , ЕстьИзменения);
		УправлениеДоступомСлужебный.ОбновитьРолиПользователей( , , ЕстьИзменения);
		
	ИначеЕсли Профили.Количество() > 0 Тогда
		ГруппыДоступаПрофилей = Справочники.ГруппыДоступа.ГруппыДоступаПрофиля(Профили);
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра(ГруппыДоступаПрофилей, , ЕстьИзменения);
		РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра(ГруппыДоступаПрофилей, ЕстьИзменения);
		
		// Обновление ролей пользователей.
		ПользователиДляОбновления =
			Справочники.ГруппыДоступа.ПользователиДляОбновленияРолейПоПрофилю(Профили);
		
		УправлениеДоступомСлужебный.ОбновитьРолиПользователей(ПользователиДляОбновления, , ЕстьИзменения);
	КонецЕсли;
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
// 
// Параметры:
//  ТекущиеДела - см. ТекущиеДелаСлужебный.ТекущиеДела
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не Пользователи.ЭтоПолноправныйПользователь()
		Или МодульТекущиеДелаСервер.ДелоОтключено("ПрофилиГруппДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		КоличествоНесовместимыхПрофилейГруппДоступа = НесовместимыеПрофилиГруппДоступа().Количество();
		
		ИдентификаторПрофиля = "НеСовместимыСТекущейВерсией" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор = ИдентификаторПрофиля;
		Дело.ЕстьДела      = КоличествоНесовместимыхПрофилейГруппДоступа > 0;
		Дело.Представление = НСтр("ru = 'Не совместимы с текущей версией'");
		Дело.Количество    = КоличествоНесовместимыхПрофилейГруппДоступа;
		Дело.Владелец      = Раздел;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор = "ПрофилиГруппДоступа";
		Дело.ЕстьДела      = КоличествоНесовместимыхПрофилейГруппДоступа > 0;
		Дело.Важное        = Истина;
		Дело.Представление = НСтр("ru = 'Профили групп доступа'");
		Дело.Количество    = КоличествоНесовместимыхПрофилейГруппДоступа;
		Дело.Форма         = "Справочник.ПрофилиГруппДоступа.Форма.ФормаСписка";
		Дело.ПараметрыФормы= Новый Структура("ПрофилиСРолямиПомеченнымиНаУдаление", Истина);
		Дело.Владелец      = ИдентификаторПрофиля;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строку уникального идентификатора
// поставляемого и предопределенного профиля Администратор.
//
Функция ИдентификаторПрофиляАдминистратор(Строка = Истина) Экспорт
	
	Идентификатор = "6c4b0307-43a4-4141-9c35-3dd7e9586d41";
	
	Если Строка Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор(Идентификатор);
	
КонецФункции

// Возвращает ссылку на поставляемый профиль по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - имя или уникальный идентификатор поставляемого профиля.
//
Функция ПоставляемыйПрофильПоИдентификатору(Идентификатор, ВызыватьИсключениеЕслиНетВБазеДанных = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(Строка(Идентификатор));
	
	Если СвойстваПрофиля = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Профиль c идентификатором ""%1""
			           |не поставляется в программе.'"),
			Строка(Идентификатор));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПоставляемыхДанных",
		Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных = &ИдентификаторПоставляемыхДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ВызыватьИсключениеЕслиНетВБазеДанных Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поставляемый профиль с идентификатором ""%1""
			           |не найден в информационной базе.'"),
			Строка(Идентификатор));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает строку уникального идентификатора
// данных поставляемого профиля.
//
Функция ИдентификаторПоставляемогоПрофиля(Профиль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Профиль);
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.Ссылка = &Ссылка
	|	И ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных <> &ПустойУникальныйИдентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Строка(Выборка.ИдентификаторПоставляемыхДанных);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет изменен ли поставляемый профиль по сравнению с описанием из процедуры.
// УправлениеДоступомПереопределяемый.ЗаполнитьПоставляемыеПрофилиГруппДоступа().
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа
//                     (возвращается реквизит ПоставляемыйПрофильИзменен),
//               - СправочникОбъект.ПрофилиГруппДоступа
//                     (возвращается результат сравнения заполнения объекта
//                      с описанием в переопределяемом общем модуле).
//
// Возвращаемое значение:
//  Булево - 
//
Функция ПоставляемыйПрофильИзменен(Профиль) Экспорт
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Профиль, "ПоставляемыйПрофильИзменен");
	КонецЕсли;
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей().ОписанияПрофилей;
	СвойстваПрофиля = ОписанияПрофилей.Получить(Строка(Профиль.ИдентификаторПоставляемыхДанных));
	
	Если СвойстваПрофиля = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеРолейПрофиля = ОписаниеРолейПрофиля(СвойстваПрофиля);
	
	Если ВРег(Профиль.Наименование) <> ВРег(СвойстваПрофиля.Наименование) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Профиль.Роли.Количество()            <> ОписаниеРолейПрофиля.Количество()
	 ИЛИ Профиль.ВидыДоступа.Количество()     <> СвойстваПрофиля.ВидыДоступа.Количество()
	 ИЛИ Профиль.ЗначенияДоступа.Количество() <> СвойстваПрофиля.ЗначенияДоступа.Количество()
	 ИЛИ Профиль.Назначение.Количество()      <> СвойстваПрофиля.Назначение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого Роль Из ОписаниеРолейПрофиля Цикл
		МетаданныеРоли = Метаданные.Роли.Найти(Роль);
		Если МетаданныеРоли = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При проверке поставляемого профиля ""%1""
				           |роль ""%2"" не найдена в метаданных.'"),
				СвойстваПрофиля.Наименование,
				Роль);
		КонецЕсли;
		ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
		Если Профиль.Роли.НайтиСтроки(Новый Структура("Роль", ИдентификаторРоли)).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОписаниеВидаДоступа Из СвойстваПрофиля.ВидыДоступа Цикл
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.Ключ);
		Отбор = Новый Структура;
		Отбор.Вставить("ВидДоступа",        СвойстваВидаДоступа.Ссылка);
		Отбор.Вставить("Предустановленный", ОписаниеВидаДоступа.Значение = "Предустановленный");
		Отбор.Вставить("ВсеРазрешены",      ОписаниеВидаДоступа.Значение = "ВначалеВсеРазрешены");
		Если Профиль.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ОписаниеЗначенияДоступа Из СвойстваПрофиля.ЗначенияДоступа Цикл
		Отбор = Новый Структура;
		Запрос = Новый Запрос(СтрЗаменить("ВЫБРАТЬ Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.ЗначениеДоступа));
		Отбор.Вставить("ЗначениеДоступа", Запрос.Выполнить().Выгрузить()[0].Значение);
		Если Профиль.ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипПользователей Из СвойстваПрофиля.Назначение Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ТипПользователей", ТипПользователей);
		Если Профиль.Назначение.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет наличие начального заполнения для профиля групп доступа в переопределяемом модуле.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//
// Возвращаемое значение:
//  Булево - 
//
Функция ЕстьНачальноеЗаполнениеПрофиля(Знач Профиль) Экспорт
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	Возврат СвойстваПрофиля <> Неопределено;
	
КонецФункции

// Определяет запрет изменения поставляемого профиля.
// Не поставляемый профиль не может иметь запрета изменения.
//
// Параметры:
//  Профиль      - СправочникОбъект.ПрофилиГруппДоступа,
//                 ДанныеФормыСтруктура созданные по объекту.
//
// Возвращаемое значение:
//  Булево - 
//
Функция ЗапретИзмененияПрофиля(Знач Профиль) Экспорт
	
	Если Профиль.ИдентификаторПоставляемыхДанных =
			Новый УникальныйИдентификатор(ИдентификаторПрофиляАдминистратор()) Тогда
		// Изменение профиля Администратор всегда запрещено.
		Возврат Истина;
	КонецЕсли;
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(
		Строка(Профиль.ИдентификаторПоставляемыхДанных));
	
	Возврат СвойстваПрофиля <> Неопределено
	      И ПоставляемыеПрофили.ПараметрыОбновления.ЗапретитьИзменениеПрофилей;
	
КонецФункции

// Возвращает описание назначения поставляемого профиля.
//
// Параметры:
//  Профиль - СправочникСсылка.ПрофилиГруппДоступа.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПояснениеПоставляемогоПрофиля(Профиль) Экспорт
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ПояснениеПоставляемыхПрофилей = УправлениеДоступомСлужебныйПовтИсп.ПояснениеПоставляемыхПрофилей();
	
	Возврат Строка(ПояснениеПоставляемыхПрофилей.Получить(ИдентификаторПоставляемыхДанных));
	
КонецФункции

// Создает поставляемый профиль в справочнике ПрофилиГруппДоступа, свойственный
// прикладному решению и позволяет перезаполнить ранее созданный поставляемый профиль
// по его поставляемому описанию.
//  Поиск начального заполнения осуществляется по строке уникального идентификатора профиля.
//
// Параметры:
//  Профиль      - СправочникСсылка.ПрофилиГруппДоступа.
//                 Если для указанного профиля описание начального заполнения найдено,
//                 содержимое профиля полностью замещается.
//
// ОбновитьГруппыДоступа - Булево, если Истина, виды доступа групп доступа профиля будут обновлены.
//
Процедура ЗаполнитьПоставляемыйПрофиль(Знач Профиль, Знач ОбновитьГруппыДоступа) Экспорт
	
	ИдентификаторПоставляемыхДанных = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Профиль, "ИдентификаторПоставляемыхДанных"));
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных);
	
	Если СвойстваПрофиля <> Неопределено Тогда
		
		ОбновитьПрофильГруппДоступа(СвойстваПрофиля);
		
		Если ОбновитьГруппыДоступа Тогда
			Справочники.ГруппыДоступа.ОбновитьГруппыДоступаПрофиля(Профиль, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список ссылок на профили, содержащие недоступные роли или роли помеченные на удаление.
//
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.ПрофилиГруппДоступа.
//
Функция НесовместимыеПрофилиГруппДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Ссылка КАК Ссылка,
	|	Профили.Назначение.(
	|		ТипПользователей КАК ТипПользователей
	|	) КАК Назначение,
	|	Профили.Роли.(
	|		Роль КАК Роль
	|	) КАК Роли
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	НесовместимыеПрофили = Новый Массив;
	НедоступныеРолиПоНазначению = Новый Соответствие;
	
	Для Каждого ОписаниеПрофиля Из Выгрузка Цикл
		НазначениеПрофиля = УправлениеДоступомСлужебныйКлиентСервер.НазначениеПрофиля(ОписаниеПрофиля);
		НедоступныеРоли = НедоступныеРолиПоНазначению.Получить(НазначениеПрофиля);
		Если НедоступныеРоли = Неопределено Тогда
			НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля);
			НедоступныеРолиПоНазначению.Вставить(НазначениеПрофиля, НедоступныеРоли);
		КонецЕсли;
		
		Если ОписаниеПрофиля.Роли.Найти(Неопределено, "Роль") <> Неопределено Тогда
			НесовместимыеПрофили.Добавить(ОписаниеПрофиля.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ОписаниеРолей = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(
			ОписаниеПрофиля.Роли.ВыгрузитьКолонку("Роль"), Ложь);
		
		Для Каждого ОписаниеРоли Из ОписаниеРолей Цикл
			Если ОписаниеРоли.Значение = Неопределено Тогда
				// Роль, недоступная до перезапуска, не является проблемой.
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеРоли.Значение = Null
			 Или НедоступныеРоли.Получить(ОписаниеРоли.Значение.Имя) <> Неопределено
			 Или ВРег(Лев(ОписаниеРоли.Значение.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				
				НесовместимыеПрофили.Добавить(ОписаниеПрофиля.Ссылка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НесовместимыеПрофили;
	
КонецФункции

// См. Справочники.ПрофилиГруппДоступа.ПоставляемыеПрофили.
Функция ОписаниеПоставляемыхПрофилей() Экспорт
	
	ПоставляемыеПрофили = СтандартныеПодсистемыСервер.ПараметрРаботыПрограммы(
		"СтандартныеПодсистемы.УправлениеДоступом.ОписаниеПоставляемыхПрофилей");
	
	Если ПоставляемыеПрофили = Неопределено Тогда
		ОбновитьОписаниеПоставляемыхПрофилей();
	КонецЕсли;
	
	ПоставляемыеПрофили = СтандартныеПодсистемыСервер.ПараметрРаботыПрограммы(
		"СтандартныеПодсистемы.УправлениеДоступом.ОписаниеПоставляемыхПрофилей");
	
	Возврат ПоставляемыеПрофили;
	
КонецФункции

Функция ИзменилисьВидыИлиЗначенияДоступаИлиНазначение(СтарыеЗначения, ТекущийОбъект) Экспорт
	
	Если СтарыеЗначения.Ссылка <> ТекущийОбъект.Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидыДоступа     = СтарыеЗначения.ВидыДоступа.Выгрузить();
	ЗначенияДоступа = СтарыеЗначения.ЗначенияДоступа.Выгрузить();
	Назначение      = СтарыеЗначения.Назначение.Выгрузить();
	
	Если ВидыДоступа.Количество()     <> ТекущийОбъект.ВидыДоступа.Количество()
	 Или ЗначенияДоступа.Количество() <> ТекущийОбъект.ЗначенияДоступа.Количество()
	 Или Назначение.Количество()      <> ТекущийОбъект.Назначение.Количество() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("ВидДоступа, Предустановленный, ВсеРазрешены");
	Для Каждого Строка Из ТекущийОбъект.ВидыДоступа Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Если ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("ВидДоступа, ЗначениеДоступа");
	Для Каждого Строка Из ТекущийОбъект.ЗначенияДоступа Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Если ЗначенияДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("ТипПользователей");
	Для Каждого Строка Из ТекущийОбъект.Назначение Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Если Назначение.НайтиСтроки(Отбор).Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки обмена данными в РИБ.

// Только для внутреннего использования.
Процедура ВосстановитьСоставРолейРасширений(ЭлементДанных) Экспорт
	
	УдалитьРолиРасширений(ЭлементДанных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Профиль", ЭлементДанных.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПрофилей.Роль КАК Роль
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофилей
	|ГДЕ
	|	РолиПрофилей.Ссылка = &Профиль
	|	И ТИПЗНАЧЕНИЯ(РолиПрофилей.Роль) = ТИП(Справочник.ИдентификаторыОбъектовРасширений)";
	
	// Добавление ролей расширений к новому состав ролей конфигурации.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементДанных.Роли.Добавить().Роль = Выборка.Роль;
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура УдалитьРолиРасширений(ЭлементДанных) Экспорт
	
	Индекс = ЭлементДанных.Роли.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если ТипЗнч(ЭлементДанных.Роли[Индекс].Роль) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ЭлементДанных.Роли.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура УдалитьРолиРасширенийВоВсехПрофиляхГруппДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиПрофилей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофилей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(РолиПрофилей.Роль) <> ТИП(Справочник.ИдентификаторыОбъектовМетаданных)";
	
	ЕстьИзменения = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПрофильОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдалитьРолиРасширений(ПрофильОбъект);
		Если ПрофильОбъект.Модифицированность() Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект, Ложь);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра();
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ЗарегистрироватьПрофильИзмененныйПриЗагрузке(ЭлементДанных) Экспорт
	
	// Регистрация профилей, для групп доступа которых нужно обновить регистры сведений
	// ТаблицыГруппДоступа, ЗначенияГруппДоступа и ЗначенияГруппДоступаПоУмолчанию и роли пользователей.
	
	СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка,
		"Ссылка, ПометкаУдаления, Роли, Назначение, ВидыДоступа, ЗначенияДоступа");
	
	ТребуетсяРегистрация = Ложь;
	Профиль = ЭлементДанных.Ссылка;
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		ТребуетсяРегистрация = Истина;
		
	ИначеЕсли СтарыеЗначения.Ссылка <> ЭлементДанных.Ссылка Тогда
		ТребуетсяРегистрация = Истина;
		Профиль = ПользователиСлужебный.СсылкаОбъекта(ЭлементДанных);
		
	ИначеЕсли СтарыеЗначения.ПометкаУдаления <> ЭлементДанных.ПометкаУдаления
	      Или ИзменилисьВидыИлиЗначенияДоступаИлиНазначение(СтарыеЗначения, ЭлементДанных) Тогда
		
		ТребуетсяРегистрация = Истина;
	Иначе
		СтарыеРоли = СтарыеЗначения.Роли.Выгрузить();
		Если СтарыеРоли.Количество() <> ЭлементДанных.Роли.Количество() Тогда
			ТребуетсяРегистрация = Истина;
		Иначе
			Для Каждого Строка Из ЭлементДанных.Роли Цикл
				Если СтарыеРоли.Найти(Строка.Роль, "Роль") = Неопределено Тогда
					ТребуетсяРегистрация = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТребуетсяРегистрация Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ГруппыДоступа.ЗарегистрироватьСсылки("Профили", Профиль);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбновитьВспомогательныеДанныеПрофилейИзмененныхПриЗагрузке() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Изменения профилей в АРМ заблокированы и не загружаются в область данных.
		Возврат;
	КонецЕсли;
	
	ИзмененныеПрофили = Справочники.ГруппыДоступа.ЗарегистрированныеСсылки("Профили");
	
	Если ИзмененныеПрофили.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененныеПрофили.Количество() = 1
	   И ИзмененныеПрофили[0] = Неопределено Тогда
		
		ОбновитьВспомогательныеДанныеПрофилей();
	Иначе
		ОбновитьВспомогательныеДанныеПрофилей(ИзмененныеПрофили);
	КонецЕсли;
	
	Справочники.ГруппыДоступа.ЗарегистрироватьСсылки("Профили", Null);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция ЗаполненныеПоставляемыеПрофили()
	
	ПараметрыОбновления = Новый Структура;
	// Свойства обновления поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьИзмененныеПрофили", Истина);
	ПараметрыОбновления.Вставить("ЗапретитьИзменениеПрофилей", Истина);
	// Свойства обновления групп доступа поставляемых профилей.
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступа", Истина);
	ПараметрыОбновления.Вставить("ОбновлятьГруппыДоступаСУстаревшимиНастройками", Ложь);
	
	ОписанияПрофилей = Новый Массив;
	
	// Описание для заполнения предопределенного профиля "Администратор".
	ОписаниеПрофиляАдминистратор = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ЗаполнитьПрофильАдминистратор(ОписаниеПрофиляАдминистратор);
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиляАдминистратор);
	
	ИнтеграцияПодсистемБСП.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(
		ОписанияПрофилей, ПараметрыОбновления);
	
	УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(
		ОписанияПрофилей, ПараметрыОбновления);
	
	Если ОписанияПрофилей.Найти(ОписаниеПрофиляАдминистратор) = Неопределено Тогда
		ОписанияПрофилей.Добавить(ОписаниеПрофиляАдминистратор);
	КонецЕсли;
	
	ЗаполнитьПрофильАдминистратор(ОписаниеПрофиляАдминистратор, Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ОписанияПрофилей.Добавить(
			УправлениеДоступомСлужебный.ОписаниеПрофиляОткрытиеВнешнихОтчетовИОбработок());
	КонецЕсли;
	
	Возврат Новый Структура("ОписанияПрофилей, ПараметрыОбновления", ОписанияПрофилей, ПараметрыОбновления);
	
КонецФункции

// Для функции ЗаполненныеПоставляемыеПрофили.
Процедура ЗаполнитьПрофильАдминистратор(ОписаниеПрофиляАдминистратор, КромеОписания = Ложь)
	
	Если КромеОписания Тогда
		Описание = ОписаниеПрофиляАдминистратор.Описание;
	Иначе
		Описание =
			НСтр("ru = 'Предназначен для:
			           |- настройки параметров работы и обслуживания информационной системы,
			           |- настройки прав доступа других пользователей,
			           |- удаления помеченных объектов,
			           |- в редких случаях для внесения изменений в конфигурацию.
			           |
			           |Рекомендуется не использовать для ""обычной"" работы в информационной системе.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОписаниеПрофиляАдминистратор,
		УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа());
	
	ОписаниеПрофиляАдминистратор.Имя           = "Администратор";
	ОписаниеПрофиляАдминистратор.Идентификатор = ИдентификаторПрофиляАдминистратор();
	ОписаниеПрофиляАдминистратор.Наименование  = НСтр("ru = 'Администратор'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиляАдминистратор.Роли.Добавить("АдминистраторСистемы");
	ОписаниеПрофиляАдминистратор.Роли.Добавить("ПолныеПрава");
	ОписаниеПрофиляАдминистратор.Описание = Описание;
	
КонецПроцедуры

Функция ПоставляемыеПрофили()
	
	ЗаполненныеПоставляемыеПрофили = ЗаполненныеПоставляемыеПрофили();
	ПараметрыОбновления = ЗаполненныеПоставляемыеПрофили.ПараметрыОбновления;
	ОписанияПрофилей    = ЗаполненныеПоставляемыеПрофили.ОписанияПрофилей; // Массив из см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа -
	
	ЗаголовокОшибки =
		НСтр("ru = 'Заданы недопустимые значения в процедуре ПриЗаполненииПоставляемыхПрофилейГруппДоступа
		           |общего модуля УправлениеДоступомПереопределяемый.'")
		+ Символы.ПС
		+ Символы.ПС;
	
	Если ПараметрыОбновления.ЗапретитьИзменениеПрофилей
	   И НЕ ПараметрыОбновления.ОбновлятьИзмененныеПрофили Тогда
		
		ВызватьИсключение ЗаголовокОшибки
			+ НСтр("ru = 'Когда в параметре ПараметрыОбновления свойство
			             |ОбновлятьИзмененныеПрофили установлено Ложь,
			             |тогда свойство ЗапретитьИзменениеПрофилей тоже
			             |должно быть установлено Ложь.'");
	КонецЕсли;
	
	ВсеРоли = ПользователиСлужебный.ВсеРоли().Соответствие;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	
	// Преобразование описаний в соответствие идентификаторов и
	// свойств для хранения и быстрой обработки.
	СвойстваПрофилей = Новый Соответствие;
	ОписанияПрофилейМассив = Новый Массив;
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		ОписаниеПрофиля.Удалить("Описание");
		// Идентификатор профиля.
		Если Не ЗначениеЗаполнено(ОписаниеПрофиля.Идентификатор) Тогда
			ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В описании профиля ""%1"" не заполнено свойство Идентификатор.'"),
				?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя), ОписаниеПрофиля.Имя, ОписаниеПрофиля.Наименование));
				
		ИначеЕсли Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОписаниеПрофиля.Идентификатор) Тогда
			ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В описании профиля ""%1"" указан некорректный идентификатор: ""%2"".'"),
				?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя), ОписаниеПрофиля.Имя, ОписаниеПрофиля.Наименование),
				ОписаниеПрофиля.Идентификатор);
		КонецЕсли;
		
		// Назначение профиля.
		Если ОписаниеПрофиля.Назначение.Количество() = 0 Тогда
			ОписаниеПрофиля.Назначение.Добавить(Тип("СправочникСсылка.Пользователи"));
		КонецЕсли;
		МассивНазначений = Новый Массив;
		Для Каждого Тип Из ОписаниеПрофиля.Назначение Цикл
			Если ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
				Типы = Тип.Типы();
			Иначе
				Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип);
			КонецЕсли;
			Для Каждого Тип Из Типы Цикл
				Если ТипЗнч(Тип) <> Тип("Тип")
				 Или Не ОбщегоНазначения.ЭтоСсылка(Тип)
				 Или Не Метаданные.ОпределяемыеТипы.Пользователь.Тип.СодержитТип(Тип)
				 Или Тип <> Тип("СправочникСсылка.Пользователи")
				   И Не Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.СодержитТип(Тип) Тогда
					ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В описании профиля ""%1""
						           |указано недопустимое назначение ""%2 (%3)"".
						           |Ожидается назначение, как значение типа ""Тип"" для ссылки,
						           |указанное в определяемом типе Пользователь и
						           |указанное в определяемом типе ВнешнийПользователь
						           |(кроме типа СправочникСсылка.Пользователи).'"),
						?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
						  ОписаниеПрофиля.Имя,
						  ОписаниеПрофиля.Идентификатор),
						  Строка(Тип), Строка(ТипЗнч(Тип)));
				КонецЕсли;
				ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));
				Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
				МассивНазначений.Добавить(Значение);
			КонецЦикла;
		КонецЦикла;
		ОписаниеПрофиля.Назначение = МассивНазначений;
		
		// Проверка ролей.
		НазначениеПрофиля = УправлениеДоступомСлужебныйКлиентСервер.НазначениеПрофиля(ОписаниеПрофиля);
		НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля, Ложь);
		ПроверенныеРоли = Новый Соответствие;
		ИндексРоли = ОписаниеПрофиля.Роли.Количество();
		Пока ИндексРоли > 0 Цикл
			ИндексРоли = ИндексРоли - 1;
			Роль = ОписаниеПрофиля.Роли[ИндексРоли];
			// Проверка наличия ролей в метаданных.
			Если ВсеРоли.Получить(Роль) = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1 (%2)""
					           |роль ""%3"" не найдена в метаданных.'"),
					ОписаниеПрофиля.Имя,
					ОписаниеПрофиля.Идентификатор,
					Роль);
			КонецЕсли;
			// Удаление дублей ролей.
			Если ПроверенныеРоли.Получить(ВРег(Роль)) <> Неопределено Тогда
				ОписаниеПрофиля.Роли.Удалить(ИндексРоли);
				Продолжить;
			КонецЕсли;
			ПроверенныеРоли.Вставить(ВРег(Роль), Истина);
			// Проверка соответствия назначения ролей и профиля.
			Если НедоступныеРоли.Получить(Роль) <> Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1 (%2)""
					           |указана роль ""%3"", 
					           |которая не соответствует назначению профиля:
					           |""%4"".'"),
					ОписаниеПрофиля.Имя,
					ОписаниеПрофиля.Идентификатор,
					Роль,
					ПредставлениеНазначенияПрофиля(НазначениеПрофиля));
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Заполнение списка недоступных ролей в модели сервиса
			// для определения необходимости обновления поставляемых профилей.
			ОписаниеПрофиля.Вставить("РолиНедоступныеВСервисе",
				РолиПрофиляНедоступныеВСервисе(ОписаниеПрофиля, НазначениеПрофиля));
		КонецЕсли;
		
		Если СвойстваПрофилей.Получить(ОписаниеПрофиля.Идентификатор) <> Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Профиль с идентификатором ""%1"" уже существует.'"),
				ОписаниеПрофиля.Идентификатор);
		КонецЕсли;
		СвойстваПрофилей.Вставить(ОписаниеПрофиля.Идентификатор, ОписаниеПрофиля);
		ОписанияПрофилейМассив.Добавить(ОписаниеПрофиля);
		Если ЗначениеЗаполнено(ОписаниеПрофиля.Имя) Тогда
			Если СвойстваПрофилей.Получить(ОписаниеПрофиля.Имя) <> Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Профиль с именем ""%1"" уже существует.'"),
					ОписаниеПрофиля.Имя);
			КонецЕсли;
			СвойстваПрофилей.Вставить(ОписаниеПрофиля.Имя, ОписаниеПрофиля);
		КонецЕсли;
		// Преобразование СпискаЗначений к Соответствию для фиксации.
		ВидыДоступа = Новый Соответствие;
		Для Каждого ЭлементСписка Из ОписаниеПрофиля.ВидыДоступа Цикл
			ИмяВидаДоступа       = ЭлементСписка.Значение;
			УточнениеВидаДоступа = ЭлементСписка.Представление;
			Если СвойстваВидовДоступа.ПоИменам.Получить(ИмяВидаДоступа) = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указан несуществующий вид доступа ""%2"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ИмяВидаДоступа);
			КонецЕсли;
			
			ВидДоступаСоответствуетНазначениюПрофиля =
				УправлениеДоступомСлужебныйКлиентСервер.ВидДоступаСоответствуетНазначениюПрофиля(
					ИмяВидаДоступа, НазначениеПрофиля);
			
			Если Не ВидДоступаСоответствуетНазначениюПрофиля Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указан вид доступа ""%2""
					           |который не соответствует назначению профиля:
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ИмяВидаДоступа,
					ПредставлениеНазначенияПрофиля(НазначениеПрофиля));
			КонецЕсли;
			Если УточнениеВидаДоступа <> ""
			   И УточнениеВидаДоступа <> "ВначалеВсеЗапрещены"
			   И УточнениеВидаДоступа <> "Предустановленный"
			   И УточнениеВидаДоступа <> "ВначалеВсеРазрешены" Тогда
				
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2"" указано неизвестное уточнение ""%3"".
					           |
					           |Допустимы только следующие уточнения:
					           |- ""ВначалеВсеЗапрещены"" или """",
					           |- ""ВначалеВсеРазрешены"",
					           |- ""Предустановленный"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ИмяВидаДоступа,
					УточнениеВидаДоступа);
			КонецЕсли;
			ВидыДоступа.Вставить(ИмяВидаДоступа, УточнениеВидаДоступа);
		КонецЦикла;
		ОписаниеПрофиля.ВидыДоступа = ВидыДоступа;
		
		// Удаление повторяющихся значений.
		ЗначенияДоступа = Новый Массив;
		ТаблицаЗначенийДоступа = Новый ТаблицаЗначений;
		ТаблицаЗначенийДоступа.Колонки.Добавить("ВидДоступа",      Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
		ТаблицаЗначенийДоступа.Колонки.Добавить("ЗначениеДоступа", Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
		
		Для Каждого ЭлементСписка Из ОписаниеПрофиля.ЗначенияДоступа Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа",      ЭлементСписка.Значение);
			Отбор.Вставить("ЗначениеДоступа", ЭлементСписка.Представление);
			ВидДоступа      = Отбор.ВидДоступа;
			ЗначениеДоступа = Отбор.ЗначениеДоступа;
			
			СвойстваВидаДоступа = СвойстваВидовДоступа.ПоИменам.Получить(ВидДоступа);
			Если СвойстваВидаДоступа = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указан несуществующий вид доступа ""%2""
					           |для значения доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			
			ОбъектМетаданных = Неопределено;
			ПозицияТочки = СтрНайти(ЗначениеДоступа, ".");
			Если ПозицияТочки > 0 Тогда
				ВидОбъектаМетаданных = Лев(ЗначениеДоступа, ПозицияТочки - 1);
				ОстатокСтроки = Сред(ЗначениеДоступа, ПозицияТочки + 1);
				ПозицияТочки = СтрНайти(ОстатокСтроки, ".");
				Если ПозицияТочки > 0 Тогда
					ИмяОбъектаМетаданных = Лев(ОстатокСтроки, ПозицияТочки - 1);
					ПолноеИмяОбъектаМетаданных = ВидОбъектаМетаданных + "." + ИмяОбъектаМетаданных;
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектМетаданных = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2""
					           |не существует тип указанного значения доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			
			Попытка
				ПустаяСсылкаЗначенияДоступа = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
					ПолноеИмяОбъектаМетаданных).ПустаяСсылка();
			Исключение
				ПустаяСсылкаЗначенияДоступа = Неопределено;
			КонецПопытки;
			
			Если ПустаяСсылкаЗначенияДоступа = Неопределено Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2""
					           |указан не ссылочный тип значения доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			ТипЗначенияДоступа = ТипЗнч(ПустаяСсылкаЗначенияДоступа);
			
			СвойстваВидаДоступаПоТипу = СвойстваВидовДоступа.ПоТипамЗначений.Получить(ТипЗначенияДоступа);
			Если СвойстваВидаДоступаПоТипу = Неопределено
			 ИЛИ СвойстваВидаДоступаПоТипу.Имя <> ВидДоступа Тогда
				
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |указано значение доступа ""%3""
					           |типа, который не указан в свойствах вида доступа ""%2"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			
			Если ТаблицаЗначенийДоступа.НайтиСтроки(Отбор).Количество() > 0 Тогда
				ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В описании профиля ""%1""
					           |для вида доступа ""%2""
					           |повторно указано значение доступа
					           |""%3"".'"),
					?(ЗначениеЗаполнено(ОписаниеПрофиля.Имя),
					  ОписаниеПрофиля.Имя,
					  ОписаниеПрофиля.Идентификатор),
					ВидДоступа,
					ЗначениеДоступа);
			КонецЕсли;
			ЗначенияДоступа.Добавить(Отбор);
		КонецЦикла;
		ОписаниеПрофиля.ЗначенияДоступа = ЗначенияДоступа;
	КонецЦикла;
	
	ПоставляемыеПрофили = Новый Структура;
	ПоставляемыеПрофили.Вставить("ПараметрыОбновления",    ПараметрыОбновления);
	ПоставляемыеПрофили.Вставить("ОписанияПрофилей",       СвойстваПрофилей);
	ПоставляемыеПрофили.Вставить("ОписанияПрофилейМассив", ОписанияПрофилейМассив);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ПоставляемыеПрофили);
	
КонецФункции

Функция ПояснениеПоставляемыхПрофилей() Экспорт
	
	ОписанияПрофилей = ЗаполненныеПоставляемыеПрофили().ОписанияПрофилей;
	
	ПредставлениеВидовДоступа = Новый Соответствие;
	
	Для Каждого ОписаниеПрофиля Из ОписанияПрофилей Цикл
		ПредставлениеВидовДоступа.Вставить(ОписаниеПрофиля.Идентификатор, ОписаниеПрофиля.Описание);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ПредставлениеВидовДоступа);
	
КонецФункции

// Для процедуры ПоставляемыеПрофили.
Функция ПредставлениеНазначенияПрофиля(НазначениеПрофиля)
	
	Если НазначениеПрофиля = "СовместноДляПользователейИВнешнихПользователей" Тогда
		Возврат НСтр("ru = 'Совместно для пользователей и внешних пользователей'");
		
	ИначеЕсли НазначениеПрофиля = "ДляВнешнихПользователей" Тогда
		Возврат НСтр("ru = 'Для внешних пользователей'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Для пользователей'");
	
КонецФункции

Функция ПредопределенныеПрофилиСовпадают(НовыеПрофили, СтарыеПрофили, ЕстьУдаленные)
	
	Если ТипЗнч(НовыеПрофили) <> ТипЗнч(СтарыеПрофили) Тогда
		ЕстьУдаленные = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	ПредопределенныеПрофилиСовпадают =
		НовыеПрофили.Количество() = СтарыеПрофили.Количество();
	
	Для Каждого Профиль Из СтарыеПрофили Цикл
		Если НовыеПрофили.Найти(Профиль) = Неопределено Тогда
			ПредопределенныеПрофилиСовпадают = Ложь;
			ЕстьУдаленные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредопределенныеПрофилиСовпадают;
	
КонецФункции

// Замещает имеющийся или создает новый поставляемый профиль групп доступа по его описанию.
//
// Параметры:
//  СвойстваПрофиля - ФиксированнаяСтруктура - свойства профиля, как в структуре возвращаемой
//                    функцией НовоеОписаниеПрофиляГруппДоступа общего модуля УправлениеДоступом.
//
// Возвращаемое значение:
//  Булево -  Истина - профиль изменен.
//
Функция ОбновитьПрофильГруппДоступа(СвойстваПрофиля, НеОбновлятьРолиПользователей = Ложь)
	
	ПрофильИзменен = Ложь;
	
	ПрофильСсылка = ПоставляемыйПрофильПоИдентификатору(СвойстваПрофиля.Идентификатор);
	Если ПрофильСсылка = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СвойстваПрофиля.Имя) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрофилиГруппДоступа.Ссылка КАК Ссылка,
			|	ПрофилиГруппДоступа.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
			|ИЗ
			|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
			|ГДЕ
			|	ПрофилиГруппДоступа.Предопределенный = ИСТИНА";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ИмяПредопределенного = Выборка.ИмяПредопределенныхДанных;
				Если ВРег(СвойстваПрофиля.Имя) = ВРег(ИмяПредопределенного) Тогда
					ПрофильСсылка = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПрофильСсылка = Неопределено Тогда
			// Поставляемый профиль не найден, нужно создать новый.
			ПрофильОбъект = СоздатьЭлемент();
		Иначе
			// Поставляемый профиль связан с предопределенным элементом.
			ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ПрофильОбъект.ИдентификаторПоставляемыхДанных =
			Новый УникальныйИдентификатор(СвойстваПрофиля.Идентификатор);
		
		ПрофильИзменен = Истина;
	Иначе
		ПрофильОбъект = ПрофильСсылка.ПолучитьОбъект();
		ПрофильИзменен = ПоставляемыйПрофильИзменен(ПрофильОбъект);
	КонецЕсли;
	
	Если ПрофильИзменен Тогда
		
		Если Не ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
		   И Не ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
			
			ЗаблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка, ПрофильОбъект.ВерсияДанных);
		КонецЕсли;
		
		ПрофильОбъект.Наименование = СвойстваПрофиля.Наименование;
		
		ПрофильОбъект.Роли.Очистить();
		Для каждого Роль Из ОписаниеРолейПрофиля(СвойстваПрофиля) Цикл
			МетаданныеРоли = Метаданные.Роли.Найти(Роль);
			Если МетаданныеРоли = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При обновлении поставляемого профиля ""%1""
					           |роль ""%2"" не найдена в метаданных.'"),
					СвойстваПрофиля.Наименование,
					Роль);
			КонецЕсли;
			ПрофильОбъект.Роли.Добавить().Роль =
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
		КонецЦикла;
		
		ПрофильОбъект.ВидыДоступа.Очистить();
		Для каждого ОписаниеВидаДоступа Из СвойстваПрофиля.ВидыДоступа Цикл
			СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.Ключ);
			Строка = ПрофильОбъект.ВидыДоступа.Добавить();
			Строка.ВидДоступа        = СвойстваВидаДоступа.Ссылка;
			Строка.Предустановленный = ОписаниеВидаДоступа.Значение = "Предустановленный";
			Строка.ВсеРазрешены      = ОписаниеВидаДоступа.Значение = "ВначалеВсеРазрешены";
		КонецЦикла;
		
		ПрофильОбъект.ЗначенияДоступа.Очистить();
		Для каждого ОписаниеЗначенияДоступа Из СвойстваПрофиля.ЗначенияДоступа Цикл
			СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеЗначенияДоступа.ВидДоступа);
			СтрокаЗначения = ПрофильОбъект.ЗначенияДоступа.Добавить();
			СтрокаЗначения.ВидДоступа = СвойстваВидаДоступа.Ссылка;
			Запрос = Новый Запрос(СтрЗаменить("ВЫБРАТЬ Значение(%1) КАК Значение", "%1", ОписаниеЗначенияДоступа.ЗначениеДоступа));
			СтрокаЗначения.ЗначениеДоступа = Запрос.Выполнить().Выгрузить()[0].Значение;
		КонецЦикла;
		
		ПрофильОбъект.Назначение.Очистить();
		Для каждого ТипНазначения Из СвойстваПрофиля.Назначение Цикл
			СтрокаНазначения = ПрофильОбъект.Назначение.Добавить();
			СтрокаНазначения.ТипПользователей = ТипНазначения;
		КонецЦикла;
		
		Если НеОбновлятьРолиПользователей Тогда
			ПрофильОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРолиПользователей");
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект);
		
		Если Не ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
		   И Не ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
			
			РазблокироватьДанныеДляРедактирования(ПрофильОбъект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПрофильИзменен;
	
КонецФункции

Функция ОписаниеРолейПрофиля(ОписаниеПрофиля)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат ОписаниеПрофиля.Роли;
	КонецЕсли;
	
	НазначениеПрофиля = УправлениеДоступомСлужебныйКлиентСервер.НазначениеПрофиля(ОписаниеПрофиля);
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля);
	
	ОписаниеРолейПрофиля = Новый Массив;
	
	Для Каждого Роль Из ОписаниеПрофиля.Роли Цикл
		Если НедоступныеРоли.Получить(Роль) = Неопределено Тогда
			ОписаниеРолейПрофиля.Добавить(Роль);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(ОписаниеРолейПрофиля);
	
КонецФункции

Функция РолиПрофиляНедоступныеВСервисе(ОписаниеПрофиля, НазначениеПрофиля)
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеПрофиля, Истина);
	НедоступныеРолиПрофиля = Новый Соответствие;
	
	Для Каждого Роль Из ОписаниеПрофиля.Роли Цикл
		Если НедоступныеРоли.Получить(Роль) <> Неопределено Тогда
			НедоступныеРолиПрофиля.Вставить(Роль, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(НедоступныеРолиПрофиля);
	
КонецФункции

#КонецОбласти

#КонецЕсли
