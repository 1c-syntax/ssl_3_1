///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Используется в обработчике события ПриЗаписи.
Перем СтароеЗначение;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтароеЗначение = Константы.ИспользоватьВнешнихПользователей.Получить();
	
	Если Значение = СтароеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтароеЗначение И Значение И Не ПользователиСлужебный.ВнешниеПользователиВнедрены() Тогда
		ТекстОшибки =
			НСтр("ru = 'Использование внешних пользователей не предусмотрено в приложении.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ТекстОшибки =
			НСтр("ru = 'Изменение использования групп пользователей следует выполнить в приложении в сервисе.'");
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		ТекстОшибки =
			НСтр("ru = 'Изменение использования групп пользователей следует выполнить в главном узле информационной базы.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьГруппыВнешнихПользователей.Обновить();
	
	Если Значение <> СтароеЗначение Тогда
		ПриИзмененииИспользованияВнешнихПользователей(Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
Процедура ЗарегистрироватьИзменениеПриПолученииДанных(ЭлементДанных) Экспорт
	
	Если ЭлементДанных.Значение = Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ЗарегистрироватьСсылки("ИспользоватьВнешнихПользователей", Истина);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьИзменениеЗарегистрированноеПриПолученииДанных() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Изменение настроек в АРМ заблокированы и не загружаются в область данных.
		Возврат;
	КонецЕсли;
	
	Изменения = ПользователиСлужебный.ЗарегистрированныеСсылки("ИспользоватьВнешнихПользователей");
	Если Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииИспользованияВнешнихПользователей(
		Константы.ИспользоватьВнешнихПользователей.Получить());
	
	ПользователиСлужебный.ЗарегистрироватьСсылки("ИспользоватьВнешнихПользователей", Null);
	
КонецПроцедуры

Процедура ПриИзмененииИспользованияВнешнихПользователей(Значение)
	
	ПользователиСлужебный.ОбновитьРолиВнешнихПользователей();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ОбновитьРолиПользователей(Тип("СправочникСсылка.ВнешниеПользователи"));
		
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		Если МодульУправлениеДоступомСлужебный.ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
			ПараметрыПланирования = МодульУправлениеДоступомСлужебный.ПараметрыПланированияОбновленияДоступа();
			ПараметрыПланирования.ДляПользователей = Ложь;
			ПараметрыПланирования.ДляВнешнихПользователей = Истина;
			ПараметрыПланирования.ЭтоПродолжениеОбновления = Истина;
			ПараметрыПланирования.Описание = "ИспользоватьВнешнихПользователейПриЗаписи";
			МодульУправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(, ПараметрыПланирования);
		КонецЕсли;
	КонецЕсли;
	
	Если Значение Тогда
		ПользователиСлужебный.УстановитьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ(Ложь);
	Иначе
		ОчиститьРеквизитВходВПрограммуРазрешенУВсехВнешнихПользователей();
	КонецЕсли;
	
	УстановитьПризнакИспользованияНабораСвойств();
	
КонецПроцедуры

// У всех пользователей ИБ очищает реквизит ПризнакПоказыватьВСписке.
Процедура ОчиститьРеквизитВходВПрограммуРазрешенУВсехВнешнихПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи";
	Идентификаторы = Запрос.Выполнить().Выгрузить();
	Идентификаторы.Индексы.Добавить("Идентификатор");
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Если Идентификаторы.Найти(ПользовательИБ.УникальныйИдентификатор, "Идентификатор") <> Неопределено
		   И Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			
			ПользовательИБ.АутентификацияСтандартная    = Ложь;
			ПользовательИБ.АутентификацияOpenID         = Ложь;
			ПользовательИБ.АутентификацияOpenIDConnect  = Ложь;
			ПользовательИБ.АутентификацияТокеномДоступа = Ложь;
			ПользовательИБ.АутентификацияОС             = Ложь;
			ПользовательИБ.Записать();
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.СведенияОПользователях.ОбновитьДанныеРегистра();
	
КонецПроцедуры

Процедура УстановитьПризнакИспользованияНабораСвойств()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли;
	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	
	ПараметрыНабора = МодульУправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Значение;
	МодульУправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВнешниеПользователи", ПараметрыНабора);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли