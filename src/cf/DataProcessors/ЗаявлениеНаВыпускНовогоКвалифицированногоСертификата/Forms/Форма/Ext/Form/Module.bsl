///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем Криптография, РаботаСДвоичнымиДанными, РеквизитыПроверкиАдреса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЕстьОрганизации = Не Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(Тип("Строка"));
	Если Не ЕстьОрганизации Тогда
		Элементы.Организация.Видимость = Ложь;
		Элементы.ЭтоИндивидуальныйПредприниматель1.Видимость = Ложь;
		Элементы.ЭтоИндивидуальныйПредприниматель2.Видимость = Истина;
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	
	ЗаполнитьЗаголовкиРеквизитов();
	
	ПриИзмененииВидаДокументаНаСервере();
	
	Если ЗначениеЗаполнено(Параметры.СертификатСсылка) Тогда
		ЗагрузитьЗаявление();
	Иначе
		УстановитьСоглашение();
		Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.НеПодготовлено;
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Организация = Параметры.Организация;
			Элементы.Организация.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		ВидКонтактнойИнформации = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления["ТипыКонтактнойИнформации"].Адрес);
		
		ВидКонтактнойИнформации.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
		
		ВидКонтактнойИнформацииТелефон = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
			Перечисления["ТипыКонтактнойИнформации"].Телефон);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыПроверкиАдреса = Новый Структура;
	РеквизитыПроверкиАдреса.Вставить("ЮридическийАдрес", Ложь);
	РеквизитыПроверкиАдреса.Вставить("ФактическийАдрес", Ложь);
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
	   И (    Объект.СостояниеЗаявления = ПредопределенноеЗначение("Перечисление.СостоянияЗаявленияНаВыпускСертификата.НеПодготовлено")
	      Или Объект.СостояниеЗаявления = ПредопределенноеЗначение("Перечисление.СостоянияЗаявленияНаВыпускСертификата.Подготовлено")) Тогда
		
		ПодключитьОбработчикОжидания("ПриИзмененияСоставаИлиНастроекПрограмм", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// При изменении состава или настроек программ.
	Если ЗначениеЗаполнено(ВариантАлгоритмов)
	   И (    ВРег(ИмяСобытия) = ВРег("Запись_ПрограммыЭлектроннойПодписиИШифрования")
	      Или ВРег(ИмяСобытия) = ВРег("Запись_ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux")) Тогда
		
		ПодключитьОбработчикОжидания("ПриИзмененияСоставаИлиНастроекПрограмм", 0.1, Истина);
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("ИнтернетПоддержкаПодключена") Тогда
		ИнтернетПоддержкаПользователейПодключена = Истина;
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("ИнтернетПоддержкаОтключена") Тогда
		ИнтернетПоддержкаПользователейПодключена = Ложь;
	КонецЕсли;
	
	Если Не СтрНачинаетсяС(ИмяСобытия, "Запись_") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = Организация Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияРеквизитыОрганизацииПриИзменении", 0.1, Истина);
	КонецЕсли;
	
	Если Источник = Сотрудник
	   И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВладелецСертификата Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияРеквизитыВладельцаПриИзменении", 0.1, Истина);
	КонецЕсли;
	
	Если Источник = ДокументыПартнерСсылка
	   И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтправкаЗаявления Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияРеквизитыПартнераПриИзменении", 0.1, Истина);
	КонецЕсли;
	
	Если Источник = ДокументыРуководительСсылка
	   И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтправкаЗаявления Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияРеквизитыРуководителяПриИзменении", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СостояниеЗаявления = ПредопределенноеЗначение("Перечисление.СостоянияЗаявленияНаВыпускСертификата.Подготовлено")
	 Или Объект.СостояниеЗаявления = ПредопределенноеЗначение("Перечисление.СостоянияЗаявленияНаВыпускСертификата.НеПодготовлено")
	   И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодготовкаЗапросаНаСертификат Тогда
		
		ЗаписатьИРазблокироватьОбъект();
		ПослеЗаписи();
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РазблокироватьОбъект(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияУдостоверяющийЦентрНаименованиеНажатие(Элемент)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://ca.1c.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеСоглашенияПриИзменении(Элемент)
	
	Элементы.ФормаДалее.Доступность = ПодтверждениеСоглашения;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитПриИзменении(Элемент)
	
	ЭтотОбъект[Элемент.Имя] = СокрЛП(ЭтотОбъект[Элемент.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://portal.1c.ru/applications/31");
	
КонецПроцедуры

// Реквизиты организации.

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОчиститьРеквизитыОрганизации();
	ОчиститьРеквизитыВладельца();
	ПриИзмененииОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		ОчиститьРеквизитыОрганизацииВидаЮридическоеЛицо();
	КонецЕсли;
	
	ПриИзмененииОрганизацииНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизитыОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредставлениеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		"ЮридическийАдрес", НСтр("ru = 'Юридический адрес организации'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОчистка(Элемент, СтандартнаяОбработка)
	
	ПредставлениеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, "ЮридическийАдрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеАдресаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "ЮридическийАдрес");
	
	Если Не ЗначениеЗаполнено(ФактическийАдрес) Тогда
		ПредставлениеАдресаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "ФактическийАдрес");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредставлениеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		"ФактическийАдрес", НСтр("ru = 'Фактический адрес организации'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресОчистка(Элемент, СтандартнаяОбработка)
	
	ПредставлениеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, "ФактическийАдрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	 ПредставлениеАдресаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "ФактическийАдрес");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПредупреждениеНажатие(Элемент)
	
	ПоказатьПредупреждение(, Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредставлениеТелефонаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		"Телефон", НСтр("ru = 'Телефон организации'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОчистка(Элемент, СтандартнаяОбработка)
	
	ПредставлениеТелефонаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	 ПредставлениеТелефонаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Телефон");
	
КонецПроцедуры

// Реквизиты сотрудника (должностного лица организации).

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОчиститьРеквизитыВладельца();
	ПриИзмененииВладельцаСертификатаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	
	Если СотрудникТип <> Неопределено
	   И СотрудникТип.Количество() = 1
	   И Сотрудник = Неопределено Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов(СотрудникТип.ВыгрузитьЗначения());
		Сотрудник = ОписаниеТипов.ПривестиЗначение(Неопределено);
	КонецЕсли;
	
	ОчиститьРеквизитыВладельца();
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ГражданствоСвойства(Гражданство));
	Если Не ЗначениеЗаполнено(ГражданствоОКСМКодАльфа3) Тогда
		Если ЗначениеЗаполнено(Гражданство) Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У страны ""%1"" не указан трехзначный буквенный код альфа-3 по ОКСМ.'"),
				Гражданство));
		КонецЕсли;
		Гражданство = Неопределено;
		ГражданствоПредставление = "";
		ГражданствоОКСМКодАльфа3 = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	СтраховойНомерПФР = ТолькоЦифры(СтраховойНомерПФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументВидПриИзменении(Элемент)
	
	ПриИзмененииВидаДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументВидОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНомерПриИзменении(Элемент)
	
	Если ДокументВид = "21" Тогда
		ДокументНомер = ТолькоЦифры(ДокументНомер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументКодПодразделенияПриИзменении(Элемент)
	
	ДокументКодПодразделения = ТолькоЦифры(ДокументКодПодразделения);
	
КонецПроцедуры

// Реквизиты создания ключа.

&НаКлиенте
Процедура ПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораПрограммы(ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Представление = ПоставляемоеПредставлениеПрограммы(СписокПрограмм, ВыбранноеЗначение);
		
		Если Не ЭтоПолноправныйПользователь Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Программа %1 еще не добавлена в список используемых программ.
					           |Обратитесь к администратору.'"),
					Представление));
			
		ИначеЕсли ЭтоПодчиненныйУзелРИБ Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Программа %1 еще не добавлена в список используемых программ.
					           |Выполните добавление в главном узле информационной базы.'"),
					Представление));
		Иначе
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Добавить",    НСтр("ru = 'Добавить'"));
			Кнопки.Добавить("НеДобавлять", НСтр("ru = 'Не добавлять'"));
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПрограммаОбработкаВыбораПродолжение", ЭтотОбъект, ВыбранноеЗначение),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Программа %1 еще не добавлена в список используемых программ.
					           |Добавить?'"),
					Представление),
				Кнопки,, "НеДобавлять");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Объект.Программа = ВыбранноеЗначение;
	
	ПодключитьОбработчикОжидания("ПослеВыборкаПрограммыОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораПрограммы(ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораПрограммы(ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияСозданиеКлючаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "КлючЭлектроннойПодписи" Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Ключ электронной подписи - это секретная информация, которая сохраняется
			           |на компьютер, флешку, дискету или другой носитель информации и
			           |используется в дальнейшем для создания электронных подписей.'"));
		
	ИначеЕсли НавигационнаяСсылка = "ЗапросНаСертификат" Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Запрос на сертификат - это не секретная информация, которая создается
			           |на основе ключа электронной подписи, отправляется вместе с заявлением
			           |на выпуск сертификата и требуется для выпуска сертификата.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПояснениеПрограммыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьИнструкциюПоРаботеСПрограммами();
	
КонецПроцедуры

// Реквизиты отправки заявления.

&НаКлиенте
Процедура ДокументыРуководительПриИзменении(Элемент)
	
	ДокументыРуководительСсылка = Неопределено;
	Элементы.ДокументыРуководитель.КнопкаОткрытия = Неопределено;
	
	ДокументыРуководитель = СокрЛП(ДокументыРуководитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРуководительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРуководительОчистка(Элемент, СтандартнаяОбработка)
	
	ДокументыРуководительСсылка = Неопределено;
	Элементы.ДокументыРуководитель.КнопкаОткрытия = Неопределено;
	ОчиститьРеквизит("ДокументыРуководительДолжность");
	ОчиститьРеквизит("ДокументыРуководительОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРуководительОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗначениеОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРуководительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	ПодключитьОбработчикОжидания("ПриИзмененииРуководителяОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка <> "КомплектДокументов" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		ТекстПредупреждения =
			НСтр("ru = 'Комплект документов:
			           |1. Заявление на выпуск сертификата (подготовленное на предыдущем шаге).
			           |2. Копия свидетельства о постановке на учет в налоговом органе (ИНН).
			           |3. Копия свидетельства о государственной регистрации индивидуального предпринимателя (ОГРН).
			           |4. Копия документа, удостоверяющего личность владельца сертификата.
			           |5. Копия страхового свидетельства обязательного пенсионного страхования (СНИЛС) владельца сертификата.'");
	Иначе
		ТекстПредупреждения =
			НСтр("ru = 'Комплект документов:
			           |1. Заявление на выпуск сертификата (подготовленное на предыдущем шаге).
			           |2. Копия* свидетельства о постановке на учет в налоговом органе (ИНН).
			           |3. Копия* свидетельства о государственной регистрации юридического лица (ОГРН).
			           |4. Копия* документа, удостоверяющего личность представителя организации, указанного для выпуска сертификата.
			           |5. Копия* страхового свидетельства обязательного пенсионного страхования (СНИЛС) представителя организации,
			           |   указанного для выпуска сертификата.
			           |6. Копия* документа, подтверждающего полномочия руководителя, подписавшего заявление (протокол собрания
			           |   учредителей, решение собственника, устав) или актуальная выписка из ЕГРЮЛ, заверенная налоговым органом.
			           |
			           |* Копии документов заверяются подписью руководителя и печатью организации.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПартнерПриИзменении(Элемент)
	
	ДокументыПартнерСсылка = Неопределено;
	Элементы.ДокументыПартнер.КнопкаОткрытия = Неопределено;
	
	ДокументыПартнер = СокрЛП(ДокументыПартнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПартнерОчистка(Элемент, СтандартнаяОбработка)
	
	ДокументыПартнерСсылка = Неопределено;
	Элементы.ДокументыПартнер.КнопкаОткрытия = Неопределено;
	
	ОчиститьРеквизитыПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПартнерОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗначениеОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПартнерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	ПодключитьОбработчикОжидания("ПриИзмененииПартнераОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПартнерЭтоИППриИзменении(Элемент)
	
	ОчиститьРеквизитыПартнераВидаЮридическоеЛицо();
	ПриИзмененииПартнераНаСервере(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСоглашение Тогда
		ПерейтиНаСтраницуОрганизация();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОрганизация Тогда
		ПерейтиНаСтраницуВладелецСертификата();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВладелецСертификата Тогда
		ПерейтиНаСтраницуПодготовкаЗапросаНаСертификат();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодготовкаЗапросаНаСертификат Тогда
		ПерейтиНаСтраницуОтправкаЗаявления();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтправкаЗаявления Тогда
		ПерейтиНаСтраницуОжиданиеОбработкиЗаявления();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеОбработкиЗаявления Тогда
		ПерейтиНаСтраницуУстановкаСертификата();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУстановкаСертификата Тогда
		ЗакрытьПомощникПослеУстановкиСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОрганизация Тогда
		ПерейтиНаСтраницуСоглашение();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСоглашение;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВладелецСертификата Тогда
		ПерейтиНаСтраницуОрганизация(Истина);
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодготовкаЗапросаНаСертификат Тогда
		ПерейтиНаСтраницуВладелецСертификата(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗапросНаСертификат(Команда)
	
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьЗапросНаСертификат(Неопределено,
		АдресЗапросаНаСертификат, ИмяФайлаБезРасширения());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКорневойСертификат(Команда)
	
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьСертификат(Неопределено,
		АдресКорневогоСертификата, НСтр("ru = 'Корневой сертификат ООО НПЦ 1С'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьДокументы(Команда)
	
	Документ = ПодготовленныйДокумент();
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПечатнойФормы = "ЗаявлениеНаВыпускСертификат";
	НазваниеПечатнойФормы = НСтр("ru = 'Заявление на выпуск сертификата'");
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Документ.Показать(НазваниеПечатнойФормы);
		ДокументыПечатались = Истина;
		Возврат;
	КонецЕсли;
	
	МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
	
	КоллекцияПечатныхФорм = МодульУправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = МодульУправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НазваниеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = Документ;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;
	
	ОбластиОбъектов = Новый СписокЗначений;
	МодульУправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
	
	ДокументыПечатались = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСертификат(Команда)
	
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьСертификат(Новый ОписаниеОповещения(
		"ВыгрузитьСертификатЗавершение", ЭтотОбъект), АдресСертификата, ИмяФайлаБезРасширения());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение процедуры ВыгрузитьСертификат.
&НаКлиенте
Процедура ВыгрузитьСертификатЗавершение(Результат, Контекст) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьСертификат(Неопределено,
		АдресКорневогоСертификата, НСтр("ru = 'Корневой сертификат ООО НПЦ 1С'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораПрограммы(ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Если СписокПрограмм.Количество() = 0 Тогда
		ЗаполнитьСписокПрограмм();
	КонецЕсли;
	
	Для каждого Строка Из СписокПрограмм Цикл
		Значение = ?(ЗначениеЗаполнено(Строка.Ссылка), Строка.Ссылка, Строка.Идентификатор);
		ДанныеВыбора.Добавить(Значение, Строка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФайлаБезРасширения()
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		ИмяФайлаБезРасширения = СокрП(Фамилия + " " + Имя + " " + Отчество);
	Иначе
		ИмяФайлаБезРасширения = СокрП(Фамилия + " " + Имя + " " + Отчество) + ", " + НаименованиеСокращенное
			+ ?(ЗначениеЗаполнено(Подразделение), ", " + Подразделение, "") + ", " + Должность;
	КонецЕсли;
	
	Возврат ИмяФайлаБезРасширения;
	
КонецФункции

&НаСервере
Процедура ПерейтиНаСтраницуСоглашение()
	
	Элементы.ФормаНазад.Видимость = Ложь;
	Элементы.ФормаНапечататьСоглашение.Видимость = Истина;
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
	
	УстановитьСоглашение();
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуОрганизация(Назад = Ложь)
	
	ПриИзмененииОрганизацииНаСервере(Назад);
	
	Элементы.ФормаНазад.Видимость = Истина;
	Элементы.ФормаНапечататьСоглашение.Видимость = Ложь;
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОрганизация;
	Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаОрганизация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВладелецСертификата(Назад = Ложь)
	
	ПерейтиНаСтраницуВладелецСертификатаНаСервере(Назад);
	
	Если СотрудникТип <> Неопределено
	   И СотрудникТип.Количество() = 1
	   И Сотрудник = Неопределено Тогда
		
		ОписаниеТипов = Новый ОписаниеТипов(СотрудникТип.ВыгрузитьЗначения());
		Сотрудник = ОписаниеТипов.ПривестиЗначение(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуВладелецСертификатаНаСервере(Назад = Ложь)
	
	Если Не Назад И Не ОрганизацияЗаполнена() Тогда
		Возврат;
	КонецЕсли;
	
	Если Назад Тогда
		ЗаписатьЗаявление();
	КонецЕсли;
	
	ПриИзмененииВладельцаСертификатаНаСервере(Назад);
	
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВладелецСертификата;
	Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаВладелецСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуПодготовкаЗапросаНаСертификат()
	
	Если ПерейтиНаСтраницуПодготовкаЗапросаНаСертификатНаСервере() Тогда
		ПослеЗаписи();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПриИзмененияСоставаИлиНастроекПрограмм", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПерейтиНаСтраницуПодготовкаЗапросаНаСертификатНаСервере()
	
	Если Не ВладелецЗаполнен() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Добавил = Пользователи.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(Объект.Пользователь) Тогда
		Объект.Пользователь = Объект.Добавил;
	КонецЕсли;
	
	ЗаписатьЗаявление(); // После записи заявление будет открываться с этой страницы.
	
	ПерейтиНаСтраницуПодготовкаЗапросаНаСертификатНаСервереПриЗагрузке();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПерейтиНаСтраницуПодготовкаЗапросаНаСертификатНаСервереПриЗагрузке()
	
	Элементы.ФормаНазад.Видимость = Истина;
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
	
	ЗаполнитьРеквизитыЗаявления();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		
		ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
		ФактическийАдресСтруктура =
			МодульРаботаСАдресами.СведенияОбАдресе(ФактическийАдресXML, ДополнительныеПараметры);
		
		ЮридическийАдресСтруктура =
			МодульРаботаСАдресами.СведенияОбАдресе(ЮридическийАдресXML, ДополнительныеПараметры);
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодготовкаЗапросаНаСертификат;
	Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаПодготовкаЗапросаНаСертификат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкаЗаявления()
	
	Если Не ЗначениеЗаполнено(Объект.Программа) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Программа электронной подписи"" не заполнено'"), , "Программа");
		
		Возврат;
	КонецЕсли;
	
	Доступность = Ложь;
	
	ПодключитьОбработчикОжидания("ПерейтиНаСтраницуОтправкаЗаявленияПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкаЗаявленияПродолжение()
	
	ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПерейтиНаСтраницуОтправкаЗаявленияПослеСозданияМенеджераКриптографии", ЭтотОбъект),
		"", Неопределено, , Истина);
	
КонецПроцедуры

// Продолжение процедуры ПерейтиНаСтраницуОтправкаЗаявления.
&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкаЗаявленияПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		Объект.Программа = Неопределено;
		ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
			НСтр("ru = 'Создание ключа электронной подписи'"), "", Результат,
			Новый Структура, Новый Структура("ПоказатьИнструкцию", Истина));
		
		Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	ПредставлениеПрограммы = ПоставляемоеПредставлениеПрограммы(СписокПрограмм, Объект.Программа);
	
	СоздатьКлючИЗапросНаСертификат(Новый ОписаниеОповещения(
		"ПерейтиНаСтраницуОтправкаЗаявленияПослеСозданияКлючаИЗапросаНаСертификат", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПерейтиНаСтраницуОтправкаЗаявления.
&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкаЗаявленияПослеСозданияКлючаИЗапросаНаСертификат(Результат, Контекст) Экспорт
	
	Доступность = Истина;
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиНаСтраницуОтправкаЗаявленияНаСервере();
	
	ПослеЗаписи();
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуОтправкаЗаявленияНаСервере()
	
	Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Подготовлено;
	Объект.Организация = Организация;
	
	ЗаписатьЗаявление();
	
	ПерейтиНаСтраницуОтправкаЗаявленияНаСервереПриЗагрузке(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуОтправкаЗаявленияНаСервереПриЗагрузке(Загрузка = Истина)
	
	ПриИзмененииРуководителяНаСервере(Загрузка);
	ПриИзмененииПартнераНаСервере(Загрузка);
	
	Элементы.ФормаДалее.Доступность = Истина;
	Элементы.ФормаНазад.Видимость = Ложь;
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтправкаЗаявления;
	Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаОтправкаЗаявления;
	
	Элементы.ИнструкцияИП.Видимость       = ЭтоИндивидуальныйПредприниматель;
	Элементы.ИнструкцияИППункт4.Видимость = ЭтоИндивидуальныйПредприниматель;
	Элементы.ИнструкцияЮЛ.Видимость       = Не ЭтоИндивидуальныйПредприниматель;
	Элементы.ИнструкцияЮЛПункт5.Видимость = Не ЭтоИндивидуальныйПредприниматель;
	
	ОбновитьДоступностьРеквизитовПартнера();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		ИнтернетПоддержкаПользователейПодключена =
			МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Иначе
		ИнтернетПоддержкаПользователейПодключена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьРеквизитовПартнера()
	
	Элементы.ГруппаПартнер.ТолькоПросмотр = ЗначениеЗаполнено(ИдентификаторДокументооборота);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОжиданиеОбработкиЗаявления()
	
	Если Не РуководительЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПартнерЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыПечатались
	   И ЗначениеЗаполнено(ДокументыПартнерИНН)
	   И (ДокументыПартнерЭтоИП Или ЗначениеЗаполнено(ДокументыПартнерКПП)) Тогда
		
		ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияПродолжение("Отправить", Неопределено);
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Отправить",   НСтр("ru = 'Отправить'"));
	Кнопки.Добавить("НеОтправить", НСтр("ru = 'Не отправлять'"));
	
	Текст = "";
	Если Не ДокументыПечатались Тогда
		Текст =
			НСтр("ru = 'Документы еще не печатались.
			           |Заявление не будет принято пока не будут получены печатные документы.'");
	КонецЕсли;
	
	Если ДокументыПартнерЭтоИП Тогда
		Если Не ЗначениеЗаполнено(ДокументыПартнерИНН) Тогда
			Текст = Текст + Символы.ПС  + Символы.ПС
				+ НСтр("ru = 'Не указан ИНН обслуживающей организации.
				             |Заявление может обрабатываться дольше обычного.'");
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ДокументыПартнерИНН)
	      Или Не ЗначениеЗаполнено(ДокументыПартнерКПП) Тогда
		
		Текст = Текст + Символы.ПС  + Символы.ПС
			+ НСтр("ru = 'Не указан ИНН или КПП обслуживающей организации.
			             |Заявление может обрабатываться дольше обычного.'");
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияПродолжение", ЭтотОбъект),
		СокрЛП(Текст),
		Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияПродолжение(Ответ, Контекст) Экспорт
	
	Если Ответ <> "Отправить" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:
			           |Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'"));
	КонецЕсли;
	
	МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтернетПоддержкаПользователейКлиент");
	
	Если Не ИнтернетПоддержкаПользователейПодключена Тогда
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияЗавершение", ЭтотОбъект),
			ЭтотОбъект);
	Иначе
		ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияЗавершение(Новый Структура, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияЗавершение(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ИнтернетПоддержкаПользователейПодключена = Ложь;
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейПодключена = Истина;
	ОписаниеОшибки = "";
	
	Если ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияНаСервере(ОписаниеОшибки) Тогда
		ПослеЗаписи();
	Иначе
		Если ИнтернетПоддержкаПользователейПодключена Тогда
			ОбработкаПродолжения = Неопределено;
		Иначе
			ОбработкаПродолжения = Новый ОписаниеОповещения(
				"ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияПослеПредупреждения", ЭтотОбъект);
		КонецЕсли;
		ПоказатьПредупреждение(ОбработкаПродолжения,
			УстановитьГиперссылку(ОписаниеОшибки, "its.1c.ru", "http://its.1c.ru"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияПослеПредупреждения(Контекст) Экспорт
	
	ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияПродолжение("Отправить", Неопределено);
	
КонецПроцедуры

&НаСервере
Функция ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияНаСервере(ОписаниеОшибки)
	
	Если Не ОтправитьЗаявление(ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отправлено;
	
	ДатаОбновленияСостояния = ТекущаяДатаСеанса();
	СостояниеОбработкиЗаявления = НСтр("ru = 'Заявление принято для обработки.'");
	ОбновитьДатаОбновленияСостоянияВЗаголовке(ЭтотОбъект);
	
	ЗаписатьЗаявление();
	
	ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияНаСервереПриЗагрузке();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияНаСервереПриЗагрузке()
	
	Элементы.ФормаНапечататьДокументы.Видимость = Истина;
	Элементы.ФормаДалее.Видимость = Ложь;
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжиданиеОбработкиЗаявления;
	Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаОжиданиеОбработкиЗаявления;
	
	ОбновитьДатаОбновленияСостоянияВЗаголовке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДатаОбновленияСостоянияВЗаголовке(Форма)
	
	Форма.Элементы.СостояниеОбработкиЗаявления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Состояние обработки заявления (на %1)'"),
		Формат(Форма.ДатаОбновленияСостояния, "ДЛФ=DT"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуУстановкаСертификата()
	
	Результат = ПерейтиНаСтраницуУстановкаСертификатаНаСервере();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Истина Тогда
		ПослеЗаписи(НСтр("ru = 'Заявление отклонено.'"));
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Элементы.УстановитьСертификат.Доступность = Ложь;
	
	УстановитьСертификат(Новый ОписаниеОповещения("ПерейтиНаСтраницуУстановкаСертификатаПослеУстановки", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуУстановкаСертификатаПослеУстановки(Установлен, Контекст) Экспорт
	
	Элементы.УстановитьСертификат.Доступность = Истина;
	
	ОбновитьДатаУстановкиСертификатаВЗаголовке(ЭтотОбъект);
	
	Если Установлен Тогда
		ЗакрытьПомощникПослеУстановкиСертификатаНаСервере();
		ПослеЗаписи(НСтр("ru = 'Заявление исполнено.'"));
		Закрыть();
	Иначе
		ПослеЗаписи();
		ЗаписатьЗаявление();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерейтиНаСтраницуУстановкаСертификатаНаСервере()
	
	Результат = ПолучитьСертификат();
	Если Результат = Неопределено Тогда
		ОбновитьДатаОбновленияСостоянияВЗаголовке(ЭтотОбъект);
		ЗаписатьЗаявление();
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.ИсполненоСертификатНеУстановлен;
	Иначе
		Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отклонено;
	КонецЕсли;
	
	ЗаписатьЗаявление();
	
	Если Результат = Истина Тогда
		ПерейтиНаСтраницуУстановкаСертификатаНаСервереПриЗагрузке();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПерейтиНаСтраницуУстановкаСертификатаНаСервереПриЗагрузке()
	
	Элементы.ФормаНапечататьДокументы.Видимость = Ложь;
	Элементы.ФормаНазад.Видимость = Ложь;
	Элементы.ФормаДалее.Видимость = Ложь;
	Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУстановкаСертификата;
	Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаУстановкаСертификата;
	
	ОбновитьДатаУстановкиСертификатаВЗаголовке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДатаУстановкиСертификатаВЗаголовке(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ДатаУстановкиСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ОшибкаУстановкиСертификата.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка установки сертификата (на %1)'"),
		Формат(Форма.ДатаУстановкиСертификата, "ДЛФ=DT"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьГиперссылку(Строка, Подстрока, Гиперссылка)
	
	Позиция = СтрНайти(Строка, Подстрока);
	Если Позиция = 0 Тогда
		Возврат Новый ФорматированнаяСтрока(Строка);
	КонецЕсли;
	
	СтрокаСоСсылкой = Новый ФорматированнаяСтрока(
		Подстрока,,,, Гиперссылка);
	
	Возврат Новый ФорматированнаяСтрока(Лев(Строка, Позиция-1),
		СтрокаСоСсылкой, Сред(Строка, Позиция + СтрДлина(Подстрока)));
	
КонецФункции


&НаКлиенте
Процедура ЗакрытьПомощникПослеУстановкиСертификата()
	
	Элементы.УстановитьСертификат.Доступность = Ложь;
	
	УстановитьСертификат(Новый ОписаниеОповещения("ЗакрытьПомощникПослеУстановкиСертификатаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПомощникПослеУстановкиСертификатаЗавершение(Установлен, Контекст) Экспорт
	
	Элементы.УстановитьСертификат.Доступность = Истина;
	
	ОбновитьДатаУстановкиСертификатаВЗаголовке(ЭтотОбъект);
	
	Если Не Установлен Тогда
		ЗаписатьЗаявление();
		Возврат;
	КонецЕсли;
	
	ЗакрытьПомощникПослеУстановкиСертификатаНаСервере();
	
	ПослеЗаписи(НСтр("ru = 'Сертификат установлен.'"));
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьПомощникПослеУстановкиСертификатаНаСервере()
	
	Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Исполнено;
	
	ЗаписатьЗаявление();
	
	Элементы.ФормаДалее.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияРеквизитыОрганизацииПриИзменении()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОрганизация Тогда
		ПриИзмененииОрганизацииНаСервере();
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВладелецСертификата Тогда
		ПриИзмененииВладельцаСертификатаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыОрганизации()
	
	ОчиститьРеквизит("НаименованиеСокращенное");
	ОчиститьРеквизит("НаименованиеПолное");
	ОчиститьРеквизит("ИНН");
	ОчиститьРеквизит("КПП");
	ОчиститьРеквизит("ОГРН");
	ОчиститьРеквизит("РасчетныйСчет");
	ОчиститьРеквизит("БИК");
	ОчиститьРеквизит("КорреспондентскийСчет");
	
	ОчиститьРеквизит("ЮридическийАдрес");
	ЮридическийАдресXML = "";
	
	ОчиститьРеквизит("ФактическийАдрес");
	ФактическийАдресXML = "";
	
	ОчиститьРеквизит("Телефон");
	ТелефонXML = "";
	
	Сотрудник = Неопределено;
	ОчиститьРеквизитыВладельца();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыОрганизацииВидаЮридическоеЛицо()
	
	ОчиститьРеквизит("КПП");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере(Загрузка = Ложь)
	
	Если Не Загрузка Тогда
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ЭтоИндивидуальныйПредприниматель", ЭтоИндивидуальныйПредприниматель);
		Реквизиты.Вставить("НаименованиеСокращенное");
		Реквизиты.Вставить("НаименованиеПолное");
		Реквизиты.Вставить("ИНН");
		Реквизиты.Вставить("КПП");
		Реквизиты.Вставить("ОГРН");
		Реквизиты.Вставить("РасчетныйСчет");
		Реквизиты.Вставить("БИК");
		Реквизиты.Вставить("КорреспондентскийСчет");
		Реквизиты.Вставить("Телефон");
		Реквизиты.Вставить("ЮридическийАдрес");
		Реквизиты.Вставить("ФактическийАдрес");
		
		Если ЕстьОрганизации Тогда
			Реквизиты.Вставить("Организация",  Организация);
		Иначе
			Реквизиты.Вставить("Организация",  Неопределено);
		КонецЕсли;
		
		ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат(Реквизиты);// АПК:222 Вызов устаревшей для совместимости.
		ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат(Реквизиты);
		
		Если ЕстьОрганизации Тогда
			Организация = Реквизиты.Организация;
		КонецЕсли;
		ЭтоИндивидуальныйПредприниматель = Реквизиты.ЭтоИндивидуальныйПредприниматель;
		
		УстановитьРеквизит(Реквизиты, "НаименованиеСокращенное");
		УстановитьРеквизит(Реквизиты, "НаименованиеПолное");
		УстановитьРеквизит(Реквизиты, "ИНН", Истина);
		УстановитьРеквизит(Реквизиты, "ОГРН", Истина);
		УстановитьРеквизит(Реквизиты, "РасчетныйСчет", Истина);
		УстановитьРеквизит(Реквизиты, "БИК", Истина);
		УстановитьРеквизит(Реквизиты, "КорреспондентскийСчет", Истина);
		УстановитьРеквизит(Реквизиты, "Телефон", , Истина, Ложь);
		УстановитьРеквизит(Реквизиты, "ЮридическийАдрес", , Истина, Истина);
		УстановитьРеквизит(Реквизиты, "ФактическийАдрес", , Истина, Истина);
		
		Если Не ЭтоИндивидуальныйПредприниматель Тогда
			УстановитьРеквизит(Реквизиты, "КПП", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Элементы.КПП.Видимость = Ложь;
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРНИП'");
	Иначе
		Элементы.КПП.Видимость = Истина;
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРН'");
	КонецЕсли;
	
	ПроверитьАдрес("ЮридическийАдрес");
	ПроверитьАдрес("ФактическийАдрес");
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияЗаполнена()
	
	Отказ = Ложь;
	
	Если Элементы.Организация.Видимость
	   И Не ПроверитьРеквизит(Отказ, "Организация") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ПроверитьРеквизит(Отказ, "НаименованиеСокращенное");
	ПроверитьРеквизит(Отказ, "НаименованиеПолное");
	
	Если ПроверитьРеквизит(Отказ, "ИНН") Тогда
		ТекстСообщения = "";
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,
			Не ЭтоИндивидуальныйПредприниматель, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ИНН", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоИндивидуальныйПредприниматель
	   И ПроверитьРеквизит(Отказ, "КПП") Тогда
		
		ТекстСообщения = "";
		РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КПП", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьРеквизит(Отказ, "ОГРН") Тогда
		ТекстСообщения = "";
		РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ОГРН,
			Не ЭтоИндивидуальныйПредприниматель, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОГРН", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасчетныйСчет) Тогда
		ТекстСообщения = "";
		РасчетныйСчетСоответствуетТребованиям(РасчетныйСчет, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "РасчетныйСчет", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БИК) Тогда
		ТекстСообщения = "";
		БИКСоответствуетТребованиям(БИК, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "БИК", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КорреспондентскийСчет) Тогда
		ТекстСообщения = "";
		КорреспондентскийСчетСоответствуетТребованиям(КорреспондентскийСчет, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КорреспондентскийСчет", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьРеквизит(Отказ, "ЮридическийАдрес") Тогда
		ТекстСообщения = "";
		АдресСоответствуетТребованиям(ЮридическийАдресXML, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ЮридическийАдрес", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьРеквизит(Отказ, "ФактическийАдрес") Тогда
		ТекстСообщения = "";
		АдресСоответствуетТребованиям(ФактическийАдресXML, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ФактическийАдрес", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьРеквизит(Отказ, "Телефон") Тогда
		ТекстСообщения = "";
		ТелефонСоответствуетТребованиям(ТелефонXML, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Телефон", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьАдресОбработчикОжидания()
	
	Для Каждого КлючИЗначение Из РеквизитыПроверкиАдреса Цикл
		Если КлючИЗначение.Значение Тогда
			ПроверитьАдрес(КлючИЗначение.Ключ);
			РеквизитыПроверкиАдреса[КлючИЗначение.Ключ] = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАдрес(ИмяРеквизита)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	Сообщение = "";
	Попытка
		ПодробныйИтог = МодульРаботаСАдресами.ПроверитьАдрес(ЭтотОбъект[ИмяРеквизита + "XML"]);
		
		Если ПодробныйИтог.Результат <> "Корректный" Тогда
			Для каждого ЭлементСписка Из ПодробныйИтог.СписокОшибок Цикл
				Сообщение = Сообщение + Символы.ПС + ЭлементСписка.Представление;
			КонецЦикла;
			Сообщение = СокрЛП(Сообщение);
			Если Не ЗначениеЗаполнено(Сообщение) Тогда
				Сообщение = НСтр("ru = 'Адрес не заполнен'");
			КонецЕсли;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		Элементы[ИмяРеквизита + "Предупреждение"].Подсказка = Сообщение;
		Элементы[ИмяРеквизита + "Предупреждение"].Видимость = Истина;
	Иначе
		Элементы[ИмяРеквизита + "Предупреждение"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасчетныйСчетСоответствуетТребованиям(РасчетныйСчет, ТекстСообщения)
	
	Значение = СокрЛП(РасчетныйСчет);
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
		ТекстСообщения = НСтр("ru = 'Расчетный счет должен состоять только из цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Значение) <> 20 Тогда
		ТекстСообщения = НСтр("ru = 'Расчетный счет должен состоять из 20 цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоБанк = ЗначениеЗаполнено(КорреспондентскийСчет);
	Если Не РегламентированныеДанныеКлиентСервер.КонтрольныйКлючЛицевогоСчетаСоответствуетТребованиям(Значение, БИК, ЭтоБанк) Тогда
		ТекстСообщения = НСтр("ru = 'Контрольное число счета не совпадает с рассчитанным с учетом БИК'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция БИКСоответствуетТребованиям(БИК, ТекстСообщения)
	
	Значение = СокрЛП(БИК);
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
		ТекстСообщения = НСтр("ru = 'БИК должен состоять только из цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Значение) <> 9 Тогда
		ТекстСообщения = НСтр("ru = 'БИК должен состоять из 9 цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция КорреспондентскийСчетСоответствуетТребованиям(КорреспондентскийСчет, ТекстСообщения)
	
	Значение = СокрЛП(КорреспондентскийСчет);

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
		ТекстСообщения = НСтр("ru = 'Корреспондентский счет должен состоять только из цифр.'");
		Возврат Ложь;
	КонецЕсли;

	Если СтрДлина(Значение) <> 20 Тогда
		ТекстСообщения = НСтр("ru = 'Корреспондентский счет должен состоять из 20 цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция АдресСоответствуетТребованиям(Знач АдресXML, ТекстСообщения)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	ТекстСообщения = "";
	ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
	АдресСтруктура = МодульРаботаСАдресами.СведенияОбАдресе(АдресXML, ДополнительныеПараметры);
	
	// Проверка, что адрес российский.
	Если Не АдресСтруктура.Свойство("КодРегиона") Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Это не российский адрес'");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка, что указан регион.
	Если Не АдресСтруктура.Свойство("Регион") Или Не ЗначениеЗаполнено(АдресСтруктура.Регион) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не указан регион'");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка, что регион указан правильно - код региона определен.
	Если Не ЗначениеЗаполнено(АдресСтруктура.КодРегиона) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Некорректный регион (код региона не определен)'");
		Возврат Ложь; 
	КонецЕсли;
	
	// Населенный пункт полностью.
	НаселенныйПунктПолностью = НаселенныйПунктПолностью(АдресСтруктура);
	Если Не ЗначениеЗаполнено(НаселенныйПунктПолностью) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не указан населенный пункт'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаселенныйПунктПолностью(АдресСтруктура)
	
	// Округ ОкругСокращение, Район РайонСокращение, Город ГородСокращение,
	// ВнутригородскойРайон ВнутригородскойРайонСокращение, НаселенныйПункт НаселенныйПунктСокращение.
	СписокПолей = "";
	
	Если АдресСтруктура.Свойство("Регион")
	   И АдресСтруктура.Свойство("КодРегиона")
	   И (    АдресСтруктура.КодРегиона = "77"
	      Или АдресСтруктура.КодРегиона = "78"
	      Или АдресСтруктура.КодРегиона = "92"
	      Или АдресСтруктура.КодРегиона = "99") Тогда
		
		СписокПолей = "Регион, КодРегиона, ";
	КонецЕсли;
	
	Возврат ПредставлениеЧастиАдреса(АдресСтруктура, СписокПолей +
		"Округ,
		|Район,
		|Город,
		|ВнутригородскойРайон,
		|НаселенныйПункт,
		|Территория");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЧастиАдреса(АдресСтруктура, СписокПолей)
	
	Представление = "";
	СтруктураПолей = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(СтруктураПолей, АдресСтруктура);
	
#Если Сервер Тогда
	МодульУправлениеКонтактнойИнформациейКлиентСервер = ОбщегоНазначения.ОбщийМодуль(
		"УправлениеКонтактнойИнформациейКлиентСервер");
#Иначе
	МодульУправлениеКонтактнойИнформациейКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"УправлениеКонтактнойИнформациейКлиентСервер");
#КонецЕсли
	
	МодульУправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(
		СтруктураПолей, Представление);
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция ТелефонСоответствуетТребованиям(Знач ТелефонXML, ТекстСообщения)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ТекстСообщения = "";
	ТелефонСтруктура = МодульУправлениеКонтактнойИнформацией.СведенияОТелефоне(ТелефонXML);
	
	// Проверка, что телефон российский.
	Если СтрЗаменить(ТелефонСтруктура.КодСтраны, "+", "") <> "7" Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Код страны не российский (должен быть ""7"")'");
		Возврат Ложь;
	КонецЕсли;
	
	НомерТелефонаБезКодаСтраны = ТелефонСтруктура.КодГорода + ТелефонСтруктура.НомерТелефона;
	
	Если Не ЗначениеЗаполнено(НомерТелефонаБезКодаСтраны) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не заполнен номер телефона'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(ТолькоЦифры(НомерТелефонаБезКодаСтраны)) <> 10 Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Номер телефона с кодом города должен состоять из 10-и цифр'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияРеквизитыВладельцаПриИзменении()
	
	ПриИзмененииВладельцаСертификатаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыВладельца()
	
	ОчиститьРеквизит("Фамилия");
	ОчиститьРеквизит("Имя");
	ОчиститьРеквизит("Отчество");
	ОчиститьРеквизит("ДатаРождения");
	ОчиститьРеквизит("Пол");
	ОчиститьРеквизит("МестоРождения");
	ОчиститьРеквизит("Гражданство");
	ОчиститьРеквизит("ГражданствоПредставление");
	ОчиститьРеквизит("ГражданствоОКСМКодАльфа3");
	ОчиститьРеквизит("СтраховойНомерПФР");
	ОчиститьРеквизит("Должность");
	ОчиститьРеквизит("Подразделение");
	
	Если Элементы.ДокументВид.ТолькоПросмотр Тогда
		ДокументВид = 21;
	КонецЕсли;
	
	ОчиститьРеквизит("ДокументНомер");
	ОчиститьРеквизит("ДокументКемВыдан");
	ОчиститьРеквизит("ДокументКодПодразделения");
	ОчиститьРеквизит("ДокументДатаВыдачи");
	ОчиститьРеквизит("ЭлектроннаяПочта");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаСертификатаНаСервере(Загрузка = Ложь)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Директор");
	Реквизиты.Вставить("ГлавныйБухгалтер");
	Реквизиты.Вставить("Сотрудник", Сотрудник);
	Реквизиты.Вставить("Пользователь");
	Реквизиты.Вставить("Фамилия");
	Реквизиты.Вставить("Имя");
	Реквизиты.Вставить("Отчество");
	Реквизиты.Вставить("ДатаРождения");
	Реквизиты.Вставить("Пол");
	Реквизиты.Вставить("МестоРождения");
	Реквизиты.Вставить("Гражданство");
	Реквизиты.Вставить("СтраховойНомерПФР");
	Реквизиты.Вставить("Должность");
	Реквизиты.Вставить("Подразделение");
	Реквизиты.Вставить("ДокументВид");
	Реквизиты.Вставить("ДокументНомер");
	Реквизиты.Вставить("ДокументКемВыдан");
	Реквизиты.Вставить("ДокументКодПодразделения");
	Реквизиты.Вставить("ДокументДатаВыдачи");
	Реквизиты.Вставить("ЭлектроннаяПочта");
	
	Если ЕстьОрганизации Тогда
		Реквизиты.Вставить("Организация", Организация);
	Иначе
		Реквизиты.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если СотрудникТип <> Неопределено Тогда
		Реквизиты.Вставить("Сотрудник", Сотрудник);
	Иначе
		Реквизиты.Вставить("Сотрудник", Неопределено);
	КонецЕсли;
	
	Реквизиты.Вставить("ТипВладельца");
	
	ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат(Реквизиты);// АПК:222 Вызов устаревшей для совместимости.
	ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат(Реквизиты);
	
	ЗаполнитьТипыЗначения(СотрудникТип, Элементы.Сотрудник, Реквизиты.ТипВладельца);
	
	Если СотрудникТип = Неопределено Тогда
		Элементы.Сотрудник.Видимость = Ложь;
	Иначе
		Элементы.Сотрудник.СписокВыбора.Очистить();
		
		Если Не ЭтоИндивидуальныйПредприниматель Тогда
			Если ЗначениеЗаполнено(Реквизиты.Директор) Тогда
				Элементы.Сотрудник.СписокВыбора.Добавить(Реквизиты.Директор, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Директор: %1'"), Реквизиты.Директор));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты.ГлавныйБухгалтер) Тогда
				Элементы.Сотрудник.СписокВыбора.Добавить(Реквизиты.ГлавныйБухгалтер, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Главный бухгалтер: %1'"), Реквизиты.ГлавныйБухгалтер));
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоИндивидуальныйПредприниматель Тогда
			Элементы.Сотрудник.Заголовок = НСтр("ru = 'Индивидуальный предприниматель'");
		Иначе
			Элементы.Сотрудник.Заголовок = НСтр("ru = 'Сотрудник'");
		КонецЕсли;
		
		Сотрудник = ?(Загрузка, Сотрудник, Реквизиты.Сотрудник);
	КонецЕсли;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Элементы.Должность.Видимость = Ложь;
		Элементы.Подразделение.Видимость = Ложь;
		Элементы.Сотрудник.ТолькоПросмотр = Истина;
		Элементы.Сотрудник.КнопкаВыпадающегоСписка = Ложь;
	Иначе
		Элементы.Должность.Видимость = Истина;
		Элементы.Подразделение.Видимость = Истина;
		Элементы.Сотрудник.ТолькоПросмотр = Ложь;
		Элементы.Сотрудник.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
	Если Загрузка Тогда
		ПриИзмененииВидаДокументаНаСервере();
		Возврат;
	КонецЕсли;
	
	Объект.Пользователь = Реквизиты.Пользователь;
	
	УстановитьРеквизит(Реквизиты, "Фамилия");
	УстановитьРеквизит(Реквизиты, "Имя");
	УстановитьРеквизит(Реквизиты, "Отчество");
	УстановитьРеквизит(Реквизиты, "ДатаРождения");
	УстановитьРеквизит(Реквизиты, "Пол");
	УстановитьРеквизит(Реквизиты, "МестоРождения");
	УстановитьРеквизит(Реквизиты, "Гражданство");
	УстановитьРеквизит(Реквизиты, "СтраховойНомерПФР", Истина);
	
	Если Пол <> "Мужской" И Пол <> "Женский" Тогда
		Пол = "";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ГражданствоСвойства(Гражданство));
	Если Не ЗначениеЗаполнено(ГражданствоОКСМКодАльфа3) Тогда
		Гражданство = Неопределено;
		ГражданствоПредставление = "";
		ГражданствоОКСМКодАльфа3 = "";
	КонецЕсли;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Должность = "";
		Подразделение = "";
	Иначе
		УстановитьРеквизит(Реквизиты, "Должность");
		УстановитьРеквизит(Реквизиты, "Подразделение");
	КонецЕсли;

	УстановитьРеквизит(Реквизиты, "ДокументВид", Истина);
	УстановитьРеквизит(Реквизиты, "ДокументНомер", Истина);
	УстановитьРеквизит(Реквизиты, "ДокументКемВыдан");
	УстановитьРеквизит(Реквизиты, "ДокументКодПодразделения", Истина);
	УстановитьРеквизит(Реквизиты, "ДокументДатаВыдачи", , Истина);
	
	УстановитьРеквизит(Реквизиты, "ЭлектроннаяПочта", , , Ложь);
	
	ПриИзмененииВидаДокументаНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГражданствоСвойства(Гражданство)
	
	Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Гражданство,
		"Наименование, НаименованиеПолное, КодАльфа3");
	
	Свойства = Новый Структура;
	Свойства.Вставить("ГражданствоОКСМКодАльфа3", Строка(Значения.КодАльфа3));
	
	Если ЗначениеЗаполнено(Значения.НаименованиеПолное) Тогда
		Свойства.Вставить("ГражданствоПредставление", Строка(Значения.НаименованиеПолное));
	Иначе
		Свойства.Вставить("ГражданствоПредставление", Строка(Значения.Наименование));
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииВидаДокументаНаСервере()
	
	Если ДокументВид = "" Тогда
		ДокументВид = "21";
	КонецЕсли;
	
	Если ДокументВид = "21" Тогда
		Элементы.ДокументНомер.Заголовок = НСтр("ru = 'Серия и номер'");
		Элементы.ДокументНомер.Маска = "99 99 999999";
		Элементы.ДокументКодПодразделения.Видимость = Истина;
	Иначе
		Элементы.ДокументНомер.Заголовок = НСтр("ru = 'Номер'");
		Элементы.ДокументНомер.Маска = "";
		Элементы.ДокументКодПодразделения.Видимость = Ложь;
		ДокументКодПодразделения = "";
	КонецЕсли;
	
	Если ДокументВид = 91 Тогда
		ДокументВид = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВладелецЗаполнен()
	
	Отказ = Ложь;
	
	Если Элементы.Сотрудник.Видимость
	   И Не ПроверитьРеквизит(Отказ, "Сотрудник") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ПроверитьРеквизит(Отказ, "Фамилия");
	ПроверитьРеквизит(Отказ, "Имя");
	ПроверитьРеквизит(Отказ, "ДатаРождения");
	ПроверитьРеквизит(Отказ, "Пол");
	ПроверитьРеквизит(Отказ, "МестоРождения");
	ПроверитьРеквизит(Отказ, "Гражданство");
	
	Если ПроверитьРеквизит(Отказ, "СтраховойНомерПФР") Тогда
		ТекстСообщения = "";
		РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(
			СтраховойНомерПФР, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СтраховойНомерПФР", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоИндивидуальныйПредприниматель Тогда
		ПроверитьРеквизит(Отказ, "Должность");
	КонецЕсли;
	
	ПроверитьРеквизит(Отказ, "ДокументВид");
	
	Если ДокументВид = "21"
	   И ПроверитьРеквизит(Отказ, "ДокументНомер") Тогда
		
		ТекстСообщения = "";
		НомерПаспортаРФСоответствуетТребованиям(ДокументНомер, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДокументНомер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРеквизит(Отказ, "ДокументКемВыдан");
	
	Если ДокументВид = "21"
	   И ПроверитьРеквизит(Отказ, "ДокументКодПодразделения") Тогда
		
		ТекстСообщения = "";
		КодПодразделенияВыдачиПаспортаРФСоответствуетТребованиям(ДокументКодПодразделения, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДокументКодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьРеквизит(Отказ, "ДокументДатаВыдачи");
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		ТекстСообщения = "";
		Попытка
			ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ЭлектроннаяПочта);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ЭлектроннаяПочта", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Функция НомерПаспортаРФСоответствуетТребованиям(Знач НомерПаспортаРФ, ТекстСообщения)
	
	ТекстСообщения = "";
	
	Результат = Истина;
	
	СтрокаЦифр = СтрЗаменить(НомерПаспортаРФ, ",", "");
	СтрокаЦифр = СтрЗаменить(СтрокаЦифр, " ", "");
	
	Если ПустаяСтрока(СтрокаЦифр) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Номер паспорта не заполнен'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СтрокаЦифр) < 10 Тогда
		ТекстСообщения  =  ТекстСообщения + НСтр("ru = 'Номер паспорта задан неполностью'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаЦифр) Тогда
		Результат = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Номер паспорта должен состоять только из цифр.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КодПодразделенияВыдачиПаспортаРФСоответствуетТребованиям(КодПодразделения, ТекстСообщения)
	
	СтрокаЦифр = СокрЛП(КодПодразделения);
	
	Если СтрДлина(СтрокаЦифр) < 6 Тогда
		ТекстСообщения  = НСтр("ru = 'Код подразделения задан неполностью'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаЦифр) Тогда
		ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять только из цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаЦифр = "000000" Тогда
		ТекстСообщения = НСтр("ru = 'Код подразделения не может быть нулевым.'");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРуководителяОбработчикОжидания()
	
	ПриИзмененииРуководителяНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРуководителяНаСервере(Загрузка = Ложь)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Представление");
	Реквизиты.Вставить("Должность");
	Реквизиты.Вставить("Основание");
	
	Если ЕстьОрганизации Тогда
		Реквизиты.Вставить("Организация", Организация);
	Иначе
		Реквизиты.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если ДокументыРуководительТип <> Неопределено Тогда
		Реквизиты.Вставить("Руководитель", ДокументыРуководительСсылка);
	Иначе
		Реквизиты.Вставить("Руководитель", Неопределено);
	КонецЕсли;
	Реквизиты.Вставить("ТипРуководителя");
	
	ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовРуководителяВЗаявленииНаСертификат(Реквизиты);// АПК:222 Вызов устаревшей для совместимости.
	ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовРуководителяВЗаявленииНаСертификат(Реквизиты);
	
	ЗаполнитьТипыЗначения(ДокументыРуководительТип, Элементы.ДокументыРуководитель, Реквизиты.ТипРуководителя);
	Элементы.ДокументыРуководитель.КнопкаВыбора = ДокументыРуководительТип <> Неопределено;
	
	Если Загрузка Тогда
		Элементы.ДокументыРуководитель.КнопкаОткрытия = ЗначениеЗаполнено(ДокументыРуководительСсылка);
		Возврат;
	КонецЕсли;
	
	ДокументыРуководительСсылка = ?(ДокументыРуководительТип <> Неопределено, Реквизиты.Руководитель, Неопределено);
	Элементы.ДокументыРуководитель.КнопкаОткрытия = ЗначениеЗаполнено(ДокументыРуководительСсылка);
	ДокументыРуководитель = СокрЛП(?(Реквизиты.Представление <> Неопределено, Реквизиты.Представление, Реквизиты.Руководитель));
	
	ДокументыРуководительДолжность = Реквизиты.Должность;
	ДокументыРуководительОснование = Реквизиты.Основание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияРеквизитыРуководителяПриИзменении()
	
	ПриИзмененииРуководителяНаСервере();
	
КонецПроцедуры

&НаСервере
Функция РуководительЗаполнен()
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверитьРеквизит(Отказ, "ДокументыРуководитель");
	ПроверитьРеквизит(Отказ, "ДокументыРуководительДолжность");
	ПроверитьРеквизит(Отказ, "ДокументыРуководительОснование");
	
	Возврат Не Отказ;
	
КонецФункции


&НаКлиенте
Процедура ПриИзмененииПартнераОбработчикОжидания()
	
	ПриИзмененииПартнераНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераНаСервере(Загрузка = Ложь)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Представление");
	Реквизиты.Вставить("ЭтоИндивидуальныйПредприниматель", ДокументыПартнерЭтоИП);
	Реквизиты.Вставить("ИНН");
	Реквизиты.Вставить("КПП");
	
	Если ЕстьОрганизации Тогда
		Реквизиты.Вставить("Организация", Организация);
	Иначе
		Реквизиты.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если ДокументыПартнерТип <> Неопределено Тогда
		Реквизиты.Вставить("Партнер", ДокументыПартнерСсылка);
	Иначе
		Реквизиты.Вставить("Партнер", Неопределено);
	КонецЕсли;
	Реквизиты.Вставить("ТипПартнера");
	
	ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовПартнераВЗаявленииНаСертификат(Реквизиты);// АПК:222 Вызов устаревшей для совместимости.
	ЗаявлениеНаСертификатПереопределяемый.ПриЗаполненииРеквизитовПартнераВЗаявленииНаСертификат(Реквизиты);
	
	ЗаполнитьТипыЗначения(ДокументыПартнерТип, Элементы.ДокументыПартнер, Реквизиты.ТипПартнера);
	Элементы.ДокументыПартнер.КнопкаВыбора = ДокументыПартнерТип <> Неопределено;
	
	Если Не Загрузка Тогда
		ДокументыПартнерСсылка = ?(ДокументыПартнерТип <> Неопределено, Реквизиты.Партнер, Неопределено);
		
		ДокументыПартнер = СокрЛП(?(Реквизиты.Представление <> Неопределено, Реквизиты.Представление, Реквизиты.Партнер));
		
		ДокументыПартнерЭтоИП = Реквизиты.ЭтоИндивидуальныйПредприниматель;
		
		РеквизитыФормы = Новый Структура;
		РеквизитыФормы.Вставить("ДокументыПартнерИНН", Реквизиты.ИНН);
		РеквизитыФормы.Вставить("ДокументыПартнерКПП", Реквизиты.КПП);
		
		УстановитьРеквизит(РеквизитыФормы, "ДокументыПартнерИНН", Истина);
		
		Если Не ДокументыПартнерЭтоИП Тогда
			УстановитьРеквизит(РеквизитыФормы, "ДокументыПартнерКПП", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДокументыПартнер.КнопкаОткрытия = ЗначениеЗаполнено(ДокументыПартнерСсылка);
	
	Если ДокументыПартнерЭтоИП Тогда
		Элементы.ДокументыПартнерКПП.Видимость = Ложь;
	Иначе
		Элементы.ДокументыПартнерКПП.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияРеквизитыПартнераПриИзменении()
	
	ПриИзмененииПартнераНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыПартнера()
	
	ОчиститьРеквизит("ДокументыПартнерИНН");
	ОчиститьРеквизит("ДокументыПартнерКПП");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыПартнераВидаЮридическоеЛицо()
	
	ОчиститьРеквизит("ДокументыПартнерКПП");
	
КонецПроцедуры

&НаСервере
Функция ПартнерЗаполнен()
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(ДокументыПартнерИНН) Тогда
		ТекстСообщения = "";
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДокументыПартнерИНН,
			Не ДокументыПартнерЭтоИП, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДокументыПартнерИНН", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДокументыПартнерЭтоИП
	   И ЗначениеЗаполнено(ДокументыПартнерКПП) Тогда
		
		ТекстСообщения = "";
		РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ДокументыПартнерКПП, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДокументыПартнерКПП", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции


&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ЭтотОбъект[Элемент.Имя]) = Тип("Строка") Тогда
		ИмяРеквизита = Элемент.Имя;
		ИмяРеквизитаЗначения = Элемент.Имя + "Ссылка";
	Иначе
		ИмяРеквизита = Элемент.Имя;
		ИмяРеквизитаЗначения = Элемент.Имя;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Элемент", Элемент);
	Контекст.Вставить("ИмяРеквизита", ИмяРеквизита);
	Контекст.Вставить("ИмяРеквизитаЗначения", ИмяРеквизитаЗначения);
	
	Если ТипЗнч(ЭтотОбъект[ИмяРеквизита + "Тип"]) <> Тип("СписокЗначений") Тогда
		Возврат;
	ИначеЕсли ЭтотОбъект[ИмяРеквизита + "Тип"].Количество() = 1 Тогда
		ЗначениеНачалоВыбораПослеВыбораТипа(ЭтотОбъект[ИмяРеквизита + "Тип"][0], Контекст);
	Иначе
		СписокВыбораТипов = Новый СписокЗначений;
		СписокВыбораТипов.ЗагрузитьЗначения(ЭтотОбъект[ИмяРеквизита + "Тип"].ВыгрузитьЗначения());
		СписокВыбораТипов.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения("ЗначениеНачалоВыбораПослеВыбораТипа", ЭтотОбъект, Контекст),
			НСтр("ru = 'Выбор типа данных'"),
			ЭтотОбъект[ИмяРеквизита + "Тип"].НайтиПоЗначению(ТипЗнч(ЭтотОбъект[ИмяРеквизитаЗначения])));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбораПослеВыбораТипа(ЭлементСписка, Контекст) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент              = Контекст.Элемент;
	ИмяРеквизита         = Контекст.ИмяРеквизита;
	ИмяРеквизитаЗначения = Контекст.ИмяРеквизитаЗначения;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ЭлементСписка.Значение);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	НачальноеЗначение = ОписаниеТипов.ПривестиЗначение(ЭтотОбъект[ИмяРеквизитаЗначения]);
	
	Если ИмяРеквизита = ИмяРеквизитаЗначения Тогда
		ЭтотОбъект[ИмяРеквизитаЗначения] = НачальноеЗначение;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", НачальноеЗначение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ИмяФормыВыбора = ЭтотОбъект[Элемент.Имя + "Тип"].НайтиПоЗначению(ТипЗнч(НачальноеЗначение)).Представление
		+ ".ФормаВыбора";
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Значение = ЭтотОбъект[Элемент.Имя + "Ссылка"];
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭтотОбъект[Элемент.Имя + "Ссылка"] = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыЗначения(РеквизитТип, Элемент, ОписаниеТипов);
	
	Если ТипЗнч(ОписаниеТипов) <> Тип("ОписаниеТипов") Тогда
		РеквизитТип = Неопределено;
	Иначе
		СоставТипов = Новый СписокЗначений;
		Для каждого Тип Из ОписаниеТипов.Типы() Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				СоставТипов.Добавить(Тип, Строка(Тип));
			КонецЕсли;
		КонецЦикла;
		СоставТипов.СортироватьПоПредставлению();
		Для каждого ЭлементСписка Из СоставТипов Цикл
			ЭлементСписка.Представление = Метаданные.НайтиПоТипу(ЭлементСписка.Значение).ПолноеИмя();
		КонецЦикла;
		
		Если СоставТипов.Количество() = 0 Тогда
			РеквизитТип = Неопределено;
		Иначе
			РеквизитТип = СоставТипов;
			Если Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке Тогда
				Элемент.ВыбиратьТип = Ложь;
			Иначе
				Элемент.ВыбиратьТип = РеквизитТип.Количество() > 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(ИмяРеквизита)
	
	ЭтотОбъект[ИмяРеквизита] = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизит(Реквизиты, ИмяРеквизита, ТолькоЦифры = Ложь, КнопкаВыбора = Ложь, ЭтоАдрес = Неопределено)
	
	Если Реквизиты[ИмяРеквизита] = Неопределено Тогда
		Возврат; // Заполнение реквизита не внедрено.
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты[ИмяРеквизита]) Тогда
		ЭтотОбъект[ИмяРеквизита] = Неопределено;
		Если ЭтоАдрес <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита + "XML"] = "";
			Если ЭтоАдрес = Истина Тогда
				ПроверитьАдрес(ИмяРеквизита);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭтоАдрес <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита + "XML"] = Реквизиты[ИмяРеквизита];
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
				МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
				
				ЭтотОбъект[ИмяРеквизита] = МодульУправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
					Реквизиты[ИмяРеквизита]);
				
				Если ЭтоАдрес = Истина Тогда
					ПроверитьАдрес(ИмяРеквизита);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТолькоЦифры Тогда
			ЭтотОбъект[ИмяРеквизита] = ТолькоЦифры(Реквизиты[ИмяРеквизита]);
			
		ИначеЕсли ТипЗнч(Реквизиты[ИмяРеквизита]) = Тип("Строка") Тогда
			ЭтотОбъект[ИмяРеквизита] = СокрЛП(Реквизиты[ИмяРеквизита]);
		Иначе
			ЭтотОбъект[ИмяРеквизита] = Реквизиты[ИмяРеквизита];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифры(Строка)
	
	ДлинаСтроки = СтрДлина(Строка);
	
	ОбработаннаяСтрока = "";
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если Символ >= "0" И Символ <= "9" Тогда
			ОбработаннаяСтрока = ОбработаннаяСтрока + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбработаннаяСтрока;
	
КонецФункции

&НаСервере
Функция ПроверитьРеквизит(Отказ, ИмяРеквизита)
	
	Элемент = Элементы[ИмяРеквизита];
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
		ЗаголовокПоля = Элемент.Заголовок;
	Иначе
		ЗаголовокПоля = ЗаголовкиРеквизитов.НайтиПоЗначению(ИмяРеквизита);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поле ""%1"" не заполнено'"), ЗаголовокПоля), , ИмяРеквизита, , Отказ);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Функция ПодготовленныйДокумент()
	
	Если Не РуководительЗаполнен() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = Обработки.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.ПолучитьМакет(
		?(ЭтоИндивидуальныйПредприниматель, "ИндивидуальныйПредприниматель", "ЮридическоеЛицо"));
	
	Документ = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ДокументыПоляСертификата);
	
	Макет.Параметры.Телефон = Телефон;
	
	ДокументВидПредставление = Элементы.ДокументВид.СписокВыбора.НайтиПоЗначению(ДокументВид).Представление;
	ДокументВидПредставление = НРег(Лев(ДокументВидПредставление, 1)) + Сред(ДокументВидПредставление, 2);
	
	ДокументНомерПредставление =
		?(ДокументВид = "21", ПредставлениеРеквизитаНомерПаспортаРФ(ДокументНомер), ДокументНомер);
	
	ДокументКодПодразделенияПредставление = ПредставлениеРеквизитаДокументКодПодразделения(ДокументКодПодразделения);
	ДокументДатаВыдачиПредставление = ПредставлениеРеквизитаДокументДатаВыдачи(ДокументДатаВыдачи);
	
	Макет.Параметры.УдостоверениеЛичности = ДокументВидПредставление + " " + ДокументНомерПредставление + " "
		+ НСтр("ru = 'от'") + " " + ДокументДатаВыдачиПредставление + " "
		+ НСтр("ru = 'выданный'") + " " + ДокументКемВыдан
		+ ?(ЗначениеЗаполнено(ДокументКодПодразделенияПредставление), ", " + НСтр("ru = 'код подразделения'")
			+ " " + ДокументКодПодразделенияПредставление + "", "");
	
	Документ.Вывести(Макет);
	
	Возврат Документ;
	
КонецФункции

&НаСервере
Функция ОтправитьЗаявление(ОписаниеОшибки)
	
	ОписаниеОшибки = "";
	ШаблонОписанияОшибки =
		НСтр("ru = 'Не удалось отправить заявление по причине:
		           |%1'");
	
	Попытка
		ВебСервис = ВебСервисУЦ();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОшибки =
			НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:
			           |Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'");
		Возврат Ложь;
	КонецЕсли;
	
	МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	УстановитьПривилегированныйРежим(Истина);
	Результат = МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("http://regservice.1c.ru");
	УстановитьПривилегированныйРежим(Ложь);
	ИнтернетПоддержкаПользователейПодключена = Истина;
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Если Результат.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			ИнтернетПоддержкаПользователейПодключена = Ложь;
		КонецЕсли;
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключиться к порталу интернет-поддержки по причине:
			           |%1'"),
			Результат.СообщениеОбОшибке);
		Возврат Ложь;
	Иначе
		Билет = Результат.Тикет;
	КонецЕсли;
	
	ЭтоПовторнаяОтправкаПакета = Истина;
	Если Не ЗначениеЗаполнено(ИдентификаторДокументооборота) Тогда
		ЭтоПовторнаяОтправкаПакета = Ложь;
		ИдентификаторДокументооборота = НовыйСжатыйУникальныйИдентификатор();
	КонецЕсли;
	
	ЗаявлениеXML = ЗаявлениеXML(Билет);
	ПакетЗаявления = ПакетЗаявления(ЗаявлениеXML);
	
	ОбновитьДоступностьРеквизитовПартнера();
	
	Попытка
		Ответ = ВебСервис.SendPacket(ПакетЗаявления);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Ответ) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
			НСтр("ru = 'Сервер вернул пустой ответ.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ПостроительDOM = Новый ПостроительDOM();
	ПостроительDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("code");
	КодРезультата = УзелDOM[0].ТекстовоеСодержимое;
	
	Если КодРезультата = "0" Тогда
		ДатаОтправки = ТекущаяДатаСеанса();
		Возврат Истина;
		
	ИначеЕсли КодРезультата = "60" // Документооборот уже зарегистрирован.
	        И ЭтоПовторнаяОтправкаПакета Тогда
		
		ДатаОтправки = ТекущаяДатаСеанса();
		Возврат Истина;
	КонецЕсли;
	
	ИдентификаторДокументооборота = "";
	
	ОбновитьДоступностьРеквизитовПартнера();
	
	УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("errorMessage");
	Если УзелDOM.Количество() > 0 Тогда
		ОписаниеОшибки = УзелDOM[0].ТекстовоеСодержимое;
	КонецЕсли;
	
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
		ОписаниеОшибки);
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаявлениеXML(Билет)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Заявление");
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "1.3");
	ЗаписьXML.ЗаписатьАтрибут("ДатаВремяФормирования", XMLСтрока(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "1С");
	
		ЗаписьXMLЭлемент(ЗаписьXML, "ТипЗаявления", "1");
		ЗаписьXMLЭлемент(ЗаписьXML, "ПризнакЮридическогоЛица", Не ЭтоИндивидуальныйПредприниматель);
		ЗаписьXMLЭлемент(ЗаписьXML, "ИНН");
		
		Если Не ЭтоИндивидуальныйПредприниматель Тогда
			ЗаписьXMLЭлемент(ЗаписьXML, "КПП");
		КонецЕсли;
		
		ЗаписьXMLЭлемент(ЗаписьXML, "ОГРН");
		ЗаписьXMLЭлемент(ЗаписьXML, "ПолноеНаименование",  НаименованиеПолное);
		ЗаписьXMLЭлемент(ЗаписьXML, "КраткоеНаименование", НаименованиеСокращенное);
		ЗаписьXMLЭлемент(ЗаписьXML, "ТелефонОсновной",     Телефон);
		
		ЗаписьXMLАдрес(ЗаписьXML, "АдресЮридический", ЮридическийАдресXML);
		ЗаписьXMLАдрес(ЗаписьXML, "АдресФактический", ФактическийАдресXML);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВладельцыЭЦП");
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВладелецЭЦП");
		ЗаписьXML.ЗаписатьАтрибут("СНИЛС", ПредставлениеРеквизитаСтраховойНомерПФР(СтраховойНомерПФР));
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
			ЗаписьXML.ЗаписатьАтрибут("Фамилия",  Фамилия);
			ЗаписьXML.ЗаписатьАтрибут("Имя",      Имя);
			ЗаписьXML.ЗаписатьАтрибут("Отчество", Отчество);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента ФИО.
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЛичныеДанные");
			ЗаписьXML.ЗаписатьАтрибут("ДатаРождения",  ПредставлениеРеквизитаДатаРождения(ДатаРождения));
			ЗаписьXML.ЗаписатьАтрибут("Пол",           Пол);
			ЗаписьXML.ЗаписатьАтрибут("МестоРождения", МестоРождения);
			ЗаписьXML.ЗаписатьАтрибут("Гражданство",   ГражданствоОКСМКодАльфа3);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента ЛичныеДанные.
			
			Если ДокументВид = "21" Тогда
				ДокументНомерПредставление = ПредставлениеРеквизитаНомерПаспортаРФ(ДокументНомер);
				ДокументКодПодразделенияПредставление =
					ПредставлениеРеквизитаДокументКодПодразделения(ДокументКодПодразделения);
			Иначе
				ДокументНомерПредставление = ДокументНомер;
				ДокументКодПодразделенияПредставление = "";
			КонецЕсли;
			ДокументДатаВыдачиПредставление = ПредставлениеРеквизитаДокументДатаВыдачи(ДокументДатаВыдачи);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("УдЛичн");
			ЗаписьXML.ЗаписатьАтрибут("КодВидДок", ДокументВид);
			ЗаписьXML.ЗаписатьАтрибут("СерНомДок", ДокументНомерПредставление);
			ЗаписьXML.ЗаписатьАтрибут("ДатаДок",   ДокументДатаВыдачиПредставление);
			ЗаписьXML.ЗаписатьАтрибут("ВыдДок",    ДокументКемВыдан);
			ЗаписьXML.ЗаписатьАтрибут("КодВыдДок", ДокументКодПодразделенияПредставление);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента УдЛичн.
			
			Если Не ЭтоИндивидуальныйПредприниматель Тогда
				ЗаписьXMLЭлемент(ЗаписьXML, "Должность",  Должность);
			КонецЕсли;
			
			ЗаписьXMLЭлемент(ЗаписьXML, "ЭлектроннаяПочта", ЭлектроннаяПочта);
			
			Строки = СписокПрограмм.НайтиСтроки(Новый Структура("Ссылка", Объект.Программа));
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Криптопровайдер");
			ЗаписьXMLЭлемент(ЗаписьXML, "ТипКриптопровайдера", XMLСтрока(Строки[0].ТипПрограммы));
			ЗаписьXMLЭлемент(ЗаписьXML, "ИмяКриптопровайдера", XMLСтрока(Строки[0].ИмяПрограммы));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента Криптопровайдер.
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗапросНаСертификат");
			ЗаписьXML.ЗаписатьАтрибут("УдостоверяющийЦентр", "ООО ""НПЦ ""1С"""); // АПК:1297 Не локализуется (формат веб-сервиса).
			ЗаписьXML.ЗаписатьТекст(ТекстФайлаЗапросаНаСертификат());
			ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента ЗапросНаСертификат.
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента ВладелецЭЦП.
		ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента ВладельцыЭЦП.
		
		ЗаписьXMLЭлемент(ЗаписьXML, "ИННПартнера", ДокументыПартнерИНН);
		Если Не ДокументыПартнерЭтоИП Тогда
			ЗаписьXMLЭлемент(ЗаписьXML, "КПППартнера", ДокументыПартнерКПП);
		КонецЕсли;
		
		ЗаписьXMLЭлемент(ЗаписьXML, "БилетПользователя", Билет);
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента Заявление.
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

&НаСервере
Функция ТекстФайлаЗапросаНаСертификат()
	
	ТекстОшибки =
		НСтр("ru = 'Не удалось прочитать ранее созданный запрос на сертификат.
		           |Заявление не может быть отправлено.
		           |Удалите его и создайте новое.'");
	
	Если Не ЗначениеЗаполнено(АдресЗапросаНаСертификат) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресЗапросаНаСертификат);
	Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".p10");
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
	Текст = СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ОписаниеПакетаXML(ИмяФайлаЗаявления)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("пакет");
	ЗаписьXML.ЗаписатьАтрибут("версияФормата", "1С:1.0");
	
	ЗаписьXML.ЗаписатьАтрибут("версПрог", "1.0");
	ЗаписьXML.ЗаписатьАтрибут("типДокументооборота", "РегистрацияАбонентаЭДО");
	ЗаписьXML.ЗаписатьАтрибут("типТранзакции", "Регистрация");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокументооборота", ИдентификаторДокументооборота);
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("отправитель");
		ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "абонент");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("получатель");
		ЗаписьXML.ЗаписатьАтрибут("идентификаторСубъекта", "КалугаАстрал");
		ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "спецоператор");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("документ");
		ЗаписьXML.ЗаписатьАтрибут("идентификаторДокумента", НовыйСжатыйУникальныйИдентификатор());
		ЗаписьXML.ЗаписатьАтрибут("типДокумента", "Заявление");
		ЗаписьXML.ЗаписатьАтрибут("типСодержимого", "xml");
		ЗаписьXML.ЗаписатьАтрибут("сжат", "false");
		ЗаписьXML.ЗаписатьАтрибут("зашифрован", "false");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("содержимое");
			ЗаписьXML.ЗаписатьАтрибут("имяФайла", ИмяФайлаЗаявления);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента документ.
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // КонецЭлемента пакет.
	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

&НаСервере
Функция ПакетЗаявления(ЗаявлениеXML)
	
	// Подготовка пакета заявления.
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПолучитьИмяВременногоФайла("package"));
	
	СоздатьКаталог(ВременныйКаталог);
	
	ИмяФайлаЗаявления = ВременныйКаталог + НовыйСжатыйУникальныйИдентификатор() + ".bin";
	ИмяФайлаОписания  = ВременныйКаталог + "packageDescription.xml";
	ИмяФайлаПакета    = ВременныйКаталог + ИдентификаторДокументооборота + ".zip";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаЗаявления, "windows-1251");
	ЗаписьXML.ЗаписатьБезОбработки(ЗаявлениеXML);
	ЗаписьXML.Закрыть();
	
	ДанныеЗаявления = Новый ДвоичныеДанные(ИмяФайлаЗаявления);
	УдалитьФайлы(ИмяФайлаЗаявления);
	ДанныеЗаявления.Записать(ИмяФайлаЗаявления);
	
	ФайлЗаявления = Новый Файл(ИмяФайлаЗаявления);
	ОписаниеПакетаXML = ОписаниеПакетаXML(ФайлЗаявления.Имя);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаОписания, "windows-1251");
	ЗаписьXML.ЗаписатьБезОбработки(ОписаниеПакетаXML);
	ЗаписьXML.Закрыть();
	
	ЗаписьАрхива = Новый ЗаписьZipФайла(ИмяФайлаПакета, , , , УровеньСжатияZIP.Максимальный);
	ЗаписьАрхива.Добавить(ИмяФайлаОписания);
	ЗаписьАрхива.Добавить(ИмяФайлаЗаявления);
	ЗаписьАрхива.Записать();
	
	ПакетЗаявления = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаПакета));
	УдалитьФайлы(ВременныйКаталог);
	
	Возврат ПакетЗаявления;
	
КонецФункции

&НаСервере
Процедура ЗаписьXMLЭлемент(ЗаписьXML, ИмяЭлемента, Значение = Неопределено)
	
	Если Значение = Неопределено Тогда
		Значение = ЭтотОбъект[ИмяЭлемента];
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьXMLАдрес(ЗаписьXML, ИмяЭлемента, АдресXML)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
	АдресСтруктура = МодульРаботаСАдресами.СведенияОбАдресе(АдресXML, ДополнительныеПараметры);
	
	ПервыйКорпус    = ?(АдресСтруктура.Корпуса.Количество()   > 0, АдресСтруктура.Корпуса[0].Номер, "");
	ПервоеПомещение = ?(АдресСтруктура.Помещения.Количество() > 0, АдресСтруктура.Помещения[0].Номер, "");
	
	УлицаПолностью = ПредставлениеЧастиАдреса(АдресСтруктура,
		"Улица,
		|ДополнительнаяТерритория,
		|ЭлементДополнительнойТерритории");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	
	ЗаписьXML.ЗаписатьАтрибут("КодРегион",  АдресСтруктура.КодРегиона);
	ЗаписьXML.ЗаписатьАтрибут("НаселПункт", НаселенныйПунктПолностью(АдресСтруктура));
	ЗаписьXML.ЗаписатьАтрибут("Улица",      УлицаПолностью);
	ЗаписьXML.ЗаписатьАтрибут("Дом",        АдресСтруктура.Здание.Номер);
	ЗаписьXML.ЗаписатьАтрибут("Корпус",     ПервыйКорпус);
	ЗаписьXML.ЗаписатьАтрибут("Кварт",      ПервоеПомещение);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

&НаСервере
Функция ВебСервисУЦ()
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL = "http://regservice.1c.ru/regservice/regservice.asmx?wsdl";
	ПараметрыПодключения.URIПространстваИмен = "http://regservice.keydisk.ru/";
	ПараметрыПодключения.ИмяСервиса = "RegService";
	ПараметрыПодключения.Таймаут = 7;
	
	ВебСервис = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	Возврат ВебСервис;
	
КонецФункции


&НаСервере
Функция ПолучитьСертификат()
	
	ШаблонОписанияОшибки =
		НСтр("ru = 'Не удалось обновить состояние по причине:
		           |%1'");
	
	// Запрос состояния обработки заявления.
	
	Попытка
		ВебСервис = ВебСервисУЦ();
		Ответ = ВебСервис.ReceivePacket(Строка(ИдентификаторДокументооборота));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ДатаОбновленияСостояния = ТекущаяДатаСеанса();
		СостояниеОбработкиЗаявления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Неопределено;
	КонецПопытки;
	
	ДатаОбновленияСостояния = ТекущаяДатаСеанса();
	
	Если Не ЗначениеЗаполнено(Ответ) Тогда
		СостояниеОбработкиЗаявления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
			НСтр("ru = 'Сервер вернул пустой ответ.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ПостроительDOM = Новый ПостроительDOM();
	ПостроительDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("code");
	КодРезультата = УзелDOM[0].ТекстовоеСодержимое;
	
	ИмяФайлаПакетОтвета = "";
	Если КодРезультата = "0" Тогда
		УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("packet");
		
		Если УзелDOM.Количество() > 0 Тогда
			ДвоичныеДанные = Base64Значение(УзелDOM[0].ТекстовоеСодержимое);
			ИмяФайлаПакетОтвета = ПолучитьИмяВременногоФайла(".zip");
			ДвоичныеДанные.Записать(ИмяФайлаПакетОтвета);
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
				НСтр("ru = 'Сервер вернул пустые данные.'"));
		КонецЕсли;
		
	ИначеЕсли КодРезультата = "1" Тогда
		ОписаниеОшибки = НСтр("ru = 'Заявление еще не обработано, попробуйте позже.'");
	Иначе
		УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("errorMessage");
		Если УзелDOM.Количество() > 0 Тогда
			ОписаниеОшибки = УзелDOM[0].ТекстовоеСодержимое;
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сервер вернул код ошибки: %1'"),
				Строка(КодРезультата));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		СостояниеОбработкиЗаявления = ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПолучитьИмяВременногоФайла("package"));
	
	СоздатьКаталог(ВременныйКаталог);
	
	ФайлНайден = Ложь;
	Попытка
		Архив1 = Новый ЧтениеZipФайла(ИмяФайлаПакетОтвета);
		
		Для Счетчик = 0 По Архив1.Элементы.Количество() - 1 Цикл
			
			Если Архив1.Элементы[Счетчик].Расширение = "bin" Тогда
				ФайлНайден = Истина;
				
				Архив1.Извлечь(Архив1.Элементы[Счетчик], ВременныйКаталог);
				Архив2 = Новый ЧтениеZipФайла(ВременныйКаталог + Архив1.Элементы[Счетчик].Имя);
				Архив2.ИзвлечьВсе(ВременныйКаталог);
				
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(ВременныйКаталог + "file");
				ПостроительDOM = Новый ПостроительDOM;
				ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
				ЧтениеXML.Закрыть();
				
				РегистрацияУспешна = Булево(ЗначениеУзлаXML(ДокументDOM, "РегистрацияУспешна"));
				СостояниеОбработкиЗаявления = ЗначениеУзлаXML(ДокументDOM, "Результат");
				
				Если РегистрацияУспешна Тогда
					ИдентификаторАбонента = ЗначениеУзлаXML(ДокументDOM, "ИдентификаторАбонента");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФайлНайден Тогда
			ВызватьИсключение НСтр("ru = 'Неверный формат данных.'");
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось разобрать ответ сервера по причине:
			           |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаПакетОтвета);
	УдалитьФайлы(ВременныйКаталог);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		СостояниеОбработкиЗаявления = ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РегистрацияУспешна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запрос сертификата.
	
	Ответ = ВебСервис.ReceiveUpdatedPacket(Строка(ИдентификаторАбонента), Дата('00010101'));
	
	ОписаниеОшибки = "";
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	ПостроительDOM = Новый ПостроительDOM();
	ПостроительDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("code");
	КодРезультата = УзелDOM[0].ТекстовоеСодержимое;
	
	ИмяФайлаПакетОтвета = "";
	Если КодРезультата = "0" Тогда
		УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("packet");
		
		Если УзелDOM.Количество() > 0 Тогда
			ДвоичныеДанные = Base64Значение(УзелDOM[0].ТекстовоеСодержимое);
			ИмяФайлаПакетОтвета = ПолучитьИмяВременногоФайла(".zip");
			ДвоичныеДанные.Записать(ИмяФайлаПакетОтвета);
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
				НСтр("ru = 'Сервер вернул пустые данные.'"));
		КонецЕсли;
	Иначе
		УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("errorMessage");
		Если УзелDOM.Количество() > 0 Тогда
			ОписаниеОшибки = УзелDOM[0].ТекстовоеСодержимое;
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сервер вернул код ошибки: %1'"),
				Строка(КодРезультата));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		СостояниеОбработкиЗаявления = ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПолучитьИмяВременногоФайла("package"));
	
	СоздатьКаталог(ВременныйКаталог);
	
	ФайлНайден = Ложь;
	
	Попытка
		Архив = Новый ЧтениеZipФайла(ИмяФайлаПакетОтвета);
		
		Для Счетчик = 0 По Архив.Элементы.Количество() - 1 Цикл
			
			Если Архив.Элементы[Счетчик].Расширение = "xml" Тогда
				ФайлНайден = Истина;
				
				Архив.Извлечь(Архив.Элементы[Счетчик], ВременныйКаталог);
				
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(ВременныйКаталог + Архив.Элементы[Счетчик].Имя); 
				ПостроительDOM = Новый ПостроительDOM;
				ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
				ЧтениеXML.Закрыть();
				
				УзелDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Сертификат");
				Если УзелDOM.Количество() < 2 Тогда
					ВызватьИсключение НСтр("ru = 'Неверный формат данных.'");
				КонецЕсли;
				
				СертификатСтрокой = "";
				КорневойСертификатСтрокой = "";
				
				Для Каждого Узел Из УзелDOM Цикл
					Хранилище = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Хранилище").ТекстовоеСодержимое;
					Если Хранилище = "MY" Тогда
						СертификатСтрокой = Узел.ТекстовоеСодержимое;
					КонецЕсли;
					Если Хранилище = "ROOT" Тогда
						КорневойСертификатСтрокой = Узел.ТекстовоеСодержимое;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(СертификатСтрокой)
				 Или Не ЗначениеЗаполнено(КорневойСертификатСтрокой) Тогда
					
					ВызватьИсключение НСтр("ru = 'Неверный формат данных.'");
				КонецЕсли;
				
				ДанныеСертификата          = Base64Значение(СертификатСтрокой);
				ДанныеКорневогоСертификата = Base64Значение(КорневойСертификатСтрокой);
				
				Сертификат         = Новый СертификатКриптографии(ДанныеСертификата);
				КорневойСертификат = Новый СертификатКриптографии(ДанныеКорневогоСертификата);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФайлНайден Тогда
			ВызватьИсключение НСтр("ru = 'Неверный формат данных.'");
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось разобрать ответ сервера по причине:
			           |%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаПакетОтвета);
	УдалитьФайлы(ВременныйКаталог);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		СостояниеОбработкиЗаявления = ОписаниеОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(Сертификат);
	СвойстваСубъекта    = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
	
	АдресСертификата          = ПоместитьВоВременноеХранилище(ДанныеСертификата, УникальныйИдентификатор);
	АдресКорневогоСертификата = ПоместитьВоВременноеХранилище(ДанныеКорневогоСертификата, УникальныйИдентификатор);
	ОтпечатокКорневогоСертификата = Base64Строка(КорневойСертификат.Отпечаток);
	
	// Важно заполнить отпечаток, чтобы не было возможности добавить дубль сертификата.
	Объект.Наименование = ЭлектроннаяПодпись.ПредставлениеСертификата(Сертификат);
	
	Объект.Подписание     = СвойстваСертификата.Подписание;
	Объект.Шифрование     = СвойстваСертификата.Шифрование;
	Объект.Отпечаток      = СвойстваСертификата.Отпечаток;
	Объект.КомуВыдан      = СвойстваСертификата.КомуВыдан;
	Объект.КемВыдан       = СвойстваСертификата.КемВыдан;
	Объект.ДействителенДо = СвойстваСертификата.ДатаОкончания;
	
	Объект.Фамилия   = СвойстваСубъекта.Фамилия;
	Объект.Имя       = СвойстваСубъекта.Имя;
	Объект.Отчество  = СвойстваСубъекта.Отчество;
	Объект.Должность = СвойстваСубъекта.Должность;
	Объект.Фирма     = СвойстваСубъекта.Организация;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеУзлаXML(ДокументDOM, НазваниеУзла, ЗначениеПоУмолчанию = "")
	
	УзелDOM = ДокументDOM.ПолучитьЭлементыПоИмени(НазваниеУзла);
	
	ПодходящийЭлементDOM = Неопределено;
	
	Если УзелDOM.Количество() > 0 Тогда
		ПодходящийЭлементDOM = УзелDOM[0];
	КонецЕсли;
	
	Если ПодходящийЭлементDOM = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
		
	ИначеЕсли НазваниеУзла = "Отпечаток" Тогда
		Возврат НРег(ПодходящийЭлементDOM.ТекстовоеСодержимое);
	Иначе
		Возврат ПодходящийЭлементDOM.ТекстовоеСодержимое;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСертификат(Оповещение)
	
	Если СписокПрограмм.Количество() = 0 Тогда
		ЗаполнитьСписокПрограмм();
	КонецЕсли;
	
	ДатаУстановкиСертификата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Контекст = Новый Структура("Оповещение", Оповещение);
	
	ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"", Неопределено, , Истина);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеСозданияМенеджераКриптографии(Менеджер, Контекст) Экспорт
	
	Если ТипЗнч(Менеджер) <> Тип("МенеджерКриптографии") Тогда
		ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
			НСтр("ru = 'Установка сертификата на компьютер'"), "", Менеджер,
			Новый Структура, Новый Структура("ПоказатьИнструкцию", Истина));
		
		ОшибкаУстановкиСертификата = Менеджер.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", Менеджер);
	
	Если Криптография <> Неопределено Тогда
		УстановитьСертификатПослеСозданияОбъектаКриптографии(Истина, Контекст);
	Иначе
		СоздатьОбъектКриптографии(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеСозданияОбъектаКриптографии", ЭтотОбъект, Контекст),
			НСтр("ru = 'Для установки сертификата на компьютер требуется
			           |установить расширение для веб-клиента 1С:Предприятия.'"),
			НСтр("ru = 'Для установки сертификата на компьютер требуется
			           |установить внешнюю компоненту.'"));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеСозданияОбъектаКриптографии(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
			"УстановитьСертификатПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект));
	Иначе
		УстановитьСертификатПослеУспехаСозданияОбъектаКриптографии(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСФайлами(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		ОшибкаУстановкиСертификата = НСтр("ru = 'Не установлено расширение для работы с файлами.'");
	Иначе
		НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
			"УстановитьСертификатПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПриОшибкеСозданияОбъектаКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		ОшибкаУстановкиСертификата = НСтр("ru = 'Не установлено расширение для работы с криптографией.'");
	Иначе
		ОшибкаУстановкиСертификата = НСтр("ru = 'Не установлена внешняя компонента.'");
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеУспехаСозданияОбъектаКриптографии(Контекст)
	
	ПолучитьКаталогВременныхФайловКомпоненты(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеПолученияКаталогаВременныхФайловКомпоненты", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПолученияКаталогаВременныхФайловКомпоненты(Каталог, Контекст) Экспорт
	
	Контекст.Вставить("ВременныйКаталог", Каталог + НовыйСжатыйУникальныйИдентификатор());
	
	Контекст.ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		Контекст.ВременныйКаталог);
	
	Контекст.Вставить("ИмяФайлаСертификата",          "my.cer");
	Контекст.Вставить("ИмяФайлаКорневогоСертификата", "root.cer");
	
	Контекст.Вставить("ПолучаемыеФайлы", Новый Массив);
	Контекст.ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(
		Контекст.ИмяФайлаСертификата, АдресСертификата));
	
	Контекст.ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(
		Контекст.ИмяФайлаКорневогоСертификата, АдресКорневогоСертификата));
	
	Вызовы = Новый Массив;
	ДобавитьВызов(Вызовы, "НачатьПолучениеФайлов", Контекст.ПолучаемыеФайлы, Контекст.ВременныйКаталог, Ложь);
	ДобавитьВызов(Вызовы, "НачатьУдалениеФайлов",  Контекст.ВременныйКаталог, Неопределено);
	
	НачатьЗапросРазрешенияПользователя(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеПолученияРазрешений", ЭтотОбъект, Контекст), Вызовы);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПолученияРазрешений(РазрешенияПолучены, Контекст) Экспорт
	
	Если Не РазрешенияПолучены Тогда
		ОшибкаУстановкиСертификата =
			НСтр("ru = 'Сохранение сертификатов во временную папку отменено пользователем.'");
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеКаталога(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеСозданияКаталога", ЭтотОбъект, Контекст), Контекст.ВременныйКаталог);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеСозданияКаталога(РазрешенияПолучены, Контекст) Экспорт
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Диалог.Каталог = Контекст.ВременныйКаталог;
	ПараметрыСохранения.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.СохранитьФайлы(
		Новый ОписаниеОповещения("УстановитьСертификатПослеПолученияФайлов", ЭтотОбъект, Контекст),
		Контекст.ПолучаемыеФайлы, ПараметрыСохранения);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы = Неопределено
	 Или ПолученныеФайлы.Количество() <> 2 Тогда
		
		ОшибкаУстановкиСертификата = НСтр("ru = 'Сертификаты не были сохранены во временную папку.'");
		УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	ПроверитьСуществованиеКонтейнераКлючей(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеПроверкиСуществованияКонтейнераКлючей", ЭтотОбъект, Контекст),
		КонтейнерКлючаПуть, КонтейнерКлючаИмя);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПроверкиСуществованияКонтейнераКлючей(Существует, Контекст) Экспорт
	
	Если Не Существует Тогда
		ОшибкаУстановкиСертификата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти контейнер ключа на компьютере.
			           |Имя контейнера: ""%1"".
			           |Путь к контейнеру: ""%2"".'"),
			КонтейнерКлючаИмя,
			КонтейнерКлючаПуть);
		
		Контекст.Вставить("ОшибкаПоискаКонтейнера", ОшибкаУстановкиСертификата);
	Иначе
		ОшибкаУстановкиСертификата = "";
	КонецЕсли;
	
	АктивноеОкно().Активизировать();
	
	Криптография.НачатьВызовУстановитьСертификатВКонтейнерИХранилище(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеВызоваУстановитьСертификатВКонтейнерИХранилище", ЭтотОбъект, Контекст,
			"УстановитьСертификатПослеОшибкиВызоваУстановитьСертификатВКонтейнерИХранилище", ЭтотОбъект),
		Контекст.ВременныйКаталог + Контекст.ИмяФайлаСертификата, КонтейнерКлючаПуть);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеОшибкиВызоваУстановитьСертификатВКонтейнерИХранилище(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаУстановкиСертификата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить личный сертификат в контейнер ключей и хранилище ОС по причине:
		           |%1'"),
		ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
	
	Если Контекст.Свойство("ОшибкаПоискаКонтейнера") Тогда
		ОшибкаУстановкиСертификата = ОшибкаУстановкиСертификата
			+ Символы.ПС + Символы.ПС + Контекст.ОшибкаПоискаКонтейнера;
	КонецЕсли;
	
	Контекст.Вставить("РезультатПослеВызоваУстановитьСертификатВКонтейнерИХранилище", Неопределено);
	УстановитьСертификатПослеВызоваУстановитьСертификатВКонтейнерИХранилищеПослеПолученияСписокОшибок(Неопределено, Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеВызоваУстановитьСертификатВКонтейнерИХранилище(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РезультатПослеВызоваУстановитьСертификатВКонтейнерИХранилище", Результат);
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеВызоваУстановитьСертификатВКонтейнерИХранилищеПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеВызоваУстановитьСертификатВКонтейнерИХранилищеПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		УстановитьСертификатПослеОшибкиВызоваУстановитьСертификатВКонтейнерИХранилище(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = Контекст.РезультатПослеВызоваУстановитьСертификатВКонтейнерИХранилище;
	
	АктивноеОкно().Активизировать();
	
	Если Результат <> Истина И Не ЗначениеЗаполнено(ОшибкаУстановкиСертификата) Тогда
		ОшибкаУстановкиСертификата = НСтр("ru = 'Не удалось установить личный сертификат в контейнер ключей и хранилище ОС.'");
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеПоискаСертификата", ЭтотОбъект, Контекст),
		Объект.Отпечаток,
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты,
		Неопределено,
		Контекст.МенеджерКриптографии);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПоискаСертификата(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СертификатКриптографии") Тогда
		Если Результат.Свойство("СертификатНеНайден") Тогда
			ОшибкаПоиска =
				НСтр("ru = 'Не удалось найти личный сертификат, установленный на компьютер.'");
		Иначе
			ОшибкаПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти личный сертификат, установленный на компьютер по причине:
				           |%1'"),
				Результат.ОписаниеОшибки);
		КонецЕсли;
		ОшибкаУстановкиСертификата = СокрЛ(ОшибкаУстановкиСертификата + Символы.ПС + Символы.ПС) + ОшибкаПоиска;
		УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	ОшибкаУстановкиСертификата = "";
	
	Контекст.Вставить("СертификатКриптографии", Результат);
	
	АктивноеОкно().Активизировать();
	
	Если Криптография <> Неопределено Тогда
		УстановитьСертификатПослеПроверкиНаличияСертификат(Истина, Контекст);
	Иначе
		СоздатьОбъектКриптографии(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеПроверкиНаличияСертификат", ЭтотОбъект, Контекст),
			НСтр("ru = 'Для установки сертификата на компьютер требуется
			           |установить расширение для веб-клиента 1С:Предприятия.'"),
			НСтр("ru = 'Для установки сертификата на компьютер требуется
			           |установить внешнюю компоненту.'"));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПроверкиНаличияСертификат(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	Криптография.НачатьВызовИмпортироватьСертификат(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеВызоваИмпортироватьСертификат", ЭтотОбъект, Контекст,
			"УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат", ЭтотОбъект),
		Контекст.ВременныйКаталог + Контекст.ИмяФайлаКорневогоСертификата, "ROOT");
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаУстановкиСертификата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить корневой сертификат в хранилище ОС по причине:
		           |%1'"),
		ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
	
	Контекст.Вставить("РезультатПослеВызоваИмпортироватьСертификат", Неопределено);
	УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(Неопределено, Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеВызоваИмпортироватьСертификат(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РезультатПослеВызоваИмпортироватьСертификат", Результат);
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеВызоваИмпортироватьСертификатПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		УстановитьСертификатПослеОшибкиВызоваИмпортироватьСертификат(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = Контекст.РезультатПослеВызоваИмпортироватьСертификат;
	
	АктивноеОкно().Активизировать();
	
	Если Результат <> Истина И Не ЗначениеЗаполнено(ОшибкаУстановкиСертификата) Тогда
		ОшибкаУстановкиСертификата = НСтр("ru = 'Не удалось установить корневой сертификат в хранилище ОС.'");
	КонецЕсли;
	
	АктивноеОкно().Активизировать();
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеПоискаКорневогоСертификата", ЭтотОбъект, Контекст),
		ОтпечатокКорневогоСертификата,
		ТипХранилищаСертификатовКриптографии.КорневыеСертификаты,
		Неопределено,
		Контекст.МенеджерКриптографии);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеПоискаКорневогоСертификата(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СертификатКриптографии") Тогда
		Если Результат.Свойство("СертификатНеНайден") Тогда
			ОшибкаПоиска =
				НСтр("ru = 'Не удалось найти корневой сертификат, установленный на компьютер.'");
		Иначе
			ОшибкаПоиска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти корневой сертификат, установленный на компьютер по причине:
				           |%1'"),
				Результат.ОписаниеОшибки);
		КонецЕсли;
		ОшибкаУстановкиСертификата = СокрЛ(ОшибкаУстановкиСертификата + Символы.ПС + Символы.ПС) + ОшибкаПоиска;
		УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	ОшибкаУстановкиСертификата = "";
	
	УстановитьСертификатУдалитьВременныйКаталогИЗавершить(
		Не ЗначениеЗаполнено(ОшибкаУстановкиСертификата), Контекст);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатУдалитьВременныйКаталогИЗавершить(Результат, Контекст)
	
	Контекст.Вставить("Результат", Результат);
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(
			"УстановитьСертификатПослеУдаленияВременногоКаталога", ЭтотОбъект, Контекст),
		Контекст.ВременныйКаталог);
	
КонецПроцедуры

// Продолжение процедуры УстановитьСертификат.
&НаКлиенте
Процедура УстановитьСертификатПослеУдаленияВременногоКаталога(Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВызов(Вызовы, Метод, П1, П2, П3 = Неопределено, П4 = Неопределено, П5 = Неопределено)
	
	Вызов = Новый Массив;
	Вызов.Добавить(Метод);
	Вызов.Добавить(П1);
	Вызов.Добавить(П2);
	Вызов.Добавить(П3);
	Вызов.Добавить(П4);
	Вызов.Добавить(П5);
	
	Вызовы.Добавить(Вызов);
	
КонецПроцедуры

// Обработка ввода адреса через подсистему КонтактнаяИнформация.

&НаКлиенте
Процедура ПредставлениеАдресаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяРеквизита, ЗаголовокФормы)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"УправлениеКонтактнойИнформациейКлиент");
	
	ВидКонтактнойИнформации.Наименование = ЗаголовокФормы;
	ПараметрыФормы = МодульУправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации, ЭтотОбъект[ИмяРеквизита + "XML"], ЭтотОбъект[ИмяРеквизита]);
	
	МодульУправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОчистка(Форма, Элемент, СтандартнаяОбработка, ИмяРеквизита)
	
	Форма[ИмяРеквизита + "XML"] = "";
	Форма[ИмяРеквизита] = "";
	
	РеквизитыПроверкиАдреса[ИмяРеквизита] = Истина;
	ПодключитьОбработчикОжидания("ПроверитьАдресОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ИмяРеквизита)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Данные не изменены.
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизита + "XML"] = ВыбранноеЗначение.КонтактнаяИнформация;
	Форма[ИмяРеквизита] = ВыбранноеЗначение.Представление;
	
	РеквизитыПроверкиАдреса[ИмяРеквизита] = Истина;
	ПодключитьОбработчикОжидания("ПроверитьАдресОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Обработка ввода телефона через подсистему КонтактнаяИнформация.

&НаКлиенте
Процедура ПредставлениеТелефонаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяРеквизита, ЗаголовокФормы)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"УправлениеКонтактнойИнформациейКлиент");
	
	ПараметрыФормы = МодульУправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформацииТелефон, ЭтотОбъект[ИмяРеквизита + "XML"], ЭтотОбъект[ИмяРеквизита]);
	
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормы);
	
	МодульУправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОчистка(Форма, Элемент, СтандартнаяОбработка, ИмяРеквизита)
	
	Форма[ИмяРеквизита + "XML"] = "";
	Форма[ИмяРеквизита] = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТелефонаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ИмяРеквизита)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Данные не изменены.
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизита + "XML"] = ВыбранноеЗначение.КонтактнаяИнформация;
	Форма[ИмяРеквизита] = ВыбранноеЗначение.Представление;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ИмяРегионаРФПоРекомендациямДляСКПЭП(КодРегиона)
	
	// Методические рекомендации по составу квалифицированного сертификата ключа
	// проверки электронной подписи (Версия 1.4).
	//
	// Приложение 2. Формат названия субъекта федерации.
	// Из раздела "Справочник кодов регионов".
	
	ИменаВсехРегионовРФ = Обработки.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.ПолучитьМакет(
		"ИменаРегионовРФ");
	
	Строка = ИменаВсехРегионовРФ.ПолучитьСтроку(Число(КодРегиона));
	
	Если Не СтрНачинаетсяС(Строка, КодРегиона + " ") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регион РФ с кодом ""%1"" не существует.'"),
			КодРегиона);
	КонецЕсли;
	
	Строка = СокрЛП(Сред(Строка, 4));
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для региона РФ с кодом ""%1"" имя, рекомендованное для СКПЭП, еще не назначено.'"),
			КодРегиона);
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоставляемоеПредставлениеПрограммы(СписокПрограмм, Программа)
	
	Если ТипЗнч(Программа) = Тип("Строка") Тогда
		Строки = СписокПрограмм.НайтиСтроки(Новый Структура("Идентификатор", Программа));
	Иначе
		Строки = СписокПрограмм.НайтиСтроки(Новый Структура("Ссылка", Программа));
	КонецЕсли;
	
	Возврат Строки[0].Представление;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЗаявление()
	
	ЗаблокироватьДанныеДляРедактирования(Параметры.СертификатСсылка, , УникальныйИдентификатор);
	ТекущийОбъект = Параметры.СертификатСсылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПоследнееСостояниеЗаявления = Объект.СостояниеЗаявления;
	
	Содержание = ТекущийОбъект.СодержаниеЗаявления.Получить();
	Если ТипЗнч(Содержание) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Содержание);
	КонецЕсли;
	
	Если Содержание.Свойство("ЗапросНаСертификат")
	   И ТипЗнч(Содержание.ЗапросНаСертификат) = Тип("ДвоичныеДанные") Тогда
		
		АдресЗапросаНаСертификат = ПоместитьВоВременноеХранилище(Содержание.ЗапросНаСертификат, УникальныйИдентификатор);
	КонецЕсли;
	
	Если Содержание.Свойство("Сертификат")
	   И ТипЗнч(Содержание.Сертификат) = Тип("ДвоичныеДанные") Тогда
		
		АдресСертификата = ПоместитьВоВременноеХранилище(Содержание.Сертификат, УникальныйИдентификатор);
	КонецЕсли;

	Если Содержание.Свойство("КорневойСертификат")
	   И ТипЗнч(Содержание.КорневойСертификат) = Тип("ДвоичныеДанные") Тогда
		
		АдресКорневогоСертификата = ПоместитьВоВременноеХранилище(Содержание.КорневойСертификат, УникальныйИдентификатор);
	КонецЕсли;
	
	ПодтверждениеСоглашения = Истина;
	Элементы.ПодтверждениеСоглашения.ТолькоПросмотр = Истина;
	Элементы.ФормаНапечататьСоглашение.Видимость = Ложь;
	Элементы.ФормаДалее.Доступность = Истина;
	
	Если ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.НеПодготовлено Тогда
		ПерейтиНаСтраницуПодготовкаЗапросаНаСертификатНаСервереПриЗагрузке();
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Подготовлено Тогда
		ПерейтиНаСтраницуОтправкаЗаявленияНаСервереПриЗагрузке();
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отправлено Тогда
		ПерейтиНаСтраницуОжиданиеОбработкиЗаявленияНаСервереПриЗагрузке();
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.ИсполненоСертификатНеУстановлен Тогда
		ПерейтиНаСтраницуУстановкаСертификатаНаСервереПриЗагрузке();
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отклонено Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Заявление, по которому не удалось получить сертификат'");
		Элементы.ФормаДалее.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
		ЗаполнитьРеквизитыЗаявления(Истина);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработанноеЗаявление;
		Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаОбработанноеЗаявление;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Исполнено Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Заявление, по которому был получен сертификат'");
		Элементы.ФормаВыгрузитьКорневойСертификат.Видимость = Истина;
		Элементы.ФормаВыгрузитьЗапросНаСертификат.Видимость = Истина;
		Элементы.ФормаДалее.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		ЗаполнитьРеквизитыЗаявления(Истина);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработанноеЗаявление;
		Элементы.СтраницыПрогресса.ТекущаяСтраница = Элементы.СтраницаПрогрессаОбработанноеЗаявление;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРеквизитыЗаявления(Все = Ложь)
	
	РеквизитыЗаявления.Очистить();
	
	// Заполнение сведений о программе.
	Если Все Тогда
		Строка = РеквизитыЗаявления.Добавить();
		Строка.Реквизит = НСтр("ru = 'Программа электронной подписи'");
		Строка.Значение = ПредставлениеПрограммы;
	КонецЕсли;
	
	// Заполнение сведений об организации.
	ЗаполнитьРеквизит(НСтр("ru = 'Сведения об организации'"),, Истина);
	
	ЗаполнитьРеквизит("НаименованиеСокращенное");
	ЗаполнитьРеквизит("НаименованиеПолное");
	ЗаполнитьРеквизит("ИНН");
	
	Если Не ЭтоИндивидуальныйПредприниматель Тогда
		ЗаполнитьРеквизит("КПП");
	КонецЕсли;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРНИП'");
	Иначе
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРН'");
	КонецЕсли;
	
	ЗаполнитьРеквизит("ОГРН");
	ЗаполнитьРеквизит("РасчетныйСчет");
	ЗаполнитьРеквизит("БИК");
	ЗаполнитьРеквизит("КорреспондентскийСчет");
	ЗаполнитьРеквизит("Телефон", Телефон);
	ЗаполнитьРеквизит("ЮридическийАдрес", ЮридическийАдрес);
	ЗаполнитьРеквизит("ФактическийАдрес", ФактическийАдрес);
	
	// Заполнение сведений о владельце сертификата.
	ЗаполнитьРеквизит(НСтр("ru = 'Сведения о владельце сертификата'"),, Истина);
	
	ЗаполнитьРеквизит("Фамилия");
	ЗаполнитьРеквизит("Имя");
	ЗаполнитьРеквизит("Отчество");
	ЗаполнитьРеквизит("ДатаРождения",      ПредставлениеРеквизитаДатаРождения(ДатаРождения));
	ЗаполнитьРеквизит("Пол",               ПредставлениеРеквизитаПол(Пол));
	ЗаполнитьРеквизит("МестоРождения");
	ЗаполнитьРеквизит("Гражданство",       ГражданствоПредставление);
	ЗаполнитьРеквизит("СтраховойНомерПФР", ПредставлениеРеквизитаСтраховойНомерПФР(СтраховойНомерПФР));
	
	Если Не ЭтоИндивидуальныйПредприниматель Тогда
		ЗаполнитьРеквизит("Должность");
		ЗаполнитьРеквизит("Подразделение");
	КонецЕсли;
	
	Строка = РеквизитыЗаявления.Добавить();
	Строка.Реквизит = НСтр("ru = 'Документ, удостоверяющий личность'");
	Строка.Значение = Элементы.ДокументВид.СписокВыбора.НайтиПоЗначению(ДокументВид).Представление;
	
	Строка = РеквизитыЗаявления.Добавить();
	Если ДокументВид = "21" Тогда
		Строка.Реквизит = НСтр("ru = 'Серия и номер'");
		Строка.Значение = ПредставлениеРеквизитаНомерПаспортаРФ(ДокументНомер);
	Иначе
		Строка.Реквизит = НСтр("ru = 'Номер'");
		Строка.Значение = ДокументНомер;
	КонецЕсли;
	
	ЗаполнитьРеквизит("ДокументКемВыдан");
	Если ДокументВид = "21" Тогда
		ЗаполнитьРеквизит("ДокументКодПодразделения",
			ПредставлениеРеквизитаДокументКодПодразделения(ДокументКодПодразделения));
	КонецЕсли;
	ЗаполнитьРеквизит("ДокументДатаВыдачи", ПредставлениеРеквизитаДокументДатаВыдачи(ДокументДатаВыдачи));
	
	ЗаполнитьРеквизит("ЭлектроннаяПочта");
	
	Если Не Все Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоИндивидуальныйПредприниматель Тогда
		// Заполнение сведений о печатных документах.
		ЗаполнитьРеквизит(НСтр("ru = 'Сведения о руководителе'"),, Истина);
		
		Строка = РеквизитыЗаявления.Добавить();
		Строка.Реквизит = НСтр("ru = 'ФИО руководителя'");
		Строка.Значение = ДокументыРуководитель;
		
		Строка = РеквизитыЗаявления.Добавить();
		Строка.Реквизит = НСтр("ru = 'Должность руководителя'");
		Строка.Значение = ДокументыРуководительДолжность;
		
		Строка = РеквизитыЗаявления.Добавить();
		Строка.Реквизит = НСтр("ru = 'Основание действий руководителя'");
		Строка.Значение = ДокументыРуководительОснование;
	КонецЕсли;
	
	// Заполнение сведений о печатных документах.
	ЗаполнитьРеквизит(НСтр("ru = 'Сведения об обслуживающей организации'"),, Истина);
	
	Строка = РеквизитыЗаявления.Добавить();
	Строка.Реквизит = НСтр("ru = 'Наименование партнера'");
	Строка.Значение = ДокументыПартнер;
	
	Строка = РеквизитыЗаявления.Добавить();
	Строка.Реквизит = НСтр("ru = 'ИНН партнера'");
	Строка.Значение = ДокументыПартнерИНН;
	
	Если Не ДокументыПартнерЭтоИП Тогда
		Строка = РеквизитыЗаявления.Добавить();
		Строка.Реквизит = НСтр("ru = 'КПП партнера'");
		Строка.Значение = ДокументыПартнерКПП;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитаСтраховойНомерПФР(СтраховойНомерПФР)
	
	Возврат Сред(СтраховойНомерПФР, 1, 3) + "-" + Сред(СтраховойНомерПФР,  4, 3)
	+ "-" + Сред(СтраховойНомерПФР, 7, 3) + " " + Сред(СтраховойНомерПФР, 10, 2);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитаДатаРождения(ДатаРождения)
	
	Возврат Формат(ДатаРождения, "ДФ=dd.MM.yyyy"); // АПК:335 Не локализуется (формат веб-сервиса).
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитаПол(Пол)
	
	Если Пол = "Мужской" Тогда
		Возврат НСтр("ru = 'Мужской'");
		
	ИначеЕсли Пол = "Женский" Тогда
		Возврат НСтр("ru = 'Женский'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитаДокументДатаВыдачи(ДокументДатаВыдачи)
	
	Возврат Формат(ДокументДатаВыдачи, "ДФ=dd.MM.yyyy"); // АПК:335 Не локализуется (формат веб-сервиса).
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитаНомерПаспортаРФ(НомерПаспортаРФ)
	
	Возврат Лев(НомерПаспортаРФ, 2) + " " + Сред(НомерПаспортаРФ, 3, 2) + " " + Прав(НомерПаспортаРФ, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРеквизитаДокументКодПодразделения(КодПодразделения)
	
	Если Не ЗначениеЗаполнено(КодПодразделения) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев(КодПодразделения, 3) + "-" + Сред(КодПодразделения, 4);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизит(ИмяРеквизита, Значение = Неопределено, ЭтоГруппаРеквизитов = Ложь)
	
	Строка = РеквизитыЗаявления.Добавить();
	
	Если ЭтоГруппаРеквизитов Тогда
		Строка.ЭтоГруппаРеквизитов = Истина;
		Строка.Реквизит = ИмяРеквизита;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы[ИмяРеквизита].Заголовок) Тогда
		Строка.Реквизит = Элементы[ИмяРеквизита].Заголовок;
	Иначе
		Строка.Реквизит = ЗаголовкиРеквизитов.НайтиПоЗначению(ИмяРеквизита);
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Строка.Значение = ЭтотОбъект[ИмяРеквизита];
	Иначе
		Строка.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйСжатыйУникальныйИдентификатор()
	
	Возврат НРег(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
	
КонецФункции

&НаКлиенте
Процедура ПрограммаОбработкаВыбораПродолжение(Ответ, ИдентификаторПоставляемойНастройки) Экспорт
	
	Если Ответ <> "Добавить" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторПоставляемойНастройки", ИдентификаторПоставляемойНастройки);
	
	ОткрытьФорму("Справочник.ПрограммыЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаявленияРеквизит.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаявленияЗначение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаявленияВсеРеквизит.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыЗаявленияВсеЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыЗаявления.ЭтоГруппаРеквизитов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(220, 220, 220));
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(Элементы.РеквизитыЗаявленияРеквизит.Шрифт, , , Истина,,,, 80));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСоглашение()
	
	ТекстHTML = Обработки.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.ПолучитьМакет(
		"Соглашение").ПолучитьТекст();
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "%1",
		// Наименование удостоверяющего центра.
		НСтр("ru = 'ООО «Научно-производственный центр ""1С""»'"));
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "%2",
		// Адрес регламента удостоверяющего центра.
		НСтр("ru = 'http://ca.1c.ru/reglament.pdf'"));
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "%3",
		// Сеть доверенных удостоверяющих центров.
		НСтр("ru = 'уполномоченного федерального органа в области использования электронной подписи'"));
	
	Соглашение.УстановитьHTML(ТекстHTML, Новый Структура);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиРеквизитов()
	
	Реквизиты = ПолучитьРеквизиты();
	Для каждого Реквизит Из Реквизиты Цикл
		ЗаголовкиРеквизитов.Добавить(Реквизит.Имя, Реквизит.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияСоставаИлиНастроекПрограмм()
	
	ЗаполнитьСписокПрограмм();
	
	ЗаполнитьПрограмму();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПрограмм()
	
	СписокПрограмм.Очистить();
	
	Если Не ЗначениеЗаполнено(КонтейнерКлючаПуть)
	   И Объект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.НеПодготовлено Тогда
		
		ВариантАлгоритмов = ВариантАлгоритмов();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантАлгоритмов) Тогда
		ВариантАлгоритмов = "2001";
	КонецЕсли;
	
	ИдентификаторыНастроек = Новый Соответствие;
	
	Если ВариантАлгоритмов = "2001" Тогда
		ИдентификаторыНастроек.Вставить("VipNet2001",    Истина);
		ИдентификаторыНастроек.Вставить("CryptoPro2001", Истина);
	Иначе
		ИдентификаторыНастроек.Вставить("VipNet2012",    Истина);
		ИдентификаторыНастроек.Вставить("CryptoPro2012", Истина);
	КонецЕсли;
	
	Настройки = Справочники.ПрограммыЭлектроннойПодписиИШифрования.ПоставляемыеНастройкиПрограмм();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Программы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК Программы
	|ГДЕ
	|	Программы.ИмяПрограммы = &ИмяПрограммы
	|	И Программы.ТипПрограммы = &ТипПрограммы";
	
	Для каждого Настройка Из Настройки Цикл
		Если ИдентификаторыНастроек.Получить(Настройка.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка = СписокПрограмм.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Настройка);
		
		Запрос.УстановитьПараметр("ИмяПрограммы", Настройка.ИмяПрограммы);
		Запрос.УстановитьПараметр("ТипПрограммы", Настройка.ТипПрограммы);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Строка.Ссылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВариантАлгоритмов()
	
	Попытка
		ВебСервис = ВебСервисУЦ();
		
		Фабрика = ВебСервис.Определение.ФабрикаXDTO;
		URIПространстваИмен = ВебСервис.ТочкаПодключения.Интерфейс.URIПространстваИмен;
		СвойстваФункции = Фабрика.Пакеты.Получить(URIПространстваИмен).КорневыеСвойства.Получить("GetCertificateSettings");
		Если СвойстваФункции = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В веб-сервисе ""%1"" не определена обязательная функция ""GetCertificateSettings"".'"),
				ВебСервис.ТочкаПодключения.Местоположение + "?wsdl");
		КонецЕсли;
		ТипПустогоПараметра = СвойстваФункции.Тип;
		ЗначениеПустогоПараметра = Фабрика.Создать(ТипПустогоПараметра); 
		
		Ответ = ВебСервис.GetCertificateSettings(ЗначениеПустогоПараметра).GetCertificateSettingsResult;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ);
		ПостроительDOM = Новый ПостроительDOM();
		ПостроительDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		УзелDOM = ПостроительDOM.ПолучитьЭлементыПоИмени("algorithm");
		ВариантАлгоритмов = УзелDOM[0].ТекстовоеСодержимое;
		
		Если ВариантАлгоритмов <> "2001" И ВариантАлгоритмов <> "2012" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ответ сервера не соответствует ожидаемому:
				           |%1'"), Ответ);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить требуемый вариант алгоритмов от сервера 1С:Подпись по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат ВариантАлгоритмов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПрограмму(Оповещение = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Программа) Тогда
		ПослеВыбораПрограммы(Ложь, Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("ПерваяДобавленнаяПрограмма", Неопределено);
	Контекст.Вставить("Индекс", -1);
	
	ЗаполнитьПрограммуЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЗаполнитьПрограмму.
&НаКлиенте
Процедура ЗаполнитьПрограммуЦиклНачало(Контекст)
	
	Если СписокПрограмм.Количество() <= Контекст.Индекс + 1 Тогда
		Если Контекст.ПерваяДобавленнаяПрограмма <> Неопределено Тогда
			Объект.Программа = Контекст.ПерваяДобавленнаяПрограмма;
		КонецЕсли;
		ПослеВыбораПрограммы(Ложь, Контекст.Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("Строка", СписокПрограмм[Контекст.Индекс]);
	
	Если Контекст.ПерваяДобавленнаяПрограмма = Неопределено
	   И ЗначениеЗаполнено(Контекст.Строка.Ссылка) Тогда
		
		Контекст.ПерваяДобавленнаяПрограмма = Контекст.Строка.Ссылка;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ЗаполнитьПрограммуЦиклПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"", Ложь, Контекст.Строка.Ссылка, Истина);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
&НаКлиенте
Процедура ЗаполнитьПрограммуЦиклПослеСозданияМенеджераКриптографии(Менеджер, Контекст) Экспорт
	
	Если ТипЗнч(Менеджер) <> Тип("МенеджерКриптографии") Тогда
		ЗаполнитьПрограммуЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Объект.Программа = Контекст.Строка.Ссылка;
	
	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыборкаПрограммыОбработчикОжидания()
	
	ПослеВыбораПрограммы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПрограммы(ПоказатьОшибку, Оповещение = Неопределено)
	
	Криптография = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Программа) Тогда
		Если Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПоказатьОшибку", ПоказатьОшибку);
	Контекст.Вставить("Оповещение", Оповещение);
	
	ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПослеВыбораПрограммыПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"", Неопределено, Объект.Программа);
	
КонецПроцедуры

// Продолжение процедуры ПослеВыбораПрограммы.
&НаКлиенте
Процедура ПослеВыбораПрограммыПослеСозданияМенеджераКриптографии(Менеджер, Контекст) Экспорт
	
	Если ТипЗнч(Менеджер) <> Тип("МенеджерКриптографии") Тогда
		Объект.Программа = Неопределено;
		
		Если Контекст.ПоказатьОшибку Тогда
			ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
				НСтр("ru = 'Выбор программы электронной подписи'"), "", Менеджер,
				Новый Структура, Новый Структура("ПоказатьИнструкцию", Истина));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаписатьЗаявление()
	
	ЭтоНовоеСостояние = ПоследнееСостояниеЗаявления <> Объект.СостояниеЗаявления;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Содержание = ТекущийОбъект.СодержаниеЗаявления.Получить();
	Если ТипЗнч(Содержание) <> Тип("Структура") Тогда
		Содержание = Новый Структура;
	КонецЕсли;
	Содержание.Вставить("ЕстьИзменения", ЭтоНовоеСостояние);
	
	Если ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.НеПодготовлено Тогда
		Фамилия = СокрЛП(Фамилия);
		Имя = СокрЛП(Имя);
		Отчество = СокрЛП(Отчество);
		ТекущийОбъект.Наименование = СокрП(Фамилия + " " + Имя + " " + Отчество)
			+ " (" + НСтр("ru = 'Заявление на новый сертификат'") + ")";
		// Организация.
		ОбновитьЗначение(Содержание, "ЭтоИндивидуальныйПредприниматель");
		ОбновитьЗначение(Содержание, "Организация");
		ОбновитьЗначение(Содержание, "НаименованиеСокращенное");
		ОбновитьЗначение(Содержание, "НаименованиеПолное");
		ОбновитьЗначение(Содержание, "ИНН");
		ОбновитьЗначение(Содержание, "КПП");
		ОбновитьЗначение(Содержание, "ОГРН");
		ОбновитьЗначение(Содержание, "РасчетныйСчет");
		ОбновитьЗначение(Содержание, "БИК");
		ОбновитьЗначение(Содержание, "КорреспондентскийСчет");
		ОбновитьЗначение(Содержание, "ЮридическийАдрес");
		ОбновитьЗначение(Содержание, "ЮридическийАдресXML");
		ОбновитьЗначение(Содержание, "ФактическийАдрес");
		ОбновитьЗначение(Содержание, "ФактическийАдресXML");
		ОбновитьЗначение(Содержание, "Телефон");
		ОбновитьЗначение(Содержание, "ТелефонXML");
		// Владелец.
		ОбновитьЗначение(Содержание, "Сотрудник");
		ОбновитьЗначение(Содержание, "Фамилия");
		ОбновитьЗначение(Содержание, "Имя");
		ОбновитьЗначение(Содержание, "Отчество");
		ОбновитьЗначение(Содержание, "ДатаРождения");
		ОбновитьЗначение(Содержание, "Пол");
		ОбновитьЗначение(Содержание, "МестоРождения");
		ОбновитьЗначение(Содержание, "Гражданство");
		ОбновитьЗначение(Содержание, "ГражданствоПредставление");
		ОбновитьЗначение(Содержание, "ГражданствоОКСМКодАльфа3");
		ОбновитьЗначение(Содержание, "СтраховойНомерПФР");
		ОбновитьЗначение(Содержание, "Должность");
		ОбновитьЗначение(Содержание, "ДокументВид");
		ОбновитьЗначение(Содержание, "ДокументНомер");
		ОбновитьЗначение(Содержание, "ДокументКемВыдан");
		ОбновитьЗначение(Содержание, "ДокументКодПодразделения");
		ОбновитьЗначение(Содержание, "ДокументДатаВыдачи");
		ОбновитьЗначение(Содержание, "ЭлектроннаяПочта");
		ОбновитьЗначение(Содержание, "Подразделение");
		// Сохранение заполненных значений, если есть.
		ОбновитьЗначение(Содержание, "ВариантАлгоритмов");
		ОбновитьЗначение(Содержание, "Программа", Объект.Программа);
		ОбновитьЗначение(Содержание, "ПредставлениеПрограммы");
		ОбновитьЗначение(Содержание, "КонтейнерКлючаИмя");
		ОбновитьЗначение(Содержание, "КонтейнерКлючаПуть");
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Подготовлено Тогда
		Если ЭтоНовоеСостояние Тогда
			ОбновитьЗначение(Содержание, "Программа", Объект.Программа);
			ОбновитьЗначение(Содержание, "ПредставлениеПрограммы");
			ОбновитьЗначение(Содержание, "КонтейнерКлючаИмя");
			ОбновитьЗначение(Содержание, "КонтейнерКлючаПуть");
			ОбновитьЗначение(Содержание, "ЗапросНаСертификат", ПолучитьИзВременногоХранилища(АдресЗапросаНаСертификат));
			ОбновитьЗначение(Содержание, "ОткрытаяЧастьКлючаЭП");
			ОбновитьЗначение(Содержание, "ИдентификаторКлючаСубъекта");
			ОбновитьЗначение(Содержание, "ДокументыПоляСертификата");
			ОбновитьЗначение(Содержание, "ДатаЗаявления");
		КонецЕсли;
		// Сохранение заполненных значений, если есть.
		ОбновитьЗначение(Содержание, "ДокументыРуководитель");
		ОбновитьЗначение(Содержание, "ДокументыРуководительСсылка");
		ОбновитьЗначение(Содержание, "ДокументыРуководительДолжность");
		ОбновитьЗначение(Содержание, "ДокументыРуководительОснование");
		ОбновитьЗначение(Содержание, "ДокументыПартнер");
		ОбновитьЗначение(Содержание, "ДокументыПартнерСсылка");
		ОбновитьЗначение(Содержание, "ДокументыПартнерЭтоИП");
		ОбновитьЗначение(Содержание, "ДокументыПартнерИНН");
		ОбновитьЗначение(Содержание, "ДокументыПартнерКПП");
		ОбновитьЗначение(Содержание, "ДокументыПечатались");
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отправлено Тогда
		Если ЭтоНовоеСостояние Тогда
			ОбновитьЗначение(Содержание, "ИдентификаторДокументооборота");
			ОбновитьЗначение(Содержание, "ДатаОтправки");
			ОбновитьЗначение(Содержание, "ДокументыРуководитель");
			ОбновитьЗначение(Содержание, "ДокументыРуководительСсылка");
			ОбновитьЗначение(Содержание, "ДокументыРуководительДолжность");
			ОбновитьЗначение(Содержание, "ДокументыРуководительОснование");
			ОбновитьЗначение(Содержание, "ДокументыПартнер");
			ОбновитьЗначение(Содержание, "ДокументыПартнерСсылка");
			ОбновитьЗначение(Содержание, "ДокументыПартнерЭтоИП");
			ОбновитьЗначение(Содержание, "ДокументыПартнерИНН");
			ОбновитьЗначение(Содержание, "ДокументыПартнерКПП");
		КонецЕсли;
		ОбновитьЗначение(Содержание, "ДатаОбновленияСостояния");
		ОбновитьЗначение(Содержание, "СостояниеОбработкиЗаявления");
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.ИсполненоСертификатНеУстановлен Тогда
		Если ЭтоНовоеСостояние Тогда
			ОбновитьЗначение(Содержание, "ОтпечатокКорневогоСертификата");
			ОбновитьЗначение(Содержание, "Сертификат",         ПолучитьИзВременногоХранилища(АдресСертификата));
			ОбновитьЗначение(Содержание, "КорневойСертификат", ПолучитьИзВременногоХранилища(АдресКорневогоСертификата));
			ОбновитьЗначение(Содержание, "ИдентификаторАбонента");
			ОбновитьЗначение(Содержание, "ДатаОбновленияСостояния");
			ОбновитьЗначение(Содержание, "СостояниеОбработкиЗаявления");
			Если ТекущийОбъект.ДанныеСертификата.Получить() <> Содержание.Сертификат Тогда
				ТекущийОбъект.ДанныеСертификата = Новый ХранилищеЗначения(Содержание.Сертификат);
				Содержание.ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		ОбновитьЗначение(Содержание, "ОшибкаУстановкиСертификата");
		ОбновитьЗначение(Содержание, "ДатаУстановкиСертификата");
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Отклонено Тогда
		Если ЭтоНовоеСостояние Тогда
			ОбновитьЗначение(Содержание, "ДатаОбновленияСостояния");
			ОбновитьЗначение(Содержание, "СостояниеОбработкиЗаявления");
			НовоеНаименование = СокрП(Фамилия + " " + Имя + " " + Отчество) + " (" + НСтр("ru = 'Удалить'") + ")";
			Если ТекущийОбъект.Наименование <> НовоеНаименование Тогда
				ТекущийОбъект.Наименование = НовоеНаименование;
				Содержание.ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущийОбъект.СостояниеЗаявления = Перечисления.СостоянияЗаявленияНаВыпускСертификата.Исполнено Тогда
		Если ЭтоНовоеСостояние Тогда
			ОбновитьЗначение(Содержание, "ОшибкаУстановкиСертификата");
			ОбновитьЗначение(Содержание, "ДатаУстановкиСертификата");
			Содержание.ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Содержание.ЕстьИзменения Тогда
		Содержание.Удалить("ЕстьИзменения");
		ТекущийОбъект.СодержаниеЗаявления = Новый ХранилищеЗначения(Содержание);
		ЭтоНовый = ТекущийОбъект.ЭтоНовый();
		ТекущийОбъект.Записать();
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
		ОповеститьОбИзмененииЗаявления = Истина;
	КонецЕсли;
	ПоследнееСостояниеЗаявления = Объект.СостояниеЗаявления;
	
	Элементы.ПодтверждениеСоглашения.ТолькоПросмотр = Истина;
	
	Если ЭтоНовый Тогда
		ЗаблокироватьДанныеДляРедактирования(ТекущийОбъект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначение(Содержание, ИмяСвойства, Значение = null);
	
	Если Значение = Null Тогда
		Значение = ЭтотОбъект[ИмяСвойства];
	КонецЕсли;
	
	Если Содержание.Свойство(ИмяСвойства) И Содержание[ИмяСвойства] = Значение Тогда
		Возврат;
	КонецЕсли;
	
	Содержание.ЕстьИзменения = Истина;
	Содержание.Вставить(ИмяСвойства, Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ТекстОповещения = "")
	
	Если Не ОповеститьОбИзмененииЗаявления Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	Контекст = Новый Структура;
	Если ЭтоНовый Тогда
		Контекст.Вставить("ЭтоНовый");
	КонецЕсли;
	Оповестить("Запись_СертификатыКлючейЭлектроннойПодписиИШифрования", Контекст, Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ТекстОповещения) Тогда
		ТекстОповещения = НСтр("ru = 'Заявление сохранено.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстОповещения);
	
	ОповеститьОбИзмененииЗаявления = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИРазблокироватьОбъект()
	
	ЗаписатьЗаявление();
	РазблокироватьОбъект(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьОбъект(Ссылка, ИдентификаторФормы)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	
КонецПроцедуры


// Создание ключа и запроса на сертификат.

&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификат(Оповещение)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Если Криптография <> Неопределено Тогда
		СоздатьКлючИЗапросНаСертификатПослеСозданияОбъектаКриптографии(Истина, Контекст);
	Иначе
		СоздатьОбъектКриптографии(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеСозданияОбъектаКриптографии", ЭтотОбъект, Контекст),
			НСтр("ru = 'Для создания ключа электронной подписи и запроса на сертификат
			           |требуется установить расширение для веб-клиента 1С:Предприятия.'"),
			НСтр("ru = 'Для создания ключа электронной подписи и запроса на сертификат
			           |требуется установить внешнюю компоненту.'"));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеСозданияОбъектаКриптографии(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ПроверитьСуществованиеКонтейнераКлючей(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеПроверкиСуществованияКонтейнераКлючей", ЭтотОбъект, Контекст),
		КонтейнерКлючаПуть, КонтейнерКлючаИмя);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПроверкиСуществованияКонтейнераКлючей(Существует, Контекст) Экспорт
	
	Если Существует Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Используется ранее созданный контейнер ключа:'"),,
			КонтейнерКлючаПуть);
		
		СоздатьКлючИЗапросНаСертификатПослеПодготовкиКонтейнераКлюча(Контекст);
	Иначе
		ПолучитьИмяНовогоКонтейнераКлюча(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеПолученияИмениНовогоКонтейнераКлюча", ЭтотОбъект, Контекст));
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПолученияИмениНовогоКонтейнераКлюча(КонтейнерКлючаНовоеИмя, Контекст) Экспорт
	
	АктивноеОкно().Активизировать();
	
	Контекст.Вставить("КонтейнерКлючаНовоеИмя", КонтейнерКлючаНовоеИмя);
	
	Криптография.НачатьВызовСоздатьКонтейнер(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьКонтейнер", ЭтотОбъект, Контекст,
			"СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваСоздатьКонтейнер", ЭтотОбъект),
		КонтейнерКлючаНовоеИмя);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваСоздатьКонтейнер(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ПоказатьИнструкцию", Истина);
	Ошибка.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось выполнить операцию по причине:
		           |%1'"),
		ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)));
	
	ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
		НСтр("ru = 'Создание ключа электронной подписи'"), "", Ошибка,
		Новый Структура, Новый Структура("ПоказатьИнструкцию", Истина));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьКонтейнер(Путь, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПутьПослеВызоваСоздатьКонтейнер", Путь);
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьКонтейнерПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьКонтейнерПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваСоздатьКонтейнер(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Путь = Контекст.ПутьПослеВызоваСоздатьКонтейнер;
	
	АктивноеОкно().Активизировать();
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Строки = СписокПрограмм.НайтиСтроки(Новый Структура("Ссылка", Объект.Программа));
		Если СтрНачинаетсяС(Строки[0].Идентификатор, "CryptoPro") Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ключ электронной подписи не создан.
				           |
				           |Следует учитывать, что для создания ключа с помощью программы %1,
				           |требуются права администратора операционной системы.'"),
				Строки[0].Представление));
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Ключ электронной подписи не создан.'"));
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	КонтейнерКлючаИмя  = Контекст.КонтейнерКлючаНовоеИмя;
	КонтейнерКлючаПуть = Путь;
	ЗаписатьЗаявление();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Создан новый контейнер ключа:'"),, КонтейнерКлючаПуть);
	
	СоздатьКлючИЗапросНаСертификатПослеПодготовкиКонтейнераКлюча(Контекст);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПодготовкиКонтейнераКлюча(Контекст)
	
	ПолучитьКаталогВременныхФайловКомпоненты(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеПолученияКаталогаВременныхФайловКомпоненты", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПолученияКаталогаВременныхФайловКомпоненты(Каталог, Контекст) Экспорт
	
	Контекст.Вставить("ИмяФайлаЗапроса", Каталог + КонтейнерКлючаИмя + ".p10");
	
	Контекст.Вставить("ПомещаемыеФайлы", Новый Массив);
	Контекст.ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Контекст.ИмяФайлаЗапроса));
	
	Вызовы = Новый Массив;
	ДобавитьВызов(Вызовы, "НачатьПомещениеФайлов", Контекст.ПомещаемыеФайлы, Неопределено, Ложь, УникальныйИдентификатор);
	ДобавитьВызов(Вызовы, "НачатьУдалениеФайлов",  Контекст.ИмяФайлаЗапроса, Неопределено);
	
	НачатьЗапросРазрешенияПользователя(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеПолученияРазрешений", ЭтотОбъект, Контекст), Вызовы);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПолученияРазрешений(РазрешенияПолучены, Контекст) Экспорт
	
	Если Не РазрешенияПолучены Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПоляСертификата", Неопределено);
	ОписаниеЗапроса = ОписаниеЗапросаНаКвалифицированныйСертификат(Контекст.ПоляСертификата);
	ФлагКвалифицированнойЭП = 67108864;
	
	АктивноеОкно().Активизировать();
	
	Контекст.Вставить("ЗапросСоздан", Истина);
	
	Криптография.НачатьВызовСоздатьЗапросНаСертификат(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьЗапросНаСертификат", ЭтотОбъект, Контекст,
			"СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваСоздатьЗапросНаСертификат", ЭтотОбъект),
		ОписаниеЗапроса, КонтейнерКлючаПуть, Контекст.ИмяФайлаЗапроса, ФлагКвалифицированнойЭП);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваСоздатьЗапросНаСертификат(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКлючИЗапросНаСертификатЗавершение(Контекст, ИнформацияОбОшибке,
		НСтр("ru = 'Не удалось выполнить операцию по причине:'"));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьЗапросНаСертификат(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РезультатПослеВызоваСоздатьЗапросНаСертификат", Результат);
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьЗапросНаСертификатПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеВызоваСоздатьЗапросНаСертификатПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваСоздатьЗапросНаСертификат(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = Контекст.РезультатПослеВызоваСоздатьЗапросНаСертификат;
	
	Если Результат <> Истина Тогда
		Контекст.ЗапросСоздан = Ложь;
		СоздатьКлючИЗапросНаСертификатЗавершение(Контекст);
		Возврат;
	КонецЕсли;
	АктивноеОкно().Активизировать();
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеИнициализацииФайла", ЭтотОбъект, Контекст),
		Контекст.ИмяФайлаЗапроса);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеИнициализацииФайла(Файл, Контекст) Экспорт
	
	Контекст.Вставить("Файл", Файл);
	
	Контекст.Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеПроверкиСуществованияФайла", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПроверкиСуществованияФайла(Существует, Контекст) Экспорт
	
	Если Не Существует Тогда
		Контекст.ЗапросСоздан = Ложь;
		СоздатьКлючИЗапросНаСертификатЗавершение(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Файл.НачатьПолучениеРазмера(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеПолученияРазмераФайла", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПолученияРазмераФайла(Размер, Контекст) Экспорт
	
	Если Размер = 0 Тогда
		Контекст.ЗапросСоздан = Ложь;
		СоздатьКлючИЗапросНаСертификатЗавершение(Контекст);
		Возврат;
	КонецЕсли;
	
	Криптография.НачатьВызовПолучитьОткрытыйКлюч(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеВызоваПолучитьОткрытыйКлюч", ЭтотОбъект, Контекст,
			"СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваПолучитьОткрытыйКлюч", ЭтотОбъект),
		Контекст.ИмяФайлаЗапроса);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваПолучитьОткрытыйКлюч(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКлючИЗапросНаСертификатЗавершение(Контекст, ИнформацияОбОшибке,
		НСтр("ru = 'Не удалось получить открытую часть ключа по причине:'"));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеВызоваПолучитьОткрытыйКлюч(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РезультатПослеВызоваПолучитьОткрытыйКлюч", Результат);
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеВызоваПолучитьОткрытыйКлючПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеВызоваПолучитьОткрытыйКлючПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		СоздатьКлючИЗапросНаСертификатПослеОшибкиВызоваПолучитьОткрытыйКлюч(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат = Контекст.РезультатПослеВызоваПолучитьОткрытыйКлюч;
	
	Контекст.Вставить("ТекущаяОткрытаяЧастьКлючаЭП", Результат);
	Контекст.Вставить("ТекущийИКС", ИдентификаторКлючаСубъектаHexСтрокой(Результат));
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Интерактивно = Ложь;
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Новый ОписаниеОповещения(
		"СоздатьКлючИЗапросНаСертификатПослеПомещенияФайлов", ЭтотОбъект, Контекст,
		"СоздатьКлючИЗапросНаСертификатПослеОшибкиПомещенияФайлов", ЭтотОбъект),
		ПараметрыЗагрузки, Контекст.ПомещаемыеФайлы);
	
КонецПроцедуры

// Для продолжения процедуры СоздатьКлючИЗапросНаСертификат.
&НаСервереБезКонтекста
Функция ИдентификаторКлючаСубъектаHexСтрокой(ОткрытаяЧастьКлючаHexСтрокой)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХешированиеДанных.Добавить(ПолучитьДвоичныеДанныеИзHexСтроки(ОткрытаяЧастьКлючаHexСтрокой));
	
	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма);
	
КонецФункции

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеОшибкиПомещенияФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СоздатьКлючИЗапросНаСертификатЗавершение(Контекст, ИнформацияОбОшибке,
		НСтр("ru = 'Не удалось передать файл запроса на сертификат на сервер по причине:'"));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПомещенияФайлов(ПомещенныеФайлы, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		Контекст.ЗапросСоздан = Ложь;
		СоздатьКлючИЗапросНаСертификатЗавершение(Контекст);
		Возврат;
	КонецЕсли;
	
	АдресЗапросаНаСертификат   = ПомещенныеФайлы[0].Хранение;
	ОткрытаяЧастьКлючаЭП       = ПредставлениеДвоичныхДанных(Контекст.ТекущаяОткрытаяЧастьКлючаЭП);
	ИдентификаторКлючаСубъекта = ПредставлениеДвоичныхДанных(Контекст.ТекущийИКС);
	ДокументыПоляСертификата   = Контекст.ПоляСертификата;
	ДатаЗаявления = Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=dd.MM.yyyy"); // АПК:335 Не локализуется (формат веб-сервиса).
	
	СоздатьКлючИЗапросНаСертификатЗавершение(Контекст);
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатЗавершение(Контекст, ИнформацияОбОшибке = Неопределено, ЗаголовокОшибки = "")
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Контекст.ЗапросСоздан = Ложь;
		Ошибка = Новый Структура;
		Ошибка.Вставить("ПоказатьИнструкцию", Истина);
		Ошибка.Вставить("ОписаниеОшибки", ЗаголовокОшибки
			+ Символы.ПС + ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке));
		
		ЭлектроннаяПодписьСлужебныйКлиент.ПоказатьОшибкуОбращенияКПрограмме(
			НСтр("ru = 'Создание запроса на сертификат'"), "", Ошибка,
			Новый Структура, Новый Структура("ПоказатьИнструкцию", Истина));
		
	ИначеЕсли Не Контекст.ЗапросСоздан Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Запрос на сертификат не создан.'"));
	КонецЕсли;
	
	Если Контекст.Свойство("Файл") Тогда
		Контекст.Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
			"СоздатьКлючИЗапросНаСертификатПослеПроверкиСуществованияФайлаДляУдаления", ЭтотОбъект, Контекст));
	Иначе
		СоздатьКлючИЗапросНаСертификатПослеУдаленияФайлов(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеПроверкиСуществованияФайлаДляУдаления(Существует, Контекст) Экспорт
	
	Если Существует Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(
				"СоздатьКлючИЗапросНаСертификатПослеУдаленияФайлов", ЭтотОбъект, Контекст,
				"СоздатьКлючИЗапросНаСертификатПослеОшибкиУдаленияФайлов", ЭтотОбъект),
			Контекст.ИмяФайлаЗапроса);
	Иначе
		СоздатьКлючИЗапросНаСертификатПослеУдаленияФайлов(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеОшибкиУдаленияФайлов(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СоздатьКлючИЗапросНаСертификатЗавершение(Контекст, ИнформацияОбОшибке,
		НСтр("ru = 'Не удалось удалить файл запроса на сертификат на компьютере по причине:'"));
	
КонецПроцедуры

// Продолжение процедуры СоздатьКлючИЗапросНаСертификат.
&НаКлиенте
Процедура СоздатьКлючИЗапросНаСертификатПослеУдаленияФайлов(Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.ЗапросСоздан);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьСуществованиеКонтейнераКлючей(Оповещение, ПутьПослеСоздания, ИмяДляСоздания)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",        Оповещение);
	Контекст.Вставить("ПутьПослеСоздания", ПутьПослеСоздания);
	Контекст.Вставить("ИмяДляСоздания",    ИмяДляСоздания);
	
	Если Не ЗначениеЗаполнено(Контекст.ПутьПослеСоздания) Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ПолучитьИменаКонтейнеровКлючей(Новый ОписаниеОповещения(
		"ПроверитьСуществованиеКонтейнераКлючейПослеПолученияИменКонтейнеров", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСуществованиеКонтейнераКлючей.
&НаКлиенте
Процедура ПроверитьСуществованиеКонтейнераКлючейПослеПолученияИменКонтейнеров(ИменаКонтейнеровКлючей, Контекст) Экспорт
	
	Строки = СписокПрограмм.НайтиСтроки(Новый Структура("Ссылка", Объект.Программа));
	
	Если СтрНачинаетсяС(Строки[0].Идентификатор, "CryptoPro") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, НайтиБезУчетаРегистраИРазделителяПути(
			ИменаКонтейнеровКлючей, Контекст.ИмяДляСоздания) > 0);
		Возврат;
	КонецЕсли;
	
	Позиция = СтрНайти(Контекст.ПутьПослеСоздания, ":.");
	Если Позиция = 0 Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, НайтиБезУчетаРегистраИРазделителяПути(
			ИменаКонтейнеровКлючей, Контекст.ИмяДляСоздания) > 0);
		Возврат;
	КонецЕсли;
	
	ИмяПослеСоздания = Лев(Контекст.ПутьПослеСоздания, Позиция - 1);
	
	Если НайтиБезУчетаРегистраИРазделителяПути(ИменаКонтейнеровКлючей, ИмяПослеСоздания) > 0 Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
		Возврат;
	КонецЕсли;
	
	Позиция = НайтиБезУчетаРегистраИРазделителяПути(ИмяПослеСоздания, "\Infotecs\Containers\");
	Если Позиция = 0 Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	// ViPNet 3.2 (основная папка контейнеров не указана).
	ИмяПослеСоздания = Сред(ИмяПослеСоздания, Позиция);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, НайтиБезУчетаРегистраИРазделителяПути(
		ИменаКонтейнеровКлючей, ИмяПослеСоздания) > 0);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИмяНовогоКонтейнераКлюча(Оповещение)
	
	// Дата используется только для уникальности имени, поэтому требуется часы компьютера.
	Дата = ТекущаяДата(); // Не заменять на текущую дату сеанса.
	
	ДатаСоздания = Формат(Дата, "ДФ=гггг-ММ-дд") + " " + Формат(Дата, "ДФ=ЧЧ") + "-" + Формат(Дата, "ДФ=мм");
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		// С<Фамилия Имя>, Индивидуальный предприниматель".
		Субъект = ПодготовитьСтрокуДляИмениКонтейнера(Фамилия) + " "
			+ ПодготовитьСтрокуДляИмениКонтейнера(Имя) + ", "
			+ ПодготовитьСтрокуДляИмениКонтейнера(НСтр("ru = 'Индивидуальный предприниматель'"));
	Иначе
		// С<Фамилия Имя>, <Сокращенное наименование организации>".
		Субъект = ПодготовитьСтрокуДляИмениКонтейнера(Фамилия) + " "
			+ ПодготовитьСтрокуДляИмениКонтейнера(Имя) + ", "
			+ ПодготовитьСтрокуДляИмениКонтейнера(НаименованиеСокращенное);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("НовоеИмя1",  ДатаСоздания + ", " + Лев(Субъект, 60));
	Контекст.Вставить("НовоеИмя2",  ДатаСоздания + "-" + Формат(Дата, "ДФ=сс") + ", " + Лев(Субъект, 57));
	
	ПолучитьИменаКонтейнеровКлючей(Новый ОписаниеОповещения(
		"ПолучитьИмяНовогоКонтейнераКлючаПослеПолученияИменКонтейнеров", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьИмяНовогоКонтейнераКлюча.
&НаКлиенте
Процедура ПолучитьИмяНовогоКонтейнераКлючаПослеПолученияИменКонтейнеров(ИменаКонтейнеровКлючей, Контекст) Экспорт
	
	НовоеИмя = Контекст.НовоеИмя1;
	
	Если НайтиБезУчетаРегистраИРазделителяПути(ИменаКонтейнеровКлючей, НовоеИмя) > 0 Тогда
		НовоеИмя = Контекст.НовоеИмя2;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, НовоеИмя);
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция НайтиБезУчетаРегистраИРазделителяПути(Строка, ПодстрокаПоиска)
	
	Возврат СтрНайти(НРег(СтрЗаменить(Строка, "/", "\")), НРег(СтрЗаменить(ПодстрокаПоиска, "/", "\")));
	
КонецФункции

&НаКлиенте
Функция ПодготовитьСтрокуДляИмениКонтейнера(Строка, ЗаменаПробела = Неопределено)
	
	ЗаменаСимволов = Новый Соответствие;
	ЗаменаСимволов.Вставить("\", " ");
	ЗаменаСимволов.Вставить("/", " ");
	ЗаменаСимволов.Вставить("*", " ");
	ЗаменаСимволов.Вставить("<", " ");
	ЗаменаСимволов.Вставить(">", " ");
	ЗаменаСимволов.Вставить("|", " ");
	ЗаменаСимволов.Вставить(":", "");
	ЗаменаСимволов.Вставить("""", "");
	ЗаменаСимволов.Вставить("?", "");
	ЗаменаСимволов.Вставить(Символы.ВК, "");
	ЗаменаСимволов.Вставить(Символы.ПС, " ");
	ЗаменаСимволов.Вставить(Символы.Таб, " ");
	ЗаменаСимволов.Вставить(Символы.НПП, " ");
	// Замена символов кавычек.
	ЗаменаСимволов.Вставить(Символ(171), "");
	ЗаменаСимволов.Вставить(Символ(187), "");
	ЗаменаСимволов.Вставить(Символ(8195), "");
	ЗаменаСимволов.Вставить(Символ(8194), "");
	ЗаменаСимволов.Вставить(Символ(8216), "");
	ЗаменаСимволов.Вставить(Символ(8218), "");
	ЗаменаСимволов.Вставить(Символ(8217), "");
	ЗаменаСимволов.Вставить(Символ(8220), "");
	ЗаменаСимволов.Вставить(Символ(8222), "");
	ЗаменаСимволов.Вставить(Символ(8221), "");
	
	СтрокаПодготовленная = "";
	
	СтрокаЛатиницей = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Строка);
	КоличествоСимволов = СтрДлина(СтрокаЛатиницей);
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		Символ = Сред(СтрокаЛатиницей, НомерСимвола, 1);
		Если ЗаменаСимволов[Символ] <> Неопределено Тогда
			Символ = ЗаменаСимволов[Символ];
		КонецЕсли;
		СтрокаПодготовленная = СтрокаПодготовленная + Символ;
	КонецЦикла;
	
	Если ЗаменаПробела <> Неопределено Тогда
		СтрокаПодготовленная = СтрЗаменить(ЗаменаПробела, " ", ЗаменаПробела);
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаПодготовленная);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДвоичныхДанных(Знач Строка, БайтВСтроке = 20)
	
	ОстатокСтроки = НРег(СтрЗаменить(Строка, " ", ""));
	Представление = "";
	БайтВТекущейСтроке = 0;
	
	Пока ЗначениеЗаполнено(ОстатокСтроки) Цикл
		Представление = Представление + Лев(ОстатокСтроки, 2) + " ";
		ОстатокСтроки = Сред(ОстатокСтроки, 3);
		БайтВТекущейСтроке = БайтВТекущейСтроке + 1;
		Если БайтВТекущейСтроке = БайтВСтроке Тогда
			Представление = СокрЛП(Представление) + Символы.ПС;
			БайтВТекущейСтроке = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Представление);
	
КонецФункции

&НаКлиенте
Функция ОписаниеЗапросаНаКвалифицированныйСертификат(Поля)
	
	СписокПараметров = Новый СписокЗначений;
	Поля = Новый Структура;
	
	Адрес = ЮридическийАдресСтруктура;
	СимволРазделения = СимволРазделенияЧастейИмениИлиЧастейФамилииИлиЧастейОтчестваВСертификате();
	
	// Поле CN - общее имя (организация или индивидуальный предприниматель).
	Если ЭтоИндивидуальныйПредприниматель Тогда
		ПолеОбщееИмя = СокрП(СтрЗаменить(Фамилия, " ", СимволРазделения)
			+ " " + СтрЗаменить(Имя, " ", СимволРазделения)
			+ " " + СтрЗаменить(Отчество, " ", СимволРазделения));
	Иначе
		ПолеОбщееИмя = НаименованиеСокращенное;
	КонецЕсли;
	Поля.Вставить("CN", Лев(ПолеОбщееИмя, 64));
	СписокПараметров.Добавить("2.5.4.3", Поля.CN);
	
	// Поле SN - фамилия должностного лица или индивидуального предпринимателя.
	ПолеФамилия = СтрЗаменить(Фамилия, " ", СимволРазделения);
	Поля.Вставить("SN", Лев(ПолеФамилия, 64));
	СписокПараметров.Добавить("2.5.4.4", Поля.SN);
	
	// Поле G - имя и отчество должностного лица или индивидуального предпринимателя.
	ПолеОтчество = СокрП(СтрЗаменить(Имя, " ", СимволРазделения)
		+ " " + СтрЗаменить(Отчество, " ", СимволРазделения));
	
	Поля.Вставить("G", Лев(ПолеОтчество, 64));
	СписокПараметров.Добавить("2.5.4.42", Поля.G);
	
	// Поле C - страна.
	Поля.Вставить("C", "RU");
	СписокПараметров.Добавить("2.5.4.6", Поля.C);
	
	// Следующие поля S, L, Street - адрес местонахождения организации или
	// регистрации индивидуального предпринимателя.
	
	// Поле S (ST) - регион (<код региона> <имя региона>) - наименование субъекта РФ для СКПЭП,
	// например, "77 г. Москва".
	ПолеРегион = Адрес.КодРегиона + " " + ИмяРегионаРФПоРекомендациямДляСКПЭП(Адрес.КодРегиона);
	Поля.Вставить("S", Лев(ПолеРегион, 128));
	СписокПараметров.Добавить("2.5.4.8", Поля.S);
	
	// Поле L - населенный пункт:
	// "<округ> и/или <район> и/или <город> и/или <внутригородской район> и/или <населенный пункт>".
	// Например, "<район>, <город>, <населенный пункт>":
	// "Москва г, Зеленоград г, Крюково п", "Москва г, Зеленоград г, Малино п".
	ПолеНаселенныйПункт = НаселенныйПунктПолностью(Адрес);
	Поля.Вставить("L", Лев(ПолеНаселенныйПункт, 128));
	СписокПараметров.Добавить("2.5.4.7", Поля.L);
	
	// Поле Street - улица:
	// "<улица> и/или <дополнительная территория> и/или <элемент дополнительной территории>, дом, офис".
	ПолеУлица = ПредставлениеЧастиАдреса(Адрес,
		"Улица,
		|ДополнительнаяТерритория,
		|ЭлементДополнительнойТерритории,
		|Здание, Корпуса, Помещения");
	Поля.Вставить("Street", Лев(ПолеУлица, 128));
	СписокПараметров.Добавить("2.5.4.9", Поля.Street);
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		// Поле OGRNIP - ОГРНИП индивидуального предпринимателя 15 символов.
		Поля.Вставить("OGRNIP", ОГРН);
		СписокПараметров.Добавить("1.2.643.100.5", Поля.OGRNIP);
	Иначе
		// Поле O - организация.
		Поля.Вставить("O", Лев(НаименованиеСокращенное, 64));
		СписокПараметров.Добавить("2.5.4.10", Поля.O);
		
		// Поле OU - обособленное подразделение должностного лица.
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Поля.Вставить("OU", Лев(Подразделение, 64));
			СписокПараметров.Добавить("2.5.4.11", Поля.OU);
		КонецЕсли;
		
		// Поле T - должность должностного лица.
		Поля.Вставить("T", Лев(Должность, 64));
		СписокПараметров.Добавить("2.5.4.12", Поля.T);
		
		// Поле OGRN - ОГРН юридического лица 13 символов.
		Поля.Вставить("OGRN", ОГРН);
		СписокПараметров.Добавить("1.2.643.100.1", Поля.OGRN);
	КонецЕсли;
	
	// Поле SNILS - СНИЛС должностного лица или индивидуального предпринимателя.
	Поля.Вставить("SNILS", СтраховойНомерПФР);
	СписокПараметров.Добавить("1.2.643.100.3", Поля.SNILS);
	
	// Поле INN - ИНН организации или индивидуального предпринимателя.
	Поля.Вставить("INN", Прав("00" + ИНН, 12));
	СписокПараметров.Добавить("1.2.643.3.131.1.1", Поля.INN);
	
	// Поле E - электронная почта должностного лица организации или индивидуального предпринимателя.
	Поля.Вставить("E", Лев(ЭлектроннаяПочта, 128));
	СписокПараметров.Добавить("1.2.840.113549.1.9.1", Поля.E);
	
	// Подготовка строки запроса.
	
	Свойства = "";
	Для Каждого Параметр Из СписокПараметров Цикл 
		Свойства = Свойства + ",<" + Параметр.Значение + "=" + СокрЛП(Параметр.Представление) + ">";
	КонецЦикла;
	Свойства = Сред(Свойства, 2);
	
	// Использование ключа - Проверка подлинности клиента, Защищенная электронная почта.
	ИспользованиеКлюча = "1.3.6.1.5.5.7.3.2,1.3.6.1.5.5.7.3.4"; 
	
	// Для УЦ КриптоПро 2.0 требуется указать шаблон сертификата.
	// Без встроенной лицензии шаблон - "1.2.643.2.2.46.0.8", со встроенной лицензией
	// шаблон - "1.2.643.2.2.50.1.9.8791462.1882306.9191997.3049782.15111.41178".
	ШаблонСертификата = "1.2.643.2.2.46.0.8";
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"pRequestInfo:{
		|CertAttrs:{%1}
		|CertEnhKeyUsage:{%2}
		|CertPolicies:{<1.2.643.100.113.1=>}
		|dwKeyUsage:{240}
		|SignTool:{%3}
		|CertTemplate:{%4}
		|}",
		Свойства,
		ИспользованиеКлюча,
		ПредставлениеПрограммы,
		ШаблонСертификата);
	
КонецФункции

&НаКлиенте
Функция СимволРазделенияЧастейИмениИлиЧастейФамилииИлиЧастейОтчестваВСертификате()
	
	Возврат "_";
	
КонецФункции

&НаКлиенте
Функция ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		Возврат Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПолучитьИменаКонтейнеровКлючей(Оповещение)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("СписокИмен", Новый СписокЗначений);
	Контекст.Вставить("ПервыйПроход", Истина);
	Контекст.Вставить("Индекс", -1);
	
	ПолучитьИменаКонтейнеровКлючейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьИменаКонтейнеровКлючей.
&НаКлиенте
Процедура ПолучитьИменаКонтейнеровКлючейЦиклНачало(Контекст)
	
	Контекст.Вставить("ТекущееИмя", "");
	
	Криптография.НачатьВызовПолучитьСледующийКонтейнерКлючей(Новый ОписаниеОповещения(
			"ПолучитьИменаКонтейнеровКлючейЦиклПослеВызоваПолучитьСледующийКонтейнерКлючей", ЭтотОбъект, Контекст,
			"ПолучитьИменаКонтейнеровКлючейЦиклПослеОшибкиВызоваПолучитьСледующийКонтейнерКлючей", ЭтотОбъект),
		Контекст.ТекущееИмя, Контекст.ПервыйПроход);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьИменаКонтейнеровКлючей.
&НаКлиенте
Процедура ПолучитьИменаКонтейнеровКлючейЦиклПослеОшибкиВызоваПолучитьСледующийКонтейнерКлючей(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить имя следующего контейнера ключей по причине:
			           |%1'"),
			ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьИменаКонтейнеровКлючей.
&НаКлиенте
Процедура ПолучитьИменаКонтейнеровКлючейЦиклПослеВызоваПолучитьСледующийКонтейнерКлючей(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("РезультатПослеВызоваПолучитьСледующийКонтейнерКлючей",       Результат);
	Контекст.Вставить("ПараметрыВызоваПослеВызоваПолучитьСледующийКонтейнерКлючей", ПараметрыВызова);
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"ПолучитьИменаКонтейнеровКлючейЦиклПослеВызоваПолучитьСледующийКонтейнерКлючейПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьИменаКонтейнеровКлючей.
&НаКлиенте
Процедура ПолучитьИменаКонтейнеровКлючейЦиклПослеВызоваПолучитьСледующийКонтейнерКлючейПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ПолучитьИменаКонтейнеровКлючейЦиклПослеОшибкиВызоваПолучитьСледующийКонтейнерКлючей(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Результат       = Контекст.РезультатПослеВызоваПолучитьСледующийКонтейнерКлючей;
	ПараметрыВызова = Контекст.ПараметрыВызоваПослеВызоваПолучитьСледующийКонтейнерКлючей;
	
	Если Не Результат Тогда
		Если Контекст.ПервыйПроход Тогда
			Контекст.ПервыйПроход = Ложь;
			ПолучитьИменаКонтейнеровКлючейЦиклНачало(Контекст);
		Иначе
			Имена = "";
			Для каждого ЭлементСписка Из Контекст.СписокИмен Цикл
				УникальноеИмя = ЭлементСписка.Значение;
				
				Если УникальноеИмя = ЭлементСписка.Представление
				   И СтрНайти(УникальноеИмя, "/") = 0
				   И СтрНайти(УникальноеИмя, "\") = 0
				   И СтрНайти(УникальноеИмя, ":") = 0 Тогда
					
					// ViPNet 3.2 (основная папка контейнеров не указана).
					УникальноеИмя = "\Infotecs\Containers\" + УникальноеИмя;
				КонецЕсли;
				
				Имена = Имена + Символы.ПС + УникальноеИмя;
				Имена = Имена + Символы.ПС + ЭлементСписка.Представление;
				Имена = Имена + Символы.ПС;
			КонецЦикла;
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, СокрЛП(Имена));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекущееИмя = ПараметрыВызова[0];
	
	Если Контекст.ПервыйПроход Тогда
		Контекст.СписокИмен.Добавить(ТекущееИмя);
	Иначе
		Контекст.Индекс = Контекст.Индекс + 1;
		Контекст.СписокИмен[Контекст.Индекс].Представление = ТекущееИмя;
	КонецЕсли;
	
	ПолучитьИменаКонтейнеровКлючейЦиклНачало(Контекст);
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОбъектКриптографии(ОбработкаПродолжения, НазначениеРасширенияДляРаботыСФайлами, НазначениеВнешнейКомпонентыКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	Контекст.Вставить("НазначениеВнешнейКомпонентыКриптографии", НазначениеВнешнейКомпонентыКриптографии);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПодключенияРасширенияРаботыСФайлами",
			ЭтотОбъект, Контекст),
		НазначениеРасширенияДляРаботыСФайлами,
		Ложь);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеПодключенияРасширенияРаботыСФайлами(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = Контекст.НазначениеВнешнейКомпонентыКриптографии;
	// Объект создается на одно действие до исключения, кэширование на время сеанса не подходит.
	ПараметрыПодключения.Кэшировать = Ложь;
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("BinaryDataS");
	ПараметрыПодключения.ИдентификаторыСозданияОбъектов.Добавить("CryptS");
	
	// РаботаСДвоичнымиДанными.
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(
		Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПодключенияКомпоненты",
			ЭтотОбъект, Контекст), Неопределено,
		"Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Макет.КомпонентаОбмена",
		ПараметрыПодключения);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеПодключенияКомпоненты(Результат, Контекст) Экспорт
	
	Если Результат.Подключено Тогда
		РаботаСДвоичнымиДанными = Результат.ПодключаемыйМодуль.Получить("BinaryDataS");
		Криптография = Результат.ПодключаемыйМодуль.Получить("CryptS");
	Иначе
		РаботаСДвоичнымиДанными = Неопределено;
		Криптография = Неопределено;
		
		Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			// Пользователь отказался от установки внешней компоненты.
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, Ложь);
		Иначе
			ПоказатьПредупреждение(
				Новый ОписаниеОповещения("СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке", ЭтотОбъект, Контекст),
				Результат.ОписаниеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Криптография.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеУстановкиНеВыводитьСообщенияОбОшибках", ЭтотОбъект, Контекст),
		Истина);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеУстановкиНеВыводитьСообщенияОбОшибках(Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	ПерсональныеНастройки = ЭлектроннаяПодписьКлиент.ПерсональныеНастройки();
	ПутиКПрограммам = ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования;
	
	Строки = СписокПрограмм.НайтиСтроки(Новый Структура("Ссылка", Объект.Программа));
	ИмяПрограммы = Строки[0].ИмяПрограммы;
	ТипПрограммы = Строки[0].ТипПрограммы;
	ПутьКПрограмме = Строка(ПутиКПрограммам.Получить(Объект.Программа));
	
	Криптография.НачатьВызовСоздатьМенеджераКриптографии(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографии", ЭтотОбъект, Контекст,
			"СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии", ЭтотОбъект),
		ИмяПрограммы, ПутьКПрограмме, ТипПрограммы);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Криптография = Неопределено;
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения(
			"СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке", ЭтотОбъект, Контекст),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Программа электронной подписи не доступна через внешнюю компоненту по причине:
			           |%1'"),
			ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке)));
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографии(Результат, ПараметрыВызова, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Криптография.НачатьПолучениеСписокОшибок(Новый ОписаниеОповещения(
		"СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографииПослеПолученияСписокОшибок", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеВызоваСоздатьМенеджераКриптографииПослеПолученияСписокОшибок(СписокОшибок, Контекст) Экспорт
	
	Если Не ВозможноПродолжениеПослеОперацииКомпоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		СоздатьОбъектКриптографииПослеОшибкиВызоваСоздатьМенеджераКриптографии(СписокОшибок, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, Истина);
	
КонецПроцедуры

// Продолжение процедуры СоздатьОбъектКриптографии.
&НаКлиенте
Процедура СоздатьОбъектКриптографииПослеПредупрежденияОбОшибке(Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, Ложь);
	
КонецПроцедуры

// Создание каталога временных файлов компоненты ExtIntgr.

&НаКлиенте
Процедура ПолучитьКаталогВременныхФайловКомпоненты(Оповещение)
	
	Контекст = Новый Структура("Оповещение", Оповещение);
	
	РаботаСДвоичнымиДанными.НачатьВызовПолучитьКаталогВременныхФайлов(Новый ОписаниеОповещения(
			"ПолучитьКаталогВременныхФайловКомпонентыПослеВызова", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьКаталогВременныхФайловКомпоненты.
&НаКлиенте
Процедура ПолучитьКаталогВременныхФайловКомпонентыПослеВызова(Каталог, ПараметрыВызова, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение,
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог));
	
КонецПроцедуры

// Прекращение операции компоненты, если форма закрыта.
&НаКлиенте
Функция ВозможноПродолжениеПослеОперацииКомпоненты()
	
	Если Открыта() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Криптография = Неопределено;
	
	ПоказатьПредупреждение(,
		НСтр("ru = 'Заявление на выпуск сертификата было закрыто, операция отменена.'"));
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
