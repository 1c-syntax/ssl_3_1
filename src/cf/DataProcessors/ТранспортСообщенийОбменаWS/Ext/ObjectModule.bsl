///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СообщениеОбмена Экспорт; // При получении - имя полученного файла во ВременныйКаталог. При отправке - имя файла, который необходимо отправить
Перем ВременныйКаталог Экспорт; // Временный каталог для сообщений обмена.
Перем ИдентификаторКаталога Экспорт;
Перем Корреспондент Экспорт;
Перем ИмяПланаОбмена Экспорт;
Перем ИмяПланаОбменаКорреспондента Экспорт;
Перем СообщениеОбОшибке Экспорт;
Перем СообщениеОбОшибкеЖР Экспорт;

Перем ШаблоныИменДляПолученияСообщения Экспорт;
Перем ИмяСообщенияДляОтправки Экспорт;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ОтправитьДанные
Функция ОтправитьДанные(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Попытка
		Результат = ОтправитьСообщениеОбмена(СообщениеДляСопоставленияДанных);
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ВыгрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПолучитьДанные
Функция ПолучитьДанные() Экспорт

	Попытка
		Результат = ПолучитьСообщениеОбмена();
	Исключение
		
		СообщениеОбОшибке = НСтр("ru = 'При выгрузке данных возникли ошибки во второй информационной базе:'",
			ОбщегоНазначения.КодОсновногоЯзыка())  + Символы.ПС;
		СообщениеОбОшибкеЖР = СообщениеОбОшибке;
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке(), Истина);
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПараметрыКорреспондента
Функция ПараметрыКорреспондента(НастройкиПодключения) Экспорт
	
	Результат = ТранспортСообщенийОбмена.СтруктураРезультатаПолученияПараметровКорреспондента();
	Результат.Вставить("ИмяПланаОбменаКорреспондента", ИмяПланаОбменаКорреспондента);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("WSURLВебСервиса", АдресВебСервиса);
	ПараметрыПодключения.Вставить("WSИмяПользователя", ИмяПользователя);
	ПараметрыПодключения.Вставить("WSПароль", Пароль);
	
	Попытка
		
		ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(ПараметрыПодключения);
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Результат.ПодключениеУстановлено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
				
		Возврат Результат;
		
	КонецПопытки;
		
	ВерсияИнтерфейса = ОбменДаннымиВебСервис.МаксимальнаяОбщаяВерсияИнтерфейсаОбмена(ВерсииКорреспондента);
	
	Если НЕ СтрНайти("3.0.1.1, 3.0.2.1, 3.0.2.2", ВерсияИнтерфейса)  Тогда
			
		СообщениеОбОшибке = НСтр("ru = 'Корреспондент не поддерживает версию интерфейса 3.0.1.x ""ОбменДанными"".
								|Для настройки подключения обновите конфигурацию корреспондента, или начните настройку из него.'");
		
		Результат.ПодключениеРазрешено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
			
		Возврат Результат;
		
	КонецЕсли;
		
	Прокси = Прокси();
	
	Если Прокси = Неопределено Тогда
		
		Результат.ПодключениеУстановлено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		ДополнительныеПараметры.Вставить("ЭтоПланОбменаXDTO", Истина);
		ДополнительныеПараметры.Вставить("ИдентификаторНастройки", НастройкиПодключения.ИдентификаторНастройки);
	КонецЕсли;
	
	КодЭтогоУзла = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().Код;
	
	ПараметрыИБ = ОбменДаннымиВебСервис.ПолучитьПараметрыИБ(
		Прокси, ИмяПланаОбменаКорреспондента, КодЭтогоУзла, СообщениеОбОшибке, 0, ДополнительныеПараметры);
	
	ПараметрыКорреспондента = СериализаторXDTO.ПрочитатьXDTO(ПараметрыИБ);
	
	Если Не ПараметрыКорреспондента.ПланОбменаСуществует Тогда
		
		Текст = НСтр("ru = 'В корреспонденте не найден план обмена ""%1"".
			|Убедитесь, что
			| - выбран правильный вид приложения для настройки обмена;
			| - указан правильный адрес приложения в Интернете.'");
		
		СообщениеОбОшибке = СтрШаблон(Текст, ИмяПланаОбмена);
		
		Результат.ПодключениеУстановлено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ПараметрыКорреспондентаПолучены = Истина;
	Результат.ПараметрыКорреспондента = ПараметрыКорреспондента;
	Результат.ИмяПланаОбменаКорреспондента = ПараметрыКорреспондента.ИмяПланаОбмена;
	Результат.ПодключениеУстановлено = Истина;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	ВерсияКонфигурации = Результат.ПараметрыКорреспондента.ВерсияКонфигурации;
	ТранспортСообщенийОбмена.ПриПодключенииККорреспонденту(Отказ, ИмяПланаОбмена, ВерсияКонфигурации, СообщениеОбОшибке);
	
	Если Отказ Тогда
		
		Результат.ПодключениеРазрешено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ТранспортСообщенийОбмена.ПроверитьДублированиеСинхронизаций(ИмяПланаОбмена, ПараметрыКорреспондента, Результат);
	
	Результат.ПодключениеРазрешено = Истина;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПередВыгрузкойДанных
Функция ПередВыгрузкойДанных(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Возврат Истина;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.СохранитьНастройкиВКорреспонденте 
Функция СохранитьНастройкиВКорреспонденте(НастройкиПодключения) Экспорт
	
	Прокси = Прокси();
	
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиПодключенияКорреспондента = Новый Структура;
	Для Каждого ЭлементНастройки Из НастройкиПодключения Цикл
		НастройкиПодключенияКорреспондента.Вставить(ЭлементНастройки.Ключ);
	КонецЦикла;
		
	НастройкиПодключенияКорреспондента.ВариантРаботыМастера   = "ПродолжитьНастройкуОбменаДанными";
	НастройкиПодключенияКорреспондента.ВариантНастройкиОбмена = НастройкиПодключения.ВариантНастройкиОбмена;
	
	НастройкиПодключенияКорреспондента.ИмяПланаОбмена               = НастройкиПодключения.ИмяПланаОбменаКорреспондента;
	НастройкиПодключенияКорреспондента.ИмяПланаОбменаКорреспондента = НастройкиПодключения.ИмяПланаОбмена;
	НастройкиПодключенияКорреспондента.ФорматОбмена                 = НастройкиПодключения.ФорматОбмена;
	
	НастройкиПодключенияКорреспондента.ИспользоватьПрефиксыДляНастройкиОбмена =
		НастройкиПодключения.ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента;
	
	НастройкиПодключенияКорреспондента.ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента =
		НастройкиПодключения.ИспользоватьПрефиксыДляНастройкиОбмена;
	
	НастройкиПодключенияКорреспондента.ПрефиксИнформационнойБазыИсточника = НастройкиПодключения.ПрефиксИнформационнойБазыПриемника;
	НастройкиПодключенияКорреспондента.ПрефиксИнформационнойБазыПриемника = НастройкиПодключения.ПрефиксИнформационнойБазыИсточника;
	
	Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(НастройкиПодключения.ИмяПланаОбмена) Тогда
		НастройкиПодключенияКорреспондента.ВерсияФорматаОбмена = НастройкиПодключения.ВерсияФорматаОбмена;
		
		ТаблицаОбъекты = ОбменДаннымиXDTOСервер.ПоддерживаемыеОбъектыФормата(
			НастройкиПодключения.ИмяПланаОбмена, "ОтправкаПолучение", НастройкиПодключения.УзелИнформационнойБазы);
		
		НастройкиПодключенияКорреспондента.ПоддерживаемыеОбъектыФормата = Новый ХранилищеЗначения(ТаблицаОбъекты, Новый СжатиеДанных(9));
	КонецЕсли;
	
	СтрокаНастроекПодключенияXML = Обработки.ТранспортСообщенийОбменаWS.НастройкиПодключенияВXML(НастройкиПодключения);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("НастройкиПодключения", НастройкиПодключенияКорреспондента);
	ПараметрыПодключения.Вставить("СтрокаПараметровXML",  СтрокаНастроекПодключенияXML);
	
	Попытка
		ОбменДаннымиВебСервис.СоздатьУзелОбмена(Прокси, ПараметрыПодключения);
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ТребуетсяАутентификация
Функция ТребуетсяАутентификация() Экспорт
	
	Возврат ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Или НЕ ЗапомнитьПароль;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.УдалитьНастройкуСинхронизацииВКорреспонденте
Функция УдалитьНастройкуСинхронизацииВКорреспонденте() Экспорт
	
	Прокси = Прокси();
	
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураНастроекОбмена = ОбменДаннымиСервер.НастройкиОбменаДляУзлаИнформационнойБазы(Корреспондент, "УдалениеУзла");

	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеОбменаДанными();
	СтруктураНастроекОбмена.ДействиеПриОбмене = Неопределено;
	
	Попытка
		ОбменДаннымиВебСервис.УдалитьУзелОбмена(Прокси, СтруктураНастроекОбмена);
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодключениеУстановлено() Экспорт
 	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресWSDL", АдресВебСервиса + "/ws/InterfaceVersion?wsdl");
	ПараметрыПодключения.Вставить("URIПространстваИмен", "http://www.1c.ru/SaaS/1.0/WS");
	ПараметрыПодключения.Вставить("ИмяСервиса", "InterfaceVersion");
	ПараметрыПодключения.Вставить("ИмяПользователя", ИмяПользователя);
	ПараметрыПодключения.Вставить("Пароль", Пароль);
	ПараметрыПодключения.Вставить("Таймаут", 7);
	
	Попытка
		
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Прокси.GetVersions("ОбменДанными");
		Возврат Истина;
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
	
	КонецПопытки;
	
КонецФункции

Функция ОтправитьСообщениеОбмена(СообщениеДляСопоставленияДанных)
	
	Прокси = Прокси("ВыгрузкаДанных");
	
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Корреспондент) Тогда
		ОбменДаннымиВебСервис.ПоместитьФайлВХранилищеВСервисе(Прокси, СообщениеОбмена, 1024);
		Возврат Истина;
	КонецЕсли;
	
	СтруктураНастроекОбмена = ОбменДаннымиСервер.НастройкиОбменаДляУзлаИнформационнойБазы(
		Корреспондент, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СостояниеНастройки = ОбменДаннымиВебСервис.СостояниеНастройки(Прокси, СтруктураНастроекОбмена,,Отказ,СообщениеОбОшибке);
	
	Если Отказ Тогда
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ВыгрузкаДанных");
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторФайлаУИД = ОбменДаннымиВебСервис.ПоместитьФайлВХранилищеВСервисе(Прокси, СообщениеОбмена, 1024);
	
	ИдентификаторФайлаСтрокой = Строка(ИдентификаторФайлаУИД);
	
	Если СообщениеДляСопоставленияДанных
		И (СостояниеНастройки.ПоддерживаетсяСопоставлениеДанных
		Или Не СостояниеНастройки.НастройкаСинхронизацииДанныхЗавершена) Тогда
		
		ОбменДаннымиВебСервис.ПоместитьСообщениеДляСопоставленияДанных(
			Прокси, СтруктураНастроекОбмена, ИдентификаторФайлаСтрокой);
		
	Иначе
		
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		
		ОбменДаннымиВебСервис.ВыполнитьЗагрузкуДанных(Прокси, СтруктураНастроекОбмена, ПараметрыОбмена, ИдентификаторФайлаСтрокой);
		
		Если ПараметрыОбмена.ДлительнаяОперация Тогда
			
			ОбменДаннымиВебСервис.ОжиданиеЗавершенияОперации(
				СтруктураНастроекОбмена, ПараметрыОбмена, Прокси, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСообщениеОбмена()
		
	Прокси = Прокси("ЗагрузкаДанных");
	
	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Корреспондент) Тогда
		СообщениеОбмена = ОбменДаннымиВебСервис.ПолучитьФайлИзХранилищаВСервисе(Прокси, ШаблоныИменДляПолученияСообщения[0],,1024);
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ДлительнаяОперацияРазрешена= Истина;
	ПараметрыОбмена.ИнтервалОжиданияНаСервере = 15;
	СтруктураНастроекОбмена = ОбменДаннымиСервер.НастройкиОбменаДляУзлаИнформационнойБазы(
		Корреспондент, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	
	ОбменДаннымиВебСервис.ВыполнитьВыгрузкуДанных(Прокси, СтруктураНастроекОбмена, ПараметрыОбмена);
	
	Если ПараметрыОбмена.ДлительнаяОперация Тогда
		
		ОбменДаннымиВебСервис.ОжиданиеЗавершенияОперации(
			СтруктураНастроекОбмена, ПараметрыОбмена, Прокси, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		
	КонецЕсли;
	
	УИДФайлаСообщения = Новый УникальныйИдентификатор(ПараметрыОбмена.ИдентификаторФайла);
	СообщениеОбмена = ОбменДаннымиВебСервис.ПолучитьФайлИзХранилищаВСервисе(
		Прокси, УИДФайлаСообщения, Корреспондент, 1024);
	
	Возврат Истина;
	
КонецФункции

Функция Прокси(ДействиеПриОбмене = Неопределено)
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресВебСервиса", АдресВебСервиса);
	ПараметрыПодключения.Вставить("ИмяПользователя", ИмяПользователя);
	ПараметрыПодключения.Вставить("Пароль", Пароль);
	
	Прокси = ОбменДаннымиВебСервис.WSПрокси(ПараметрыПодключения, СообщениеОбОшибкеЖР, СообщениеОбОшибке);
	
	Если Прокси = Неопределено Тогда
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
	КонецЕсли;
		
	Возврат Прокси;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ВременныйКаталог = Неопределено;
СообщенияОбмена = Неопределено;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли