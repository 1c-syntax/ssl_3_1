///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Корреспондент") 
		И Не Параметры.Свойство("ИдентификаторТранспорта") 
		И Не Параметры.Свойство("ИмяПланаОбмена")
		И Не Параметры.Свойство("НастройкиТранспорта") Тогда
		
		ВызватьИсключение НСтр("ru = 'Эта форма не предназначена для непосредственного открытия.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
	КонецЕсли;
	
	Корреспондент = Параметры.Корреспондент;
	ИдентификаторТранспорта = Параметры.ИдентификаторТранспорта;
	ИмяПланаОбмена = Параметры.ИмяПланаОбмена;
	НастройкиТранспорта = Параметры.НастройкиТранспорта;
	
	ДанныеАутентификации = Новый Структура;
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
		АдресДляВосстановленияПароляУчетнойЗаписи = АвтономнаяРаботаСлужебный.АдресДляВосстановленияПароляУчетнойЗаписи();
	КонецЕсли;
	
	Элементы.ЗабылиПароль.Видимость = Не ПустаяСтрока(АдресДляВосстановленияПароляУчетнойЗаписи);
	НеНапоминатьОДолгойСинхронизации = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса")
		И ОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто() Тогда
		
		МодульАвтономнаяРабота = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРабота");
		
		НеНапоминатьОДолгойСинхронизации = Не МодульАвтономнаяРабота.ФлагНастройкиВопросаОДолгойСинхронизации();
		
	КонецЕсли;
	
	Элементы.ГруппаПредупрежденияДолгойСинхронизации.Видимость = Не НеНапоминатьОДолгойСинхронизации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СохранитьФлагВопросаОДолгойСинхронизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		ДанныеАутентификации.Вставить("ИмяПользователя", ИмяПользователя); 
	КонецЕсли;
	
	ДанныеАутентификации.Вставить("Пароль", Пароль);
	
	Элементы.ВыполнениеПроверкиПодключения.ТекущаяСтраница = Элементы.ОжиданиеПроверкиПодключения;
	
	ФоновоеЗадание = ПроверкаАутентификацииНачало(
		?(ЗначениеЗаполнено(Корреспондент), Корреспондент, ИмяПланаОбмена),
		ИдентификаторТранспорта,
		ДанныеАутентификации);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПроверкаАутентификацииЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗабылиПароль(Команда)
	
	ТранспортСообщенийОбменаКлиент.ОткрытьИнструкциюКакИзменитьПарольСинхронизацииДанных(АдресДляВосстановленияПароляУчетнойЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьФлагВопросаОДолгойСинхронизации()
	
	Настройки = Неопределено;
	Если СохранитьФлагВопросаОДолгойСинхронизацииСервер(Не НеНапоминатьОДолгойСинхронизации, Настройки) Тогда
		ИзмененныеНастройки = Новый Массив;
		ИзмененныеНастройки.Добавить(Настройки);
		Оповестить("ИзмененыНастройкиПользователя", ИзмененныеНастройки, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьФлагВопросаОДолгойСинхронизацииСервер(Знач Флаг, Настройки = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса")
		И ОбменДаннымиСервер.ЭтоАвтономноеРабочееМесто() Тогда
		
		МодульАвтономнаяРабота = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРабота");
		НадоСохранять = Флаг <> МодульАвтономнаяРабота.ФлагНастройкиВопросаОДолгойСинхронизации();
		
		Если НадоСохранять Тогда
			МодульАвтономнаяРабота.ФлагНастройкиВопросаОДолгойСинхронизации(Флаг, Настройки);
		КонецЕсли;
		
	Иначе
		НадоСохранять = Ложь;
	КонецЕсли;
	
	Возврат НадоСохранять;
	
КонецФункции

&НаСервере
Функция ПроверкаАутентификацииНачало(Знач Корреспондент, Знач ИдентификаторТранспорта, Знач ДанныеАутентификации) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка подключения к корреспонденту'", ОбщегоНазначения.КодОсновногоЯзыка());
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ТранспортСообщенийОбмена.ПроверитьАутентификацию",
		Корреспондент, ИдентификаторТранспорта, НастройкиТранспорта, ДанныеАутентификации);
	
КонецФункции
	
&НаКлиенте
Процедура ПроверкаАутентификацииЗавершение(ФоновоеЗадание, ДополнительныеПараметры) Экспорт 
	
	Если ФоновоеЗадание = Неопределено Тогда
		
		Возврат;
	
	ИначеЕсли ФоновоеЗадание.Статус = "Ошибка" Тогда 
		
		Элементы.ВыполнениеПроверкиПодключения.ТекущаяСтраница = Элементы.ЗапросПароляПользователя;
		СообщениеОбОшибке = ФоновоеЗадание.КраткоеПредставлениеОшибки
			+ Символы.ПС + НСтр("ru = 'Техническую информацию об ошибке см. в журнале регистрации.'");
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);

	Иначе
		
		Закрыть(ДанныеАутентификации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти