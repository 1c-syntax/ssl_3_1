///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Процедура загружает настройки ТЧ, если это первое открытие
// то в ТЧ добавляются все ключевые операции из справочника.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ОценкаПроизводительностиСлужебный.ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
		ЕстьБСП = Ложь;
	Иначе
		ЕстьБСП = Истина;
	КонецЕсли;
	
	ОбщаяПроизводительностьСистемы = ОценкаПроизводительностиСлужебный.ПолучитьЭлементОбщаяПроизводительностьСистемы();
	Если ОбщаяПроизводительностьСистемы.Пустая() Тогда
		Объект.ОбщаяПроизводительностьСистемы = НСтр("ru = 'Общая производительность системы'");
	Иначе
		Объект.ОбщаяПроизводительностьСистемы = ОбщаяПроизводительностьСистемы;
	КонецЕсли;
	
	Попытка
		ЗагружаемаяНастройка = ЗагрузитьКлючевыеОперации(Объект.ОбщаяПроизводительностьСистемы);
		Объект.Производительность.Загрузить(ЗагружаемаяНастройка);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось загрузить настройки.'");
		ОценкаПроизводительностиСлужебный.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Если ПустаяСтрока(Объект.ВариантФильтраКомментарий) Тогда
		Объект.ВариантФильтраКомментарий = "НеФильтровать";
	КонецЕсли;
		
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаОбновлена = Ложь;
	ДиаграммаОбновлена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ОценкаПроизводительности.Форма.ФормаОтбора") Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ОбновитьПоказатели(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроизводительностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Не ТаблицаОбновлена Или Не ДиаграммаОбновлена Тогда
		Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
			ДиаграммаОбновлена = Истина;
		ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
			ТаблицаОбновлена = Истина;
		КонецЕсли;
		ОбновитьПоказатели();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦелевоеВремяПриИзменении(Элемент)
	
	ТД = Элементы.Производительность.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьЦелевоеВремя(ТД.КлючеваяОперация, ТД.ЦелевоеВремя);
	ОбновитьПоказатели();
	
КонецПроцедуры

// Отображение истории выполнения ключевой операции.
//
&НаКлиенте
Процедура ПроизводительностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТЧ = Объект.Производительность.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не СтрНачинаетсяС(Поле.Имя, "Производительность")
		Или СтрокаТЧ.КлючеваяОперация = Объект.ОбщаяПроизводительностьСистемы Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = 0;
	ОкончаниеПериода = 0;
	ИндексПериода = Число(Сред(Поле.Имя, 19));
	Если Не ВычислитьДатыВременногоОтрезка(НачалоПериода, ОкончаниеПериода, ИндексПериода) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИстории = Новый Структура("КлючеваяОперация, ДатаНачала, ДатаОкончания", СтрокаТЧ.КлючеваяОперация, НачалоПериода, ОкончаниеПериода);
	
	ПараметрыОткрытия = Новый Структура("НастройкиИстории", НастройкиИстории);
	ОткрытьФорму("Обработка.ОценкаПроизводительности.Форма.ИсторияВыполнения", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТД = Элементы.Производительность.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Врем = Объект.Производительность;
	ТекущийИндекс = Врем.Индекс(ТД);
	
	Если Врем.Количество() <= 1
		ИЛИ ТекущийИндекс = 0
		ИЛИ Врем[ТекущийИндекс - 1].КлючеваяОперация = Объект.ОбщаяПроизводительностьСистемы
		ИЛИ ТД.КлючеваяОперация = Объект.ОбщаяПроизводительностьСистемы Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = -1;
	ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТД = Элементы.Производительность.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Врем = Объект.Производительность;
	ТекущийИндекс = Врем.Индекс(ТД);
	
	Если Врем.Количество() <= 1
		ИЛИ ТекущийИндекс = Врем.Количество() - 1
		ИЛИ Врем[ТекущийИндекс + 1].КлючеваяОперация = Объект.ОбщаяПроизводительностьСистемы
		ИЛИ ТД.КлючеваяОперация = Объект.ОбщаяПроизводительностьСистемы Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = 1;
	ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФорму("Обработка.ОценкаПроизводительности.Форма.АвтоматическийЭкспортЗамеровПроизводительности", , ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьAPDEX(Команда)
	
	СтрокаТЧ = Объект.Производительность.НайтиПоИдентификатору(Элементы.Производительность.ТекущаяСтрока);
	Элемент = Элементы.Производительность.ТекущийЭлемент;
	
	Если Не СтрНачинаетсяС(Элемент.Имя, "Производительность")
		ИЛИ СтрокаТЧ.КлючеваяОперация = Объект.ОбщаяПроизводительностьСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ[Элемент.Имя] = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Отсутствуют замеры производительности.
			|Рассчитать целевое время невозможно.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УказатьAPDEXЗавершение", ЭтотОбъект);
	Подсказка = НСтр("ru = 'Введите желаемое значение APDEX'"); 
	ЗначениеAPDEX = 0;
	ПоказатьВводЧисла(Оповещение, ЗначениеAPDEX, Подсказка, 3, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	ОткрытьФорму("Обработка.ОценкаПроизводительности.Форма.ФормаОтбора", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлючевуюОперацию(Команда)
	ОткрытьФормуВыбора();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКлючевуюОперацию(Команда)
	УдалитьКлючевуюОперациюНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Приоритет.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеВремя.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Объект.ОбщаяПроизводительностьСистемы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьAPDEXЗавершение(Знач ЗначениеAPDEX, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеAPDEX = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если 0 > ЗначениеAPDEX Или ЗначениеAPDEX > 1 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Введен неправильный показатель APDEX.
			|Допустимые значения от 0 до 1.'"));
		Возврат;
	КонецЕсли;
	
	ЗначениеAPDEX = ?(ЗначениеAPDEX = 0, 0.001, ЗначениеAPDEX);
	
	СтрокаТЧ = Объект.Производительность.НайтиПоИдентификатору(Элементы.Производительность.ТекущаяСтрока);
	Элемент = Элементы.Производительность.ТекущийЭлемент;
	СтрокаТЧ[Элемент.Имя] = ЗначениеAPDEX;
	
	ИндексПериода = Число(Сред(Элемент.Имя, 19));
	ЦелевоеВремя = РассчитатьЦелевоеВремя(СтрокаТЧ.КлючеваяОперация, ЗначениеAPDEX, ИндексПериода);
	
	СтрокаТЧ.ЦелевоеВремя = ЦелевоеВремя;
	ЦелевоеВремяПриИзменении(Элемент);
КонецПроцедуры

// Процедура рассчитывает показатели производительности.
//
&НаСервере
Процедура ОбновитьПоказатели(ЗначенияОтбора = Неопределено)
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
		ДиаграммаОбновлена = Истина;
		ТаблицаОбновлена = Ложь;
	ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
		ТаблицаОбновлена = Истина;
		ДиаграммаОбновлена = Ложь;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Не НастройкаВыполнена() Тогда
		Возврат;
	КонецЕсли;
	
	// Получение итоговой ТаблицаКлючевыхОпераций которая будет выведена пользователю.
	ТаблицаКлючевыхОпераций = ОбработкаОбъект.ПоказателиПроизводительности();
	Если ТаблицаКлючевыхОпераций = Неопределено Тогда
		ОценкаПроизводительностиСлужебный.СообщитьПользователю(НСтр("ru = 'Период установлен не верно.'"));
		Возврат;
	КонецЕсли;
	
	Если ТаблицаКлючевыхОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначенияОтбора <> Неопределено Тогда
		УстановитьОтборТаблицаКлючевыхОпераций(ТаблицаКлючевыхОпераций, ЗначенияОтбора);
	КонецЕсли;
	
	Если Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаДиаграмма" Тогда
		
		ОбновитьДиаграмму(ТаблицаКлючевыхОпераций);
		
	ИначеЕсли Элементы.Форма.ТекущаяСтраница.Имя = "СтраницаТаблица" Тогда
		
		ОбработатьРеквизитыОбъекта(ТаблицаКлючевыхОпераций.Колонки);
		Объект.Производительность.Загрузить(ТаблицаКлючевыхОпераций);
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет целевое время для указанного значения APDEX.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, ключевая операция, для которой следует рассчитать целевое время.
//  ЗначениеAPDEX - Число, APDEX, для которого необходимо подобрать целевое время.
//  ИндексПериода - Число, индекс периода, для которого будет вычислено целевое время.
//
// Возвращаемое значение:
//  Число - целевое время, при котором APDEX будет равен указанному значению.
//
&НаСервере
Функция РассчитатьЦелевоеВремя(КлючеваяОперация, ЗначениеAPDEX, ИндексПериода)
	
	ТаблицаКлючевыхОпераций = ТаблицаКлючевыхОперацийДляВычисленияAPDEX();
	СтрокаТаблицаКлючевыхОпераций = ТаблицаКлючевыхОпераций.Добавить();
	СтрокаТаблицаКлючевыхОпераций.КлючеваяОперация = КлючеваяОперация;
	СтрокаТаблицаКлючевыхОпераций.Приоритет = 1;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	ШагЧисло = 0;
	КоличествоШагов = 0;
	Если Не ЭтаОбработка.ПериодичностьДиаграммы(ШагЧисло, КоличествоШагов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоПериода = Объект.ДатаНачала + (ШагЧисло * ИндексПериода);
	ОкончаниеПериода = НачалоПериода + ШагЧисло - 1;
	
	ПараметрыВычисления = ЭтаОбработка.СтруктураПараметровДляРасчетаАпдекса();
	ПараметрыВычисления.ШагЧисло = ШагЧисло;
	ПараметрыВычисления.КоличествоШагов = 1;
	ПараметрыВычисления.ДатаНачала = НачалоПериода;
	ПараметрыВычисления.ДатаОкончания = ОкончаниеПериода;
	ПараметрыВычисления.ВыводитьИтоги = Ложь;
	
	ЦелевоеВремя = 0.01;
	ПредыдущееЦелевоеВремя = ЦелевоеВремя;
	ШагСекунд = 1;
	Пока Истина Цикл
		
		ТаблицаКлючевыхОпераций[0].ЦелевоеВремя = ЦелевоеВремя;
		ПараметрыВычисления.ТаблицаКлючевыхОпераций = ТаблицаКлючевыхОпераций;
		
		ТаблицаКлючевыхОперацийРассчитанная = ЭтаОбработка.ВычислитьAPDEX(ПараметрыВычисления);
		ЗначениеAPDEXРассчитанное = ТаблицаКлючевыхОперацийРассчитанная[0][3];
		
		Если ЗначениеAPDEXРассчитанное < ЗначениеAPDEX Тогда
			
			ПредыдущееЦелевоеВремя = ЦелевоеВремя;
			ЦелевоеВремя = ЦелевоеВремя + ШагСекунд;
		
		ИначеЕсли ЗначениеAPDEXРассчитанное > ЗначениеAPDEX Тогда
			
			Если ШагСекунд = 0.01 Или ЦелевоеВремя = 0.01 Тогда
				Прервать;
			КонецЕсли;
			
			ШагСекунд = ШагСекунд / 10;
			ЦелевоеВремя = ПредыдущееЦелевоеВремя + ШагСекунд;
		
		ИначеЕсли ЗначениеAPDEXРассчитанное = ЗначениеAPDEX Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЦелевоеВремя;
	
КонецФункции

// Обрабатывает реквизиты табличной части "Производительность".
//
// Параметры:
//  КолонкиТаблицаКлючевыхОпераций - КоллекцияКолонокТаблицыЗначений, из них вычисляется какие реквизиты удалить, а
//                                   какие оставить.
//
&НаСервере
Процедура ОбработатьРеквизитыОбъекта(КолонкиТаблицаКлючевыхОпераций)
	
	РеквизитыОбъекта = ПолучитьРеквизиты("Объект.Производительность");
	УдаляемыеРеквизиты = УдаляемыеРеквизиты(РеквизитыОбъекта);
	
	// Колонки "Ключевая операция", "Приоритет" и "Целевое время".
	КоличествоПредопределенныхКолонок = 3;
	
	// Меняется состав колонок
	Если УдаляемыеРеквизиты.Количество() <> (КолонкиТаблицаКлючевыхОпераций.Количество() - КоличествоПредопределенныхКолонок) Тогда
		
		ИзменитьСоставРеквизитовОбъекта(КолонкиТаблицаКлючевыхОпераций, УдаляемыеРеквизиты);
		
		// Формирование списков полей для условного оформления.
		ПоляОтбора = Новый Массив;
		ПоляОформления = Новый Массив;
		Для Каждого КолонкаТаблицаКлючевыхОпераций Из КолонкиТаблицаКлючевыхОпераций Цикл
			Если КолонкиТаблицаКлючевыхОпераций.Индекс(КолонкаТаблицаКлючевыхОпераций) < КоличествоПредопределенныхКолонок Тогда
				Продолжить;
			КонецЕсли;
			ПоляОтбора.Добавить("Объект.Производительность." + КолонкаТаблицаКлючевыхОпераций.Имя);
			ПоляОформления.Добавить(КолонкаТаблицаКлючевыхОпераций.Имя);
		КонецЦикла;
		
		УстановитьУсловноеОформлениеТЧ(ПоляОтбора, ПоляОформления, УсловноеОформление, Объект.ОбщаяПроизводительностьСистемы);
		
	// Меняются только заголовки колонок.
	Иначе
		
		Сч = -1;
		Для Каждого Элемент Из Элементы.Производительность.ПодчиненныеЭлементы Цикл
			Сч = Сч + 1;
			// Пропускаем первые 3 элемента, чтобы не менять заголовки у колонок "Ключевая операция", "Приоритет" и "Целевое время".
			Если Сч < КоличествоПредопределенныхКолонок Тогда
				Продолжить;
			КонецЕсли;
			Элемент.Заголовок = КолонкиТаблицаКлючевыхОпераций[Сч].Заголовок;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяются реквизиты формы ненужные удаляются нужные добавляются.
//
// Параметры:
//  КолонкиТаблицаКлючевыхОпераций - КоллекцияКолонокТаблицыЗначений, из них вычисляется какие реквизиты удалить, а
//                                   какие оставить.
//  УдаляемыеРеквизиты - Массив, список полных имен удаляемых реквизитов
//  	имена в формате Объект.Производительность.ПроизводительностьN, где N номер.
//
&НаСервере
Процедура ИзменитьСоставРеквизитовОбъекта(КолонкиТаблицаКлючевыхОпераций, УдаляемыеРеквизиты)
	
	// Удаление колонок из табличной части "Производительность".
	Для ИндексРеквизита = 0 По УдаляемыеРеквизиты.Количество() - 1 Цикл
		
		// Имена удаляемых реквизитов Объект.Производительность.ПроизводительностьN
		// где N номер, это выражение получает строку вида ПроизводительностьN.
		Элемент = Элементы.Найти(Сред(УдаляемыеРеквизиты[ИндексРеквизита], 27));
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = ДобавляемыеРеквизиты(КолонкиТаблицаКлючевыхОпераций);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавление колонок в табличную часть "Производительность".
	РеквизитыОбъекта = ПолучитьРеквизиты("Объект.Производительность");
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		
		ИмяРеквизита = РеквизитОбъекта.Имя;
		Если СтрНачинаетсяС(ИмяРеквизита, "Производительность") Тогда
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.Производительность);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "Объект.Производительность." + ИмяРеквизита;
			Элемент.Заголовок = РеквизитОбъекта.Заголовок;
			Элемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			Элемент.Формат = "ЧЦ=5; ЧДЦ=2; ЧН=";
			Элемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает массив реквизитов формы(колонки ТЧ "Производительность"), которые надо добавить.
//
// Параметры:
//  КолонкиТаблицаКлючевыхОпераций - КоллекцияКолонокТаблицыЗначений, список колонок, которые необходимо создать.
//
// Возвращаемое значение:
//  Массив - Массив реквизитов формы.
//
&НаСервереБезКонтекста
Функция ДобавляемыеРеквизиты(КолонкиТаблицаКлючевыхОпераций)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ТипЧисло63 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 3, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого КолонкаТаблицаКлючевыхОпераций Из КолонкиТаблицаКлючевыхОпераций Цикл
		
		Если КолонкиТаблицаКлючевыхОпераций.Индекс(КолонкаТаблицаКлючевыхОпераций) < 3 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйРеквизитФормы = Новый РеквизитФормы(КолонкаТаблицаКлючевыхОпераций.Имя, ТипЧисло63, "Объект.Производительность", КолонкаТаблицаКлючевыхОпераций.Заголовок);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизитФормы);
		
	КонецЦикла;
	
	Возврат ДобавляемыеРеквизиты;
	
КонецФункции

// Функция создает массив реквизитов формы(колонки ТЧ "Производительность"), которые надо удалить
// и удаляет элементы формы связанные с реквизитами.
//
// Возвращаемое значение:
//  Массив - Массив реквизитов формы.
//
&НаСервереБезКонтекста
Функция УдаляемыеРеквизиты(РеквизитыОбъекта)
	
	УдаляемыеРеквизиты = Новый Массив;
	
	ИндексРеквизита = 0;
	Пока ИндексРеквизита < РеквизитыОбъекта.Количество() Цикл
		
		ИмяРеквизита = РеквизитыОбъекта[ИндексРеквизита].Имя;
		Если СтрНачинаетсяС(ИмяРеквизита, "Производительность") Тогда
			УдаляемыеРеквизиты.Добавить("Объект.Производительность." + ИмяРеквизита);
		КонецЕсли;
		ИндексРеквизита = ИндексРеквизита + 1;
		
	КонецЦикла;
	
	Возврат УдаляемыеРеквизиты;
	
КонецФункции

// Процедура устанавливает условное оформление ТЧ "Производительность".
//
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеТЧ(ПоляОтбора, ПоляОформления, УсловноеОформление, ОбщаяПроизводительностьСистемы);
	
	УсловноеОформление.Элементы.Очистить();
	
	// Убрать приоритет у ключевой операции ОбщаяПроизводительностьСистемы.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОбщаяПроизводительностьСистемы;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	
	// Только просмотр колонки Приоритет.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.НомерСтроки");
	ЭлементОтбора.ПравоеЗначение = 0;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Приоритет");
	
	// Только просмотр целевого времени у ключевой операции ОбщаяПроизводительностьСистемы.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОбщаяПроизводительностьСистемы;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЦелевоеВремя");
	
	// Отметка незаполненного целевого времени у всех кроме ОбщаяПроизводительностьСистемы.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	// Условие для оформления
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.КлючеваяОперация");
	ЭлементОтбора.ПравоеЗначение = ОбщаяПроизводительностьСистемы;
	//
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Производительность.ЦелевоеВремя");
	ЭлементОтбора.ПравоеЗначение = 0;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЦелевоеВремя");
	
	КоличествоПолей = ПоляОтбора.Количество() - 1;
	
	// Оформление если операция не выполнялась.
	Для ИндексПоля = 0 По КоличествоПолей Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Вид оформления
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", " ");
		// Условие для оформления
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[ИндексПоля]);
		ЭлементОтбора.ПравоеЗначение = 0;
		// Оформляемое поле
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПоляОформления[ИндексПоля]);
		
	КонецЦикла;
	
	// Оформление для показателей производительности.
	Соответствие = СоответствиеЦветовУровнюАпдекса();
	Для Каждого КлючЗначение Из Соответствие Цикл
	
		Для ИндексПоля = 0 По КоличествоПолей Цикл
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			// Вид оформления
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", КлючЗначение.Значение.Цвет);
			// Условие для оформления
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[ИндексПоля]);
			ЭлементОтбора.ПравоеЗначение = КлючЗначение.Значение.От;
			// Условие для оформления
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПоляОтбора[ИндексПоля]);
			ЭлементОтбора.ПравоеЗначение = КлючЗначение.Значение.До;
			// Оформляемое поле
			ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПоляОформления[ИндексПоля]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обновление диаграммы.
//
// Параметры:
//  ТаблицаКлючевыхОпераций - ТаблицаЗначений, данные, по которым будет обновлена диаграмма.
//
&НаСервере
Процедура ОбновитьДиаграмму(ТаблицаКлючевыхОпераций)
	
	Диаграмма = Объект.Диаграмма;
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= 1;
	Диаграмма.МинимальноеЗначение		= 0;
	Диаграмма.БазовоеЗначение			= 0;
	Диаграмма.ПропускатьБазовоеЗначение	= Истина;
	
	Диаграмма.Очистить();
	
	ТекстЗаголовка = НСтр("ru = 'Диаграмма производительности с %1 по %2 - шаг: %3'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(Объект.ДатаНачала, "ДЛФ=D"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2", Формат(Объект.ДатаОкончания, "ДЛФ=D"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%3", Строка(Объект.Шаг));
	Элементы.Диаграмма.Заголовок = ТекстЗаголовка;
	
	ТаблицаКлючевыхОпераций.Колонки.Удалить(1); // Приоритет
	ТаблицаКлючевыхОпераций.Колонки.Удалить(1); // ЦелевоеВремя
	
	Для Каждого СтрокаТаблицаКлючевыхОпераций Из ТаблицаКлючевыхОпераций Цикл
		
		Серия = Диаграмма.Серии.Добавить(СтрокаТаблицаКлючевыхОпераций.КлючеваяОперация);
		Серия.Текст = СтрокаТаблицаКлючевыхОпераций.КлючеваяОперация;
		
	КонецЦикла;
	
	ТаблицаКлючевыхОпераций.Колонки.Удалить(0); // КлючеваяОперация
	
	Для Каждого КолонкаТаблицаКлючевыхОпераций Из ТаблицаКлючевыхОпераций.Колонки Цикл
		
		Точка = Диаграмма.Точки.Добавить(КолонкаТаблицаКлючевыхОпераций.Имя);
		Точка.Текст = ?(Объект.Шаг = "Час", Лев(КолонкаТаблицаКлючевыхОпераций.Заголовок, 2), КолонкаТаблицаКлючевыхОпераций.Заголовок); //Для отображения только часов если шаг Час.
		Строка = 0;
		Столбец = ТаблицаКлючевыхОпераций.Колонки.Индекс(КолонкаТаблицаКлючевыхОпераций);
		Для Каждого Серия Из Диаграмма.Серии Цикл
			
			ЗначениеТочки = ТаблицаКлючевыхОпераций[Строка][Столбец];
			Если ЗначениеТочки <> Неопределено И ЗначениеТочки <> Null Тогда
				Диаграмма.УстановитьЗначение(Точка, Серия, ?(ЗначениеТочки = 0.001 ИЛИ ЗначениеТочки = 0, ЗначениеТочки, ЗначениеТочки - 0.001));
			КонецЕсли;	
			Строка = Строка + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Сдвигает строки табличной части и меняет приоритеты ключевых операций.
//
// Параметры:
//  НаправлениеСдвига - Число,
//  	-1, сдвиг вверх
//  	1, сдвиг вниз
//  ТекущийИндекс - Число, индекс сдвигаемой строки.
//
&НаКлиенте
Процедура ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс)
	
	Врем = Объект.Производительность;
	
	Приоритет1 = Врем[ТекущийИндекс].Приоритет;
	Приоритет2 = Врем[ТекущийИндекс + НаправлениеСдвига].Приоритет;
	
	ОбменятьПриоритеты(
		Врем[ТекущийИндекс].КлючеваяОперация,
		Приоритет1,
		Врем[ТекущийИндекс + НаправлениеСдвига].КлючеваяОперация, 
		Приоритет2);
		
	Врем[ТекущийИндекс].Приоритет = Приоритет2;
	Врем[ТекущийИндекс + НаправлениеСдвига].Приоритет = Приоритет1;
	
	Врем.Сдвинуть(ТекущийИндекс, НаправлениеСдвига);
	
КонецПроцедуры

// Устанавливает исключительную управляемую блокировку на ссылку.
//
&НаСервереБезКонтекста
Процедура ЗаблокироватьСсылку(Ссылка)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить(Ссылка.Метаданные().ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

// Начинает транзакцию и устанавливает исключительную 
// управляемую блокировку по значению ссылки.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка, ссылка, которую надо заблокировать.
//
// Возвращаемое значение:
//  Объект - объект полученный из ссылки.
//
&НаСервереБезКонтекста
Функция НачатьИзменениеОбъекта(Ссылка)
	
	ЗаблокироватьСсылку(Ссылка);
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Возврат Объект;
	
КонецФункции

// Фиксирует транзакцию и записывает объект.
//
// Параметры:
//  Объект - ЛюбойОбъект, объект, изменения которого следует зафиксировать.
//  Записывать - Булево, необходимость записи объекта перед фиксацией транзакции.
//
&НаСервереБезКонтекста
Процедура ЗафиксироватьИзменениеОбъекта(Объект, Записывать = Истина)
	
	Если Записывать Тогда
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обмен приоритетами ключевых операций.
//
// Параметры:
//  КлючеваяОперация1 - СправочникСсылка.КлючевыеОперации
//  Приоритет1 - Число, будет присвоен КлючеваяОперация2.
//  КлючеваяОперация2 - СправочникСсылка.КлючевыеОперации
//  Приоритет2 - Число, будет присвоен КлючеваяОперация1.
//
&НаСервере
Процедура ОбменятьПриоритеты(КлючеваяОперация1, Приоритет1, КлючеваяОперация2, Приоритет2)
	
	НачатьТранзакцию();
	
	Попытка
		ОбъектКлючевойОперации = НачатьИзменениеОбъекта(КлючеваяОперация1);
		ОбъектКлючевойОперации.Приоритет = Приоритет2;
		ОбъектКлючевойОперации.ДополнительныеСвойства.Вставить(ОценкаПроизводительностиКлиентСервер.НеПроверятьПриоритет());
		ЗафиксироватьИзменениеОбъекта(ОбъектКлючевойОперации);
		
		ОбъектКлючевойОперации = НачатьИзменениеОбъекта(КлючеваяОперация2);
		ОбъектКлючевойОперации.Приоритет = Приоритет1;
		ЗафиксироватьИзменениеОбъекта(ОбъектКлючевойОперации);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
 		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
 		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура открывает форму выбора справочника КлючевыеОперации
// и устанавливает отбор, чтобы в списке не было операций которые уже выбраны.
//
&НаКлиенте
Процедура ОткрытьФормуВыбора()
	
	ТЧ = Объект.Производительность;
	
	Отбор = Новый Массив;
	Для ИндексТЧ = 0 По ТЧ.Количество() - 1 Цикл
		Отбор.Добавить(ТЧ[ИндексТЧ].КлючеваяОперация);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"ДобавитьКлючевуюОперациюЗавершение",
		ЭтотОбъект);
		
	ОткрытьФорму(
		"Справочник.КлючевыеОперации.ФормаВыбора", 
		ПараметрыФормы, 
		ЭтотОбъект,
		,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлючевуюОперациюЗавершение(ПараметрыКлючевойОперации, Параметры) Экспорт
	
	Если ПараметрыКлючевойОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавитьКлючевуюОперациюСервер(ПараметрыКлючевойОперации);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКлючевуюОперациюСервер(ПараметрыКлючевойОперации)
	
	НоваяСтрока = Объект.Производительность.Добавить();
	НоваяСтрока.КлючеваяОперация = ПараметрыКлючевойОперации.КлючеваяОперация;
	НоваяСтрока.ЦелевоеВремя = ПараметрыКлючевойОперации.ЦелевоеВремя;
	НоваяСтрока.Приоритет = ПараметрыКлючевойОперации.Приоритет;
	
	Объект.Производительность.Сортировать("Приоритет");
	
КонецПроцедуры

// Вычисляет точные дату начала и окончания на выбранном отрезке.
//
// Параметры:
//  ДатаНачала [OUT] - Дата, дата начала выбранного периода.
//  ДатаОкончания [OUT] - Дата, дата окончания выбранного периода.
//  ИндексПериода [IN] - Число, индекс выбранного периода.
//
// Возвращаемое значение:
//  Булево - 
//  	Истина, даты рассчитаны
//  	Ложь, даты не рассчитаны
//
&НаСервере
Функция ВычислитьДатыВременногоОтрезка(ДатаНачала, ДатаОкончания, ИндексПериода)
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	ШагЧисло = 0;
	КоличествоШагов = 0;
	Если Не ЭтаОбработка.ПериодичностьДиаграммы(ШагЧисло, КоличествоШагов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КоличествоШагов <= ИндексПериода Тогда
		ВызватьИсключение НСтр("ru = 'Количество шагов не может быть меньше индекса.'");
	КонецЕсли;
	
	ДатаНачала = Объект.ДатаНачала + (ШагЧисло * ИндексПериода);
	Если ШагЧисло <> 0 Тогда
		ДатаОкончания = ДатаНачала + ШагЧисло - 1;
	Иначе
		ДатаОкончания = КонецДня(Объект.ДатаОкончания);
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Создает таблицу значения, которая необходима для расчета APDEX.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со структурой необходимой для расчета APDEX.
//
&НаСервереБезКонтекста
Функция ТаблицаКлючевыхОперацийДляВычисленияAPDEX()
	
	ТаблицаКлючевыхОпераций = Новый ТаблицаЗначений;
	ТаблицаКлючевыхОпераций.Колонки.Добавить(
		"КлючеваяОперация", 
		Новый ОписаниеТипов("СправочникСсылка.КлючевыеОперации"));
	ТаблицаКлючевыхОпераций.Колонки.Добавить(
		"Приоритет", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКлючевыхОпераций.Колонки.Добавить(
		"ЦелевоеВремя",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаКлючевыхОпераций;
	
КонецФункции

///////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (ОФОРМЛЕНИЕ, НАСТРОЙКИ)

// Функция возвращает цвет значения Неприемлемо.
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветНеприемлемо()
	
	Возврат Новый Цвет(187, 187, 187);
	
КонецФункции

// Функция возвращает цвет значения Плохо.
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветПлохо()
	
	Возврат Новый Цвет(255, 212, 171);
	
КонецФункции

// Функция возвращает цвет значения Удовлетворительно.
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветУдовлетворительно()
	
	Возврат Новый Цвет(255, 255, 153);
	
КонецФункции

// Функция возвращает цвет значения Хорошо.
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветХорошо()
	
	Возврат Новый Цвет(204, 255, 204);
	
КонецФункции

// Функция возвращает цвет значения Отлично.
//
// Возвращаемое значение:
//  Цвет - цвет значения
//
&НаСервереБезКонтекста
Функция ЦветОтлично()
	
	Возврат Новый Цвет(204, 255, 255);
	
КонецФункции

// Функция возвращает соответствие, в котором.
// Ключ - Строка, оценка производительности.
// Значение - Структура, параметры оценки.
//
// Возвращаемое значение:
//  Соответствие
//
&НаСервереБезКонтекста
Функция СоответствиеЦветовУровнюАпдекса()
	
	Соответствие = Новый Соответствие;
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.001; // 0 означает что операция не выполнялась вообще.
	Значения.До = 0.5;
	Значения.Цвет = ЦветНеприемлемо();
	Соответствие.Вставить("Неприемлемо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.5;
	Значения.До = 0.7;
	Значения.Цвет = ЦветПлохо();
	Соответствие.Вставить("Плохо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.7;
	Значения.До = 0.85;
	Значения.Цвет = ЦветУдовлетворительно();
	Соответствие.Вставить("Удовлетворительно", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.85;
	Значения.До = 0.94;
	Значения.Цвет = ЦветХорошо();
	Соответствие.Вставить("Хорошо", Значения);
	
	Значения = Новый Структура("От, До, Цвет");
	Значения.От = 0.94;
	Значения.До = 1.002; // т.к. в условном оформлении к значению "До" применяется условие "Меньше", а не "МеньшеИлиРавно".
	Значения.Цвет = ЦветОтлично();
	Соответствие.Вставить("Отлично", Значения);
	
	Возврат Соответствие;
	
КонецФункции

// Функция проверяет правильность настроек формы.
//
// Возвращаемое значение:
//  Истина - настройки верны
//  Ложь - Настройки не верны
//
&НаСервере
Функция НастройкаВыполнена()
	
	Выполнена = Истина;
	Для Каждого СтрокаТЧ Из Объект.Производительность Цикл
		
		Если СтрокаТЧ.ЦелевоеВремя = 0 
			И СтрокаТЧ.КлючеваяОперация <> Объект.ОбщаяПроизводительностьСистемы Тогда
		
			ОценкаПроизводительностиСлужебный.СообщитьПользователю(
				НСтр("ru = 'Целевое время обязательно должно быть заполнено.'"),
				,
				"Производительность[" + Формат(Объект.Производительность.Индекс(СтрокаТЧ),"ЧГ=0") + "].ЦелевоеВремя",
				"Объект");
			
			Выполнена = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Выполнена;
	
КонецФункции

// Процедура при первом открытии формы обработки заполняет.
// ТЧ "Производительность" из справочника "КлючевыеОперации".
//
&НаСервереБезКонтекста
Функция ЗагрузитьКлючевыеОперации(ОбщаяПроизводительностьСистемы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК КлючеваяОперация,
	|	КлючевыеОперации.Приоритет КАК Приоритет,
	|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	НЕ КлючевыеОперации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ОбщаяПроизводительностьСистемы,
	|	0,
	|	0
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&ОбщаяПроизводительностьСистемы) <> ТИП(Справочник.КлючевыеОперации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ОбщаяПроизводительностьСистемы", ОбщаяПроизводительностьСистемы);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Меняет целевое время ключевой операции.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, операция, у которой необходимо изменить целевое время.
//  ЦелевоеВремя - Число, новое целевое время.
//
&НаСервере
Процедура ИзменитьЦелевоеВремя(КлючеваяОперация, ЦелевоеВремя)
	
	НачатьТранзакцию();
	
	Попытка
		КлючеваяОперацияОбъект = НачатьИзменениеОбъекта(КлючеваяОперация);
		КлючеваяОперацияОбъект.ЦелевоеВремя = ЦелевоеВремя;
		ЗафиксироватьИзменениеОбъекта(КлючеваяОперацияОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
 		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
 		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет из таблицы значений строки не подходящие под отбор.
//
// Параметры:
//  ТаблицаКлючевыхОпераций - ТаблицаЗначений, таблица, которую нужно отфильтровать.
//  ЗначенияОтбора - Массив, массив строк со значениями отбора.
//
&НаСервереБезКонтекста
Процедура УстановитьОтборТаблицаКлючевыхОпераций(ТаблицаКлючевыхОпераций, ЗначенияОтбора)
	
	Если ЗначенияОтбора.Направление > 0 Тогда
		Если ВРег(ЗначенияОтбора.Состояние) = "ХОРОШО" Тогда
			Предел = 0.93;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "УДОВЛЕТВОРИТЕЛЬНО" Тогда
			Предел = 0.84;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "ПЛОХО" Тогда
			Предел = 0.69;
		КонецЕсли;
	ИначеЕсли ЗначенияОтбора.Направление < 0 Тогда
		Если ВРег(ЗначенияОтбора.Состояние) = "ХОРОШО" Тогда
			Предел = 0.85;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "УДОВЛЕТВОРИТЕЛЬНО" Тогда
			Предел = 0.7;
		ИначеЕсли ВРег(ЗначенияОтбора.Состояние) = "ПЛОХО" Тогда
			Предел = 0.5;
		КонецЕсли;
	КонецЕсли;
	
	Сч = 0;
	Удалять = Ложь;
	Пока Сч < ТаблицаКлючевыхОпераций.Количество() Цикл
		
		Для Каждого КолонкаТаблицаКлючевыхОпераций Из ТаблицаКлючевыхОпераций.Колонки Цикл
			Если (Лев(КолонкаТаблицаКлючевыхОпераций.Имя, 18) <> "Производительность") Или (ТаблицаКлючевыхОпераций[Сч][КолонкаТаблицаКлючевыхОпераций.Имя] = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначенияОтбора.Направление > 0 Тогда
				Если ТаблицаКлючевыхОпераций[Сч][КолонкаТаблицаКлючевыхОпераций.Имя] > Предел Тогда
					Удалять = Ложь;
					Прервать;
				Иначе
					Удалять = Истина;
				КонецЕсли;
			ИначеЕсли ЗначенияОтбора.Направление < 0 Тогда
				Если ТаблицаКлючевыхОпераций[Сч][КолонкаТаблицаКлючевыхОпераций.Имя] < Предел Тогда
					Удалять = Ложь;
					Прервать;
				Иначе
					Удалять = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Удалять Тогда
			ТаблицаКлючевыхОпераций.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКлючевуюОперациюНаСервере()
	
	ИдентификаторСтроки = Элементы.Производительность.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДинамикаПроизводительностиДанные = Объект.Производительность;
	АктивнаяСтрока = ДинамикаПроизводительностиДанные.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если АктивнаяСтрока <> Неопределено Тогда
		ДинамикаПроизводительностиДанные.Удалить(ДинамикаПроизводительностиДанные.Индекс(АктивнаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Комментарии = ПолучитьПоследниеКомментарии();
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Комментарий Из Комментарии Цикл
		ДанныеВыбора.Добавить(Комментарий);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследниеКомментарии()
	Возврат РегистрыСведений.ЗамерыВремени.ПолучитьПоследниеКомментарии();
КонецФункции

&НаКлиенте
Процедура КомментарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(ВыбранноеЗначение) И Объект.ВариантФильтраКомментарий = "НеФильтровать" Тогда
		Объект.ВариантФильтраКомментарий = "Равен";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.ДатаОкончания = КонецДня(ВыбранноеЗначение);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортЗамеров(Команда)
	ОткрытьФорму("Обработка.ОценкаПроизводительности.Форма.ЭкспортЗамеровПроизводительности", , ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти
