///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СообщениеОбмена Экспорт; // При получении - имя полученного файла во ВременныйКаталог. При отправке - имя файла, который необходимо отправить
Перем ВременныйКаталог Экспорт; // Временный каталог для сообщений обмена.
Перем ИдентификаторКаталога Экспорт;
Перем Корреспондент Экспорт;
Перем ИмяПланаОбмена Экспорт;
Перем ИмяПланаОбменаКорреспондента Экспорт;
Перем СообщениеОбОшибке Экспорт;
Перем СообщениеОбОшибкеЖР Экспорт;

Перем ШаблоныИменДляПолученияСообщения Экспорт;
Перем ИмяСообщенияДляОтправки Экспорт; 

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет отправку сообщения обмена на заданный ресурс из временного каталога сообщения обмена.
//
// Параметры:
//  СообщениеДляСопоставленияДанных - Булево - если сообщение является сообщением для сопоставления
// 
//  Возвращаемое значение:
//    Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка.
// 
Функция ОтправитьДанные(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Результат = Истина;
		
	Попытка
		Результат = ОтправитьСообщение();
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ВыгрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Получает сообщение обмена с заданного ресурса во временный каталог сообщения обмена.
//
//  Возвращаемое значение:
//    Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка.
// 
Функция ПолучитьДанные() Экспорт
	
	Попытка
		
		Для Каждого Шаблон Из ШаблоныИменДляПолученияСообщения Цикл
			
			Результат = ПолучитьСообщение(Шаблон);
			
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры базы-корреспондента. Актуально при прямом подключении к корреспонденту. 
// 
// Параметры:
//  НастройкиПодключения - Структура - настройки подключения к базе корреспонденту.
//    см. ОбменДаннымиСервер.НастройкиОбменаДляУзлаИнформационнойБазы
// 
// Возвращаемое значение: 
//   Структура - см. ТранспортСообщенийОбмена.СтруктураРезультатаПолученияПараметровКорреспондента.
//
Функция ПараметрыКорреспондента(НастройкиПодключения) Экспорт
	
	Результат = ТранспортСообщенийОбмена.СтруктураРезультатаПолученияПараметровКорреспондента();
	Результат.ПодключениеУстановлено = Истина;
	Результат.ПодключениеРазрешено = Истина;
	
	Возврат Результат;
	
КонецФункции

// Выполняется перед отправкой и выгрузкой данных.
//
// Параметры:
//  СообщениеДляСопоставленияДанных - Булево - если сообщение является сообщением для сопоставления
// 
//  Возвращаемое значение:
//    Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка.
// 
Функция ПередВыгрузкойДанных(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Сохраняет настройки синхронизации в базе-корреспонденте. Актуально при прямом подключении к корреспонденту.
// 
// Параметры:
//  НастройкиПодключения - Структура - настройки подключения к базе корреспонденту.
//    см. ОбменДаннымиСервер.НастройкиОбменаДляУзлаИнформационнойБазы
// 
// Возвращаемое значение: 
//   Булево - Истина - при удачном сохранении параметров в корреспонденте, Ложь - произошла ошибка
//
Функция СохранитьНастройкиВКорреспонденте(НастройкиПодключения) Экспорт
		
	Возврат Истина;
	
КонецФункции

// Проверяет, требуется ли вводить дополнительные данные аутентификации перед началом синхронизации.
// см. ОбработкаОбъект.ТранспортСообщенийОбменаWS.ТребуетсяАутентификация
// 
// Возвращаемое значение: 
//   Булево - Истина - аутентификация требуется,
//     в этом случае необходимо задать форму аутентификации в процедуре модуля менеджера ПараметрыТранспорта), 
//   Ложь - аутентификация не требуется
//
Функция ТребуетсяАутентификация() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Событие возникает при удалении синхронизации с параметром "Удалить настройку так же в корреспонденте". 
// 
// Возвращаемое значение:
//  Булево - удалось выполнить удаление, Ложь - произошла ошибка.
//
Функция УдалитьНастройкуСинхронизацииВКорреспонденте() Экспорт

	Возврат Истина;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодключениеУстановлено() Экспорт
	
	Каталог = Новый Файл(КаталогОбменаИнформацией);
	
	Если ПустаяСтрока(КаталогОбменаИнформацией) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения: Не указан каталог обмена информацией.'");
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	ИначеЕсли Не Каталог.Существует() Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения: Каталог обмена информацией не существует.'");
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ИмяФайлаПроверки = ОбменДаннымиСервер.ИмяВременногоФайлаПроверкиПодключения();
	
	Если Не СоздатьФайлПроверки(ИмяФайлаПроверки) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка записи файла в каталог обмена информацией. Проверьте права пользователя на доступ к каталогу.'");
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	ИначеЕсли Не УдалитьФайлПроверки(ИмяФайлаПроверки) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка удаления файла из каталога обмена информацией. Проверьте права пользователя на доступ к каталогу.'");
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьСообщение()
	
	Результат = Истина;
	
	Если СжиматьФайлИсходящегоСообщения Тогда
		
		Если Не ТранспортСообщенийОбмена.ЗапаковатьСообщениеОбменаВZipФайл(ЭтотОбъект, ПарольАрхиваСообщенияОбмена) Тогда
			Результат = Ложь;
		КонецЕсли;
		
		Файл = Новый Файл(СообщениеОбмена);
		ИмяФайлаПриемника = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогОбменаИнформацией, Файл.Имя);
		
	Иначе
		
		ИмяФайлаПриемника = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогОбменаИнформацией, ИмяСообщенияДляОтправки);
		
	КонецЕсли;
	
	// Копируем файл сообщения в каталог обмена информацией.
	Если Не ВыполнитьКопированиеФайла(СообщениеОбмена, ИмяФайлаПриемника) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСообщение(ШаблонИмениСообщения)
	
	ТаблицаФайловСообщенийОбмена = Новый ТаблицаЗначений;
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("Файл", Новый ОписаниеТипов("Файл"));
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ВремяИзменения");
	
	МассивНайденныхФайлов = НайтиФайлы(КаталогОбменаИнформацией, ШаблонИмениСообщения, Ложь);
	
	Для Каждого ТекущийФайл Из МассивНайденныхФайлов Цикл
				
		Если НЕ ТекущийФайл.ЭтоФайл() Тогда
			
			Продолжить;
			
		// Проверяем ненулевой размер файла.
		ИначеЕсли (ТекущийФайл.Размер() = 0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Файл является требуемым сообщением обмена; добавляем его в таблицу.
		СтрокаТаблицы = ТаблицаФайловСообщенийОбмена.Добавить();
		СтрокаТаблицы.Файл           = ТекущийФайл;
		СтрокаТаблицы.ВремяИзменения = ТекущийФайл.ПолучитьВремяИзменения();
	КонецЦикла;
	
	Если ТаблицаФайловСообщенийОбмена.Количество() = 0 Тогда
			
		СообщениеОбОшибке = 
			НСтр("ru = 'В каталоге обмена информацией не был обнаружен файл сообщения с данными.
                  |Каталог обмена информацией: ""%1""
                  |Имя файла сообщения обмена: ""%2""'");
		
		СообщениеОбОшибке = СтрШаблон(СообщениеОбОшибке, КаталогОбменаИнформацией, ШаблонИмениСообщения);
		
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Возврат Ложь;
		
	Иначе
		
		ТаблицаФайловСообщенийОбмена.Сортировать("ВремяИзменения Убыв");
		
		// Получаем из таблицы самый "свежий" файл сообщения обмена.
		Файл = ТаблицаФайловСообщенийОбмена[0].Файл;
		ФайлЗапакован = (ВРег(Файл.Расширение) = ".ZIP");
		
		Если ФайлЗапакован Тогда
			
			Если Не ТранспортСообщенийОбмена.РаспаковатьСообщениеОбменаИзZipФайла(
				ЭтотОбъект, Файл.ПолноеИмя, ПарольАрхиваСообщенияОбмена) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Если Не ВыполнитьКопированиеФайла(Файл.ПолноеИмя, СообщениеОбмена) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьФайлПроверки(ИмяФайлаПроверки)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Временный файл проверки'"));
	
	Попытка
		
		ТекстовыйДокумент.Записать(ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогОбменаИнформацией, ИмяФайлаПроверки));
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция УдалитьФайлПроверки(ИмяФайлаПроверки)
	
	Попытка
		
		УдалитьФайлы(КаталогОбменаИнформацией, ИмяФайлаПроверки);
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ВыполнитьКопированиеФайла(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника)
	
	Попытка
		
		УдалитьФайлы(ИмяФайлаПриемника);
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при копировании файла из %1 в %2.'");
		СообщениеОбОшибке = СтрШаблон(СообщениеОбОшибке, ИмяФайлаИсточника, ИмяФайлаПриемника);
		СообщениеОбОшибкеЖР = СообщениеОбОшибке;
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке(), Истина);
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ВременныйКаталог = Неопределено;
СообщениеОбмена = Неопределено;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли