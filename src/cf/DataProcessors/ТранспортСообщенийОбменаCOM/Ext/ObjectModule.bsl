///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СообщениеОбмена Экспорт; // При получении - имя полученного файла во ВременныйКаталог. При отправке - имя файла, который необходимо отправить
Перем ВременныйКаталог Экспорт; // Временный каталог для сообщений обмена.
Перем ИдентификаторКаталога Экспорт;
Перем Корреспондент Экспорт;
Перем ИмяПланаОбмена Экспорт;
Перем ИмяПланаОбменаКорреспондента Экспорт;
Перем СообщениеОбОшибке Экспорт;
Перем СообщениеОбОшибкеЖР Экспорт;

Перем ШаблоныИменДляПолученияСообщения Экспорт;
Перем ИмяСообщенияДляОтправки Экспорт;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ОтправитьДанные
Функция ОтправитьДанные(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Попытка
		Результат = ОтправитьСообщениеОбмена(СообщениеДляСопоставленияДанных);
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПолучитьДанные
Функция ПолучитьДанные() Экспорт

	Попытка
		Результат = ПолучитьСообщениеОбмена();
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПередВыгрузкойДанных
Функция ПередВыгрузкойДанных(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Возврат ПроверкаВнешнегоСоединенияПередОбменом(Перечисления.ДействияПриОбмене.ВыгрузкаДанных, СообщениеДляСопоставленияДанных);
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПараметрыКорреспондента
Функция ПараметрыКорреспондента(НастройкиПодключения) Экспорт
	
	Результат = ТранспортСообщенийОбмена.СтруктураРезультатаПолученияПараметровКорреспондента();
	Результат.Вставить("ИмяПланаОбменаКорреспондента", ИмяПланаОбмена);
	
	ВнешнееСоединение = УстановитьВнешнееСоединениеСБазой();
	Если ВнешнееСоединение = Неопределено Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Результат.ПодключениеУстановлено = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПодключениеУстановлено = Истина;
	Результат.ВерсииИнтерфейса = ТранспортСообщенийОбмена.ВерсииИнтерфейсаЧерезВнешнееСоединение(ВнешнееСоединение);
	
	Если Результат.ВерсииИнтерфейса.Найти("3.0.1.1") <> Неопределено
		Или Результат.ВерсииИнтерфейса.Найти("3.0.2.1") <> Неопределено
		Или Результат.ВерсииИнтерфейса.Найти("3.0.2.2") <> Неопределено Тогда 
		
		СообщениеОбОшибке = "";
		
		ИдентификаторИнформационнойБазыИсточника = ОбменДаннымиСервер.КодПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена);
		
		Если Результат.ВерсииИнтерфейса.Найти("3.0.2.2") <> Неопределено Тогда
			
			ДополнительныеПараметры = Новый Структура;
			Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
				ДополнительныеПараметры.Вставить("ЭтоПланОбменаXDTO", Истина);
				ДополнительныеПараметры.Вставить("ИдентификаторНастройки", НастройкиПодключения.ИдентификаторНастройки);
			КонецЕсли;
			
			ПараметрыИнформационнойБазы = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_3_0_2_2(
				ИмяПланаОбменаКорреспондента,
				ИдентификаторИнформационнойБазыИсточника,
				СообщениеОбОшибке,
				ДополнительныеПараметры);
		Иначе
			
			ПараметрыИнформационнойБазы = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_2_0_1_6(
				ИмяПланаОбменаКорреспондента,
				ИдентификаторИнформационнойБазыИсточника,
				СообщениеОбОшибке);
			
		КонецЕсли;
		
		ПараметрыКорреспондента = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПараметрыИнформационнойБазы);
		
		Если Не ПараметрыКорреспондента.ПланОбменаСуществует Тогда
				
			ШаблонСообщения = 
				НСтр("ru = 'В корреспонденте не найден план обмена ""%1"".
					|Убедитесь, что
					| - выбран правильный вид приложения для настройки обмена;
					| - корректно указано расположение программы, к которой выполняется подключение.'");
			
			СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ИмяПланаОбмена);
			
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
			
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
			
			Возврат Результат;
			
		КонецЕсли;
		
		Результат.ПараметрыКорреспондентаПолучены = Истина;
		Результат.ПараметрыКорреспондента = ПараметрыКорреспондента;
		Результат.ИмяПланаОбменаКорреспондента = ПараметрыКорреспондента.ИмяПланаОбмена;
		
	Иначе
		
		СообщениеОбОшибке = 
			НСтр("ru = 'Корреспондент не поддерживает версию 3.0.1.x интерфейса ""ОбменДанными"".
			|Для настройки подключения обновите конфигурацию корреспондента, или начните настройку из него.'");
		
		Результат.ПодключениеРазрешено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	ТранспортСообщенийОбмена.ПриПодключенииККорреспонденту(
		Отказ, ИмяПланаОбмена, ПараметрыКорреспондента.ВерсияКонфигурации, СообщениеОбОшибке);
	
	Если Отказ Тогда
		
		Результат.ПодключениеРазрешено = Ложь;
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ТранспортСообщенийОбмена.ПроверитьДублированиеСинхронизаций(ИмяПланаОбмена, ПараметрыКорреспондента, Результат);
	
	Результат.ПодключениеРазрешено = Истина;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.СохранитьНастройкиВКорреспонденте
Функция СохранитьНастройкиВКорреспонденте(НастройкиПодключения) Экспорт
	
	ВнешнееСоединение = УстановитьВнешнееСоединениеСБазой();
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	НастройкиПодключенияКорреспондента = ВнешнееСоединение.Обработки.ПомощникСозданияОбменаДанными.Создать();
	
	НастройкиПодключенияКорреспондента.ВариантРаботыМастера   = "ПродолжитьНастройкуОбменаДанными";
	НастройкиПодключенияКорреспондента.ВариантНастройкиОбмена = НастройкиПодключения.ВариантНастройкиОбмена;
	
	НастройкиПодключенияКорреспондента.ИмяПланаОбмена               = НастройкиПодключения.ИмяПланаОбменаКорреспондента;
	НастройкиПодключенияКорреспондента.ИмяПланаОбменаКорреспондента = НастройкиПодключения.ИмяПланаОбмена;
	НастройкиПодключенияКорреспондента.ФорматОбмена                 = НастройкиПодключения.ФорматОбмена;
	
	НастройкиПодключенияКорреспондента.ИспользоватьПрефиксыДляНастройкиОбмена =
		НастройкиПодключения.ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента;
	
	НастройкиПодключенияКорреспондента.ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента =
		НастройкиПодключения.ИспользоватьПрефиксыДляНастройкиОбмена;
	
	НастройкиПодключенияКорреспондента.ПрефиксИнформационнойБазыИсточника = НастройкиПодключения.ПрефиксИнформационнойБазыПриемника;
	НастройкиПодключенияКорреспондента.ПрефиксИнформационнойБазыПриемника = НастройкиПодключения.ПрефиксИнформационнойБазыИсточника;
		
	Попытка
		
		СтрокаНастроекПодключенияXML = Обработки.ТранспортСообщенийОбменаCOM.НастройкиПодключенияВXML(НастройкиПодключения);
		
		ВнешнееСоединение.Обработки.ПомощникСозданияОбменаДанными.ЗаполнитьНастройкиПодключенияИзXML(
			НастройкиПодключенияКорреспондента, СтрокаНастроекПодключенияXML);
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		
		НастройкиПодключенияКорреспондента.ВерсияФорматаОбмена = НастройкиПодключения.ВерсияФорматаОбмена;
		
		ТаблицаОбъекты = ОбменДаннымиXDTOСервер.ПоддерживаемыеОбъектыФормата(
			НастройкиПодключения.ИмяПланаОбмена, "ОтправкаПолучение", НастройкиПодключения.УзелИнформационнойБазы);
		
		СтрокаХранилище = СериализаторXDTO.XMLСтрока(
			Новый ХранилищеЗначения(ТаблицаОбъекты, Новый СжатиеДанных(9)));
		
		НастройкиПодключенияКорреспондента.ПоддерживаемыеОбъектыФормата = 
			ВнешнееСоединение.СериализаторXDTO.XMLЗначение(
				ВнешнееСоединение.NewObject("ОписаниеТипов", "ХранилищеЗначения").Типы().Get(0), СтрокаХранилище);
		
	КонецЕсли;
		
	Попытка
		
		ВнешнееСоединение.ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными(Истина);
		ВнешнееСоединение.Обработки.ПомощникСозданияОбменаДанными.ВыполнитьДействияПоНастройкеОбменаДанными(
			НастройкиПодключенияКорреспондента);
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ТребуетсяАутентификация
Функция ТребуетсяАутентификация() Экспорт
	
	Возврат ПродолжениеНастройки;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.УдалитьНастройкуСинхронизацииВКорреспонденте
Функция УдалитьНастройкуСинхронизацииВКорреспонденте() Экспорт
		
	ВнешнееСоединение = УстановитьВнешнееСоединениеСБазой();
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторУзла = ОбменДаннымиСервер.ИдентификаторЭтогоУзлаДляОбмена(Корреспондент);
	УзелКорреспондента = ВнешнееСоединение.ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбменаКорреспондента, ИдентификаторУзла);
	
	Если УзелКорреспондента = Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru = 'В программе-корреспонденте не найден узел плана обмена ""%1"" по коду ""%2"".'");
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ИмяПланаОбменаКорреспондента, ИдентификаторУзла);
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		
		ВнешнееСоединение.ОбменДаннымиСервер.УдалитьНастройкуСинхронизации(УзелКорреспондента);
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодключениеУстановлено() Экспорт
	
	ВнешнееСоединение = УстановитьВнешнееСоединениеСБазой();
	
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция ОтправитьСообщениеОбмена(СообщениеДляСопоставленияДанных)
	 
	СтруктураНастроекОбменаВС = Неопределено;
	ОбменСБСП20 = Ложь;
		
	ВнешнееСоединение = ВнешнееСоединениеДляОтправкиПолученияСообщения(
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
		СтруктураНастроекОбменаВС,
		ОбменСБСП20,
		СообщениеДляСопоставленияДанных);
	
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		ОбработкаДляЗагрузкиДанных = ВнешнееСоединение.Обработки.КонвертацияОбъектовXDTO.Создать();
	Иначе
		ОбработкаДляЗагрузкиДанных = ВнешнееСоединение.Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	КонецЕсли;
	
	ОбработкаДляЗагрузкиДанных.РежимОбмена = "Загрузка";
	ОбработкаДляЗагрузкиДанных.УзелОбменаЗагрузкаДанных = СтруктураНастроекОбменаВС.УзелИнформационнойБазы;
	
	ОбменДаннымиСервер.УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаДляЗагрузкиДанных, СтруктураНастроекОбменаВС, ОбменСБСП20);
	
	ЕстьПоддержкаСопоставления            = Истина;
	НастройкаСинхронизацииДанныхЗавершена = Истина;
	ВерсииИнтерфейса = ТранспортСообщенийОбмена.ВерсииИнтерфейсаЧерезВнешнееСоединение(ВнешнееСоединение);
	
	Если ВерсииИнтерфейса.Найти("3.0.1.1") <> Неопределено
		Или ВерсииИнтерфейса.Найти("3.0.2.1") <> Неопределено 
		Или ВерсииИнтерфейса.Найти("3.0.2.2") <> Неопределено Тогда
			
		СообщениеОбОшибке = "";
		КодУзла = ОбменДаннымиСервер.КодПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена);
		
		ИмяПланаОбменаКорреспондента = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбменаКорреспондента(Корреспондент);
		
		Если ВерсииИнтерфейса.Найти("3.0.2.2") <> Неопределено Тогда
			
			ДополнительныеПараметры = Новый Структура;
			Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
				ДополнительныеПараметры.Вставить("ЭтоПланОбменаXDTO", Истина);
			КонецЕсли;
			
			ПараметрыИнформационнойБазы =  ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_3_0_2_2(
				ИмяПланаОбменаКорреспондента, КодУзла, СообщениеОбОшибке, ДополнительныеПараметры);
		Иначе
			
			ПараметрыИнформационнойБазы =  ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_2_0_1_6(
				ИмяПланаОбменаКорреспондента, КодУзла, СообщениеОбОшибке);
				
		КонецЕсли;
			
		ПараметрыКорреспондента = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПараметрыИнформационнойБазы);
		
		Если ПараметрыКорреспондента.Свойство("ПоддерживаетсяСопоставлениеДанных") Тогда
			ЕстьПоддержкаСопоставления = ПараметрыКорреспондента.ПоддерживаетсяСопоставлениеДанных;
		КонецЕсли;
		
		Если ПараметрыКорреспондента.Свойство("НастройкаСинхронизацииДанныхЗавершена") Тогда
			НастройкаСинхронизацииДанныхЗавершена = ПараметрыКорреспондента.НастройкаСинхронизацииДанныхЗавершена;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СообщениеДляСопоставленияДанных
		И (ЕстьПоддержкаСопоставления Или Не НастройкаСинхронизацииДанныхЗавершена) Тогда
		ОбработкаДляЗагрузкиДанных.РежимЗагрузкиДанных = "ЗагрузкаСообщенияДляСопоставленияДанных";
	КонецЕсли;
	
	ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию = 
		КоличествоЭлементовВТранзакцииВыполняемогоДействия(Перечисления.ДействияПриОбмене.ВыгрузкаДанных); 
	ОбработкаДляЗагрузкиДанных.ИспользоватьТранзакции = (ОбработкаДляЗагрузкиДанных.КоличествоОбъектовНаТранзакцию <> 1);
		
	Если СообщениеДляСопоставленияДанных Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(СообщениеОбмена);
		ДанныеВыгрузкиXML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
	
		ОбработкаДляЗагрузкиДанных.ПоместитьСообщениеДляСопоставленияДанных(ДанныеВыгрузкиXML);
		
	Иначе
		
		ОбработкаДляЗагрузкиДанных.ИмяФайлаОбмена = СообщениеОбмена;
		ОбработкаДляЗагрузкиДанных.ВыполнитьЗагрузкуДанных();
		
	КонецЕсли;
	
	СтруктураНастроекОбменаВС.РезультатВыполненияОбменаСтрокой = ОбработкаДляЗагрузкиДанных.РезультатВыполненияОбменаСтрокой();
	ОбработкаДляЗагрузкиДанных = Неопределено;
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаВС);
	ВнешнееСоединение = Неопределено;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСообщениеОбмена()
	
	СтруктураНастроекОбменаВС = Неопределено;
	ОбменСБСП20 = Ложь;
	
	ВнешнееСоединение = ВнешнееСоединениеДляОтправкиПолученияСообщения(
		Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
		СтруктураНастроекОбменаВС,
		ОбменСБСП20);
		
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		
		// Получаем правила обмена из второй ИБ.
		ПравилаКонвертацииОбъектов = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПравилаКонвертацииОбъектов(СтруктураНастроекОбменаВС.ИмяПланаОбмена);
		
	КонецЕсли;
		
	// Получаем инициализированную обработку для выгрузки данных.
	Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		ОбработкаОбменаДаннымиВС = ВнешнееСоединение.Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаОбменаДаннымиВС.РежимОбмена = "Выгрузка";
	Иначе
		ОбработкаОбменаДаннымиВС = ВнешнееСоединение.Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
		ОбработкаОбменаДаннымиВС.СохраненныеНастройки = ПравилаКонвертацииОбъектов;
		ОбработкаОбменаДаннымиВС.ЗагрузкаДанныхВыполняетсяВоВнешнемСоединении = Ложь;
		ОбработкаОбменаДаннымиВС.РежимОбмена = "Выгрузка";
		
		Попытка
			ОбработкаОбменаДаннымиВС.ВосстановитьПравилаИзВнутреннегоФормата();
		Исключение
			
			ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
				
			Возврат Ложь;
				
		КонецПопытки;
		
		// Задаем узлы обмена.
		ОбработкаОбменаДаннымиВС.УзелДляФоновогоОбмена = Неопределено;
		ОбработкаОбменаДаннымиВС.НеВыгружатьОбъектыПоСсылкам = Истина;
		ОбработкаОбменаДаннымиВС.ИмяФайлаПравилОбмена = "1";
		ОбработкаОбменаДаннымиВС.ВнешнееСоединение = Неопределено;
		
	КонецЕсли;
	
	ОбработкаОбменаДаннымиВС.УзелДляОбмена = СтруктураНастроекОбменаВС.УзелИнформационнойБазы;
	Если ОбработкаОбменаДаннымиВС.Метаданные().Реквизиты.Найти("УстановитьБлокировкуУзлаПланаОбмена") <> Неопределено Тогда
		ОбработкаОбменаДаннымиВС.УстановитьБлокировкуУзлаПланаОбмена = Истина;
	КонецЕсли;
	
	ОбменДаннымиСервер.УстановитьОбщиеПараметрыДляОбработкиОбменаДанными(ОбработкаОбменаДаннымиВС, СтруктураНастроекОбменаВС, ОбменСБСП20);
			
	ОбработкаОбменаДаннымиВС.ИмяФайлаОбмена = СообщениеОбмена;
	ОбработкаОбменаДаннымиВС.ВыполнитьВыгрузкуДанных();
	СтруктураНастроекОбменаВС.РезультатВыполненияОбменаСтрокой = ОбработкаОбменаДаннымиВС.РезультатВыполненияОбменаСтрокой();
	
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаВС);
	ВнешнееСоединение = Неопределено;
	
	Возврат Истина;
	
КонецФункции

Функция ВнешнееСоединениеДляОтправкиПолученияСообщения(ДействиеПриОбмене, СтруктураНастроекОбменаВС, ОбменСБСП20, СообщениеДляСопоставленияДанных = Ложь)
	
	ВнешнееСоединение = УстановитьВнешнееСоединениеСБазой(ДействиеПриОбмене);
	
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЭлементовВТранзакции = КоличествоЭлементовВТранзакцииВыполняемогоДействия(ДействиеПриОбмене);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ТранспортСообщенийОбмена.НастройкиОбменаДляВнешнегоСоединения(
		Корреспондент,
		ДействиеПриОбмене,
		КоличествоЭлементовВТранзакции);
	
	// Получаем версию удаленной базы.
	ВерсияБСППоВнешнемуСоединению = ВнешнееСоединение.СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ОбменСБСП20 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.1.1.10", ВерсияБСППоВнешнемуСоединению) > 0;
	
	Структура = Новый Структура("ИмяПланаОбмена, ИмяПланаОбменаКорреспондента, 
		|ТекущийУзелПланаОбменаКод, КоличествоЭлементовВТранзакции");
	
	ЗаполнитьЗначенияСвойств(Структура, СтруктураНастроекОбмена);
	
	// Выполняем реверс значений перечисления.
	ДействиеПриОбменеСтрокой = ?(ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ЗагрузкаДанных),
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
								
	Структура.Вставить("ДействиеПриОбменеСтрокой", ДействиеПриОбменеСтрокой);
	Структура.Вставить("РежимОтладки", Ложь);
	Структура.Вставить("ИмяФайлаПротоколаОбмена", "");
	
	СтруктураКорреспондента = ОбщегоНазначения.СкопироватьРекурсивно(Структура, Ложь);
	СтруктураКорреспондента.ИмяПланаОбмена = Структура.ИмяПланаОбменаКорреспондента;
	СтруктураКорреспондента.ИмяПланаОбменаКорреспондента = Структура.ИмяПланаОбмена;
	
	Попытка
		// СтруктураНастроекОбменаВнешнееСоединение
		СтруктураНастроекОбменаВС = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.СтруктураНастроекОбмена(СтруктураКорреспондента);
	Исключение
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураНастроекОбменаВС.Вставить("ДатаНачала", ВнешнееСоединение.ТекущаяДатаСеанса());
	
	Возврат ВнешнееСоединение; 
	
КонецФункции

Функция УстановитьВнешнееСоединениеСБазой(ДействиеПриОбмене = Неопределено)
	
	НомерПопытки = 1;
	
	СтруктураПараметров = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
	
	ВнешнееСоединение = Неопределено;
	
	Пока НомерПопытки <= 2 Цикл
		
		Подключение = ТранспортСообщенийОбменаПовтИсп.УстановитьВнешнееСоединениеСБазой(СтруктураПараметров);
		ВнешнееСоединение = Подключение.Соединение;
		
		Если ВнешнееСоединение <> Неопределено Тогда
			Возврат ВнешнееСоединение;
		КонецЕсли;
		
		Если ВнешнееСоединение = Неопределено
			И Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			
			СообщениеОбОшибке = Подключение.КраткоеОписаниеОшибки;
			СообщениеОбОшибкеЖР = Подключение.ПодробноеОписаниеОшибки;
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
			
			Прервать;
		
		КонецЕсли;
		
		Если НомерПопытки = 1 Тогда
			
			Если НЕ ЗарегистрироватьCOMСоединитель() Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли НомерПопытки = 2 Тогда
			
			СообщениеОбОшибке = Подключение.КраткоеОписаниеОшибки;
			СообщениеОбОшибкеЖР = Подключение.ПодробноеОписаниеОшибки;
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
			
		КонецЕсли;
		
		НомерПопытки = НомерПопытки + 1;
		
	КонецЦикла;
	
	Возврат ВнешнееСоединение; 
	
КонецФункции

Функция ЗарегистрироватьCOMСоединитель(ДействиеПриОбмене = Неопределено)
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	
	ТекстКоманды = СтрШаблон("regsvr32.exe /n /i:user /s ""%1comcntr.dll""", КаталогПрограммы());
	
	РезультатЗапуска = ФайловаяСистема.ЗапуститьПрограмму(ТекстКоманды, ПараметрыЗапускаПрограммы);
		
	Шаблон = 
		НСтр("ru = 'Выполнена перерегистрация компоненты ""comcntr"" на компьютере %1.
			|Команда: %2
			|Код возврата %3, сообщение:
			|%4'");
	
	Комментарий = СтрШаблон(Шаблон, ИмяКомпьютера(), ТекстКоманды, РезультатЗапуска.КодВозврата, РезультатЗапуска.ПотокВывода);
	
	ЭтоОшибка = РезультатЗапуска.КодВозврата <> 0;
	
	ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене, Комментарий, ЭтоОшибка);
	
	Возврат РезультатЗапуска.КодВозврата = 0;

КонецФункции

Функция ПроверкаВнешнегоСоединенияПередОбменом(ДействиеПриОбмене, СообщениеДляСопоставленияДанных = Ложь)
	
	ВнешнееСоединение = УстановитьВнешнееСоединениеСБазой(ДействиеПриОбмене);
	Если ВнешнееСоединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЭлементовВТранзакции = ОбменДаннымиСервер.КоличествоЭлементовВТранзакцииВыполняемогоДействия(ДействиеПриОбмене);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ТранспортСообщенийОбмена.НастройкиОбменаДляВнешнегоСоединения(
		Корреспондент,
		ДействиеПриОбмене,
		КоличествоЭлементовВТранзакции);
	
	// Получаем версию удаленной базы.
	ВерсияБСППоВнешнемуСоединению = ВнешнееСоединение.СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ОбменСБСП20 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии("2.1.1.10", ВерсияБСППоВнешнемуСоединению) > 0;
	
	Структура = Новый Структура("ИмяПланаОбмена, ИмяПланаОбменаКорреспондента, 
		|ТекущийУзелПланаОбменаКод, КоличествоЭлементовВТранзакции");
	
	ЗаполнитьЗначенияСвойств(Структура, СтруктураНастроекОбмена);
	
	// Выполняем реверс значений перечисления.
	ДействиеПриОбменеСтрокой = ?(ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ЗагрузкаДанных),
								ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
								
	Структура.Вставить("ДействиеПриОбменеСтрокой", ДействиеПриОбменеСтрокой);
	Структура.Вставить("РежимОтладки", Ложь);
	Структура.Вставить("ИмяФайлаПротоколаОбмена", "");
	
	Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		// Проверка псевдонима предопределенного узла
		ПсевдонимПредопределенногоУзла = ОбменДаннымиСервер.ПсевдонимПредопределенногоУзла(Корреспондент);
		ПланОбменаМенеджер = ВнешнееСоединение.ПланыОбмена[Структура.ИмяПланаОбменаКорреспондента];
		ПроверятьНаличиеУзлаВКорреспонденте = Истина;
		Если ЗначениеЗаполнено(ПсевдонимПредопределенногоУзла) Тогда
			// Надо проверить код узла в корреспонденте - он может быть уже перекодирован.
			// Тогда псевдоним больше не нужен.
			Если ПланОбменаМенеджер.НайтиПоКоду(ПсевдонимПредопределенногоУзла) <> ПланОбменаМенеджер.ПустаяСсылка() Тогда
				Структура.ТекущийУзелПланаОбменаКод = ПсевдонимПредопределенногоУзла;
				ПроверятьНаличиеУзлаВКорреспонденте = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ПроверятьНаличиеУзлаВКорреспонденте Тогда
			ПланОбменаСсылка = ПланОбменаМенеджер.НайтиПоКоду(Структура.ТекущийУзелПланаОбменаКод);
			Если НЕ ЗначениеЗаполнено(ПланОбменаСсылка.Code) Тогда
				// При необходимости запуск перехода на синхронизацию данных через универсальный формат.
				ТекстСообщения = НСтр("ru = 'Необходим переход на синхронизацию данных через универсальный формат в базе-корреспонденте.'");
				ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене, ТекстСообщения, Ложь);

				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Код", Структура.ТекущийУзелПланаОбменаКод);
				СтруктураПараметров.Вставить("ВариантНастройки", 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корреспондент, "ВариантНастройки"));
				СтруктураПараметров.Вставить("Ошибка", Ложь);
				СтруктураПараметров.Вставить("СообщениеОбОшибке", "");
				
				ЕстьОшибки = Ложь;
				СообщениеОбОшибке = "";
				РезультатПерехода = ПланОбменаМенеджер.ПереходНаСинхронизациюЧерезУниверсальныйФорматВнешнееСоединение(СтруктураПараметров);
				
				Если СтруктураПараметров.Ошибка Тогда
					
					ЕстьОшибки = Истина;
					
					ТекстСообщения = НСтр("ru = 'Ошибка при переходе на синхронизацию данных через универсальный формат: %1. Обмен отменен.'",
						ОбщегоНазначения.КодОсновногоЯзыка());
						
					СообщениеОбОшибке = СтрШаблон(ТекстСообщения, СтруктураПараметров.СообщениеОбОшибке);
					
				ИначеЕсли РезультатПерехода = Неопределено Тогда
					
					ЕстьОшибки = Истина;
					СообщениеОбОшибке = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат не выполнен'");
					
				КонецЕсли;
				
				Если ЕстьОшибки Тогда
					ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
					Возврат Ложь;
				Иначе
					ТекстСообщения = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат завершен успешно.'");
					ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене, ТекстСообщения, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	СтруктураКорреспондента = ОбщегоНазначения.СкопироватьРекурсивно(Структура, Ложь);
	СтруктураКорреспондента.ИмяПланаОбмена = Структура.ИмяПланаОбменаКорреспондента;
	СтруктураКорреспондента.ИмяПланаОбменаКорреспондента = Структура.ИмяПланаОбмена;
	
	Попытка
		// СтруктураНастроекОбменаВнешнееСоединение
		СтруктураНастроекОбменаВС = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.СтруктураНастроекОбмена(СтруктураКорреспондента);
	Исключение
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
		Возврат Ложь;
	КонецПопытки;
	
	Если СтруктураНастроекОбменаВС.Свойство("НастройкаСинхронизацииДанныхЗавершена") Тогда
		Если Не СообщениеДляСопоставленияДанных
			И СтруктураНастроекОбменаВС.НастройкаСинхронизацииДанныхЗавершена = Ложь Тогда
			
			ТекстСообщения = НСтр("ru = 'Для продолжения перейдите в программу ""%1"" и завершите в ней настройку синхронизации.
				|Выполнение обмена данными отменено.'");
			
			СообщениеОбОшибке = СтрШаблон(ТекстСообщения, СтруктураНастроекОбменаВС.УзелИнформационнойБазыНаименование);
			
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроекОбменаВС.Свойство("ПолученоСообщениеДляСопоставленияДанных") Тогда
		Если Не СообщениеДляСопоставленияДанных
			И СтруктураНастроекОбменаВС.ПолученоСообщениеДляСопоставленияДанных = Истина Тогда
			
			ТекстСообщения = НСтр("ru = 'Для продолжения перейдите в программу ""%1"" и выполните загрузку сообщения для сопоставления данных.
				|Выполнение обмена данными отменено.'");
			
			СообщениеОбОшибке = СтрШаблон(ТекстСообщения, СтруктураНастроекОбменаВС.УзелИнформационнойБазыНаименование);
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, ДействиеПриОбмене);
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных
		И НЕ ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		
		// Получаем правила обмена из второй ИБ.
		ПравилаКонвертацииОбъектов = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПравилаКонвертацииОбъектов(СтруктураНастроекОбменаВС.ИмяПланаОбмена);
		
		Если ПравилаКонвертацииОбъектов = Неопределено Тогда
			
			// Правила обмена должны быть указаны.
			
			ТекстСообщения = НСтр("ru = 'Не заданы правила конвертации во второй информационной базе для плана обмена %1. Обмен отменен.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
				
			СообщениеОбОшибке = СтрШаблон(ТекстСообщения, СтруктураНастроекОбменаВС.ИмяПланаОбмена);
			ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
		
	ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ЗаписьЖурналаРегистрацииНачалаОбменаДанными(СтруктураНастроекОбменаВС);
	ВнешнееСоединение = Неопределено;
	
	Возврат Истина;
	
КонецФункции

Функция КоличествоЭлементовВТранзакцииВыполняемогоДействия(Действие)
	
	Если Действие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных Тогда
		КоличествоЭлементов = ОбменДаннымиСервер.КоличествоЭлементовВТранзакцииВыгрузкиДанных();
	Иначе
		КоличествоЭлементов = ОбменДаннымиСервер.КоличествоЭлементовВТранзакцииЗагрузкиДанных();
	КонецЕсли;
	
	Возврат КоличествоЭлементов;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ВременныйКаталог = Неопределено;
СообщенияОбмена = Неопределено;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли