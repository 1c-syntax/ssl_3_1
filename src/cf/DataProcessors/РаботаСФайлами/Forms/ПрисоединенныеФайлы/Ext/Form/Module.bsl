///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВладелецФайла = Параметры.ВладелецФайла;
	
	ТекущаяСсылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТекущаяСтрока");
	СписокОткрытИзКарточкиФайла = ЗначениеЗаполнено(ТекущаяСсылка);
	Элементы.ВладелецФайла.Видимость = СписокОткрытИзКарточкиФайла И Не Параметры.СкрыватьВладельца;
	Если СписокОткрытИзКарточкиФайла И ВладелецФайла = Неопределено Тогда
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСсылка, "ВладелецФайла");
		Параметры.ВладелецФайла = ВладелецФайла;
	КонецЕсли;
	Если Параметры.ВладелецФайла = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Список присоединенных файлов можно посмотреть
		                             |только в форме объекта-владельца.'");
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Параметры.ВладелецФайла);
	Если Метаданные.ОпределяемыеТипы.ВладелецФайлов.Тип.СодержитТип(ТипВладельца) Тогда
		ПолноеИмяВладельца = Метаданные.НайтиПоТипу(ТипВладельца).Имя;
		Если Метаданные.Справочники.Найти(ПолноеИмяВладельца + "ПрисоединенныеФайлы") = Неопределено Тогда
			ЭтоВладелецЭлементовСправочникаФайлы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ФормаРедактировать.ТолькоВоВсехДействиях           = Параметры.ПростаяФорма;
	Элементы.ФормаОткрыть.ТолькоВоВсехДействиях                 = Параметры.ПростаяФорма;
	Элементы.ФормаЗакончитьРедактирование.ТолькоВоВсехДействиях = Параметры.ПростаяФорма;
	Элементы.СписокВажныеРеквизиты.Видимость                    = Не Параметры.ПростаяФорма;
	Предпросмотр                                                = Параметры.ПростаяФорма;
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиСлужебный.ПолучитьПоказыватьКолонкуРазмер();
	Если Не ПоказыватьКолонкуРазмер Тогда
		Элементы.СписокРазмер.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	ИначеЕсли СписокОткрытИзКарточкиФайла Тогда
		Заголовок = Заголовок + ": " + ОбщегоНазначения.ПредметСтрокой(ВладелецФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыОтправки) Тогда
		ПараметрыОтправки = Параметры.ПараметрыОтправки;
	Иначе
		ПараметрыОтправки = РаботаСФайламиСлужебный.ПодготовитьСтруктуруПараметровОтправки();
	КонецЕсли;
	
	Если Параметры.РежимВыбора Тогда
		СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(ЭтотОбъект, "ВыборПодбор");
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Заголовок = НСтр("ru = 'Выбор присоединенного файла'");
	Иначе
		Элементы.Список.РежимВыбора = Ложь;
	КонецЕсли;
	
	НастройкиФайлов = РаботаСФайламиСлужебный.НастройкиФайлов();
	
	ИмяСправочникаХранилищаФайлов = Неопределено;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при настройке динамического списка присоединенных файлов.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае настройка динамического списка невозможна.'");
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		Параметры.ВладелецФайла, "", ЗаголовокОшибки, ОкончаниеОшибки);
		
	ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	
	ИмяСправочникаХранилищаВерсийФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияВерсийФайлов(
		Параметры.ВладелецФайла, "", ЗаголовокОшибки, ОкончаниеОшибки);
	
	ВозможностьСоздаватьГруппыФайлов = МетаданныеСправочникаСФайлами.Иерархический;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда 
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		ЕстьПравоИспользоватьШаблоны = МодульУправлениеДоступом .ЕстьПраво("Чтение", Справочники.ПапкиФайлов.Шаблоны);
	Иначе
		ЕстьПравоИспользоватьШаблоны = ПравоДоступа("Чтение", Метаданные.Справочники.Файлы) И ПравоДоступа("Чтение", Метаданные.Справочники.ПапкиФайлов)
	КонецЕсли;
	
	Если НЕ ЕстьПравоИспользоватьШаблоны Или НастройкиФайлов.НеСоздаватьФайлыПоШаблону.Найти(Метаданные.НайтиПоТипу(ТипЗнч(ВладелецФайла))) <> Неопределено Тогда
		Элементы.ДобавитьФайлПоШаблону.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюДобавитьФайлПоШаблону.Видимость = Ложь;
	КонецЕсли;
	
	ВозможностьСоздаватьВерсииФайлов = ЭтоВладелецЭлементовСправочникаФайлы;
	
	Если ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		РаботаСФайламиСлужебный.ИзменитьФормуДляВнешнегоПользователя(ЭтотОбъект, Истина);
	КонецЕсли;
	
	ЕстьРеквизитСлужебный = РаботаСФайламиСлужебный.ЕстьРеквизитСлужебный(ИмяСправочникаХранилищаФайлов);
	НастроитьДинамическийСписок(ИмяСправочникаХранилищаФайлов, ЕстьРеквизитСлужебный);
	
	Если Не ВозможностьСоздаватьГруппыФайлов Тогда
		СкрытьКнопкиСозданияГруппы();
	КонецЕсли;
	
	ЕстьПравоДобавления = Истина;
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", МетаданныеСправочникаСФайлами) Тогда
		СкрытьКнопкиДобавления();
		ЕстьПравоДобавления = Ложь;
	КонецЕсли;
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами);
	Иначе
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами)
			Или Не ПравоДоступа("Редактирование", Параметры.ВладелецФайла.Метаданные());
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		СкрытьКнопкиИзменения();
	КонецЕсли;
	
	ИменаВсехКомандФормы = ПолучитьИменаКомандФормы();
	ИменаЭлементов = Новый Массив;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаВсехКомандФормы.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено
			Или ИменаВсехКомандФормы.Найти(ЭлементФормы.Имя) <> Неопределено Тогда
				ИменаЭлементов.Добавить(ЭлементФормы.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаЭлементовКнопокФормы = Новый ФиксированныйМассив(ИменаЭлементов);
	
	ПриИзмененииИспользованияПодписанияИлиШифрованияНаСервере();
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Элементы.ФормаИзменить82.Видимость = Истина;
		Элементы.ФормаСкопировать.ТолькоВоВсехДействиях = Ложь;
		Элементы.УстановитьПометкуУдаления.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
	ИспользоватьПредпросмотр = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ТипСправочникаСФайлами,
		"Предпросмотр");
	
	Если ИспользоватьПредпросмотр <> Неопределено Тогда
		Предпросмотр = ИспользоватьПредпросмотр;
	КонецЕсли;
	
	Элементы.АдресДанныхФайла.Видимость = Предпросмотр;
	Элементы.Предпросмотр.Пометка       = Предпросмотр;
	
	РасширенияПоддерживающиеПредпросмотр = РаботаСФайламиСлужебный.СписокРасширенийДляПредпросмотра();
	
	ОбновитьПояснениеОблачногоСервиса();
	
	Элементы.НастроитьСинхронизацию.Видимость = ПравоДоступа("Редактирование", Метаданные.Справочники.УчетныеЗаписиСинхронизацииФайлов);
	ЕстьЭлектроннаяПодпись = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись");
	Элементы.ПечатьСоШтампом.Видимость = ЕстьЭлектроннаяПодпись;
	
	Элементы.СравнитьФайлы.Видимость = Не ОбщегоНазначения.ЭтоLinuxКлиент() И Не ОбщегоНазначения.ЭтоВебКлиент();
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	Элементы.ПоказыватьСлужебныеФайлы.Видимость = ЕстьРеквизитСлужебный
		И Пользователи.ЭтоПолноправныйПользователь();
	
	УстановитьУсловноеОформление(ЕстьРеквизитСлужебный);
	Если ЕстьРеквизитСлужебный Тогда
		РаботаСФайламиСлужебный.ДобавитьОтборыВСписокФайлов(Список);
	КонецЕсли;
	
	РаботаСФайламиПереопределяемый.ПриСозданииФормыСпискаФайлов(ЭтотОбъект);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ПодменюДобавить.Отображение = ОтображениеКнопки.Картинка;
		Элементы.ДобавитьФайлСоСканера.Заголовок = НСтр("ru = 'С камеры устройства...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьПравоДобавления Тогда
		ДоступнаКомандаСканировать                                    = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
		Элементы.ДобавитьФайлСоСканера.Видимость                      = ДоступнаКомандаСканировать;
		Элементы.СписокКонтекстноеМенюДобавитьФайлСоСканера.Видимость = ДоступнаКомандаСканировать;
	КонецЕсли;
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
		И (ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи")
		Или ВРег(Источник) = ВРег("ИспользоватьШифрование")) Тогда
		
		ПодключитьОбработчикОжидания("ПриИзмененииИспользованияПодписанияИлиШифрования", 0.3, Истина);
		Возврат;
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если Не ЗначениеЗаполнено(Источник)
			Или (ТипЗнч(Источник) = Тип("Массив")
			И Источник.Количество() = 0) Тогда
			Возврат;
		КонецЕсли;
		
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		Если ТипЗнч(СсылкаНаФайл) <> ТипСправочникаСФайлами Тогда
			Возврат;
		КонецЕсли;

		Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
			
			Элементы.Список.Обновить();
			Элементы.Список.ТекущаяСтрока = СсылкаНаФайл;
			УстановитьДоступностьФайловыхКоманд();
			
		Иначе
			Если ФайловыеКомандыДоступны() И Элементы.Список.ТекущиеДанные <> Неопределено 
				 И СсылкаНаФайл = Элементы.Список.ТекущиеДанные.Ссылка Тогда
				УстановитьДоступностьФайловыхКоманд();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ПапкиФайлов" Тогда
		Элементы.Список.Обновить();
		УстановитьДоступностьФайловыхКоманд();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияДатаСинхронизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "OpenJournal" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОтбора = ДанныеОтбораЖурналаРегистрации(УчетнаяЗапись);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Список.РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	КакОткрывать = РаботаСФайламиСлужебныйКлиент.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока,
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Не ДанныеФайла.Служебный);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		Если НЕ ФайловыеКомандыДоступны() Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Элемент.ТекущиеДанные.Ссылка);
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ГруппаФайлов", ПараметрыФормы);
		Иначе
			РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, Элемент.ТекущиеДанные.Ссылка, ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		
		ДобавитьФайл();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьКарточкуФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ФайлыРедактируютсяВОблачномСервисе Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивИменФайлов = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		ПеретаскиваемыйФайл = ПараметрыПеретаскивания.Значение[0];
		
		Если ВозможностьСоздаватьГруппыФайлов
			И ТипЗнч(ПеретаскиваемыйФайл) = ТипСправочникаСФайлами
			И ВладелецФайловСовпадает(Параметры.ВладелецФайла, ПеретаскиваемыйФайл) Тогда
			
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Для Каждого ПеретаскиваемыйФайл Из ПараметрыПеретаскивания.Значение Цикл
			
			Если ТипЗнч(ПеретаскиваемыйФайл) = Тип("Файл")
				И ПеретаскиваемыйФайл.ЭтоФайл() Тогда
				МассивИменФайлов.Добавить(ПеретаскиваемыйФайл.ПолноеИмя);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		СтандартнаяОбработка = Ложь;
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
	КонецЕсли;
	
	Если МассивИменФайлов.Количество() > 0 Тогда
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(
			Параметры.ВладелецФайла, УникальныйИдентификатор, МассивИменФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура Добавить(Команда)
	
	ДобавитьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПоШаблону(Команда)
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ОбработчикРезультата",          Неопределено);
	ПараметрыДобавления.Вставить("ВладелецФайла",                 ВладелецФайла);
	ПараметрыДобавления.Вставить("ФормаВладелец",                 ЭтотОбъект);
	ПараметрыДобавления.Вставить("ИмяСправочникаХранилищаФайлов", ИмяСправочникаХранилищаФайлов);
	РаботаСФайламиСлужебныйКлиент.ДобавитьНаОсновеШаблона(ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлСоСканера(Команда)
	
	ЗначениеПараметраКД = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайлов"));
	Если ЗначениеПараметраКД = Неопределено Тогда
		ВладелецФайла = Неопределено;
	Иначе
		ВладелецФайла = ЗначениеПараметраКД.Значение;
	КонецЕсли;
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыДобавления.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	ПараметрыДобавления.Вставить("ЭтоФайл", Ложь);
	РаботаСФайламиСлужебныйКлиент.ДобавитьСоСканера(ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	ФайлСсылка = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка,
		Неопределено, УникальныйИдентификатор, Неопределено, Неопределено);
	РаботаСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);

	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.Список.Обновить();
	
	ПодключитьОбработчикОжидания("ОбновитьДоступностьФайловыхКоманд", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные.Зашифрован Или ТекущиеДанные.ПодписанЭП Или ТекущиеДанные.ФайлРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Список.ТекущаяСтрока);
	РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован
		ИЛИ (ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, , УникальныйИдентификатор);
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	Элементы.Список.СкопироватьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ШаблонВопроса = ?(ТекущиеДанные.ПометкаУдаления,
			НСтр("ru='Снять с ""%1"" пометку на удаление?'"),
			НСтр("ru='Пометить ""%1"" на удаление?'"));
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, ТекущиеДанные.Наименование);
		ДополнительныеПараметры = Новый Структура("ФайлСсылка", ТекущиеДанные.Ссылка);
		Оповещение = Новый ОписаниеОповещения("ПослеВопросОПометкиНаУдаление", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваФайла(Команда)
	
	ОткрытьКарточкуФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ПриОтправкеФайловПочтой(ПараметрыОтправки, Элементы.Список.ВыделенныеСтроки, ВладелецФайла, УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ОтправитьФайлыПоПочте(
		Элементы.Список.ВыделенныеСтроки, УникальныйИдентификатор, ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		РаботаСФайламиКлиент.НапечататьФайлы(ВыделенныеСтроки, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСоШтампом(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСоШтампом = РаботаСФайламиСлужебныйВызовСервера.ТабличныйДокументСоШтампом(ТекущиеДанные.Ссылка, ТекущиеДанные.Ссылка);
	РаботаСФайламиСлужебныйКлиент.ПечатьФайлаСоШтампом(ДокументСоШтампом);
	
КонецПроцедуры

&НаКлиенте
Процедура Предпросмотр(Команда)
	
	Предпросмотр = Не Предпросмотр;
	Элементы.Предпросмотр.Пометка = Предпросмотр;
	УстановитьВидимостьПредпросмотра(Предпросмотр);
	СохранитьВариантПредпросмотра(ТипСправочникаСФайлами, Предпросмотр);
	
	#Если ВебКлиент Тогда
	ОбновитьПредпросмотр();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизацию(Команда)
	
	НастройкаСинхронизации = ПараметрыНастройкиСинхронизации(ВладелецФайла);
	
	Если ЗначениеЗаполнено(НастройкаСинхронизации.УчетнаяЗапись) Тогда
		ТипЗначения = Тип("РегистрСведенийКлючЗаписи.НастройкиСинхронизацииФайлов");
		ПараметрыЗаписи = Новый Массив(1);
		ПараметрыЗаписи[0] = НастройкаСинхронизации;
		
		КлючЗаписи = Новый(ТипЗначения, ПараметрыЗаписи);
	
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Ключ", КлючЗаписи);
	Иначе
		ПараметрыЗаписи = НастройкаСинхронизации;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.НастройкиСинхронизацииФайлов.Форма.ПростаяФормаЗаписиНастройки", ПараметрыЗаписи, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ВладелецФайла <> ВладелецФайла Тогда
		ТекущиеДанные = Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("Родитель", ТекущиеДанные.Ссылка);
	Иначе
		ПараметрыФормы.Вставить("Родитель", ВладелецФайла);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ВладелецФайла",  ВладелецФайла);
	ПараметрыФормы.Вставить("ЭтоНоваяГруппа", Истина);
	ПараметрыФормы.Вставить("ИмяСправочникаХранилищаФайлов", ИмяСправочникаХранилищаФайлов);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ГруппаФайлов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлы(Команда)
	#Если ВебКлиент Тогда
		ТекстПредупреждения =  НСтр("ru = 'В Веб-клиенте импорт файлов не поддерживается.
		                                  |Используйте команду ""Создать"" в списке файлов.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	#КонецЕсли
	
	МассивИменФайлов = РаботаСФайламиСлужебныйКлиент.ИмпортируемыеФайлы();
	
	Если МассивИменФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраКД = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайлов"));
	Если ЗначениеПараметраКД = Неопределено Тогда
		ВладелецФайла = Неопределено;
	Иначе
		ВладелецФайла = ЗначениеПараметраКД.Значение;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаДляДобавления",            ВладелецФайла);
	ПараметрыФормы.Вставить("МассивИменФайлов",              МассивИменФайлов);
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ГруппаФайлов = Неопределено;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоГруппа Тогда
		ГруппаФайлов = ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы.Вставить("ГруппаФайлов",                  ГруппаФайлов);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ФормаИмпортаФайлов", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПапку(Команда)
	
	#Если ВебКлиент Тогда
		ТекстПредупреждения = НСтр("ru = 'В веб-клиенте импорт папок недоступен.
			                             |Используйте команду ""Создать"" в списке файлов.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	#КонецЕсли
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог'");
	Если Не ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаДляДобавления",            ВладелецФайла);
	ПараметрыФормы.Вставить("КаталогНаДиске",                ДиалогОткрытияФайла.Каталог);
	ПараметрыФормы.Вставить("ИмяСправочникаХранилищаФайлов", ИмяСправочникаХранилищаФайлов);
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ГруппаФайлов = Неопределено;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоГруппа Тогда
		ГруппаФайлов = ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы.Вставить("ГруппаФайлов",      ГруппаФайлов);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ФормаИмпортаПапки", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПапку(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПапкаЭкспорта",                  ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ИмяСправочникаХранилищаФайлов",  ИмяСправочникаХранилищаФайлов);
	ПараметрыФормы.Вставить("ИмяСправочникаХранилищаВерсийФайлов", ИмяСправочникаХранилищаВерсийФайлов);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ФормаЭкспортаПапки", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьФайлы(Команда)
	
	ЧислоВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки.Количество();
	
	Если ЧислоВыделенныхСтрок = 2 Тогда
		
		Ссылка1 = Элементы.Список.ВыделенныеСтроки[0];
		Ссылка2 = Элементы.Список.ВыделенныеСтроки[1];
		
		Расширение = НРег(Элементы.Список.ТекущиеДанные.Расширение);
		
		РаботаСФайламиСлужебныйКлиент.СравнитьФайлы(УникальныйИдентификатор, Ссылка1, Ссылка2, Расширение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВГруппу(Команда)
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВладелецФайлов", ВладелецФайла);
		ПараметрыОткрытия.Вставить("ПеремещаемыеФайлы", Элементы.Список.ВыделенныеСтроки);
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ВыборГруппы", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСлужебныеФайлы(Команда)
	
	Элементы.ПоказыватьСлужебныеФайлы.Пометка = 
		РаботаСФайламиСлужебныйКлиент.ПоказыватьСлужебныеФайлыНажатие(Список);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки ЭП и шифрования.

&НаКлиенте
Процедура Подписать(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
		ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения      = Новый ОписаниеОповещения("ДобавлениеПодписейЗавершить", ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("ОбработкаРезультата", ОписаниеОповещения);
	РаботаСФайламиКлиент.ПодписатьФайл(ТекущиеДанные.Ссылка, УникальныйИдентификатор, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(
		ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
		ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = ТекущиеДанные.Ссылка;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ПрисоединенныйФайл,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавлениеПодписейЗавершить", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
		ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ТекущиеДанные.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеФайла.Редактирует)
		ИЛИ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла",  ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ТекущиеДанные.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка)
	
	Зашифровать = Истина;
	РаботаСФайламиСлужебный.ЗаписатьИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Ложь Или Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиСлужебный.ЗаписатьИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместной работы с файлами.

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если (ТекущиеДанные.ФайлРедактируется И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь)
		ИЛИ ТекущиеДанные.Зашифрован
		ИЛИ ТекущиеДанные.ПодписанЭП Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	МассивФайлов = Новый Массив;
	Для Каждого ЭлементСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ЭлементСписка);
		
		Если НЕ ДанныеСтроки.ФайлРедактируется
			ИЛИ НЕ ДанныеСтроки.ФайлРедактируетТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивФайлов",                     МассивФайлов);
		ПараметрыФормы.Вставить("ВозможностьСоздаватьВерсииФайлов", ВозможностьСоздаватьВерсииФайлов);
		ПараметрыФормы.Вставить("Редактирует",                      ДанныеСтроки.РедактируетПользователь);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ФормаЗавершениеРедактирования", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли МассивФайлов.Количество() = 1 Тогда 
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(Обработчик, ДанныеСтроки.Ссылка, УникальныйИдентификатор);
		Если Не ВозможностьСоздаватьВерсииФайлов Тогда
			ПараметрыОбновленияФайла.Вставить("СоздатьНовуюВерсию", Ложь);
		КонецЕсли;
		РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ОсвободитьФайлы(Элементы.Список);
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = Элементы.Список.ВыделенныеСтроки.Количество();
	
	Если КоличествоФайлов = 1 Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.ЗанятьСОповещением(Обработчик, Элементы.Список.ТекущаяСтрока);
	ИначеЕсли КоличествоФайлов > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ЭлементСписка Из Элементы.Список.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(ЭлементСписка);
			
			Если ЗначениеЗаполнено(ДанныеСтроки.РедактируетПользователь) Тогда
				Продолжить;
			КонецЕсли;
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект, МассивФайлов);
		РаботаСФайламиСлужебныйКлиент.ЗанятьСОповещением(Обработчик, МассивФайлов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление(Знач ЕстьРеквизитСлужебный = Ложь)
	
	УсловноеОформление.Элементы.Очистить();
	Список.УсловноеОформление.Элементы.Очистить();
	
	// Оформление файла, занятого для редактирования другим пользователем.
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	Если ЕстьРеквизитСлужебный Тогда
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлРедактируетДругойПользователь");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.Использование = Истина;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Служебный");
		ОтборЭлемента.ПравоеЗначение = Ложь;
	Иначе
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлРедактируетДругойПользователь");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Оформление файла, занятого для редактирования текущим пользователем.
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлРедактируетТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВладелецФайла");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ВладелецФайла;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Служебные файлы
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Служебный");
	Отбор.ПравоеЗначение = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ГруппаФайлов = Неопределено;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ВладелецФайла = Параметры.ВладелецФайла Тогда
		ГруппаФайлов = ТекущиеДанные.Ссылка;
	КонецЕсли;
	Если ЭтоВладелецЭлементовСправочникаФайлы Тогда
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайлИзФайловойСистемы(Параметры.ВладелецФайла, ЭтотОбъект);
	Иначе
		РаботаСФайламиКлиент.ДобавитьФайлы(Параметры.ВладелецФайла, УникальныйИдентификатор, , ГруппаФайлов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл()
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ТекущиеДанные.Наименование, ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла()
	
	Если НЕ ФайловыеКомандыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",              ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр",    ТолькоПросмотр);
	ПараметрыФормы.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ГруппаФайлов", ПараметрыФормы);
	Иначе
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущиеДанные.Ссылка,, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
		Если ДанныеФайла.Зашифрован Тогда
			// Файл может быть изменен в другом сеансе.
			ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			Возврат;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(ПараметрыВыполнения.ДанныеФайла, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Функция ФайловыеКомандыДоступны()
	
	Возврат РаботаСФайламиСлужебныйКлиент.ФайловыеКомандыДоступны(Элементы);
	
КонецФункции

&НаСервере
Процедура СкрытьКнопкиСозданияГруппы()
	Элементы.СоздатьГруппу.Видимость                           = Ложь;
	Элементы.СписокКонтекстноеМенюСоздатьГруппу.Видимость      = Ложь;
	Элементы.ЗагрузитьПапку.Видимость                          = Ложь;
	Элементы.СохранитьПапку.Видимость                          = Ложь;
	Элементы.ПеренестиВГруппу.Видимость                        = Ложь;
	Элементы.СписокКонтекстноеМенюПереместитьВГруппу.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура СкрытьКнопкиДобавления()
	
	Элементы.Добавить.Видимость                           = Ложь;
	Элементы.ДобавитьИзФайлаНаДиске.Видимость             = Ложь;
	Элементы.ДобавитьФайлПоШаблону.Видимость              = Ложь;
	Элементы.ДобавитьФайлСоСканера.Видимость              = Ложь;
	Элементы.СписокКонтекстноеМенюДобавить.Видимость      = Ложь;
	Элементы.СписокКонтекстноеМенюСоздатьГруппу.Видимость = Ложь;
	Элементы.СоздатьГруппу.Видимость                      = Ложь;
	Элементы.СписокКонтекстноеМенюСоздатьГруппу.Видимость = Ложь;
	Элементы.ФормаСкопировать.Видимость                   = Ложь;
	Элементы.СписокКонтекстноеМенюСкопировать.Видимость   = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКнопкиИзменения()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	
	Для каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("Добавить");
		ИменаКоманд.Добавить("ДобавитьФайлСоСканера");
		ИменаКоманд.Добавить("ДобавитьФайлПоШаблону");
	ИначеЕсли ТипЗнч(Элементы.Список.ТекущаяСтрока) <> ТипСправочникаСФайлами Тогда
		ИменаКоманд = Новый Массив;
	Иначе
		ВозможностьОсвободитьФайл = РаботаСФайламиСлужебныйКлиент.ВозможностьОсвободитьФайл(
			ТекущиеДанные.Ссылка,
			ТекущиеДанные.ФайлРедактируетТекущийПользователь,
			ТекущиеДанные.РедактируетПользователь);
			
		ИменаКоманд = ПолучитьДоступныеКоманды(ТекущиеДанные, ФайлыРедактируютсяВОблачномСервисе, ВозможностьОсвободитьФайл);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ПечатьСоШтампом.Видимость = ЕстьЭлектроннаяПодпись
			И (ТекущиеДанные.Расширение = "mxl")
			И ТекущиеДанные.ПодписанЭП;
	КонецЕсли;
	
	Для каждого ИмяЭлементаФормы Из ИменаЭлементовКнопокФормы Цикл
		
		ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено
			Или ИменаКоманд.Найти(ЭлементФормы.Имя) <> Неопределено Тогда
			
			Если НЕ ЭлементФормы.Доступность Тогда
				ЭлементФормы.Доступность = Истина;
			КонецЕсли;
			
		ИначеЕсли ЭлементФормы.Доступность Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ОбновитьПредпросмотр", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросОПометкиНаУдаление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьСнятьПометкуУдаления(ДополнительныеПараметры.ФайлСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), Элементы.Список.ВыделенныеСтроки);
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическийСписок(ИмяСправочникаХранилищаФайлов, Знач ЕстьРеквизитСлужебный = Ложь)
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
	|			ТОГДА ЕСТЬNULL(Файлы.ИндексКартинки, 2) + 1
	|		ИНАЧЕ ЕСТЬNULL(Файлы.ИндексКартинки, 2)
	|	КОНЕЦ КАК ИндексКартинки,
	|	Файлы.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Файлы.Описание КАК СТРОКА(500)) КАК Описание,
	|	Файлы.Автор,
	|	Файлы.ДатаСоздания,
	|	Файлы.Изменил КАК Отредактировал,
	|	ДОБАВИТЬКДАТЕ(Файлы.ДатаМодификацииУниверсальная, СЕКУНДА, &СекундДоМестногоВремени) КАК ДатаИзменения,
	|	ВЫРАЗИТЬ(Файлы.Размер / 1024 КАК ЧИСЛО(10, 0)) КАК Размер,
	|	Файлы.ПодписанЭП,
	|	Файлы.Зашифрован,
	|	ВЫБОР
	|		КОГДА Файлы.ПодписанЭП
	|				И Файлы.Зашифрован
	|			ТОГДА 2
	|		КОГДА Файлы.Зашифрован
	|			ТОГДА 1
	|		КОГДА Файлы.ПодписанЭП
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК НомерКартинкиПодписанЗашифрован,
	|	ВЫБОР
	|		КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируется,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетТекущийПользователь,
	|	ВЫБОР
	|		КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
	|				И Файлы.Редактирует <> &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетДругойПользователь,
	|	Файлы.Расширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
	|				И Файлы.Редактирует = НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись
	|		ИНАЧЕ Файлы.Редактирует
	|	КОНЕЦ КАК Редактирует,
	|	Файлы.Редактирует КАК РедактируетПользователь,
	|	&ЭтоГруппа КАК ЭтоГруппа,
	|	&Служебный КАК Служебный,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.ХранитьВерсии КАК ХранитьВерсии
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
	|		ПО Файлы.Ссылка = СтатусыСинхронизацииФайловСОблачнымСервисом.Файл
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайлов";
	
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Служебный", ?(ЕстьРеквизитСлужебный, "Файлы.Служебный", "ЛОЖЬ"));
	
	СвойстваСписка.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоГруппа",
		?(ВозможностьСоздаватьГруппыФайлов, "Файлы.ЭтоГруппа", "ЛОЖЬ"));
		
	СвойстваСписка.ОсновнаяТаблица  = ПолноеИмяСправочника;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	ПустыеПользователи = Новый Массив;
	ПустыеПользователи.Добавить(Неопределено);
	ПустыеПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.ВнешниеПользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.УчетныеЗаписиСинхронизацииФайлов.ПустаяСсылка());
	
	Список.Параметры.УстановитьЗначениеПараметра("ВладелецФайлов",      Параметры.ВладелецФайла);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("ПустыеПользователи",  ПустыеПользователи);
	
	ДатаУниверсальная = ТекущаяДатаСеанса();
	Список.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени",
		МестноеВремя(ДатаУниверсальная, ЧасовойПоясСеанса()) - ДатаУниверсальная);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Команды зависимые от состояния объектов.
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Занять");
	ИменаКоманд.Добавить("Освободить");
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("УстановитьПометкуУдаления");
	ИменаКоманд.Добавить("КонтекстноеМенюУстановитьПометкуУдаления");
	
	ИменаКоманд.Добавить("Подписать");
	ИменаКоманд.Добавить("ДобавитьЭПИзФайла");
	ИменаКоманд.Добавить("СохранитьВместеСЭП");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("Печать");
	ИменаКоманд.Добавить("ПечатьСоШтампом");
	
	ИменаКоманд.Добавить("Отправить");
	
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	// Команды независимые от состояния объектов.
	ИменаКоманд.Добавить("Добавить");
	ИменаКоманд.Добавить("ДобавитьИзФайлаНаДиске");
	ИменаКоманд.Добавить("ДобавитьФайлПоШаблону");
	ИменаКоманд.Добавить("ДобавитьФайлСоСканера");
	ИменаКоманд.Добавить("ОткрытьСвойстваФайла");
	ИменаКоманд.Добавить("Скопировать");
	ИменаКоманд.Добавить("ЗагрузитьФайлы");
	ИменаКоманд.Добавить("ЗагрузитьПапку");
	
	ИменаКоманд.Добавить("ПереместитьВГруппу");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Простые команды доступные любому пользователю, читающему файлы.
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ТекущиеДанныеФайла, ФайлыРедактируютсяВОблачномСервисе, ВозможностьОсвободитьФайл)
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	ФайлРедактируетТекущийПользователь = ТекущиеДанныеФайла.ФайлРедактируетТекущийПользователь;
	ФайлРедактируется                  = ТекущиеДанныеФайла.ФайлРедактируется;
	ФайлПодписан                       = ТекущиеДанныеФайла.ПодписанЭП;
	ФайлЗашифрован                     = ТекущиеДанныеФайла.Зашифрован;
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			Если Не ВозможностьОсвободитьФайл Тогда
				УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			КонецЕсли;
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандуИзМассива(ИменаКоманд, "УстановитьПометкуУдаления");
		УдалитьКомандуИзМассива(ИменаКоманд, "КонтекстноеМенюУстановитьПометкуУдаления");
		УдалитьКомандыЭП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ТекущиеДанныеФайла.ЭтоГруппа Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Подписать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭПИзФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "Скопировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		УдалитьКомандуИзМассива(ИменаКоманд, "Занять");
		УдалитьКомандуИзМассива(ИменаКоманд, "Отправить");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПечатьСоШтампом");
		УдалитьКомандуИзМассива(ИменаКоманд, "Печать");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Если ФайлыРедактируютсяВОблачномСервисе Тогда
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Добавить");
		УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьФайлПоШаблону");
		УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьФайлСоСканера");
		УдалитьКомандуИзМассива(ИменаКоманд, "Скопировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "СоздатьГруппу");
		УдалитьКомандуИзМассива(ИменаКоманд, "ПереместитьВГруппу");
		УдалитьКомандуИзМассива(ИменаКоманд, "УстановитьПометкуУдаления");
		УдалитьКомандуИзМассива(ИменаКоманд, "КонтекстноеМенюУстановитьПометкуУдаления");
		УдалитьКомандуИзМассива(ИменаКоманд, "Занять");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗагрузитьФайлы");
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗагрузитьПапку");
		
	КонецЕсли;
	
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭП(ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "Подписать");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользованияПодписанияИлиШифрования()
	
	ПриИзмененииИспользованияПодписанияИлиШифрованияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИспользованияПодписанияИлиШифрованияНаСервере()
	
	РаботаСФайламиСлужебный.КриптографияПриСозданииФормыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

// Продолжение процедуры Подписать, ДобавитьЭПИзФайла.
&НаКлиенте
Процедура ДобавлениеПодписейЗавершить(Успех, Контекст) Экспорт
	
	Если Успех = Истина Тогда
		УстановитьДоступностьФайловыхКоманд();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВариантПредпросмотра(ТипСправочникаСФайлами, Предпросмотр)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ТипСправочникаСФайлами, "Предпросмотр", Предпросмотр);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОтправкеФайловПочтой(ПараметрыОтправки, Знач ФайлыДляОтправки, ВладелецФайлов, УникальныйИдентификатор)
	РаботаСФайламиПереопределяемый.ПриОтправкеФайловПочтой(ПараметрыОтправки, ФайлыДляОтправки, ВладелецФайлов, УникальныйИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСнятьПометкуУдаления(ФайлСсылка)
	ФайлСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Не ФайлСсылка.ПометкаУдаления);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПредпросмотра(ИспользоватьПредпросмотр)
	
	Элементы.АдресДанныхФайла.Видимость = ИспользоватьПредпросмотр;
	Элементы.Предпросмотр.Пометка = ИспользоватьПредпросмотр;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр()
	
	Если Не Предпросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И РасширенияПоддерживающиеПредпросмотр.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		
		Попытка
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор,, АдресДанныхФайла);
			АдресДанныхФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		Исключение
			// Если файла не существует, то будет вызвано исключение.
			АдресДанныхФайла         = Неопределено;
			ТекстНевыбраннойКартинки = НСтр("ru = 'Предварительный просмотр недоступен по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	Иначе
		
		АдресДанныхФайла         = Неопределено;
		ТекстНевыбраннойКартинки = НСтр("ru = 'Нет данных для предварительного просмотра'");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресДанныхФайла) Тогда
		Элементы.АдресДанныхФайла.ТекстНевыбраннойКартинки = ТекстНевыбраннойКартинки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПояснениеОблачногоСервиса()
	
	ВидимостьПояснения = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюФайлов") Тогда
		
		СведенияОСинхронизации = РаботаСФайламиСлужебный.СведенияОСинхронизации(ВладелецФайла.Ссылка);
		
		Если СведенияОСинхронизации.Количество() > 0  Тогда
			
			ФайлыРедактируютсяВОблачномСервисе = Истина;
			УчетнаяЗапись = СведенияОСинхронизации.УчетнаяЗапись;
			ВидимостьПояснения = Истина;
			
			АдресПапкиВОблачномСервисе = РаботаСФайламиСлужебныйКлиентСервер.АдресВОблачномСервисе(
				СведенияОСинхронизации.Сервис, СведенияОСинхронизации.Href);
				
			ЧастиСтроки = Новый Массив;
			ЧастиСтроки.Добавить(НСтр("ru = 'Работа с файлами ведется в облачном сервисе'"));
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СведенияОСинхронизации.УчетнаяЗаписьНаименование,,,, АдресПапкиВОблачномСервисе));
			ЧастиСтроки.Добавить(".  ");
			Элементы.ДекорацияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			
			Элементы.ДекорацияКартинкаСтатусСинхронизации.Видимость = НЕ СведенияОСинхронизации.Синхронизирован;
			Элементы.ДекорацияДатаСинхронизации.ОтображениеПодсказки =?(СведенияОСинхронизации.Синхронизирован, ОтображениеПодсказки.Нет, ОтображениеПодсказки.Кнопка);
			
			ЧастиСтроки.Очистить();
			ЧастиСтроки.Добавить(НСтр("ru = 'Синхронизировано'"));
			ЧастиСтроки.Добавить(": ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Формат(СведенияОСинхронизации.ДатаСинхронизации, "ДЛФ=DD"),,,, "OpenJournal"));
			Элементы.ДекорацияДатаСинхронизации.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПояснениеОблачногоСервиса.Видимость = ВидимостьПояснения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОтбораЖурналаРегистрации(Сервис)
	Возврат РаботаСФайламиСлужебный.ДанныеОтбораЖурналаРегистрации(Сервис);
КонецФункции

&НаСервере
Функция ПараметрыНастройкиСинхронизации(ВладелецФайла)
	
	ТипВладельцаФайла = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипСправочникаСФайлами);
	
	Отбор = Новый Структура(
	"ВладелецФайла, ТипВладельцаФайла, УчетнаяЗапись",
		ВладелецФайла,
		ТипВладельцаФайла,
		Справочники.УчетныеЗаписиСинхронизацииФайлов.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСинхронизацииФайлов.ВладелецФайла,
		|	НастройкиСинхронизацииФайлов.ТипВладельцаФайла,
		|	НастройкиСинхронизацииФайлов.УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.НастройкиСинхронизацииФайлов КАК НастройкиСинхронизацииФайлов
		|ГДЕ
		|	НастройкиСинхронизацииФайлов.ВладелецФайла = &ВладелецФайла
		|	И НастройкиСинхронизацииФайлов.ТипВладельцаФайла = &ТипВладельцаФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ТипВладельцаФайла", ТипВладельцаФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Отбор.УчетнаяЗапись = ВыборкаДетальныеЗаписи.УчетнаяЗапись;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьФайловыхКоманд()
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВладелецФайловСовпадает(ВладелецФайлов, ПеретаскиваемыйФайл)
	
	Возврат ВладелецФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПеретаскиваемыйФайл, "ВладелецФайла");
	
КонецФункции

#КонецОбласти
