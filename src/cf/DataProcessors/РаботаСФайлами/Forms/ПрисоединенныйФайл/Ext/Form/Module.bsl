///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипВладельца  = ТипЗнч(Параметры.ВладелецФайла);
	
	Если ЗначениеЗаполнено(Параметры.ПрисоединенныйФайл) Тогда
		ПрисоединенныйФайл = Параметры.ПрисоединенныйФайл;
	Иначе
		ПрисоединенныйФайл = Параметры.Ключ;
	КонецЕсли;
	
	ДоступнаЭлектроннаяПодпись = РаботаСФайламиСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(ПрисоединенныйФайл));
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ПараметрыОтправки = ?(ЗначениеЗаполнено(Параметры.ПараметрыОтправки),
		Параметры.ПараметрыОтправки, РаботаСФайламиСлужебный.ПодготовитьСтруктуруПараметровОтправки());
	
	РаботаСФайламиСлужебный.ФормаЭлементаПриСозданииНаСервере(
		ЭтотОбъект, Отказ, СтандартнаяОбработка, Параметры, ТолькоПросмотр, Истина);
	
	Элементы.ВладелецФайла0.Заголовок = ТипВладельца;
	
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	ОбновитьЗаголовок();
	ОбновитьПояснениеОблачногоСервиса(ПрисоединенныйФайл);
	
	РаботаСФайламиПереопределяемый.ПриСозданииФормыЭлементаФайлов(ЭтотОбъект);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.Описание.Высота = 0;
		Элементы.Наименование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ВладелецФайла.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ГруппаСведенияЧасть1.ВыравниваниеЭлементовИЗаголовков =
			ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		Элементы.ГруппаСведенияЧасть2.ВыравниваниеЭлементовИЗаголовков =
			ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		Элементы.ГруппаХарактеристикиФайла.ВыравниваниеЭлементовИЗаголовков =
			ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НаименованиеДоЗаписи = ЭтотОбъект.Объект.Наименование;
	
	ДатаМодификации = МестноеВремя(ЭтотОбъект.Объект.ДатаМодификацииУниверсальная);
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
	
	ПрочитатьСертификатыПодписей();
	ОтображатьВкладкиДополнительныхДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	РазблокироватьОбъект(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант") И (ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи")
		Или ВРег(Источник) = ВРег("ИспользоватьШифрование")) Тогда
		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияПодписанияИлиШифрования", 0.3, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл"
		И Источник = ЭтотОбъект.Объект.Ссылка
		И Параметр <> Неопределено
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Событие")
		И (Параметр.Событие = "ЗаконченоРедактирование"
		   Или Параметр.Событие = "РедактированиеОтменено") Тогда
		ОбновитьОбъект();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияДатаСинхронизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "OpenJournal" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОтбора      = ДанныеОтбораЖурналаРегистрации(УчетнаяЗапись);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПодписи

&НаКлиенте
Процедура ЭлектронныеПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияНажатие(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.ОткрытьИнструкциюПоТипичнымПроблемамПриРаботеСПрограммами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыШифрования

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьСертификатШифрования(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд файлов

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	СтандартныеПодсистемыКлиент.ПоказатьВСписке(ЭтотОбъект["Объект"].Ссылка, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.Зашифрован
		ИЛИ ЭтотОбъект.Объект.ПодписанЭП
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ЭтотОбъект.Объект.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ОбновитьИзФайлаНаДискеЗавершение", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписатьИЗакрыть(Команда)
	
	Если ОбработатьКомандуЗаписиФайла() Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ТекстОшибки", "");
		Результат.Вставить("ФайлДобавлен", Истина);
		Результат.Вставить("ФайлСсылка", ЭтотОбъект.Объект.Ссылка);
		
		Закрыть(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяЗаписать(Команда)
	
	ОбработатьКомандуЗаписиФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеУстановитьПометкуУдаления(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если ЭтотОбъект.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения файла.
				      |Записать изменения и снять пометку на удаление с файла
				      |""%1""?'");
		Иначе
			ТекстВопроса = НСтр(
				"ru = 'Для выполнения действия требуется записать изменения файла.
				      |Записать изменения и пометить на удаление файл
				      |""%1""?'");
		КонецЕсли;
	Иначе
		Если ЭтотОбъект.Объект.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять пометку на удаление с файла
			                          |""%1""?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить на удаление файл
			                          |""%1""?'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстВопроса, ЭтотОбъект.Объект.Ссылка);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартныеУстановитьПометкуУдаленияОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеУстановитьПометкуУдаленияОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Объект.ПометкаУдаления = НЕ ЭтотОбъект.Объект.ПометкаУдаления;
		ОбработатьКомандуЗаписиФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		ПеречитатьДанныеССервера();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные изменены. Перечитать данные?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтандартнаяПеречитатьОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяПеречитатьОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеречитатьДанныеССервера();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеСкопировать(Команда)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначениеКопирования", ЭтотОбъект.Объект.Ссылка);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка)
		Или ОбработатьКомандуЗаписиФайла() Тогда
		ПечатьФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСоШтампом(Команда)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка)
		Или ОбработатьКомандуЗаписиФайла() Тогда
		ДокументСоШтампом = РаботаСФайламиСлужебныйВызовСервера.ТабличныйДокументСоШтампом(ЭтотОбъект.Объект.Ссылка, ЭтотОбъект.Объект.Ссылка);
		РаботаСФайламиСлужебныйКлиент.ПечатьФайлаСоШтампом(ДокументСоШтампом);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка)
		Или ОбработатьКомандуЗаписиФайла() Тогда
		Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект.Объект.Ссылка);
		РаботаСФайламиСлужебныйКлиент.ОтправитьФайлыПоПочте(Файлы, УникальныйИдентификатор, ПараметрыОтправки);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд ЭП и шифрования.

&НаКлиенте
Процедура Подписать(Команда)
	
	Если ЭтоНовый()
		Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Не ЗаписатьФайл() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения      = Новый ОписаниеОповещения("ПриПолученииПодписи", ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("ОбработкаРезультата", ОписаниеОповещения);
	РаботаСФайламиКлиент.ПодписатьФайл(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если ЭтоНовый()
		Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныйФайл = ЭтотОбъект.Объект.Ссылка;
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ПрисоединенныйФайл,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПриПолученииПодписей", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если ЭтоНовый()
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьВместеСЭП(
		ЭтотОбъект.Объект.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если ЭтоНовый() Или ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Не ЗаписатьФайл() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ЭтотОбъект.Объект.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(
		Обработчик,
		ДанныеФайла,
		УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРабочегоКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ЭтотОбъект.Объект.Ссылка);
		
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_Файл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если ЭтоНовый() Или Не ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ЭтотОбъект.Объект.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	ИмяРабочегоКаталога = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	
	РасшифроватьСервер(Результат.МассивДанныхДляЗанесенияВБазу, ИмяРабочегоКаталога);
	
	РаботаСФайламиСлужебныйКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ЭтотОбъект.Объект.Ссылка);
	
	ЗаполнитьСписокШифрованияНаСервере();
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрованияНаСервере()
	РаботаСФайламиСлужебный.ЗаполнитьСписокШифрования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭПСписокОткрытьПодпись(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭП(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписи(ЭтотОбъект,
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		Элементы.ЭлектронныеПодписи.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ДанныеФайла = ДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ПроверитьПодписи(ЭтотОбъект, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	
	Если ТекущиеДанные.Объект = Неопределено Или ТекущиеДанные.Объект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.СохранитьПодпись(ТекущиеДанные.АдресПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЭПОтветПолучен", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭПОтветПолучен(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьИзСпискаПодписейИЗаписатьФайл();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_Файл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.Отпечаток);
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭП()
	
	РаботаСФайламиСлужебныйКлиент.УстановитьДоступностьКомандСпискаЭлектронныхПодписей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаШифрования()
	
	РаботаСФайламиСлужебныйКлиент.УстановитьДоступностьКомандСпискаСертификатовШифрования(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд для поддержки совместной работы с файлами.

&НаКлиенте
Процедура Занять(Команда)
	
	Если Модифицированность И Не ОбработатьКомандуЗаписиФайла() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.ЗанятьСОповещением(Обработчик, ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.ПодписанЭП
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	   И ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ОбработатьКомандуЗаписиФайла() Тогда
		Возврат
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует) Тогда
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено,
			ДанныеФайла, УникальныйИдентификатор);
	Иначе
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено,
			ДанныеФайла, УникальныйИдентификатор);
		
		ОбновитьОбъект();
		
		ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
		Оповестить("Запись_Файл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если ЭтоНовый()
		Или Не ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		Или ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
			Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ЭтотОбъект.Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(ОписаниеОповещения, ДанныеФайла.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	Если Не ВозможностьСоздаватьВерсииФайлов Тогда
		ПараметрыОбновленияФайла.Вставить("СоздатьНовуюВерсию", Ложь);
	КонецЕсли;
	ПараметрыОбновленияФайла.ФайлРедактируетТекущийПользователь = ДанныеФайла.ФайлРедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	ОбновитьОбъект();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_Файл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если ЭтоНовый()
	 ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
	 ИЛИ ЭтотОбъект.Объект.Редактирует <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайл();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "РедактированиеОтменено"), ЭтотОбъект.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьФайл();
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	РаботаСФайламиСлужебныйКлиент.СохранитьИзмененияФайлаСОповещением(Обработчик,
		ЭтотОбъект.Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Ссылка) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (Присоединенный файл)'"), Строка(ЭтотОбъект.Объект.Ссылка));
	Иначе
		Заголовок = НСтр("ru = 'Присоединенный файл (Создание)'")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВкладкиДополнительныхДанных()
	
	Если Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество() > 0 Тогда
		ПустаяДекорация = Элементы.Найти("Свойства_ПустаяДекорация");
		Если ПустаяДекорация <> Неопределено Тогда
			ВидимостьДополнительныхРеквизитов = ПустаяДекорация.Видимость;
		Иначе
			ВидимостьДополнительныхРеквизитов = Истина;
		КонецЕсли;
	Иначе
		ВидимостьДополнительныхРеквизитов = Ложь;
	КонецЕсли;
	
	ИспользоватьВкладки = ВидимостьДополнительныхРеквизитов Или Элементы.ГруппаЭлектронныеПодписи.Видимость Или Элементы.ГруппаСертификатыШифрования.Видимость;
	Элементы.ГруппаДополнительныеДанныеСтраницы.ОтображениеСтраниц =
	?(ИспользоватьВкладки , ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат РаботаСФайлами.ДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра()
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ЭтотОбъект.Объект.Расширение) <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
		И ЭтотОбъект.Объект.Редактирует = ТекущийПользователь;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ЭтотОбъект.Объект.Ссылка, Неопределено, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ФайлРедактируется = ЗначениеЗаполнено(ЭтотОбъект.Объект.Редактирует)
			И ЭтотОбъект.Объект.Редактирует = ТекущийПользователь;
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ЭтотОбъект.Объект.Ссылка, Неопределено, УникальныйИдентификатор);
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла()
	
	Если ЭтоНовый()
		ИЛИ ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ЭтотОбъект.Объект.Ссылка, Неопределено, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак()
	
	Если ЭтоНовый() Или ЭтотОбъект.Объект.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(ЭтотОбъект.Объект.Ссылка,, УникальныйИдентификатор);
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Неопределено, ДанныеФайла, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзСпискаПодписейИЗаписатьФайл()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого НомерВыделеннойСтроки Из Элементы.ЭлектронныеПодписи.ВыделенныеСтроки Цикл
		УдаляемаяСтрока = ЭлектронныеПодписи.НайтиПоИдентификатору(НомерВыделеннойСтроки);
		ИндексыСтрок.Добавить(УдаляемаяСтрока.ПорядковыйНомер);
	КонецЦикла;
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	МодульЭлектроннаяПодпись.УдалитьПодпись(ЗаписываемыйОбъект, ИндексыСтрок);
	ЗаписатьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
	РаботаСФайламиСлужебный.ЗаполнитьСписокПодписей(ЭтотОбъект);
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопок(Форма, Элементы)
	
	ИменаВсехКоманд = ИменаВсехКомандФормы();
	ИменаКоманд = ДоступныеКомандыФормы(Форма);
		
	Если Форма.ЭлектронныеПодписи.Количество() = 0 Тогда
		СделатьКомандуНедоступной(ИменаКоманд, "ОткрытьПодпись");
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаВсехКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Доступность = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДоступнаПечатьСоШтампом = Форма["Объект"].Расширение = "mxl" И Форма["Объект"].ПодписанЭП;
	
	Элементы.ПечатьСоШтампом.Видимость = ДоступнаПечатьСоШтампом;
	
	Если Не ДоступнаПечатьСоШтампом Тогда
		Элементы.ПодменюПечать.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.Печать.Заголовок = НСтр("ru='Печать'");
	Иначе
		Элементы.ПодменюПечать.Вид = ВидГруппыФормы.Подменю;
		Элементы.Печать.Заголовок = НСтр("ru='Сразу на принтер'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаВсехКомандФормы()
	
	ИменаКоманд = ИменаКомандИзмененияФайла();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаКоманд, ИменаПрочихКоманд()); 
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаПрочихКоманд()
	
	ИменаКоманд = Новый Массив;
	
	// Простые команды, которые доступны любому пользователю читающему файлы.
	ИменаКоманд.Добавить("СохранитьВместеСЭП");
	
	ИменаКоманд.Добавить("ОткрытьСертификат");
	ИменаКоманд.Добавить("ОткрытьПодпись");
	ИменаКоманд.Добавить("ПроверитьЭП");
	ИменаКоманд.Добавить("ПроверитьВсе");
	ИменаКоманд.Добавить("СохранитьПодпись");
	
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаКомандИзмененияФайла()
	
	ИменаКоманд = Новый Массив;
	
	ИменаКоманд.Добавить("Подписать");
	ИменаКоманд.Добавить("ДобавитьЭПИзФайла");
	
	ИменаКоманд.Добавить("УдалитьЭП");
	
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("Занять");
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	ИменаКоманд.Добавить("СохранитьИзменения");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("СтандартныеСкопировать");
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	ИменаКоманд.Добавить("СтандартнаяЗаписать");
	ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
	ИменаКоманд.Добавить("СтандартныеУстановитьПометкуУдаления");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеКомандыФормы(Форма)
	
	ФормаОбъект = Форма["Объект"];
	ЭтоНовыйФайл = ФормаОбъект.Ссылка.Пустая();
	
	Если ЭтоНовыйФайл Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("СтандартнаяЗаписать");
		ИменаКоманд.Добавить("СтандартнаяЗаписатьИЗакрыть");
		Возврат ИменаКоманд;
	КонецЕсли;
	
	ИменаКоманд = ИменаВсехКомандФормы();
	
	ФайлРедактируетсяВОблаке = Форма.ФайлРедактируетсяВОблаке;
	ФайлРедактируется = ЗначениеЗаполнено(ФормаОбъект.Редактирует) Или ФайлРедактируетсяВОблаке;
	ФайлРедактируетТекущийПользователь = ФормаОбъект.Редактирует = Форма.ТекущийПользователь;
	ФайлПодписан = ФормаОбъект.ПодписанЭП;
	ФайлЗашифрован = ФормаОбъект.Зашифрован;
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			СделатьКомандуНедоступной(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			СделатьКомандуНедоступной(ИменаКоманд, "ЗакончитьРедактирование");
			СделатьКомандуНедоступной(ИменаКоманд, "Освободить");
			СделатьКомандуНедоступной(ИменаКоманд, "Редактировать");
		КонецЕсли;
		СделатьКомандуНедоступной(ИменаКоманд, "Занять");
		
		СделатьКомандыЭПНедоступными(ИменаКоманд);
		
		СделатьКомандуНедоступной(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		СделатьКомандуНедоступной(ИменаКоманд, "СохранитьКак");
		
		СделатьКомандуНедоступной(ИменаКоманд, "Зашифровать");
		СделатьКомандуНедоступной(ИменаКоманд, "Расшифровать");
	Иначе
		СделатьКомандуНедоступной(ИменаКоманд, "ЗакончитьРедактирование");
		СделатьКомандуНедоступной(ИменаКоманд, "Освободить");
		СделатьКомандуНедоступной(ИменаКоманд, "СохранитьИзменения");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		СделатьКомандуНедоступной(ИменаКоманд, "ЗакончитьРедактирование");
		СделатьКомандуНедоступной(ИменаКоманд, "Освободить");
		СделатьКомандуНедоступной(ИменаКоманд, "Редактировать");
		СделатьКомандуНедоступной(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	Иначе
		СделатьКомандуНедоступной(ИменаКоманд, "ОткрытьСертификат");
		СделатьКомандуНедоступной(ИменаКоманд, "ОткрытьПодпись");
		СделатьКомандуНедоступной(ИменаКоманд, "ПроверитьЭП");
		СделатьКомандуНедоступной(ИменаКоманд, "ПроверитьВсе");
		СделатьКомандуНедоступной(ИменаКоманд, "СохранитьПодпись");
		СделатьКомандуНедоступной(ИменаКоманд, "УдалитьЭП");
		СделатьКомандуНедоступной(ИменаКоманд, "СохранитьВместеСЭП");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		СделатьКомандыЭПНедоступными(ИменаКоманд);
		СделатьКомандуНедоступной(ИменаКоманд, "ЗакончитьРедактирование");
		СделатьКомандуНедоступной(ИменаКоманд, "Освободить");
		СделатьКомандуНедоступной(ИменаКоманд, "Редактировать");
		
		СделатьКомандуНедоступной(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		СделатьКомандуНедоступной(ИменаКоманд, "Зашифровать");
		
		СделатьКомандуНедоступной(ИменаКоманд, "ОткрытьКаталогФайла");
		СделатьКомандуНедоступной(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		СделатьКомандуНедоступной(ИменаКоманд, "СохранитьКак");
		
		СделатьКомандуНедоступной(ИменаКоманд, "Подписать");
	Иначе
		СделатьКомандуНедоступной(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Если ФайлРедактируетсяВОблаке Тогда
		СделатьКомандуНедоступной(ИменаКоманд, "СтандартныеСкопировать");
		СделатьКомандуНедоступной(ИменаКоманд, "СтандартныеУстановитьПометкуУдаления");
		СделатьКомандуНедоступной(ИменаКоманд, "СтандартнаяЗаписать");
		СделатьКомандуНедоступной(ИменаКоманд, "СтандартнаяЗаписатьИЗакрыть");
		СделатьКомандуНедоступной(ИменаКоманд, "СохранитьИзменения");
		
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		СделатьКомандыЭПНедоступными(ИменаКоманд);
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СделатьКомандыЭПНедоступными(Знач ИменаКоманд)
	
	СделатьКомандуНедоступной(ИменаКоманд, "Подписать");
	СделатьКомандуНедоступной(ИменаКоманд, "ДобавитьЭПИзФайла");
	СделатьКомандуНедоступной(ИменаКоманд, "СохранитьВместеСЭП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СделатьКомандуНедоступной(ИменаКоманд, ИмяКоманды)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаКоманд, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу,
                            МассивОтпечатков,
                            МассивФайловВРабочемКаталогеДляУдаления,
                            ИмяРабочегоКаталога)
	
	Зашифровать = Истина;
	
	РаботаСФайламиСлужебный.ЗаписатьИнформациюОШифровании(
		ЭтотОбъект.Объект.Ссылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		УникальныйИдентификатор,
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
		
	ОбновитьИнформациюОСертификатахОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, ИмяРабочегоКаталога)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиСлужебный.ЗаписатьИнформациюОШифровании(
		ЭтотОбъект.Объект.Ссылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		УникальныйИдентификатор,
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
		
	ОбновитьИнформациюОСертификатахОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъект()
	
	ЗначениеВРеквизитФормы(ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект(), "Объект");
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьФайл()
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	РаботаСФайламиСлужебный.ОсвободитьФайл(ЗаписываемыйОбъект);
	ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьКомандуЗаписиФайла()
	
	Если ПустаяСтрока(ЭтотОбъект.Объект.Наименование) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для продолжения укажите имя файла.'"), , "Наименование", "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		РаботаСФайламиСлужебныйКлиент.КорректноеИмяФайла(ЭтотОбъект.Объект.Наименование);
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ,"Наименование", "Объект");
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ЗаписатьФайл() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	
	Оповестить("Запись_Файл",
	           Новый Структура("ЭтоНовый, Событие", ФайлБылСоздан, "Запись"),
	           ЭтотОбъект.Объект.Ссылка);
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
	
	Если НаименованиеДоЗаписи <> ЭтотОбъект.Объект.Наименование Тогда
		// в кэше обновить файл
		РаботаСФайламиСлужебныйКлиент.ОбновитьИнформациюВРабочемКаталоге(
			ЭтотОбъект.Объект.Ссылка, ЭтотОбъект.Объект.Наименование);
		
		НаименованиеДоЗаписи = ЭтотОбъект.Объект.Наименование;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПеречитатьДанныеССервера()
	
	ФайлОбъект = ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	РаботаСФайламиСлужебный.ЗаполнитьСписокПодписей(ЭтотОбъект);
	РаботаСФайламиСлужебный.ЗаполнитьСписокШифрования(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьФайл(Знач ПараметрОбъект = Неопределено)
	
	Если ПараметрОбъект = Неопределено Тогда
		ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	Иначе
		ЗаписываемыйОбъект = ПараметрОбъект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		НачатьТранзакцию();
		Попытка
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ЗначениеКопирования);
			
			Если РаботаСФайламиСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				СсылкаНового = Справочники[ИмяСправочника].ПолучитьСсылку();
				ЗаписываемыйОбъект.УстановитьСсылкуНового(СсылкаНового);
				РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
				ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Иначе
				СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ЗаписываемыйОбъект.ДатаМодификацииУниверсальная,
				ЗаписываемыйОбъект.Наименование, ЗаписываемыйОбъект.Расширение); 
				ЗаписываемыйОбъект.Том              = СведенияОФайле.Том;
				ЗаписываемыйОбъект.ПутьКФайлу       = СведенияОФайле.ПутьКФайлу;
				ЗаписываемыйОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			КонецЕсли;
			
			Если ДоступнаЭлектроннаяПодпись Тогда
				РаботаСФайламиСлужебный.ПеренестиРезультатыПроверкиПодписей(ЭлектронныеПодписи, ЗначениеКопирования);
			КонецЕсли;
			
			ЗаписываемыйОбъект.Записать();
			
			Если ДоступнаЭлектроннаяПодпись И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
				МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
				
				СертификатыИсточника = МодульЭлектроннаяПодпись.СертификатыШифрования(ЗначениеКопирования);
				МодульЭлектроннаяПодпись.ЗаписатьСертификатыШифрования(ЗаписываемыйОбъект, СертификатыИсточника);
				
				УстановленныеПодписи = МодульЭлектроннаяПодпись.УстановленныеПодписи(ЗначениеКопирования);
				МодульЭлектроннаяПодпись.ДобавитьПодпись(ЗаписываемыйОбъект, УстановленныеПодписи);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	Иначе
		НачатьТранзакцию();
		Попытка
			Если ДоступнаЭлектроннаяПодпись Тогда
				РаботаСФайламиСлужебный.ПеренестиРезультатыПроверкиПодписей(ЭлектронныеПодписи, ЗаписываемыйОбъект.Ссылка);
			КонецЕсли;
			ЗаписываемыйОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	Если ПараметрОбъект = Неопределено Тогда
		ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
	КонецЕсли;
	
	ЗначениеКопирования = Справочники[ИмяСправочника].ПустаяСсылка();
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	ОбновитьЗаголовок();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазблокироватьОбъект(Знач Ссылка, Знач УникальныйИдентификатор)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Печать

&НаКлиенте
Процедура ПечатьФайла()
	
	Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект.Объект.Ссылка);
	РаботаСФайламиКлиент.НапечататьФайлы(Файлы, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

// Продолжение процедуры ПодписатьФайлЭП.
// Вызывается из подсистемы ЭлектроннаяПодпись после подписания данных для нестандартного
// способа добавления подписи в объект.
//
&НаКлиенте
Процедура ПриПолученииПодписи(ПараметрыВыполнения, Контекст) Экспорт
	
	ОбновитьИнформациюОПодписиОбъекта();
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

// Продолжение процедуры ПодписатьФайлЭП.
// Вызывается из подсистемы ЭлектроннаяПодпись после подготовки подписей из файлов
// для нестандартного способа добавления подписи в объект.
//
&НаКлиенте
Процедура ПриПолученииПодписей(ПараметрыВыполнения, Контекст) Экспорт
	
	ОбновитьИнформациюОПодписиОбъекта();
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОПодписиОбъекта()
	
	ФайлОбъект = ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	РаботаСФайламиСлужебный.ЗаполнитьСписокПодписей(ЭтотОбъект);
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСертификатахОбъекта()
	
	ФайлОбъект = ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	РаботаСФайламиСлужебный.ЗаполнитьСписокШифрования(ЭтотОбъект);
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИУстановитьДоступностьЭлементовФормы(Результат, ДополнительныеПараметры) Экспорт
	
	ПрочитатьИУстановитьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИУстановитьДоступностьНаСервере()
	
	ФайлОбъект = ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФайлОбъект, "Объект");
	УстановитьДоступностьКнопок(ЭтотОбъект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСертификатыПодписей()
	
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если МодульЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейПослеПодключенияРасширения", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейПослеПодключенияРасширения(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	МодульЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Индекс", -1);
	Контекст.Вставить("МенеджерКриптографии", Результат);
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклНачало(Контекст)
	
	Если ЭлектронныеПодписи.Количество() <= Контекст.Индекс + 1 Тогда
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("СтрокаТаблицы", ЭлектронныеПодписи[Контекст.Индекс]);
	
	Если ЗначениеЗаполнено(Контекст.СтрокаТаблицы.Отпечаток) Тогда
		ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	// Подпись не была прочитана при записи объекта.
	Подпись = ПолучитьИзВременногоХранилища(Контекст.СтрокаТаблицы.АдресПодписи);
	
	Если Не ЗначениеЗаполнено(Подпись) Тогда
		ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Новый ОписаниеОповещения(
			"ПрочитатьСертификатыПодписейЦиклПослеПолученияСертификатовИзПодписи", ЭтотОбъект, Контекст,
			"ПрочитатьСертификатыПодписейЦиклПослеОшибкиПолученияСертификатовИзПодписи", ЭтотОбъект),
		Подпись);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеОшибкиПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеПолученияСертификатовИзПодписи(Сертификаты, Контекст) Экспорт
	
	Если Сертификаты.Количество() = 0 Тогда
		ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Сертификат", Сертификаты[0]);
	
	Контекст.Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
		"ПрочитатьСертификатыПодписейЦиклПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ПрочитатьСертификатыПодписейЦиклПослеОшибкиВыгрузкиСертификата", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеОшибкиВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПрочитатьСертификатыПодписей.
&НаКлиенте
Процедура ПрочитатьСертификатыПодписейЦиклПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт
	
	СтрокаТаблицы = Контекст.СтрокаТаблицы;
	
	СтрокаТаблицы.Отпечаток = Base64Строка(Контекст.Сертификат.Отпечаток);
	СтрокаТаблицы.АдресСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата, УникальныйИдентификатор);
	СтрокаТаблицы.КомуВыданСертификат = Контекст.МодульЭлектроннаяПодпись.ПредставлениеСубъекта(Контекст.Сертификат);
	
	ПрочитатьСертификатыПодписейЦиклНачало(Контекст);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоНовый()
	
	Возврат ЭтотОбъект.Объект.Ссылка.Пустая();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзФайлаНаДискеЗавершение(Результат, ПараметрыВыполнения) Экспорт
	ОбновитьДанныеОбъектаНаСервере();
	ОповеститьОбИзменении(ЭтотОбъект.Объект.Ссылка);
	Оповестить("Запись_Файл", Новый Структура, ЭтотОбъект.Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъектаНаСервере()
	
	ЗначениеВРеквизитФормы(ЭтотОбъект.Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ДатаМодификации = МестноеВремя(ЭтотОбъект.Объект.ДатаМодификацииУниверсальная);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененияИспользованияПодписанияИлиШифрования()
	
	ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере();
	ОтображатьВкладкиДополнительныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененияИспользованияПодписанияИлиШифрованияНаСервере()
	
	РаботаСФайламиСлужебный.КриптографияПриСозданииФормыНаСервере(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДополнительныеДанныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПояснениеОблачногоСервиса(ПрисоединенныйФайл)
	
	ВидимостьПояснения = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюФайлов") Тогда
		
		СведенияОСинхронизации = РаботаСФайламиСлужебный.СведенияОСинхронизации(ЭтотОбъект.Объект.ВладелецФайла);
		
		Если СведенияОСинхронизации.Количество() > 0 Тогда
			
			УчетнаяЗапись = СведенияОСинхронизации.УчетнаяЗапись;
			ВидимостьПояснения = Истина;
			
			АдресПапкиВОблачномСервисе = РаботаСФайламиСлужебныйКлиентСервер.АдресВОблачномСервисе(
				СведенияОСинхронизации.Сервис, СведенияОСинхронизации.Href);
				
			ЧастиСтроки = Новый Массив;
			ЧастиСтроки.Добавить(НСтр("ru = 'Файл доступен только для просмотра, работа с ним ведется в облачном сервисе'"));
			ЧастиСтроки.Добавить(" ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СведенияОСинхронизации.УчетнаяЗаписьНаименование,,,, АдресПапкиВОблачномСервисе));
			ЧастиСтроки.Добавить(".  ");
			Элементы.ДекорацияПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			
			Элементы.ДекорацияКартинкаСтатусСинхронизации.Видимость = НЕ СведенияОСинхронизации.Синхронизирован;
			Элементы.ДекорацияДатаСинхронизации.ОтображениеПодсказки =?(СведенияОСинхронизации.Синхронизирован, ОтображениеПодсказки.Нет, ОтображениеПодсказки.Кнопка);
			
			ЧастиСтроки.Очистить();
			ЧастиСтроки.Добавить(НСтр("ru = 'Синхронизирован'"));
			ЧастиСтроки.Добавить(": ");
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(Формат(СведенияОСинхронизации.ДатаСинхронизации, "ДЛФ=DD"),,,, "OpenJournal"));
			Элементы.ДекорацияДатаСинхронизации.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПояснениеОблачногоСервиса.Видимость = ВидимостьПояснения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОтбораЖурналаРегистрации(УчетнаяЗапись)
	Возврат РаботаСФайламиСлужебный.ДанныеОтбораЖурналаРегистрации(УчетнаяЗапись);
КонецФункции

#КонецОбласти
