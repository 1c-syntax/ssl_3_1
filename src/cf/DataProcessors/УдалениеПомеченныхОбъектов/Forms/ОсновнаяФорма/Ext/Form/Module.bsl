///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Информация о текущем выполняемом фоновом задании
&НаКлиенте
Перем ВыполняемаяОперация;// см. Неопределено, ДлительныеОперации.ВыполнитьФункцию

&НаКлиенте
Перем ПредставлениеОперации;// Строка

// Результат, который возвращает УдалениеПомеченныхОбъектовКлиент.НачатьУдалениеПомеченных
&НаКлиенте
Перем СведенияОРезультатахУдаления;// см. УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления, Неопределено

&НаКлиенте
Перем ОчередьЗаданийФормы; // Массив из Строка

&НаКлиенте
Перем РезультатПредыдущегоШага;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав для выполнения операции.'");
		Возврат; // Отказ устанавливается в ПриОткрытии.
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстОшибки = НСтр("ru = 'Для удаления помеченных необходимо войти в область данных.'");
		Возврат; // Отказ устанавливается в ПриОткрытии.
	КонецЕсли;
	
	Если Параметры.УдаляемыеОбъекты.Количество() > 0 Тогда
		НастроитьФормуДляРаботыКакСервис();
	КонецЕсли;
	
	Если Параметры.ОтборМетаданных.Количество() > 0 Тогда
		УстановитьПереданныйОтборМетаданных();
	КонецЕсли;
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ДеревоПомеченныхНаУдалениеНастроить.Видимость = Ложь;
		Элементы.ДеревоПомеченныхНаУдалениеИзменить.Видимость = Ложь;
		Элементы.НеУдаленныеИзменить.Видимость = Ложь;
		Элементы.Действия.Видимость = Ложь;
		Элементы.Назад.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьСостояниеВыбораПомеченныхНаУдаление();
	УстановитьУсловноеОформление();	
	УстановитьСписокДействийМестИспользования(ЭтотОбъект);
	
	ТолькоПросмотр = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	НастройкиДополнительныхРеквизитов = Настройки["ДополнительныеРеквизитыПомеченныхНаУдаления"];
	Если НастройкиДополнительныхРеквизитов <> Неопределено Тогда
		ЧислоДополнительныхРеквизитов = УдалениеПомеченныхОбъектовСлужебный.ЧислоДополнительныхРеквизитов(
			НастройкиДополнительныхРеквизитов);
		ДобавитьДополнительныеРеквизиты(1, ЧислоДополнительныхРеквизитов);
		УстановитьУсловноеОформление();
	КонецЕсли;
	
	НастройкиОтбора = Настройки["ОтборМетаданных"];
	Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
		Элементы.НастроитьОтбор.Заголовок = ПредставлениеОтбораМетаданных(НастройкиОтбора);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ОтборМетаданных) Тогда 
		ОтборМетаданных = Параметры.ОтборМетаданных;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
	
	Если УдалятьПриОткрытии Тогда
		ДобавитьЗадание(ЗаданияФормы().УдалениеПомеченных);
	Иначе	
		ДобавитьЗадание(ЗаданияФормы().ПоискПомеченных);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ЗапуститьЗаданиеСОжиданием", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказатьДиалогПередЗакрытием Тогда
		Отказ = Истина;
		Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтменыЗадания", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Выполняется %1.
							|Прервать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Прервать);
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Не прерывать'"));
		
		ПоказатьВопрос(Обработчик, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НРег(ПредставлениеОперации)),
		 	Кнопки, 60, КодВозвратаДиалога.Пропустить);
	ИначеЕсли УдалятьПриОткрытии Тогда 
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("РезультатЗакрытия", СведенияОРезультатахУдаления);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаПодробнееНажатие(Элемент)
	Если ЭтоОшибкаУстановкиМонопольногоРежима(ПодробныйТекстОшибкиФоновогоЗадания) Тогда
		СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей();
	Иначе	
		ТекстОшибки = ?(Элемент.Имя = Элементы.ПодробнееОшибкаФоновогоЗадания.Имя, ПодробныйТекстОшибкиФоновогоЗадания, ПодробныйТекстОшибки);
		СтандартныеПодсистемыКлиент.ПоказатьПодробнуюИнформацию(Неопределено, ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперацию(Команда)
	ОтменитьОперациюСервер(ВыполняемаяОперация);
	
	Если ТекущееЗадание().Имя = "ВыполнениеДополнительнойОбработки" Тогда
		УстановитьСостояниеНеуспешноеУдаление();
	Иначе
		УстановитьСостояниеВыбораПомеченныхНаУдаление();
	КонецЕсли;
	
	ПоказатьДиалогПередЗакрытием = Ложь;
	ВыполняемаяОперация = Неопределено;
	Если УдалятьПриОткрытии Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьОперациюСервер(ВыполняемаяОперация)
	Если ВыполняемаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ВыполняемаяОперация.ИдентификаторЗадания);
	УдалениеПомеченныхОбъектовСлужебный.СнятьБлокировкуИспользованияУдаляемыхОбъектов(УникальныйИдентификатор);
	УстановитьМонопольныйРежимНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КВыборуОбъектов(Команда)
	Оповещение = Новый ОписаниеОповещения("КВыборуОбъектовЗавершение", ЭтотОбъект);
	Если ТаблицаДействий.Количество() > 0 Тогда
		ПоказатьВопрос(Оповещение, 
			НСтр("ru='Не завершено удаление объектов.
			|Вернуться к списку помеченных на удаление?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьСостояниеВыбораПомеченныхНаУдаление();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КВыборуОбъектовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТаблицаДействий.Очистить();
		УстановитьСостояниеВыбораПомеченныхНаУдаление();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПомеченныхНаУдаление

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеПометкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПомеченныхНаУдаление.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНеУдаленные

&НаКлиенте
Процедура НеУдаленныеПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПоказатьСвязиНеУдаленныхНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя <> Элементы.СвязиНеУдаленныхДействие.Имя Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьОбъектТаблицы(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияНеудаленныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьЗаменитьНаПродолжение(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхДействиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.МестаИспользованияНеудаленных.ТекущиеДанные;
	ВыбранноеЗначение = ТекущиеДанные.ДействиеПредставление;
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если ТекущиеДанные.Действие = "ЗаменитьСсылку" Тогда
			Для Каждого Элемент Из МестаИспользованияНеудаленных.ПолучитьЭлементы() Цикл
				Элемент.Действие = Неопределено;
			КонецЦикла;	
			
			Фильтр = Новый Структура("Источник", ТекущиеДанные.УдаляемыйСсылка);
			Действия = ТаблицаДействий.НайтиСтроки(Фильтр);
			Для Каждого Действие Из Действия Цикл
				ТаблицаДействий.Удалить(Действие);
			КонецЦикла;
		Иначе			
			ТекущиеДанные.Действие = Неопределено;
			
			Фильтр = Новый Структура("ОбнаруженныйСсылка", ТекущиеДанные.ОбнаруженныйСсылка);
			Действия = ТаблицаДействий.НайтиСтроки(Фильтр);
			Для Каждого Действие Из Действия Цикл
				ТаблицаДействий.Удалить(Действие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МестаИспользованияНеудаленных.ТекущиеДанные;
	ТекущиеДанные.ДействиеПредставление = "";
	
	ПриВыбореДействияМестаИспользования(ВыбранноеЗначение, ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	Если ВыполняемаяОперация = Неопределено Тогда
		ЗапуститьЗадание(ЗаданияФормы().ПоискПомеченных);
	КонецЕсли;;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияИУдалить(Команда)
	ДобавитьЗадание(ЗаданияФормы().ВыполнениеДополнительнойОбработки);
	ДобавитьЗадание(ЗаданияФормы().УдалениеПомеченных);
	ЗапуститьЗадание();
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеИзменить(Команда)
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийЭлемент, "ТекущиеДанные") Тогда
		Возврат;
	КонецЕсли;

	ПоказатьОбъектТаблицы(ТекущийЭлемент);	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеУстановитьВсе(Команда)
	ЭлементыСписка = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСписка Цикл
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Истина, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоПомеченныхНаУдалениеПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеСнятьВсе(Команда)
	ЭлементыСписка = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСписка Цикл
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Ложь, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоПомеченныхНаУдалениеПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеИзменить(Команда)
	ПоказатьОбъектТаблицы(Элементы.ДеревоПомеченныхНаУдаление);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеОбновить(Команда)
	ЗапуститьЗадание(ЗаданияФормы().ПоискПомеченных);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсе(Команда)
	
	ДобавитьЗадание(ЗаданияФормы().УдалениеПомеченных, "ПолноеУдаление");
	Если ВыполняемаяОперация = Неопределено Тогда
		ДеревоПомеченныхНаУдалениеУстановитьВсе(Команда);
		ЗапуститьЗадание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУдалить(Команда)
	Для Каждого ИдентификаторСтроки Из Элементы.МестаИспользованияНеудаленных.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = МестаИспользованияНеудаленных.НайтиПоИдентификатору(ИдентификаторСтроки);
		ПриВыбореДействияМестаИспользования("Удалить", ВыделеннаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаменитьНа(Команда)
	ТекущиеДанные = Элементы.МестаИспользованияНеудаленных.ТекущиеДанные;
	
	Если ТекущиеДанные.ОсновнаяПричина Тогда
		ПутьКФорме = ИмяМетаданных(ТекущиеДанные.УдаляемыйСсылка) + ".ФормаВыбора";
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму(ПутьКФорме, ПараметрыФормы, Элементы.МестаИспользованияНеудаленных, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Состояние(НСтр("ru='Для выбранной строки нельзя указать действие'"),,,БиблиотекаКартинок.Предупреждение32);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаменитьНаПродолжение(Результат)
	ТекущиеДанные = Элементы.МестаИспользованияНеудаленных.ТекущиеДанные;
	
	Для Каждого ИдентификаторСтроки Из Элементы.МестаИспользованияНеудаленных.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = МестаИспользованияНеудаленных.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ВыделеннаяСтрока.УдаляемыйСсылка <> ТекущиеДанные.УдаляемыйСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			ЗарегистрироватьДействиеМестаИспользования(ВыделеннаяСтрока, Неопределено);
		Иначе
			Если ВыделеннаяСтрока.ОсновнаяПричина Тогда
				ЗарегистрироватьДействиеМестаИспользования(ВыделеннаяСтрока, "ЗаменитьСсылку", Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из МестаИспользованияНеудаленных.ПолучитьЭлементы() Цикл
		Если ВыделеннаяСтрока.ОсновнаяПричина И ВыделеннаяСтрока.УдаляемыйСсылка = ТекущиеДанные.УдаляемыйСсылка Тогда
			ЗарегистрироватьДействиеМестаИспользования(ВыделеннаяСтрока, "ЗаменитьСсылку", Результат);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьПродолжение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("АдресНастроек", НастройкиУдаленияПомеченных());
	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма.НастройкиУдаленияОбъектов", ПараметрыФормы, ЭтотОбъект, , , ,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция НастройкиУдаленияПомеченных()
	Настройки = Новый Структура;
	Настройки.Вставить("РежимУдаления", РежимУдаления);
	Настройки.Вставить("ВыбранныеРеквизиты", ДополнительныеРеквизитыПомеченныхНаУдаления.Выгрузить());
	Возврат ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура НастроитьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновлениеПомеченныхНаУдаление = НастроитьПродолжениеСервер(Результат);
	Если ТребуетсяОбновлениеПомеченныхНаУдаление Тогда
		ЗапуститьЗадание(ЗаданияФормы().ПоискПомеченных);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НастроитьПродолжениеСервер(АдресНастроек)
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроек);
	УдалитьИзВременногоХранилища(АдресНастроек);
	РежимУдаления = Настройки.РежимУдаления;

	НастройкиИзменились = НастройкиИзменились(Настройки.ВыбранныеРеквизиты);

	ТекущееЧислоДополнительныхРеквизитов = УдалениеПомеченныхОбъектовСлужебный.ЧислоДополнительныхРеквизитов(
		ДополнительныеРеквизитыПомеченныхНаУдаления.Выгрузить());
	НовоеЧислоДополнительныхРеквизитов = УдалениеПомеченныхОбъектовСлужебный.ЧислоДополнительныхРеквизитов(Настройки.ВыбранныеРеквизиты);
	ТекущееЧислоСозданныхРеквизитов = ТекущееЧислоСозданныхРеквизитов(ТекущееЧислоДополнительныхРеквизитов, НовоеЧислоДополнительныхРеквизитов);

	Если ТекущееЧислоСозданныхРеквизитов < НовоеЧислоДополнительныхРеквизитов Тогда
		ЧислоДобавляемыхРеквизитов = НовоеЧислоДополнительныхРеквизитов - ТекущееЧислоСозданныхРеквизитов;
		ДобавитьДополнительныеРеквизиты(ТекущееЧислоСозданныхРеквизитов + 1, ЧислоДобавляемыхРеквизитов);
	КонецЕсли;
	
	Если ТекущееЧислоДополнительныхРеквизитов < ТекущееЧислоСозданныхРеквизитов 
		И ТекущееЧислоДополнительныхРеквизитов < НовоеЧислоДополнительныхРеквизитов Тогда
		
		УстановитьВидимостьДополнительныхРеквизитов(ТекущееЧислоДополнительныхРеквизитов+1, ТекущееЧислоСозданныхРеквизитов, Истина);
	КонецЕсли;

	Если ТекущееЧислоДополнительныхРеквизитов > НовоеЧислоДополнительныхРеквизитов Тогда
		УстановитьВидимостьДополнительныхРеквизитов(НовоеЧислоДополнительныхРеквизитов+1,
			ТекущееЧислоДополнительныхРеквизитов, Ложь);
	КонецЕсли;
	
	ДополнительныеРеквизитыПомеченныхНаУдаления.Загрузить(Настройки.ВыбранныеРеквизиты);
	
	УстановитьУсловноеОформление();
	
	Возврат НовоеЧислоДополнительныхРеквизитов > ТекущееЧислоДополнительныхРеквизитов ИЛИ НастройкиИзменились;
КонецФункции

&НаКлиенте
Процедура УдалитьВыбранные(Команда)
	ЗапуститьЗадание(ЗаданияФормы().УдалениеПомеченных);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтбор(Команда)
	КоллекцияВыбираемыхОбъектов = Новый СписокЗначений();
	
	КоллекцияВыбираемыхОбъектов.Добавить("Справочники");
	КоллекцияВыбираемыхОбъектов.Добавить("Документы");
	КоллекцияВыбираемыхОбъектов.Добавить("ПланыВидовХарактеристик");
	КоллекцияВыбираемыхОбъектов.Добавить("ПланыСчетов");
	КоллекцияВыбираемыхОбъектов.Добавить("ПланыСчетов");
	КоллекцияВыбираемыхОбъектов.Добавить("ПланыВидовРасчета");
	КоллекцияВыбираемыхОбъектов.Добавить("БизнесПроцессы");
	КоллекцияВыбираемыхОбъектов.Добавить("Задачи");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", КоллекцияВыбираемыхОбъектов);
	ПараметрыФормы.Вставить("ОбластиПоиска", ОтборМетаданных);
	ПараметрыФормы.Вставить("ТолькоПодсистемыСКИ", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьОтборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма.ВыборОбъектовМетаданныхПоПодсистемам", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДереваПомеченных(Команда)
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "ДеревоПомеченныхНаУдаление");
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокиДереваВыбораПомеченных(Команда)
	ВсеСтроки = Элементы.ДеревоПомеченныхНаУдаление;
	Для Каждого ДанныеСтроки Из ДеревоПомеченныхНаУдаление.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Свернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СостоянияФормы

&НаСервере
Процедура УстановитьСостояниеВыбораПомеченныхНаУдаление()
	Элементы.КоманднаяПанельФормы.Доступность = Истина;
	Элементы.СостояниеВыполняется.Видимость = Ложь;
	Элементы.СтраницыИнформация.Доступность = Истина;
	
	Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаВыборОбрабатываемыхОбъектов;
	Элементы.СтраницыОтображениеСостояния.Видимость = Ложь;
	Элементы.СтраницыИнформация.ТолькоПросмотр = Ложь;
	Элементы.ГруппаАктивныПослеПоискаПомеченные.Доступность = Истина;
	
	Элементы.КоманднаяПанельПоискПомеченных.Видимость = Истина;
	Элементы.КоманднаяПанельОбработкаОшибок.Видимость = Ложь;
	
	Элементы.ГруппаНастройкиОтбораПоиска.Доступность = Истина;
	Элементы.ПредставлениеПрогресса.Видимость = Ложь;
	Элементы.ДеревоПомеченныхНаУдалениеУдалитьВсе.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния()
	Элементы.КоманднаяПанельФормы.Доступность = Истина;
	Элементы.СостояниеВыполняется.Видимость = Истина;
	Элементы.СтраницыИнформация.Доступность = Истина;
	
	Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаВыборОбрабатываемыхОбъектов;
	Элементы.СтраницыОтображениеСостояния.Видимость = Истина;
	Элементы.СтраницыИнформация.ТолькоПросмотр = Ложь;
	Элементы.ГруппаАктивныПослеПоискаПомеченные.Доступность = Истина;
	
	Элементы.КоманднаяПанельПоискПомеченных.Видимость = Истина;
	Элементы.КоманднаяПанельОбработкаОшибок.Видимость = Ложь;
	
	Элементы.ГруппаНастройкиОтбораПоиска.Доступность = Истина;
	Элементы.ПредставлениеПрогресса.Видимость = Ложь;
	Элементы.ДеревоПомеченныхНаУдалениеУдалитьВсе.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеНеуспешноеУдаление()
	Элементы.КоманднаяПанельФормы.Доступность = Истина;
	Элементы.СостояниеВыполняется.Видимость = Ложь;
	Элементы.СтраницыИнформация.Доступность = Истина;
	Элементы.СтраницыИнформация.Видимость = Истина;
	
	Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления;
	Элементы.СтраницыОтображениеСостояния.Видимость = Ложь;
	Элементы.СтраницыИнформация.ТолькоПросмотр = Ложь;
	Элементы.ГруппаАктивныПослеПоискаПомеченные.ТолькоПросмотр = Ложь;
	
	Элементы.КоманднаяПанельПоискПомеченных.Видимость = Ложь;
	Элементы.КоманднаяПанельОбработкаОшибок.Видимость = Истина;
	
	Элементы.ГруппаНастройкиОтбораПоиска.Доступность = Ложь;
	Элементы.ПредставлениеПрогресса.Видимость = Ложь;
	Элементы.КоманднаяПанельФормы.Видимость = Истина;
	Элементы.ВыполнитьДействияИУдалить.КнопкаПоУмолчанию = Истина;
	Элементы.СсылкаПодробнее.Видимость = Ложь;
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеНеуспешноеУдалениеСПанельюСостояния()
	Элементы.КоманднаяПанельФормы.Доступность = Истина;
	Элементы.СостояниеВыполняется.Видимость = Истина;
	Элементы.СтраницыИнформация.Доступность = Истина;
	Элементы.СтраницыИнформация.Видимость = Истина;
	
	Элементы.СтраницыИнформация.ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления;
	Элементы.СтраницыОтображениеСостояния.Видимость = Истина;
	Элементы.СтраницыИнформация.ТолькоПросмотр = Ложь;
	Элементы.ГруппаАктивныПослеПоискаПомеченные.ТолькоПросмотр = Ложь;
	
	Элементы.КоманднаяПанельПоискПомеченных.Видимость = Ложь;
	Элементы.КоманднаяПанельОбработкаОшибок.Видимость = Истина;
	
	Элементы.ГруппаНастройкиОтбораПоиска.Доступность = Ложь;
	Элементы.ПредставлениеПрогресса.Видимость = Ложь;
	Элементы.КоманднаяПанельФормы.Видимость = Истина;
	Элементы.ВыполнитьДействияИУдалить.КнопкаПоУмолчанию = Истина;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаНеУдаленные.Видимость = Ложь;
	КонецЕсли;
	Элементы.СсылкаПодробнее.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти

// Параметры:
// 	Ссылка - ЛюбаяСсылка
// Возвращаемое значение:
// 	Строка
//
&НаСервереБезКонтекста
Функция ИмяМетаданных(Ссылка)
	Возврат Ссылка.Метаданные().ПолноеИмя();
КонецФункции

#Область Настройки

&НаСервере
Функция НастройкиИзменились(ВыбранныеРеквизиты)
	Результат = Ложь;
	
	ТаблицаСравнения = УдалениеПомеченныхОбъектовСлужебный.ОбъединениеТаблиц(
		ВыбранныеРеквизиты,
		ДополнительныеРеквизитыПомеченныхНаУдаления.Выгрузить());
		
	ТаблицаСравнения.Колонки.Добавить("Число", Новый ОписаниеТипов("Число"));
	ТаблицаСравнения.ЗаполнитьЗначения(1,"Число");
	ТаблицаСравнения.Свернуть("Метаданные, Реквизит", "Число");
	Для Каждого Элемент Из ТаблицаСравнения Цикл
		Если Элемент.Число <> 2 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;		
КонецФункции

&НаСервере
Функция ТекущееЧислоСозданныхРеквизитов(ТекущееЧислоДополнительныхРеквизитов, НовоеЧислоДополнительныхРеквизитов)
	Результат = ТекущееЧислоДополнительныхРеквизитов;
	
	Для Сч = ТекущееЧислоДополнительныхРеквизитов + 1 По НовоеЧислоДополнительныхРеквизитов Цикл
		Если Элементы.Найти("ДеревоПомеченныхНаУдалениеРеквизит"+Сч) <> Неопределено Тогда
			Результат = Сч;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДополнительныхРеквизитов(НачальноеНомер, КонечныйНомер, Видимость)
	Для Сч = НачальноеНомер По КонечныйНомер Цикл
		Элементы["ДеревоПомеченныхНаУдалениеРеквизит" + Сч].Видимость = Видимость;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизиты(НачальныйНомер, ЧислоДобавляемыхРеквизитов)
	ДобавляемыеРеквизиты = Новый Массив;
	ПоследняяЦифраВИмениРеквизита = НачальныйНомер+ЧислоДобавляемыхРеквизитов-1;
	Для Сч = НачальныйНомер По ПоследняяЦифраВИмениРеквизита Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Реквизит"+Сч, Новый ОписаниеТипов(), "ДеревоПомеченныхНаУдаление"));
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Сч = НачальныйНомер По ПоследняяЦифраВИмениРеквизита Цикл
		ЭлементФормы = Элементы.Добавить("ДеревоПомеченныхНаУдалениеРеквизит"+Сч, Тип("ПолеФормы"), Элементы.ДеревоПомеченныхНаУдаление);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = "ДеревоПомеченныхНаУдаление.Реквизит"+Сч;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ЗарегистрироватьДействиеМестаИспользования(МестоИспользования, Действие, Параметр = Неопределено)
	ДействиеПредставление = ?(Параметр = Неопределено,
		ДействияМестИспользованияНеудаленных.НайтиПоЗначению(Действие),
		ПредставлениеКомандыЗаменитьНа(МестоИспользования, Параметр));

	Если Действие <> Неопределено Тогда

		Успешно = Истина;
		ЗарегистрированноеДействие = ТаблицаДействий.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка",МестоИспользования.ОбнаруженныйСсылка));
		Если ЗарегистрированноеДействие.Количество() = 0 Тогда
			ЗарегистрированноеДействие = ТаблицаДействий.Добавить();
			ЗарегистрированноеДействие.Действие = Действие;
			ЗарегистрированноеДействие.ОбнаруженныйСсылка = МестоИспользования.ОбнаруженныйСсылка;
			ЗарегистрированноеДействие.ПараметрДействия = Параметр;
			ЗарегистрированноеДействие.Источник = МестоИспользования.УдаляемыйСсылка;
		// Добавление еще одной замены
		ИначеЕсли ЗарегистрированноеДействие[0].Действие <> "Удалить" И ЗарегистрированноеДействие[0].Источник <> МестоИспользования.ОбнаруженныйСсылка Тогда
			ЗарегистрированноеДействие = ТаблицаДействий.Добавить();
			ЗарегистрированноеДействие.Действие = Действие;
			ЗарегистрированноеДействие.ПараметрДействия = Параметр;
			ЗарегистрированноеДействие.Источник = МестоИспользования.УдаляемыйСсылка;
		// Удаление
		ИначеЕсли ЗарегистрированноеДействие[0].Действие = Действие Тогда
			Для каждого УдаляемоеДействие Из ЗарегистрированноеДействие Цикл
				ТаблицаДействий.Удалить(УдаляемоеДействие);
			КонецЦикла;
			
			ЗарегистрированноеДействие = ТаблицаДействий.Добавить();
			ЗарегистрированноеДействие.Действие = Действие;
			ЗарегистрированноеДействие.ОбнаруженныйСсылка = МестоИспользования.ОбнаруженныйСсылка;
			ЗарегистрированноеДействие.ПараметрДействия = Параметр;
			ЗарегистрированноеДействие.Источник = МестоИспользования.УдаляемыйСсылка;
		Иначе
			СообщениеПользователю = НСтр("ru='Для места использования %1 нельзя выбрать действие %2.'");
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю, 
				МестоИспользования.ОбнаруженныйСсылка,
				МестоИспользования.ДействиеПредставление);
			Состояние(СообщениеПользователю);
			Успешно = Ложь;
		КонецЕсли;
		
		Если Успешно Тогда
		
			МестоИспользования.Действие = Действие;
			МестоИспользования.ДействиеПредставление = ДействиеПредставление;
		
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура УстановитьПереданныйОтборМетаданных()
	Перем Элемент;
	Перем УстановленныйОтбор;
	УстановленныйОтбор = Новый СписокЗначений;
	Для Каждого Элемент Из Параметры.ОтборМетаданных Цикл
		УстановленныйОтбор.Добавить(Элемент.Значение, Метаданные.НайтиПоПолномуИмени(Элемент.Значение).Представление());
	КонецЦикла;
	УстановитьОтборМетаданных(ЭтотОбъект, УстановленныйОтбор);
	Параметры.ОтборМетаданных = УстановленныйОтбор;
КонецПроцедуры

// Настройка формы, если форма открыта через клиентский АПИ.
&НаСервере
Процедура НастроитьФормуДляРаботыКакСервис()
	УдалятьПриОткрытии = Истина;
	Элементы.СтраницыИнформация.Видимость = Ложь;
	Элементы.ДеревоПомеченныхНаУдалениеНастроить.Видимость = Ложь;
	Элементы.Назад.Видимость = Ложь;
	Элементы.ГруппаНастройкиОтбораПоиска.Видимость = Ложь;
	Элементы.КоманднаяПанельФормы.Видимость = Ложь;
	Элементы.СтраницыОтображениеСостояния.Видимость = Истина;
	АвтоЗаголовок = Ложь;
	Заголовок = "";
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	ЦветГиперссылка = Метаданные.ЭлементыСтиля.ГиперссылкаЦвет.Значение;
	ЦветНеактивнойНадписи = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;
	ЭлементыУсловногоОформления.Очистить();

	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();

	ГруппаИ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ОтборОформления = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестаИспользованияНеудаленных.Действие");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборОформления = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестаИспользованияНеудаленных.ОсновнаяПричина");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Выберите действие'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Метаданные.ЭлементыСтиля.ДействиеВКолонкеСпискаШрифт.Значение);

	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СвязиНеУдаленныхДействие");
	
	// Цвет гиперссылки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестаИспользованияНеудаленных.ОсновнаяПричина");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветГиперссылка);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СвязиНеУдаленныхДействие");
	
	// Заголовки колонок
	УстановитьУсловноеОформлениеДополнительныхРеквизитов(ЭлементыУсловногоОформления, ЦветНеактивнойНадписи);
	
	// Доступность выбора действий
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестаИспользованияНеудаленных.ОсновнаяПричина");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СвязиНеУдаленныхДействие");
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДополнительныхРеквизитов(ЭлементыУсловногоОформления, ЦветНеактивнойНадписи)
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомеченныхНаУдаление.ЭтоОписаниеОбъектаМетаданных");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеактивнойНадписи);
	
	ЧислоДополнительныхРеквизитов = УдалениеПомеченныхОбъектовСлужебный.ЧислоДополнительныхРеквизитов(
		ДополнительныеРеквизитыПомеченныхНаУдаления.Выгрузить());
	
	Для Сч = 1 По ЧислоДополнительныхРеквизитов Цикл
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоПомеченныхНаУдалениеРеквизит" + Сч);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокДействийМестИспользования(Форма)
	Форма.ДействияМестИспользованияНеудаленных.Очистить();
	Форма.ДействияМестИспользованияНеудаленных.Добавить("Удалить", "Удалить");
	Форма.ДействияМестИспользованияНеудаленных.Добавить("ЗаменитьСсылку", "Заменить %ПредставлениеСсылка% на");
	
	Форма.Элементы.СвязиНеУдаленныхДействие.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из Форма.ДействияМестИспользованияНеудаленных Цикл
		Форма.Элементы.СвязиНеУдаленныхДействие.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПриАктивизацииСтрокиНеУдаленных

&НаКлиенте
Процедура ПоказатьСвязиНеУдаленныхНаКлиенте()
	Если НеУдаленныеИдентификаторТекущейСтроки = Элементы.НеУдаленные.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;

	ПодробныйТекстОшибки = "";
	ЗаполнитьМестаИспользованияНеудаленныхОбъектов(ЭтотОбъект);
	
	Если МестаИспользованияНеудаленных.ПолучитьЭлементы().Количество() = 0 Тогда
		Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница = Элементы.СтраницаТекстОшибки;
		УстановитьТекстОшибки();
		Элементы.Действия.Доступность = Ложь;
	Иначе	
		Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница = Элементы.СтраницаПричиныНеУдаления;
		СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "МестаИспользованияНеудаленных", "*", Истина);
		Элементы.Действия.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстОшибки()
	Элементы.ТекстОшибки.Заголовок = ТекстОшибки;
	Элементы.СсылкаПодробнее.Видимость = ЗначениеЗаполнено(ПодробныйТекстОшибки) ;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМестаИспользованияНеудаленныхОбъектов(Форма)
	НеУдаленныеИдентификаторТекущейСтроки = Форма.Элементы.НеУдаленные.ТекущаяСтрока;
	Если НеУдаленныеИдентификаторТекущейСтроки = Неопределено Тогда
		СтрокаДерева = Неопределено;
	Иначе
		СтрокаДерева = Форма.НеУдаленные.НайтиПоИдентификатору(НеУдаленныеИдентификаторТекущейСтроки);
	КонецЕсли;
	
	ОтображаемыеСтроки = Форма.МестаИспользованияНеудаленных.ПолучитьЭлементы();
	ОтображаемыеСтроки.Очистить();
	Форма.КешПричинНеудаления.Очистить();
	
	Если СтрокаДерева = Неопределено Или СтрокаДерева.НомерКартинки < 1 Тогда
		// Ничего не выбрано или выбрана группа.
		Форма.ТекстОшибки = НСтр("ru = 'Выберите объект, чтобы узнать причину,
			|по которой его не удалось удалить.'")
	Иначе
		// Выбрана ссылка не удаленного объекта.
		Показываемые = Форма.СвязиНеудаленных.НайтиСтроки(Новый Структура("УдаляемыйСсылка", СтрокаДерева.УдаляемыйСсылка));
		Для Каждого СтрокаТаблицы Из Показываемые Цикл
			Если СтрокаТаблицы.ЭтоОшибка Тогда
				Форма.ТекстОшибки = СтрокаТаблицы.ОбнаруженныйСсылка;
				Форма.ПодробныйТекстОшибки = СтрокаТаблицы.Представление;
				Прервать;
			КонецЕсли;
				
			ДобавитьПричиныНеудаленияРекурсивно(Форма, ОтображаемыеСтроки, СтрокаТаблицы);
			Форма.КешПричинНеудаления.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыбранноеДействиеНадПричинойНеудаления(Форма, Знач ПричинаНеудаления, Действие = "")
	Если ПричинаНеудаления.ЭтоОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДействий = Форма.ТаблицаДействий;
	ВыбранныеДействия = ТаблицаДействий.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", ПричинаНеудаления.ОбнаруженныйСсылка));
	Если ВыбранныеДействия.Количество() > 0 Тогда
		Действие = ВыбранныеДействия[0].Действие;
		ПараметрДействия = ВыбранныеДействия[0].ПараметрДействия;
	КонецЕсли;
	
	ПричинаНеудаления.Действие = Действие;
	Если Действие = "ЗаменитьСсылку" Тогда
		ПричинаНеудаления.ДействиеПредставление = ПредставлениеКомандыЗаменитьНа(ПричинаНеудаления, ПараметрДействия);
	Иначе
		ПричинаНеудаления.ДействиеПредставление = Форма.ДействияМестИспользованияНеудаленных.НайтиПоЗначению(Действие);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПричиныНеудаленияРекурсивно(Форма, КоллекцияСтрокРодителя, ДанныеСтроки)
	КешПричинНеудаления = Форма.КешПричинНеудаления;

	НоваяСтрока = КоллекцияСтрокРодителя.Добавить();
	ПодчиненныеСтроки = НоваяСтрока.ПолучитьЭлементы();
	Если ДанныеСтроки.ЭтоОшибка Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,"ЭтоОшибка,НомерКартинки");
		НоваяСтрока.Представление = ДанныеСтроки.ОбнаруженныйСсылка;
		НоваяСтрока.ОбнаруженныйСсылка = ?(ЗначениеЗаполнено(ДанныеСтроки.Представление), ДанныеСтроки.Представление, ДанныеСтроки.ОбнаруженныйСсылка);
	Иначе	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	КонецЕсли;
	Показываемые = Форма.СвязиНеудаленных.НайтиСтроки(Новый Структура("УдаляемыйСсылка", ДанныеСтроки.ОбнаруженныйСсылка));
	УстановитьВыбранноеДействиеНадПричинойНеудаления(Форма,
		 НоваяСтрока,
		 ?(Показываемые.Количество() <> 0, "Удалить", ""));
	
	СодержатьсяТолькоОшибки = Истина;
	Для Каждого СтрокаТаблицы Из Показываемые Цикл
		Если НЕ СтрокаТаблицы.ЭтоОшибка Тогда
			СодержатьсяТолькоОшибки = Ложь;
		КонецЕсли;
		
		Если КешПричинНеудаления.НайтиПоЗначению(СтрокаТаблицы.ОбнаруженныйСсылка) = Неопределено Тогда
			КешПричинНеудаления.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
			ДобавитьПричиныНеудаленияРекурсивно(Форма, ПодчиненныеСтроки, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	НоваяСтрока.ОсновнаяПричина = (ПодчиненныеСтроки.Количество() = 0 Или СодержатьсяТолькоОшибки)
		И Показываемые.Количество() = 0;
КонецПроцедуры

#КонецОбласти

#Область ПриАктивизацииСтрокиМестИспользованияНеудаленных

&НаКлиенте
Процедура МестаИспользованияНеудаленныхПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.МестаИспользованияНеудаленных.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.ОбнаруженныйСсылка) Тогда
		Элементы.СвязиНеУдаленныхДействие.СписокВыбора.Очистить();
		Элементы.СвязиНеУдаленныхДействие.СписокВыбора.Добавить("Удалить", ПредставлениеКомандыУдалить(ТекущиеДанные));
		
		Действия = ТаблицаДействий.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", ТекущиеДанные.ОбнаруженныйСсылка));
		Если НЕ(Действия.Количество() > 0 
				И Действия[0].Действие = "Удалить" 
				И Действия[0].Источник <> ТекущиеДанные.УдаляемыйСсылка) Тогда
		
			Элементы.СвязиНеУдаленныхДействие.СписокВыбора.Добавить("ЗаменитьСсылку", ПредставлениеКомандыЗаменитьНа(ТекущиеДанные));
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКомандыЗаменитьНа(ТекущиеДанные, Параметр = Неопределено)
	СтрокаВерхнегоУровня = ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаВерхнегоУровня = Неопределено Тогда
		ПредставлениеСтрокиВерхнегоУровня = ТекущиеДанные.ПредставлениеУдаляемый;
	Иначе	
		ПредставлениеСтрокиВерхнегоУровня = СтрокаВерхнегоУровня.Представление;
	КонецЕсли;
	
	ПредставлениеКомандыЗаменитьНа = СтрЗаменить(
		"Заменить %ПредставлениеСсылка% на", "%ПредставлениеСсылка%", ПредставлениеСтрокиВерхнегоУровня)
		+ Символы.НПП + ?(Параметр = Неопределено, "", Параметр);
		
	Возврат ПредставлениеКомандыЗаменитьНа;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКомандыУдалить(ТекущиеДанные)
	Представление = "Удалить " + ТекущиеДанные.Представление;
	Возврат Представление;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПоказатьОбъектТаблицы(ТаблицаЭлемент)
	СтрокаТаблицы = ТаблицаЭлемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Неопределено;
	Если Не СтрокаТаблицы.Свойство("ОбнаруженныйСсылка", Значение)
		И Не СтрокаТаблицы.Свойство("УдаляемыйСсылка", Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") 
		И НЕ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТаблицы, "ЭтоОшибка", Ложь) Тогда
			
		Если СтрокаТаблицы.Свойство("ЭтоКонстанта") И СтрокаТаблицы.ЭтоКонстанта Тогда
			ПутьКФорме = Значение + ".ФормаКонстант";
		Иначе
			ПутьКФорме = Значение + ".ФормаСписка";
		КонецЕсли;
		ОткрытьФорму(ПутьКФорме);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТаблицы, "ЭтоОшибка", Ложь) Тогда
		СтандартныеПодсистемыКлиент.ПоказатьПодробнуюИнформацию(Неопределено, СтрокаТаблицы.ОбнаруженныйСсылка);
	Иначе
		ПоказатьЗначение(, Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)
	
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Элемент.Пометка = Пометка;
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Пометка, Ложь);
	КонецЦикла;
	
	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	
	Если ПроверятьРодителя И Родитель <> Неопределено Тогда 
		ДеревоПомеченныхНаУдалениеПроверитьРодителя(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеПроверитьРодителя(Родитель)
	
	ЭлементыСтроки = Родитель.ПолучитьЭлементы();
	Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыСтроки);
	
КонецПроцедуры

// Параметры:
// 	Результат - СписокЗначений из Строка
// 	ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура НастроитьОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОтбор = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ОтборМетаданных);
	УстановитьОтборМетаданных(ЭтотОбъект, Результат);
	
	Если ОтборМетаданныхИзменен(ТекущийОтбор, Результат) Тогда
		ЗапуститьЗадание(ЗаданияФормы().ПоискПомеченных);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборМетаданных(Форма, Результат)
	Форма.ОтборМетаданных = ?(Результат = Неопределено, Новый СписокЗначений, Результат.Скопировать());// СписокЗначений из Строка
	Форма.Элементы.НастроитьОтбор.Заголовок = ПредставлениеОтбораМетаданных(Результат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОтбораМетаданных(ЗначениеОтбора)
	ПредставлениеОтбора = "";
	Представление = Новый Массив;
	Для Каждого Отбор Из ЗначениеОтбора Цикл
		Представление.Добавить(Отбор.Представление);
	КонецЦикла;
	ПредставлениеОтбора = СтрСоединить(Представление, ", ");
	Возврат ?(ПустаяСтрока(ПредставлениеОтбора), НСтр("ru='Все помеченные на удаление'"), ПредставлениеОтбора);
КонецФункции

&НаКлиенте
Функция ОтборМетаданныхИзменен(СтарыйОтбор, Результат)
	ТребуетсяПовторныйПоиск = Ложь;
	Для Каждого Элемент Из Результат Цикл
		Если ОтборМетаданных.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
			ТребуетсяПовторныйПоиск = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтарыйОтбор.Количество() <> Результат.Количество() Тогда
		ТребуетсяПовторныйПоиск = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяПовторныйПоиск;
КонецФункции

#Область ФоновыеЗадания

#Область ПоискПомеченныхНаУдаление

&НаКлиенте
Процедура НачатьПоискПомеченных(Параметр = Неопределено)
	УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния();
	
	ПредставлениеОперации = НСтр("ru='Поиск помеченных на удаление'");
	Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеВыполняется;
	Элементы.ДекорацияПредставлениеДлительнойОперации.Заголовок = НСтр("ru='Выполняется поиск помеченных на удаление...'");
	Элементы.СтраницыИнформация.ТолькоПросмотр = Истина;
	Элементы.ГруппаАктивныПослеПоискаПомеченные.Доступность = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияПоискаПомеченных", ЭтотОбъект);
	
	ВыполняемаяОперация = НачатьПоискПомеченныхСервер(ОтборМетаданных, УникальныйИдентификатор);
	ПриНачалеФоновогоЗадания(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеФоновогоЗадания(Знач Обработчик)
	Перем НастройкиОжидания;
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПриОбновленииПрогрессаФоновогоЗадания", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ВыполняемаяОперация, Обработчик, НастройкиОжидания);
	Если ВыполняемаяОперация <> Неопределено Тогда
		ПоказатьДиалогПередЗакрытием = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗадания(Результат)
	РезультатПредыдущегоШага = Результат;
	ПоказатьДиалогПередЗакрытием = Ложь;
	ВыполняемаяОперация = Неопределено;
	ПараметрЗадания = УдалитьТекущееЗадание();	
	
	Если КоличествоЗаданийВОчереди() = 0 Тогда
		УстановитьМонопольныйРежимНаСервере(Ложь);
	КонецЕсли;
	
	Если Результат.Статус <> "Ошибка" Тогда
		ЗапуститьЗадание(,ПараметрЗадания);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НачатьПоискПомеченныхСервер(ОтборМетаданных, УникальныйИдентификаторФормы)
	ИмяМетода = "УдалениеПомеченныхОбъектовСлужебный.ПомеченныеНаУдаление";
	
	ПараметрыМетода = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификаторФормы);
	ПараметрыМетода.ЗапуститьВФоне = Истина;
	ПараметрыМетода.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск помеченных на удаление'");
	Задание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыМетода, ИмяМетода,
		ОтборМетаданных, 
		ДополнительныеРеквизитыПомеченныхНаУдаления.Выгрузить(), 
		РеквизитФормыВЗначение("ДеревоПомеченныхНаУдаление"));

	Возврат Задание;
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияПоискаПомеченных(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ЗаполнитьИнформациюОшибкамиФоновогоЗадания(ЭтотОбъект, Результат);
		УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния();
		
	Иначе
		
		ЗаполнитьДеревоПомеченныхНаУдаление(Результат);
	
		Если ДеревоПомеченныхНаУдаление.ПолучитьЭлементы().Количество() = 0 Тогда
			Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеУдалениеНеТребуется;
			УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния();
			ОчиститьОчередьЗаданийФормы();
		Иначе
			УстановитьСостояниеВыбораПомеченныхНаУдаление();
		КонецЕсли;
		
	КонецЕсли;
	
	ПослеЗавершенияФоновогоЗадания(Результат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИнформациюОшибкамиФоновогоЗадания(Форма, Результат)
	Форма.ПодробныйТекстОшибкиФоновогоЗадания = Результат.ПодробноеПредставлениеОшибки;
	Форма.Элементы.ДекорацияПредставлениеЗавершенияНеУспешно.Заголовок = 
		?(ЭтоОшибкаУстановкиМонопольногоРежима(Результат.КраткоеПредставлениеОшибки),
			НСтр("ru='Не удалось установить монопольный режим'"),
			Результат.КраткоеПредставлениеОшибки);
	Форма.Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Форма.Элементы.СостояниеВыполненоСОшибками;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПомеченныхНаУдаление(Результат)
	ДеревоЗначений = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ДеревоПомеченныхНаУдаление, ДеревоЗначений);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
КонецПроцедуры

#КонецОбласти

#Область УдалениеПомеченных

&НаКлиенте
Процедура НачатьУдалениеПомеченных(Параметр = Неопределено)
	ПредставлениеОперации = НСтр("ru='Удаление помеченных'");
	Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеВыполняется;
	Элементы.ДекорацияПредставлениеДлительнойОперации.Заголовок = НСтр("ru='Выполняется удаление помеченных...'");
	УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния();
	
	Элементы.КоманднаяПанельФормы.Доступность = Ложь;
	Элементы.СтраницыИнформация.ТолькоПросмотр = Истина;

	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияУдаленияПомеченных", ЭтотОбъект);
	ВыполняемаяОперация = НачатьУдалениеПомеченныхСервер(УникальныйИдентификатор, РезультатПредыдущегоШага, Параметр = "ПолноеУдаление");
	ПриНачалеФоновогоЗадания(Обработчик);
КонецПроцедуры

&НаСервере
Функция УстановитьМонопольныйРежимНаСервере(МонопольныйРежим)
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("КраткоеПредставлениеОшибки", "");
	Если МонопольныйРежим() <> МонопольныйРежим Тогда
		Попытка
			УстановитьМонопольныйРежим(МонопольныйРежим);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат.Успешно = Ложь;
			Результат.КраткоеПредставлениеОшибки =  КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки =  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			СведенияОРезультатахУдаления = УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление помеченных'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				Результат.КраткоеПредставлениеОшибки
				+ Символы.ПС + Символы.ПС 
				+ Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

&НаСервере
Функция НачатьУдалениеПомеченныхСервер(УникальныйИдентификаторФормы, РезультатПредыдущегоШага, ПовторныйПоиск = Ложь)
	Если УдалятьПриОткрытии Тогда
		ИсточникУдаляемыхОбъектов = Параметры.УдаляемыеОбъекты;
	ИначеЕсли ПовторныйПоиск Тогда
		ИсточникУдаляемыхОбъектов = Неопределено;
	Иначе	
		ИсточникУдаляемыхОбъектов = РеквизитФормыВЗначение("ДеревоПомеченныхНаУдаление");
	КонецЕсли;
	
	НастройкиДополнительныхРеквизитов = РеквизитФормыВЗначение("ДополнительныеРеквизитыПомеченныхНаУдаления");
	ИмяМетода = "УдалениеПомеченныхОбъектовСлужебный.УдалитьПомеченныеОбъекты";
	
	ПараметрыМетода = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификаторФормы);
	ПараметрыМетода.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск помеченных на удаление'");
	ПараметрыМетода.ЗапуститьВФоне = Истина;
	ЗначениеРезультатаПредыдущегоШага = ?(РезультатПредыдущегоШага <> Неопределено 
			И ЭтоАдресВременногоХранилища(РезультатПредыдущегоШага.АдресРезультата),
		ПолучитьИзВременногоХранилища(РезультатПредыдущегоШага.АдресРезультата),
		Неопределено);
	
	ДопустимыеРежимыУдаления = УдалениеПомеченныхОбъектовСлужебный.ДопустимыеРежимыУдаления();
	Задание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыМетода, ИмяМетода,
		ИсточникУдаляемыхОбъектов,
		?(ДопустимыеРежимыУдаления.Найти(РежимУдаления) <> Неопределено, РежимУдаления, "Стандартный"),
		НастройкиДополнительныхРеквизитов,
		ЗначениеРезультатаПредыдущегоШага,
		УникальныйИдентификаторФормы);

	Возврат Задание;
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияУдаленияПомеченных(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния();
		ЗаполнитьИнформациюОшибкамиФоновогоЗадания(ЭтотОбъект, Результат);
		СведенияОРезультатахУдаления = УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления();
	ИначеЕсли Результат.Статус = "Выполнено" Тогда 
		СведенияОРезультатахУдаления = ЗагрузитьРезультатУдаления(
			Результат, УникальныйИдентификаторСУчетомВладельца(), СведенияОРезультатахУдаления);
		ОбработатьРезультатВыполненияУдаления(СведенияОРезультатахУдаления);
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(СведенияОРезультатахУдаления.Удаленные);
	КонецЕсли;
	
	УстановитьМонопольныйРежимНаСервере(Ложь);
	ПослеЗавершенияФоновогоЗадания(Результат);
	
	Если УдалятьПриОткрытии И СведенияОРезультатахУдаления.Успешно Тогда
		Закрыть(СведенияОРезультатахУдаления);
	КонецЕсли;
КонецПроцедуры

// Параметры:
// 	СведенияОРезультатахУдаления - см. УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления
//
&НаКлиенте
Процедура ОбработатьРезультатВыполненияУдаления(СведенияОРезультатахУдаления)
	
	Если НеУдаленные.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеЧастичноеУдаление;
		Элементы.НадписьСостояниеЧастичноеУдаление.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Удалено %1 из %2.'"),
			СведенияОРезультатахУдаления.УдаленныеКоличество,
	 		СведенияОРезультатахУдаления.НеУдаленныеКоличество + СведенияОРезультатахУдаления.УдаленныеКоличество);
		УстановитьСостояниеНеуспешноеУдалениеСПанельюСостояния();
	ИначеЕсли СведенияОРезультатахУдаления.УдаленныеКоличество > 0 Тогда
		УстановитьСостояниеВыбораПомеченныхНаУдалениеСПанельюСостояния();
		
		Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеВыполнено;
		Элементы.ДекорацияПредставлениеЗавершенияУспешно.Заголовок = НСтр("ru='Удаление успешно завершено.'");
	Иначе
		УстановитьСостояниеВыбораПомеченныхНаУдаление();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	РезультатУдаления - Структура:
// 	* АдресРезультата - Строка
// Возвращаемое значение:
//   см. УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления
//
&НаСервере
Функция ЗагрузитьРезультатУдаления(РезультатУдаления, ИдентификаторХранилищаРезультата, СведенияОРезультате)
	РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(РезультатУдаления.АдресРезультата);
	СведенияОРезультате = ?(УдалятьПриОткрытии, СведенияОРезультате, Неопределено);

	Результат = СформироватьРезультатУдаления(СведенияОРезультате, РезультатВыполненияВФоне,
		ИдентификаторХранилищаРезультата);

	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ДеревоПомеченныхНаУдаление,
		РезультатВыполненияВФоне.ДеревоПомеченныхНаУдаление);
	ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(НеУдаленные, РезультатВыполненияВФоне.НеУдаленные);

	СвязиНеудаленных.Загрузить(РезультатВыполненияВФоне.СвязиНеудаленных);

	Возврат Результат;
КонецФункции

// Дополняет/формирует сведения о результате удаления для клиентского АПИ.
&НаСервере
Функция СформироватьРезультатУдаления(СведенияОРезультате, РезультатВыполненияВФоне, ИдентификаторХранилищаРезультата)
	Результат = ?(СведенияОРезультате = Неопределено,
		УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления(),
		СведенияОРезультате);
	
	РезультатПрепятствующиеУдалению = ?(ЭтоАдресВременногоХранилища(Результат.АдресРезультата), 
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата),
		УдалениеПомеченныхОбъектовСлужебный.ПрепятствующиеУдалению());
	
	Результат.Удаленные = УдалениеПомеченныхОбъектовСлужебный.ОбъединениеМассивов(
		Результат.Удаленные,
		РезультатВыполненияВФоне.Удаленные);
	Результат.УдаленныеКоличество = РезультатВыполненияВФоне.КоличествоУдаленных + Результат.УдаленныеКоличество;
	Результат.НеУдаленныеКоличество = РезультатВыполненияВФоне.КоличествоНеУдаленных + Результат.НеУдаленныеКоличество;
	Результат.Успешно = Результат.УдаленныеКоличество > 0 И Результат.НеУдаленныеКоличество = 0;
	
	СвязиНеудаленныхРезультата = УдалениеПомеченныхОбъектовСлужебный.ОбъединениеТаблиц(
			РезультатПрепятствующиеУдалению,
			РезультатВыполненияВФоне.СвязиНеудаленных,
			Истина);
	Результат.АдресРезультата = ПоместитьВоВременноеХранилище(
		СвязиНеудаленныхРезультата, ИдентификаторХранилищаРезультата);
			
	Возврат Результат;		
КонецФункции

#КонецОбласти

#Область ВыполнениеДействий

&НаКлиенте
Процедура ПриВыбореДействияМестаИспользования(Знач ВыбранноеЗначение, Знач ТекущиеДанные)
	
	Если ВыбранноеЗначение = "ЗаменитьСсылку" Тогда
		УстановитьЗаменитьНа(Неопределено);
	ИначеЕсли ВыбранноеЗначение = "Удалить" И НЕ ТекущиеДанные.СсылочногоТипа Тогда
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Нельзя установить действие удалить для %1'"),
		ТекущиеДанные.Представление));
	Иначе	
		ЗарегистрироватьДействиеМестаИспользования(ТекущиеДанные, ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеДополнительнойОбработки(Параметр)
	ПредставлениеОперации = НСтр("ru='Дополнительная обработка мешающих удалению объектов'");
	
	УстановитьСостояниеНеуспешноеУдалениеСПанельюСостояния();
	
	Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеВыполняется;
	Элементы.ДекорацияПредставлениеДлительнойОперации.Заголовок = НСтр("ru='Выполняется дополнительная обработка причин неудаления...'");
	Элементы.КоманднаяПанельФормы.Доступность = Ложь;
	Элементы.СтраницыИнформация.ТолькоПросмотр = Истина;
	
		
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияВыполненияДополнительнойОбработки", ЭтотОбъект);
	ВыполняемаяОперация = НачатьВыполнениеДополнительнойОбработкиСервер();
	ПриНачалеФоновогоЗадания(Обработчик);
КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеДополнительнойОбработкиСервер()
	ИмяМетода = "УдалениеПомеченныхОбъектовСлужебный.ВыполнитьОбработкуПричинНеудаления";
	
	ПараметрыМетода = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыМетода.ЗапуститьВФоне = Истина;
	ПараметрыМетода.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск помеченных на удаление'");
	
	Задание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыМетода, ИмяМетода, ТаблицаДействий.Выгрузить());
	
	Возврат Задание;
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияВыполненияДополнительнойОбработки(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		УстановитьСостояниеНеуспешноеУдалениеСПанельюСостояния();
		ЗаполнитьИнформациюОшибкамиФоновогоЗадания(ЭтотОбъект, Результат);
		УстановитьМонопольныйРежимНаСервере(Ложь);
	КонецЕсли;
	
	ПослеЗавершенияФоновогоЗадания(Результат);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПослеПодтвержденияОтменыЗадания(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		ПоказатьДиалогПередЗакрытием = Ложь;
		ОтменитьОперациюСервер(ВыполняемаяОперация);
		УстановитьМонопольныйРежимНаСервере(Ложь);	
		Закрыть(СведенияОРезультатахУдаления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОбновленииПрогрессаФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	Если Задание.Прогресс <> Неопределено Тогда
		Элементы.ПредставлениеПрогресса.Видимость = Истина;
		Элементы.ПредставлениеПрогресса.Заголовок = Задание.Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 0 Тогда
			ЕстьНепомеченные = Истина;
		ИначеЕсли ЭлементРодителя.Пометка = 1 Тогда 	
			ЕстьПомеченные = Истина;
		КонецЕсли;
		
		Если ЕстьНепомеченные И ЕстьПомеченные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПомеченные Тогда
		Если ЕстьНепомеченные Тогда
			Возврат 2;
		Иначе
			Возврат 1;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция УникальныйИдентификаторСУчетомВладельца()
	Возврат ?(ВладелецФормы = Неопределено, УникальныйИдентификатор, ВладелецФормы.УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ДанныеФормы, ДеревоЗначений)
	СтрокиДанныхФормы = ДанныеФормы.ПолучитьЭлементы();
	СтрокиДанныхФормы.Очистить();
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(СтрокиДанныхФормы, ДеревоЗначений);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибкаУстановкиМонопольногоРежима(ПодробныйТекстОшибкиФоновогоЗадания)
	ТекстОшибкиМонопольно = НСтр("ru='Ошибка разделенного доступа к базе'");	
	Возврат (СтрНайти(ПодробныйТекстОшибкиФоновогоЗадания,ТекстОшибкиМонопольно) <> 0)
КонецФункции

&НаКлиенте
Функция ОписаниеОперации(ИмяОперации, Параметр = Неопределено)

	Возврат Новый Структура("Имя, Параметр", ИмяОперации, Параметр);

КонецФункции

&НаКлиенте
Процедура ДобавитьЗадание(ИмяОперации, ПараметрЗадания = Неопределено)
	ОчередьЗаданийФормы.Добавить(ОписаниеОперации(ИмяОперации, ПараметрЗадания));
КонецПроцедуры

&НаКлиенте
Функция УдалитьТекущееЗадание()
	ОписаниеЗадания = ОписаниеОперации("");
	
	Если ОчередьЗаданийФормы.Количество() <> 0 Тогда
		ОписаниеЗадания = ОчередьЗаданийФормы[0];
		ОчередьЗаданийФормы.Удалить(0);
	КонецЕсли;
	
	Возврат ОписаниеЗадания.Параметр;
КонецФункции

&НаКлиенте
Функция ТекущееЗадание()
	Возврат ?(ОчередьЗаданийФормы.Количество() = 0, ОписаниеОперации(""), ОчередьЗаданийФормы[0]);
КонецФункции

&НаКлиенте
Процедура ЗапуститьЗаданиеСОжиданием()
	ЗапуститьЗадание();
	ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗадание(Задание = "", Параметр = Неопределено)
	Результат = Новый Структура("Успешно", Истина);
	
	Если НЕ ПустаяСтрока(Задание) И Задание <> ТекущееЗадание().Имя Тогда
		ДобавитьЗадание(Задание);
	КонецЕсли;
	
	Если ВыполняемаяОперация <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗаданиеФормы = ТекущееЗадание();
	Если НЕ ПустаяСтрока(ТекущееЗаданиеФормы.Имя) Тогда
		
		Если РежимУдаления = "Монопольный" 
				И ТекущееЗаданиеФормы.Имя <> ЗаданияФормы().ПоискПомеченных Тогда
				
			Результат = УстановитьМонопольныйРежимНаСервере(Истина);
			Если НЕ Результат.Успешно Тогда
				Результат.Вставить("Статус", "Ошибка");
				ЗаполнитьИнформациюОшибкамиФоновогоЗадания(ЭтотОбъект, Результат);
				Элементы.СтраницыОтображениеСостояния.Видимость = Истина;
				Элементы.СтраницыОтображениеСостояния.ТекущаяСтраница = Элементы.СостояниеВыполненоСОшибками;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		Если ТекущееЗаданиеФормы.Имя = ЗаданияФормы().УдалениеПомеченных Тогда
			НачатьУдалениеПомеченных(ТекущееЗаданиеФормы.Параметр);
		ИначеЕсли ТекущееЗаданиеФормы.Имя = ЗаданияФормы().ПоискПомеченных Тогда 
			НачатьПоискПомеченных(ТекущееЗаданиеФормы.Параметр);
		ИначеЕсли ТекущееЗаданиеФормы.Имя = ЗаданияФормы().ВыполнениеДополнительнойОбработки Тогда 
			НачатьВыполнениеДополнительнойОбработки(ТекущееЗаданиеФормы.Параметр);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаданияФормы()
	Задания = Новый Структура;
	Задания.Вставить("УдалениеПомеченных", "УдалениеПомеченных");
	Задания.Вставить("ПоискПомеченных", "ПоискПомеченных");
	Задания.Вставить("ВыполнениеДополнительнойОбработки", "ВыполнениеДополнительнойОбработки");
	Возврат Задания;
КонецФункции

&НаКлиенте
Процедура ОчиститьОчередьЗаданийФормы()
	ОчередьЗаданийФормы.Очистить();
КонецПроцедуры

&НаКлиенте
Функция КоличествоЗаданийВОчереди()
	Возврат  ОчередьЗаданийФормы.Количество();
КонецФункции

#КонецОбласти

#Область Инициализация

СведенияОРезультатахУдаления = УдалениеПомеченныхОбъектовСлужебныйКлиентСервер.НовыйСведенияОРезультатахУдаления(); 
ПредставлениеОперации = "";
ОчередьЗаданийФормы = Новый Массив;

#КонецОбласти