///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебный");
		
		Элементы.ГруппаНастройкаИспользованияПрофилейБезопасности.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И МодульРаботаВБезопасномРежимеСлужебный.ДоступнаНастройкаПрофилейБезопасности();
	Иначе
		Элементы.ГруппаНастройкаИспользованияПрофилейБезопасности.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Элементы.ГруппаОткрытьПараметрыПроксиСервера.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Иначе
		Элементы.ГруппаОткрытьПараметрыПроксиСервера.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда

		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость = Ложь;
			МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
			Элементы.ПроверятьЭлектронныеПодписиНаСервере.Видимость = 
				МодульЭлектроннаяПодписьСлужебный.ИспользоватьСервисОблачнойПодписи()
				Или МодульЭлектроннаяПодписьСлужебный.ИспользоватьЭлектроннуюПодписьВМоделиСервиса();
		КонецЕсли;

		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		ДоступнаУсовершенствованнаяПодпись = МодульЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
		Элементы.ГруппаУсовершенствованнаяПодпись.Видимость = ДоступнаУсовершенствованнаяПодпись;
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
			И Не ОбщегоНазначения.КлиентПодключенЧерезВебСервер() Тогда
			Элементы.ГруппаАвтоматическаяОбработкаПодписей.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЭлектроннаяПодписьИШифрование.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Элементы.ГруппаДополнительныеРеквизитыИСведения.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		ЭтоАдминистратор = Пользователи.ЭтоПолноправныйПользователь(, Истина);
		Элементы.ИспользоватьСервисОблачнойПодписи.Видимость = ЭтоАдминистратор И ОбщегоНазначения.РазделениеВключено();
	Иначе	
		Элементы.ГруппаОблачнаяПодпись.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Элементы.ГруппаВерсионирование.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПубликацияИнформационнойБазы.Видимость = Не (ОбщегоНазначения.РазделениеВключено() 
		Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		ХранитьИсториюИзменений = МодульВерсионированиеОбъектов.ЗначениеФлажкаХранитьИсторию();
	Иначе 
		Элементы.ГруппаВерсионирование.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") 
		И Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
		ИспользоватьПолнотекстовыйПоиск = МодульПолнотекстовыйПоискСервер.ЗначениеФлажкаИспользоватьПоиск();
	Иначе
		Элементы.ГруппаУправлениеПолнотекстовымПоиском.Видимость = Ложь;
	КонецЕсли;
	
	Если (ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов") )
		И Пользователи.ЭтоПолноправныйПользователь(,Истина) Тогда
		
		МодульУдалениеПомеченныхОбъектов = ОбщегоНазначения.ОбщийМодуль("УдалениеПомеченныхОбъектов");
		РежимРегламентногоЗадания = МодульУдалениеПомеченныхОбъектов.РежимУдалятьПоРасписанию();
		УдалениеПомеченныхИспользование = РежимРегламентногоЗадания.Использование;
		Элементы.НастроитьРасписание.Доступность = УдалениеПомеченныхИспользование;
	Иначе
		Элементы.ГруппаУдалениеПомеченных.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РегиональныеНастройки.Видимость = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность");
	
	НастройкиРазделаПроизводительность();
	
	УстановитьДоступность();
	
	НастройкиПрограммыПереопределяемый.ОбщиеНастройкиПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		МодульВерсионированиеОбъектовКлиент.ОбработкаОповещенияИзмененияФлажкаХранитьИсторию(
			ИмяСобытия, 
			ХранитьИсториюИзменений);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ОбработкаОповещенияИзмененияФлажкаИспользоватьПоиск(
			ИмяСобытия, 
			ИспользоватьПолнотекстовыйПоиск);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаголовокПрограммыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловДляWindowsПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловДляLinuxПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПотоковДлительныхОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбораПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбораПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранитьИсториюИзмененийПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		МодульВерсионированиеОбъектовКлиент.ПриИзмененииФлажкаХранитьИсторию(ХранитьИсториюИзменений);
	КонецЕсли;
	
	УстановитьДоступность("ХранитьИсториюИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоискПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ПриИзмененииФлажкаИспользоватьПоиск(ИспользоватьПолнотекстовыйПоиск);
	КонецЕсли;
	
	УстановитьДоступность("ИспользоватьПолнотекстовыйПоиск");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзменении(Элемент)
	ОповещениеОбИзменении = Новый ОписаниеОповещения("УдалениеПомеченныхИспользованиеПриИзмененииЗавершение", ЭтотОбъект);
	
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов")) Тогда
		МодульУдалениеПомеченныхОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалениеПомеченныхОбъектовКлиент");
		МодульУдалениеПомеченныхОбъектовКлиент.ПриИзмененииФлажкаУдалятьПоРасписанию(УдалениеПомеченныхИспользование, ОповещениеОбИзменении);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзмененииЗавершение(Изменение, ДополнительныеПараметры) Экспорт
	Если (Изменение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеПомеченныхИспользование = Изменение.Использование;
	Элементы.НастроитьРасписание.Доступность = УдалениеПомеченныхИспользование;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаСерверовМетокВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьМеткиВремениАвтоматическиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиСДатыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаАвтоматическаяОбработкаПодписейРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиКриптографииПоУмолчанию1РасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиАвтоматическиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьйКлиент.ОткрытьОтчетПродлениеСрокаДействияЭлектронныхПодписей("ТребуетсяУсовершенствоватьПодписи")
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользованиеПрофилейБезопасности(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
		МодульРаботаВБезопасномРежимеКлиент.ОткрытьДиалогНастройкиИспользованияПрофилейБезопасности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОткрытьСписокСвойств(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСведения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОткрытьСписокСвойств();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьХранениеИсторииИзменений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		МодульВерсионированиеОбъектовКлиент.ПоказатьНастройку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолнотекстовыйПоиск(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ПоказатьНастройку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегиональныеНастройки(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", "ПанельАдминистрированияБСП");
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность") Тогда
		МодульМультиязычностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МультиязычностьКлиент");
		МодульМультиязычностьКлиент.ОткрытьФормуРегиональныхНастроек(, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьПомеченныеНаУдаление(Команда)
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов")) Тогда
		МодульУдалениеПомеченныхОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалениеПомеченныхОбъектовКлиент");
		МодульУдалениеПомеченныхОбъектовКлиент.ПерейтиКПомеченнымНаУдаление(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов")) Тогда
		МодульУдалениеПомеченныхОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалениеПомеченныхОбъектовКлиент");
		МодульУдалениеПомеченныхОбъектовКлиент.НачатьИзменениеРасписанияРегламентногоЗадания();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбораПродолжение()
	
	АдресПубликацииИнформационнойНачалоВыбораЗавершение("АдресПубликацииИнформационнойБазыВИнтернете");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбораПродолжение()
	
	АдресПубликацииИнформационнойНачалоВыбораЗавершение("АдресПубликацииИнформационнойБазыВЛокальнойСети");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойНачалоВыбораЗавершение(ИмяРеквизита)
	
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		АдресПубликацииИнформационнойБазыНачалоВыбораНаСервере(ИмяРеквизита, СтрокаСоединенияИнформационнойБазы());
		Подключаемый_ПриИзмененииРеквизита(Элементы[ИмяРеквизита]);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось автоматически заполнить поле, т.к. клиентское приложение не подключено через веб-сервер.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АдресПубликацииИнформационнойБазыНачалоВыбораНаСервере(ИмяРеквизита, СтрокаСоединения)
	
	ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения);
	Если ПараметрыСоединения.Свойство("WS") Тогда
		НаборКонстант[ИмяРеквизита] = ПараметрыСоединения.WS;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	Если НавигационнаяСсылкаФорматированнойСтроки = "Программы" Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Сертификаты");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КонстантаИмя = ЧастиИмени[1];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
	ИначеЕсли ЧастиИмени.Количество() = 1 И НРег(Лев(РеквизитПутьКДанным, 9)) = НРег("Константа") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 10);
		КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Константы[КонстантаИмя].Получить() <> КонстантаЗначение Тогда
		Константы[КонстантаИмя].Установить(КонстантаЗначение);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьДополнительныеРеквизитыИСведения" И КонстантаЗначение = Ложь Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		Элементы.ГруппаДополнительныеРеквизитыИлиСведения.Доступность =
			НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "ХранитьИсториюИзменений" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		
		Элементы.НастроитьХранениеИсторииИзменений.Доступность = ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		
		Элементы.НастроитьПолнотекстовыйПоиск.Доступность = ИспользоватьПолнотекстовыйПоиск;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи" Или РеквизитПутьКДанным
			= "НаборКонстант.ИспользоватьШифрование" Или РеквизитПутьКДанным = "" Тогда

			Элементы.НастройкиЭлектроннойПодписиИШифрования.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
				Или НаборКонстант.ИспользоватьШифрование;
			Элементы.ГруппаУсовершенствованнаяПодпись.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
			Элементы.ГруппаПроверятьПодписиНаСервере.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи
				Или НаборКонстант.ИспользоватьШифрование;

			Если НаборКонстант.ИспользоватьЭлектронныеПодписи И (РеквизитПутьКДанным
				= "НаборКонстант.ИспользоватьЭлектронныеПодписи" Или РеквизитПутьКДанным = "") Тогда
				Если ДоступнаУсовершенствованнаяПодпись Тогда
					КонстантаАдресаСерверовМетокВремени = Константы["АдресаСерверовМетокВремени"].Получить();
					КонстантаУсовершенствоватьПодписиАвтоматически = Константы["УсовершенствоватьПодписиАвтоматически"].Получить();
					КонстантаДобавлятьМеткиВремениАвтоматически = Константы["ДобавлятьМеткиВремениАвтоматически"].Получить();
					КонстантаТипПодписиКриптографииПоУмолчанию = Константы["ТипПодписиКриптографииПоУмолчанию"].Получить();
					КонстантаУсовершенствоватьПодписиСДаты = Константы["УсовершенствоватьПодписиСДаты"].Получить();
					УстановитьЗаголовокПодсказкиУсовершенствования();
				КонецЕсли;
				Если Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость Тогда
					КонстантаСоздаватьЭлектронныеПодписиНаСервере = Константы["СоздаватьЭлектронныеПодписиНаСервере"].Получить();
				КонецЕсли;
				Если Элементы.ПроверятьЭлектронныеПодписиНаСервере.Видимость Тогда
					КонстантаПроверятьЭлектронныеПодписиНаСервере = Константы["ПроверятьЭлектронныеПодписиНаСервере"].Получить();
				КонецЕсли;
			КонецЕсли;
			УстановитьЗаголовокЭлектроннаяПодписьНаСервере();
		ИначеЕсли (РеквизитПутьКДанным = "КонстантаТипПодписиКриптографииПоУмолчанию" Или РеквизитПутьКДанным
			= "КонстантаУсовершенствоватьПодписиАвтоматически") И ДоступнаУсовершенствованнаяПодпись Тогда
			УстановитьЗаголовокПодсказкиУсовершенствования();
			КонстантаТипПодписиКриптографииПоУмолчанию = Константы["ТипПодписиКриптографииПоУмолчанию"].Получить();
			КонстантаУсовершенствоватьПодписиАвтоматически = Константы["УсовершенствоватьПодписиАвтоматически"].Получить();
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") 
			И ДоступнаУсовершенствованнаяПодпись
			И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS" Или РеквизитПутьКДанным = "") Тогда

			Если ОбщегоНазначения.РазделениеВключено() Тогда
				МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
				ЭтоМодельСервисаСДоступнымУсовершенствованием = МодульЭлектроннаяПодпись.ОбщиеНастройки().ЭтоМодельСервисаСДоступнымУсовершенствованием;
				Элементы.ГруппаАвтоматическаяОбработкаПодписей.Видимость = ЭтоМодельСервисаСДоступнымУсовершенствованием;
				Элементы.ГруппаДобавлятьМеткиАвтоматически.Видимость = Ложь;
				Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
				Если ЭтоМодельСервисаСДоступнымУсовершенствованием Тогда
					Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
					Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
					МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
					МодульЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(
						Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора, "Настройки");
					Элементы.ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
						НСтр("ru = 'В приложении в Интернете архивная подпись по умолчанию недоступна, этот тип подписи можно выбрать при подписании <a href=Сертификаты>сертификатом</a>, установленным на компьютер при установленой <a href=Программы>программе электронной подписи</a>.'"));
				Иначе
					Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Ложь;
					Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Истина;
					Элементы.ТипПодписиКриптографииПоУмолчанию1РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
						НСтр("ru = 'В приложении в Интернете по умолчанию установлен тип подписи Базовая, типы подписи с метками времени можно выбрать при подписании <a href=Сертификаты>сертификатом</a>, установленным на компьютер при установленой <a href=Программы>программе электронной подписи</a>.'"));
				КонецЕсли;
			Иначе 
				МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
				МодульЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(
					Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора, "Настройки");
				Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
				Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
				Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ТипПодписиКриптографииПоУмолчанию.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Если РеквизитПутьКДанным = "" И ДоступнаУсовершенствованнаяПодпись Тогда
				Элементы.ТипПодписиКриптографииПоУмолчанию.Видимость = Истина;
				Элементы.ТипПодписиКриптографииПоУмолчанию1.Видимость = Ложь;
				МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
				МодульЭлектроннаяПодписьСлужебный.ЗаполнитьСписокТиповПодписейКриптографии(
					Элементы.ТипПодписиКриптографииПоУмолчанию.СписокВыбора, "Настройки");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		ИспользуютсяПрофилиБезопасности = МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
	Иначе
		ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		ДоступностьНастройкиПроксиНаСервере = Не ИспользуютсяПрофилиБезопасности;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаОткрытьПараметрыПроксиСервера",
			"Доступность", ДоступностьНастройкиПроксиНаСервере);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкаПроксиСервераНаСервереНедоступнаПриИспользованииПрофилейБезопасности",
			"Видимость", Не ДоступностьНастройкиПроксиНаСервере);
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьШифрование"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS"
		ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		
		ДоступностьОблачнойПодписи = (НаборКонстант.ИспользоватьЭлектронныеПодписи ИЛИ НаборКонстант.ИспользоватьШифрование)
			И (НаборКонстант.ИспользоватьСервисDSS);
			
		Элементы.ОбработкаУправлениеПодключениемDSSСерверыОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		Элементы.ОбработкаУправлениеПодключениемDSSУчетныеЗаписиОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПодсказкиУсовершенствования()
	
	Если ЗначениеЗаполнено(КонстантаТипПодписиКриптографииПоУмолчанию) Тогда
		
		Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			Возврат;
		КонецЕсли;
		
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		Элементы.ГруппаУсовершенствоватьПодписи.Доступность = 
			МодульЭлектроннаяПодписьСлужебный.ДоступностьНастроекУсовершенствованияПодписи(КонстантаТипПодписиКриптографииПоУмолчанию);
		
		Если Элементы.ГруппаУсовершенствоватьПодписи.Доступность Тогда
			
			Элементы.ДекорацияУсовершенствованиеРасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подписи, добавленные ранее и полученные извне, будут усовершенствованы для длительного хранения до выбранного типа: %1.'"),
				КонстантаТипПодписиКриптографииПоУмолчанию);
			
		Иначе
			Элементы.ДекорацияУсовершенствованиеРасширеннаяПодсказка.Заголовок = 
				НСтр("ru = 'Подписи, добавленные ранее и полученные извне, будут усовершенствованы для длительного хранения до выбранного типа.'");
		КонецЕсли;
		
	Иначе
		Элементы.ДекорацияУсовершенствованиеРасширеннаяПодсказка.Заголовок = 
			НСтр("ru = 'Не выбран тип подписи для документов.'");
		Элементы.ГруппаУсовершенствоватьПодписи.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЭлектроннаяПодписьНаСервере()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если НаборКонстант.ИспользоватьЭлектронныеПодписи Тогда
		ЗаголовокФлажка = НСтр("ru = 'Проверять подписи и сертификаты на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи на компьютер пользователя для проверки электронных подписей и сертификатов.'");
	Иначе
		ЗаголовокФлажка = НСтр("ru = 'Проверять сертификаты на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи на компьютер пользователя для проверки сертификатов.'");
	КонецЕсли;
	
	Элементы.ПроверятьЭлектронныеПодписиНаСервере.Заголовок = ЗаголовокФлажка;
	
	Если ИнформационнаяБазаФайловая Тогда
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на компьютер, где работает веб-сервер, подключенный к файловой информационной базе, должна быть установлена хотя бы одна %1.'"),
			НСтр("ru = '<a href=Программы>программа электронной подписи</a> из списка'"));
	Иначе
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на каждый компьютер, где работает сервер 1С:Предприятия, должна быть установлена хотя бы одна %1.'"), 
			НСтр("ru = '<a href=Программы>программа электронной подписи</a> из списка'"));
	КонецЕсли;
	
	ПодсказкаФлажка = ПодсказкаФлажка + Символы.ПС + Символы.ПС + ПодсказкаНаСервере;
	
	Элементы.ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказка.Заголовок = 
		СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаФлажка);
	
	Если Не НаборКонстант.ИспользоватьЭлектронныеПодписи Тогда
		ЗаголовокФлажка = НСтр("ru = 'Шифровать и расшифровывать на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для шифрования и расшифровки.'");
		
	ИначеЕсли Не НаборКонстант.ИспользоватьШифрование Тогда
		ЗаголовокФлажка = НСтр("ru = 'Подписывать на сервере'");
			ПодсказкаФлажка =
		НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для подписания.'");
	Иначе
		ЗаголовокФлажка = НСтр("ru = 'Подписывать и шифровать на сервере'");
		ПодсказкаФлажка =
			НСтр("ru = 'Позволяет не устанавливать программу электронной подписи и сертификат на компьютер пользователя для подписания, шифрования и расшифровки.'");
	КонецЕсли;
		
	Элементы.СоздаватьЭлектронныеПодписиНаСервере.Заголовок = ЗаголовокФлажка;
	
	Если ИнформационнаяБазаФайловая Тогда
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на компьютер, где работает веб-сервер, подключенный к файловой информационной базе, должна быть установлена %1 и %2.'"),
			НСтр("ru = '<a href=Программы>программа электронной подписи</a>'"),
			НСтр("ru = '<a href=Сертификаты>сертификат</a> с закрытым ключом'"));
	Иначе
		ПодсказкаНаСервере = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Важно: на каждый компьютер, где работает сервер 1С:Предприятия, должна быть установлена %1 и %2.'"), 
			НСтр("ru = '<a href=Программы>программа электронной подписи</a>'"),
			НСтр("ru = '<a href=Сертификаты>сертификат</a> с закрытым ключом'"));	
	КонецЕсли;
	
	ПодсказкаФлажка = ПодсказкаФлажка + Символы.ПС + Символы.ПС + ПодсказкаНаСервере;
	Элементы.СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказка.Заголовок = 
		СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаФлажка);
		
КонецПроцедуры

&НаСервере
Процедура НастройкиРазделаПроизводительность()
	
	МногопоточныеОперацииДоступны = Не (ОбщегоНазначения.ИнформационнаяБазаФайловая() Или ОбщегоНазначения.РазделениеВключено());
	
	Элементы.ГруппаПроизводительность.Видимость = МногопоточныеОперацииДоступны;
	Элементы.ГруппаВременныеКаталогиКластераСерверов.Видимость = МногопоточныеОперацииДоступны;
	
	Если МногопоточныеОперацииДоступны Тогда
		Если НаборКонстант.КоличествоПотоковДлительныхОпераций < 1 Или НаборКонстант.КоличествоПотоковДлительныхОпераций > 99 Тогда
			НаборКонстант.КоличествоПотоковДлительныхОпераций = 4;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
