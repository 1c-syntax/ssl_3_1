///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СообщениеОбмена Экспорт; // При получении - имя полученного файла во ВременныйКаталог. При отправке - имя файла, который необходимо отправить
Перем ВременныйКаталог Экспорт; // Временный каталог для сообщений обмена.
Перем ИдентификаторКаталога Экспорт;
Перем Корреспондент Экспорт;
Перем ИмяПланаОбмена Экспорт;
Перем ИмяПланаОбменаКорреспондента Экспорт;
Перем СообщениеОбОшибке Экспорт;
Перем СообщениеОбОшибкеЖР Экспорт;

Перем ШаблоныИменДляПолученияСообщения Экспорт;
Перем ИмяСообщенияДляОтправки Экспорт;

Перем Таймаут;
Перем ТаймаутОтправкаПолучение;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ОтправитьДанные
Функция ОтправитьДанные(СообщениеДляСопоставленияДанных = Ложь) Экспорт

	Попытка
		Результат = ОтправитьСообщение();
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ВыгрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПолучитьДанные
Функция ПолучитьДанные() Экспорт

	Попытка
		
		Для Каждого Шаблон Из ШаблоныИменДляПолученияСообщения Цикл
			
			Результат = ПолучитьСообщение(Шаблон);
			
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ТранспортСообщенийОбмена.ИнформацияОбОшибкеВСообщения(ЭтотОбъект, ИнформацияОбОшибке());
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПередВыгрузкойДанных
Функция ПередВыгрузкойДанных(СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	Возврат Истина;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ПараметрыКорреспондента
Функция ПараметрыКорреспондента(НастройкиПодключения) Экспорт
	
	Результат = ТранспортСообщенийОбмена.СтруктураРезультатаПолученияПараметровКорреспондента();
	Результат.ПодключениеУстановлено = Истина;
	Результат.ПодключениеРазрешено = Истина;
	
	Возврат Результат;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.СохранитьНастройкиВКорреспонденте
Функция СохранитьНастройкиВКорреспонденте(НастройкиПодключения) Экспорт
		
	Возврат Истина;
	
КонецФункции

// См. ОбработкаОбъект.ТранспортСообщенийОбменаFILE.ТребуетсяАутентификация
Функция ТребуетсяАутентификация() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСообщение(ШаблонИмениСообщения)

	HTTPСоединение = HTTPСоединение("cloud-api.yandex.net", Таймаут);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization","OAuth " + AccessToken);
	
	Если ПустаяСтрока(КаталогВОблаке) Тогда
		Путь = "disk:/";
	Иначе
		Путь = "disk:/" + КаталогВОблаке + "/";
	КонецЕсли;
	
	АдресРесурса = "/v1/disk/resources?path=%1&fields=_embedded.items,_embedded.items.name,_embedded.items.path,_embedded.items.modified";
	АдресРесурса = СтрШаблон(АдресРесурса, Путь); 
		
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Ответ = HTTPСоединение.Получить(Запрос);
	Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РезультатЗапроса = ТранспортСообщенийОбмена.JSONВЗначение(Тело,,"modified");
		
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаФайлов.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаФайлов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		
	Для Каждого Файл Из РезультатЗапроса["_embedded"]["items"] Цикл
		
		НовСтрока = ТаблицаФайлов.Добавить();
		НовСтрока.ИмяФайла = Файл["name"];
		НовСтрока.Путь = Файл["path"];
		НовСтрока.Дата = Файл["modified"];
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ИмяФайла КАК ИмяФайла,
		|	Т.Путь КАК Путь,
		|	Т.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаФайлов КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Путь КАК Путь
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.ИмяФайла ПОДОБНО &Шаблон
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ.Дата УБЫВ";
		
	ШаблонИмениСообщенияДляПоиска = СтрЗаменить(ШаблонИмениСообщения, "*", "%");
	
	Запрос.УстановитьПараметр("Шаблон", ШаблонИмениСообщенияДляПоиска);
	Запрос.УстановитьПараметр("ТаблицаФайлов", ТаблицаФайлов);
	
	РезультатПоискаФайлов = Запрос.Выполнить().Выгрузить();
	
	Если РезультатПоискаФайлов.Количество() = 0 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'В каталоге обмена информацией не был обнаружен файл сообщения с данными.
                                  |Каталог обмена информацией на сервере: ""%1""
                                  |Имя файла сообщения обмена: ""%2""'");
		
		СообщениеОбОшибке = СтрШаблон(СообщениеОбОшибке, КаталогВОблаке, ШаблонИмениСообщения);
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПутьКФайлу = РезультатПоискаФайлов[0].Путь;
	
	// Получение ссылки на скачивание файла
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization","OAuth " + AccessToken);
	
	АдресРесурса = "/v1/disk/resources/download?path=" + СтрЗаменить(ПутьКФайлу,"/","%2F");
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Ответ = HTTPСоединение.Получить(Запрос);
	Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РезультатЗапроса = ТранспортСообщенийОбмена.JSONВЗначение(Тело);
	Ссылка = РезультатЗапроса.Получить("href");
	СсылкаПоЧастям = ОбщегоНазначенияКлиентСервер.СтруктураURI(Ссылка);
	
	HTTPСоединение = HTTPСоединение(СсылкаПоЧастям.ИмяСервера,Таймаут);
	Запрос = Новый HTTPЗапрос(СсылкаПоЧастям.ПутьНаСервере);
	Ответ = HTTPСоединение.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 302 Тогда
		
		Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Ссылка = Ответ.Заголовки.Получить("Location");
	СсылкаПоЧастям = ОбщегоНазначенияКлиентСервер.СтруктураURI(Ссылка);
	
	HTTPСоединение = HTTPСоединение(СсылкаПоЧастям.ИмяСервера, ТаймаутОтправкаПолучение);
		
	Запрос = Новый HTTPЗапрос(СсылкаПоЧастям.ПутьНаСервере);
	Ответ = HTTPСоединение.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ЗагрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ФайлЗапакован = ВРег(Прав(ПутьКФайлу, 3)) = "ZIP";
	
	Если ФайлЗапакован Тогда
			
		// Получаем имя для временного файла архива.
		ИмяВременногоФайлаАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			ВременныйКаталог, Строка(Новый УникальныйИдентификатор) + ".zip");
		
		ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ДвоичныеДанные.Записать(ИмяВременногоФайлаАрхива);
		
		Если Не ТранспортСообщенийОбмена.РаспаковатьСообщениеОбменаИзZipФайла(
			ЭтотОбъект, ИмяВременногоФайлаАрхива, ПарольАрхиваСообщенияОбмена) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ДвоичныеДанные.Записать(СообщениеОбмена);
		
	КонецЕсли;
		
	Возврат Истина;
КонецФункции

Функция ОтправитьСообщение()

	Если ПустаяСтрока(КаталогВОблаке) Тогда
		Путь = "disk:/";
	Иначе
		Путь = "disk:/" + КаталогВОблаке + "/";
	КонецЕсли;
	
	Если СжиматьФайлИсходящегоСообщения Тогда
		
		Если Не ТранспортСообщенийОбмена.ЗапаковатьСообщениеОбменаВZipФайл(ЭтотОбъект, ПарольАрхиваСообщенияОбмена) Тогда
			Возврат Ложь;
		КонецЕсли;

		Файл = Новый Файл(ИмяСообщенияДляОтправки);
		Путь = Путь + Файл.ИмяБезРасширения + ".zip";
		
	Иначе
		
		Путь = Путь + ИмяСообщенияДляОтправки;
		
	КонецЕсли;
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization","OAuth " + AccessToken);
	
	АдресРесурса = "/v1/disk/resources/upload?path=%1&overwrite=true";
	АдресРесурса = СтрШаблон(АдресРесурса, Путь);
	
	HTTPСоединение = HTTPСоединение("cloud-api.yandex.net", Таймаут);
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Ответ = HTTPСоединение.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ВыгрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	РезультатЗапроса = ТранспортСообщенийОбмена.JSONВЗначение(Тело);
	
	Ссылка = РезультатЗапроса.Получить("href"); //Ссылка
	СсылкаПоЧастям = ОбщегоНазначенияКлиентСервер.СтруктураURI(Ссылка);
	
	HTTPСоединение = HTTPСоединение(СсылкаПоЧастям.ИмяСервера, ТаймаутОтправкаПолучение);
		
	Запрос = Новый HTTPЗапрос(СсылкаПоЧастям.ПутьНаСервере);
	
	Данные = Новый ДвоичныеДанные(СообщениеОбмена);
	Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
		
	Ответ = HTTPСоединение.Записать(Запрос);
	
	Если Ответ.КодСостояния <> 201 Тогда
		
		Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект, "ВыгрузкаДанных");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПодключениеУстановлено() Экспорт
	
	Если ПустаяСтрока(КаталогВОблаке) Тогда
		Путь = "disk:/";
	Иначе
		Путь = "disk:/" + КаталогВОблаке + "/";
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Authorization","OAuth " + AccessToken);
	
	РесурсЗапроса = "/v1/disk/resources?fields=resource_id&path=%1&limit=1";
	РесурсЗапроса = СтрШаблон(РесурсЗапроса, Путь);
		
	HTTPСоединение = HTTPСоединение("cloud-api.yandex.net", Таймаут);
	АдресРесурса = Новый HTTPЗапрос(РесурсЗапроса, ЗаголовокHTTP);
	Ответ = HTTPСоединение.Получить(АдресРесурса);
		
	Если Ответ.КодСостояния <> 200 Тогда
		
		Тело = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		СообщениеОбОшибке = ТранспортСообщенийОбмена.JSONВЗначение(Тело)["message"];
		ТранспортСообщенийОбмена.ЗаписатьСообщениеВЖурналРегистрации(ЭтотОбъект);
		
		Возврат Ложь;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция HTTPСоединение(Сервер, Таймаут)

	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(Сервер,,,, Прокси, Таймаут, ЗащищенноеСоединение);	
		
КонецФункции

#КонецОбласти

#Область Инициализация

ВременныйКаталог = Неопределено;
СообщениеОбмена = Неопределено;

Таймаут = 20;
ТаймаутОтправкаПолучение = 43200;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли