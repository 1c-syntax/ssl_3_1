///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP";
		
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = Пароли.Пароль;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Результат.ПарольSMTP = Пароли.ПарольSMTP;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP =Пароли.Пароль;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
		Если Результат.ПользовательSMTP = "" Тогда
			Результат.ПарольSMTP = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ПарольIMAP = "" Тогда
		Результат.ПарольIMAP = Результат.ПарольSMTP;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция необходима для интеграции с подсистемой "Обмен данными".
// Возвращает ссылку на учетную запись электронной почты этой базы, соответствующую учетной записи
// электронной почты базы-корреспондента, с которой выполняется настройка обмена (см. параметры).
// Выполняется поиск записи по имени предопределенного или по адресу или создание новой записи (если не найдена).
// Значения реквизитов учетной записи этой базы приводятся в соответствие значениям реквизитов учетной записи корреспондента.
// Параметры:
//   УзелПланаОбмена - СправочникОбъект.УчетныеЗаписиЭлектроннойПочты - учетная запись электронной почты,
//                   базы-корреспондента, полученная из файла настройки синхронизации данных путем
//                   десериализации с помощью метода ПрочитатьXML.
//
// Возвращаемое значение:
//  СправочникОбъект.УчетныеЗаписиЭлектроннойПочты - ссылка на учетную запись этой информационной базы.
//
Функция УчетнаяЗаписьЭтойБазыПоДаннымУчетнойЗаписиКорреспондента(УчетнаяЗаписьКорреспондента) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
		Блокировка.Заблокировать();
		
		УчетнаяЗаписьЭтойБазы = Неопределено;
		// Для предопределенной записи - перезаписываем предопределенный элемент текущей ИБ.
		Если УчетнаяЗаписьКорреспондента.Предопределенный Тогда
			УчетнаяЗаписьЭтойБазы = Справочники.УчетныеЗаписиЭлектроннойПочты[УчетнаяЗаписьКорреспондента.ИмяПредопределенныхДанных].ПолучитьОбъект();
		Иначе
			// Для обычной записи ищем существующую запись с тем же адресом.
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ Справочник.УчетныеЗаписиЭлектроннойПочты
			|ГДЕ АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
			Запрос.УстановитьПараметр("АдресЭлектроннойПочты", УчетнаяЗаписьКорреспондента.АдресЭлектроннойПочты);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				УчетнаяЗаписьЭтойБазы = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		
		Если УчетнаяЗаписьЭтойБазы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(УчетнаяЗаписьЭтойБазы, УчетнаяЗаписьКорреспондента,,"ИмяПредопределенныхДанных, Родитель, Владелец, Ссылка");
		Иначе
			УчетнаяЗаписьЭтойБазы = УчетнаяЗаписьКорреспондента;
		КонецЕсли;
		
		УчетнаяЗаписьЭтойБазы.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат УчетнаяЗаписьЭтойБазы;
	
КонецФункции

// Возвращает тип текстов электронных писем по наименованию.
//
Функция ТипТекстовЭлектронныхПисем(Наименование) Экспорт
	
	Возврат Перечисления.ТипыТекстовЭлектронныхПисем[Наименование];
	
КонецФункции

// Определяет, предусмотрено ли в программе получение писем.
// 
// Возвращаемое значение:
//  Булево - Истина, если предусмотрено.
//
Функция ДоступноПолучениеПисем() Экспорт
	
	Возврат НастройкиПодсистемы().ДоступноПолучениеПисем;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
// 
// Параметры:
//  ЗапросыРазрешений - см. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.ЗапросыРазрешений
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Если ОбщегоНазначения.РазделениеВключено()
	   И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	РазрешенияУчетныхЗаписей = Справочники.УчетныеЗаписиЭлектроннойПочты.РазрешенияУчетныхЗаписей();
	Для Каждого ОписаниеРазрешений Из РазрешенияУчетныхЗаписей Цикл
		ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
			ОписаниеРазрешений.Значение, ОписаниеРазрешений.Ключ));
	КонецЦикла;

КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного.
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтПодчиненного.
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);
	
КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ.
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	ОтключитьИспользованиеУчетныхЗаписей();
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.4.1.1";
		Обработчик.Процедура = "Справочники.УчетныеЗаписиЭлектроннойПочты.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("d57f7a36-46ca-4a52-baab-db960e3d376d");
		Обработчик.Комментарий = НСтр("ru = 'Обновляет сведения о персональных учетных записях электронной почты.
			|До завершения обработки список персональных учетных записей электронной почты может быть неполным.'");
		Обработчик.ОчередьОтложеннойОбработки = 1;
		Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УчетныеЗаписиЭлектроннойПочты.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
		Обработчик.ИзменяемыеОбъекты    = "Справочник.УчетныеЗаписиЭлектроннойПочты";
		
		ЧитаемыеОбъекты = Новый Массив;
		ЧитаемыеОбъекты.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПриПолученииЧитаемыхОбъектовОбработчикаОбновленияУчетныхЗаписейЭлектроннойПочты(ЧитаемыеОбъекты);
		
		Обработчик.ЧитаемыеОбъекты = СтрСоединить(ЧитаемыеОбъекты, ",");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "УчетныеЗаписиЭлектроннойПочты";
	ВидДоступа.Представление = НСтр("ru = 'Учетные записи электронной почты'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	
	Если МодульУправлениеДоступомСлужебный.ВидДоступаСуществует("УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Описание = Описание + "
		|Справочник.УчетныеЗаписиЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
		|Справочник.УчетныеЗаписиЭлектроннойПочты.Чтение.Пользователи
		|Справочник.УчетныеЗаписиЭлектроннойПочты.Изменение.Пользователи
		|";
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	СтароеИмя = "Роль.ИспользованиеУчетныхЗаписейЭлектроннойПочты";
	НовоеИмя  = "Роль.ЧтениеУчетныхЗаписейЭлектроннойПочты";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.3.3.11", СтароеИмя, НовоеИмя, Библиотека);
	
	СтароеИмя = "Роль.ЧтениеУчетныхЗаписейЭлектроннойПочты";
	НовоеИмя  = "Роль.ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.4.1.1", СтароеИмя, НовоеИмя, Библиотека);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, что предопределенная системная учетная запись электронной почты
// доступна для использования.
//
Функция ПроверитьСистемнаяУчетнаяЗаписьДоступна() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Ссылка", РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись());
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьСообщение(Знач УчетнаяЗапись, Знач ПараметрыОтправки) Экспорт
	Перем ПротоколПочты, Соединение;
	
	Письмо = ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыОтправки);
	РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты,ОтправлятьСкрытыеКопииПисемНаЭтотАдрес");
	
	ПараметрыОтправки.Свойство("Соединение", Соединение);
	ПараметрыОтправки.Свойство("ПротоколПочты", ПротоколПочты);
	
	ПараметрыОтправки.Вставить("ИдентификаторСообщения", "");
	ПараметрыОтправки.Вставить("ИдентификаторСообщенияОтправкаIMAP", "");
	ПараметрыОтправки.Вставить("ОшибочныеПолучатели", Новый Соответствие);
	
	СоздаватьСоединение = ТипЗнч(Соединение) <> Тип("ИнтернетПочта");
	
	Если СоздаватьСоединение Тогда
		РезультатОтправки = ОтправитьПисьмо(УчетнаяЗапись, Письмо);
		ПараметрыОтправки.ОшибочныеПолучатели = РезультатОтправки.ОшибочныеПолучатели;
		ПараметрыОтправки.ИдентификаторСообщения = РезультатОтправки.ИдентификаторПисьмаSMTP;
		ПараметрыОтправки.ИдентификаторСообщенияОтправкаIMAP = РезультатОтправки.ИдентификаторПисьмаIMAP;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыОтправителя.ОтправлятьСкрытыеКопииПисемНаЭтотАдрес Тогда
		Получатель = Письмо.СлепыеКопии.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
		Получатель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если ПротоколПочты = "IMAP" Или ПротоколПочты = "Все" И Не ПочтовыйСерверХранитПисьмаОтправленныеПоSMTP(Профиль) Тогда
		Соединение.Послать(Письмо, ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать, ПротоколИнтернетПочты.IMAP);
		ПараметрыОтправки.ИдентификаторСообщенияОтправкаIMAP = Письмо.ИдентификаторСообщения;
		
		ФлагиПисьма = Новый ФлагиИнтернетПочтовогоСообщения;
		ФлагиПисьма.Прочитанное = Истина;
		ФлагиПисем = Новый Соответствие;
		ФлагиПисем.Вставить(Письмо.ИдентификаторСообщения, ФлагиПисьма);
		Соединение.УстановитьФлагиСообщений(ФлагиПисем);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПротоколПочты) Или ПротоколПочты = "Все" Тогда 
		ОшибочныеПолучатели = Соединение.Послать(Письмо, ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать,
			ПротоколИнтернетПочты.SMTP);
			
		ПараметрыОтправки.ИдентификаторСообщения = Письмо.ИдентификаторСообщения;
		ПараметрыОтправки.ОшибочныеПолучатели = ОшибочныеПолучатели;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПапкуОтправленные(Соединение)
	
	ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
	Для Каждого ПочтовыйЯщик Из ПочтовыеЯщики Цикл
		Если НРег(ПочтовыйЯщик) = "отправленные"
			Или НРег(ПочтовыйЯщик) = "inbox.sent"
			Или НРег(ПочтовыйЯщик) = "sent" Тогда
			
			Соединение.ТекущийПочтовыйЯщик = ПочтовыйЯщик;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользоватьIMAPПриОтправкеПисем(Профиль)
	
	Возврат Не ПочтовыйСерверХранитПисьмаОтправленныеПоSMTP(Профиль)
		И ЗначениеЗаполнено(Профиль.АдресСервераIMAP)
		И ЗначениеЗаполнено(Профиль.ПортIMAP)
		И ЗначениеЗаполнено(Профиль.ПользовательIMAP)
		И Профиль.ПарольIMAP <> "";
	
КонецФункции

Функция ЗагрузитьСообщения(Знач УчетнаяЗапись, Знач ПараметрыЗагрузки = Неопределено) Экспорт
	
	// Используется для проверки возможности входа на почтовый ящик.
	Перем РежимТестирования;
	
	// Получать только заголовки писем.
	Перем ПолучениеЗаголовков;
	
	// Приводить почтовые сообщения к простому типу;
	Перем ПриводитьСообщенияКТипу;
	
	// Заголовки или идентификаторы писем, полные сообщения по которым требуется получить.
	Перем ЗаголовкиИдентификаторы;
	
	Если ПараметрыЗагрузки.Свойство("РежимТестирования") Тогда
		РежимТестирования = ПараметрыЗагрузки.РежимТестирования;
	Иначе
		РежимТестирования = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ПолучениеЗаголовков") Тогда
		ПолучениеЗаголовков = ПараметрыЗагрузки.ПолучениеЗаголовков;
	Иначе
		ПолучениеЗаголовков = Ложь;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если ПараметрыЗагрузки.Свойство("ЗаголовкиИдентификаторы") Тогда
		ЗаголовкиИдентификаторы = ПараметрыЗагрузки.ЗаголовкиИдентификаторы;
	Иначе
		ЗаголовкиИдентификаторы = Новый Массив;
	КонецЕсли;
	
	НаборСообщенийДляУдаления = Новый Массив;
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, Протокол);
	Попытка
		Если ПолучениеЗаголовков Тогда
			НаборПисем = Соединение.ПолучитьЗаголовки();
		ИначеЕсли Не РежимТестирования Тогда
			НастройкиТранспорта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты,ОставлятьКопииСообщенийНаСервере,ПериодХраненияСообщенийНаСервере");
			Если НастройкиТранспорта.ПротоколВходящейПочты = "IMAP" Тогда
				НастройкиТранспорта.ОставлятьКопииСообщенийНаСервере = Истина;
				НастройкиТранспорта.ПериодХраненияСообщенийНаСервере = 0;
			КонецЕсли;
			
			Если НастройкиТранспорта.ОставлятьКопииСообщенийНаСервере Тогда
				Если ЗаголовкиИдентификаторы.Количество() = 0 И НастройкиТранспорта.ПериодХраненияСообщенийНаСервере > 0 Тогда
					Заголовки = Соединение.ПолучитьЗаголовки();
					НаборСообщенийДляУдаления = Новый Массив;
					Для Каждого ЭлементЗаголовок Из Заголовки Цикл
						ТекущаяДата = ТекущаяДатаСеанса();
						РазницаДат = (ТекущаяДата - ЭлементЗаголовок.ДатаОтправления) / (3600*24);
						Если РазницаДат >= НастройкиТранспорта.ПериодХраненияСообщенийНаСервере Тогда
							НаборСообщенийДляУдаления.Добавить(ЭлементЗаголовок);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				АвтоматическиУдалятьСообщенияПриВыбореССервера = Ложь;
			Иначе
				АвтоматическиУдалятьСообщенияПриВыбореССервера = Истина;
			КонецЕсли;
			
			НаборПисем = Соединение.Выбрать(АвтоматическиУдалятьСообщенияПриВыбореССервера, ЗаголовкиИдентификаторы);
			
			Если НаборСообщенийДляУдаления.Количество() > 0 Тогда
				Соединение.УдалитьСообщения(НаборСообщенийДляУдаления);
			КонецЕсли;
		КонецЕсли;
	
		Соединение.Отключиться();
	Исключение
		Попытка
			Соединение.Отключиться();
		Исключение
			// Обработка и журналирование исключения не требуется, т.к. 
			// в вызывающий код передается исходное исключение, которое будет там обработано.
		КонецПопытки;
		ВызватьИсключение;
	КонецПопытки;
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если РежимТестирования Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ПриводитьСообщенияКТипу") Тогда
		ПриводитьСообщенияКТипу = ПараметрыЗагрузки.ПриводитьСообщенияКТипу;
	Иначе
		ПриводитьСообщенияКТипу = Истина;
	КонецЕсли;
	
	НаборСообщений = НаборПисем;
	Если ПриводитьСообщенияКТипу Тогда
		Если ПараметрыЗагрузки.Свойство("Колонки") Тогда
			НаборСообщений = АдаптированныйНаборПисем(НаборПисем, ПараметрыЗагрузки.Колонки);
		Иначе
			НаборСообщений = АдаптированныйНаборПисем(НаборПисем);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаборСообщений;
	
КонецФункции

// Преобразует набор почтовых сообщений в таблицу значений с колонками простых типов.
// Значения колонок, типы которых не поддерживаются на клиенте, преобразуются к строковому виду.
//
Функция АдаптированныйНаборПисем(Знач НаборПисем, Знач Колонки = Неопределено)
	
	Результат = СоздатьАдаптированноеОписаниеПисьма(Колонки);
	
	Для Каждого ПочтовоеСообщение Из НаборПисем Цикл
		НоваяСтрока = Результат.Добавить();
		Для Каждого НаименованиеКолонки Из Колонки Цикл
			ПолеПисьма = ПочтовоеСообщение[НаименованиеКолонки];
			
			Если ТипЗнч(ПолеПисьма) = Тип("Строка") Тогда
				ПолеПисьма = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыеАдреса") Тогда
				ПолеПисьма = ПредставлениеАдресов(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыйАдрес") Тогда
				ПолеПисьма = ПредставлениеАдреса(ПолеПисьма);
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетПочтовыеВложения") Тогда
				Вложения = Новый Соответствие;
				Для Каждого Вложение Из ПолеПисьма Цикл
					Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
						Вложения.Вставить(Вложение.Имя, Вложение.Данные);
					Иначе
						ЗаполнитьВложенияПоПисьму(Вложения, Вложение.Данные);
					КонецЕсли;
				КонецЦикла;
				ПолеПисьма = Вложения;
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ИнтернетТекстыПочтовогоСообщения") Тогда
				Тексты = Новый Массив;
				Для Каждого ОчереднойТекст Из ПолеПисьма Цикл
					ОписаниеТекста = Новый Соответствие;
					ОписаниеТекста.Вставить("Данные", ОчереднойТекст.Данные);
					ОписаниеТекста.Вставить("Кодировка", ОчереднойТекст.Кодировка);
					ОписаниеТекста.Вставить("Текст", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ОчереднойТекст.Текст));
					ОписаниеТекста.Вставить("ТипТекста", Строка(ОчереднойТекст.ТипТекста));
					Тексты.Добавить(ОписаниеТекста);
				КонецЦикла;
				ПолеПисьма = Тексты;
			ИначеЕсли ТипЗнч(ПолеПисьма) = Тип("ВажностьИнтернетПочтовогоСообщения")
				Или ТипЗнч(ПолеПисьма) = Тип("СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения") Тогда
				ПолеПисьма = Строка(ПолеПисьма);
			КонецЕсли;
			
			НоваяСтрока[НаименованиеКолонки] = ПолеПисьма;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеАдреса(ИнтернетПочтовыйАдрес)
	Результат = ИнтернетПочтовыйАдрес.Адрес;
	Если Не ПустаяСтрока(ИнтернетПочтовыйАдрес.ОтображаемоеИмя) Тогда
		Результат = ИнтернетПочтовыйАдрес.ОтображаемоеИмя + " <" + Результат + ">";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПредставлениеАдресов(ИнтернетПочтовыеАдреса)
	Результат = "";
	Для Каждого ИнтернетПочтовыйАдрес Из ИнтернетПочтовыеАдреса Цикл
		Результат = ?(ПустаяСтрока(Результат), "", Результат + "; ") + ПредставлениеАдреса(ИнтернетПочтовыйАдрес);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьВложенияПоПисьму(Вложения, Письмо)
	
	Для Каждого Вложение Из Письмо.Вложения Цикл
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			Вложения.Вставить(Вложение.Имя, Вложение.Данные);
		Иначе
			ЗаполнитьВложенияПоПисьму(Вложения, Вложение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеПисьма = ПредставлениеПисьма(Письмо.Тема, Письмо.ДатаОтправления);
	
	Индекс = 0;
	Для Каждого Текст Из Письмо.Тексты Цикл
		Если Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			Расширение = "html";
		ИначеЕсли Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Расширение = "txt";
		Иначе
			Расширение = "rtf";
		КонецЕсли;
		ИмяТекстаВложения = "";
		Пока ИмяТекстаВложения = "" Или Вложения.Получить(ИмяТекстаВложения) <> Неопределено Цикл
			Индекс = Индекс + 1;
			ИмяТекстаВложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 - (%2).%3", ПредставлениеПисьма, Индекс, Расширение);
		КонецЦикла;
		Вложения.Вставить(ИмяТекстаВложения, Текст.Данные);
	КонецЦикла;
	
КонецПроцедуры

// Функция подготавливает таблицу, в которой впоследствии будут
// храниться сообщения с почтового сервера.
// 
// Параметры:
//   Колонки - строка - список полей письма, через запятую, которые должны
//                    быть записаны в таблицу. Параметр меняет тип на массив.
// Возвращаемое значение
//   ТаблицаЗначений - пустая таблица значений с колонками.
//
Функция СоздатьАдаптированноеОписаниеПисьма(Колонки = Неопределено)
	
	Если Колонки <> Неопределено
	   И ТипЗнч(Колонки) = Тип("Строка") Тогда
		Колонки = СтрРазделить(Колонки, ",");
		Для Индекс = 0 По Колонки.Количество()-1 Цикл
			Колонки[Индекс] = СокрЛП(Колонки[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	МассивКолонокПоУмолчанию = Новый Массив;
	МассивКолонокПоУмолчанию.Добавить("Важность");
	МассивКолонокПоУмолчанию.Добавить("Вложения");
	МассивКолонокПоУмолчанию.Добавить("ДатаОтправления");
	МассивКолонокПоУмолчанию.Добавить("ДатаПолучения");
	МассивКолонокПоУмолчанию.Добавить("Заголовок");
	МассивКолонокПоУмолчанию.Добавить("ИмяОтправителя");
	МассивКолонокПоУмолчанию.Добавить("Идентификатор");
	МассивКолонокПоУмолчанию.Добавить("Копии");
	МассивКолонокПоУмолчанию.Добавить("ОбратныйАдрес");
	МассивКолонокПоУмолчанию.Добавить("Отправитель");
	МассивКолонокПоУмолчанию.Добавить("Получатели");
	МассивКолонокПоУмолчанию.Добавить("Размер");
	МассивКолонокПоУмолчанию.Добавить("Тема");
	МассивКолонокПоУмолчанию.Добавить("Тексты");
	МассивКолонокПоУмолчанию.Добавить("Кодировка");
	МассивКолонокПоУмолчанию.Добавить("СпособКодированияНеASCIIСимволов");
	МассивКолонокПоУмолчанию.Добавить("Частичное");
	
	Если Колонки = Неопределено Тогда
		Колонки = МассивКолонокПоУмолчанию;
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого НаименованиеКолонки Из Колонки Цикл
		Результат.Колонки.Добавить(НаименованиеКолонки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Служебная функция используется для проверки учетной записи электронной почты.
//
Процедура ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение) Экспорт
	
	НастройкиУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИспользоватьДляОтправки,ИспользоватьДляПолучения,ПротоколВходящейПочты");
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	
	Если НастройкиУчетнойЗаписи.ИспользоватьДляОтправки Тогда
		ТекстОшибки = Справочники.УчетныеЗаписиЭлектроннойПочты.ПроверитьВозможностьПодключенияКПочтовомуСерверу(УчетнаяЗапись, Ложь);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключиться к серверу SMTP: %1'") + Символы.ПС, ТекстОшибки);
		КонецЕсли;
		Если Не НастройкиУчетнойЗаписи.ИспользоватьДляПолучения Тогда
			ДополнительноеСообщение = Символы.ПС + НСтр("ru = '(Выполнена проверка отправки электронных сообщений.)'");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиУчетнойЗаписи.ИспользоватьДляПолучения 
		Или НастройкиУчетнойЗаписи.ИспользоватьДляОтправки И НастройкиУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		
		ТекстОшибки = Справочники.УчетныеЗаписиЭлектроннойПочты.ПроверитьВозможностьПодключенияКПочтовомуСерверу(УчетнаяЗапись, Истина);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС;
			КонецЕсли;
			
			СообщениеОбОшибке = СообщениеОбОшибке + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключиться к серверу %1:
				|%2'"), НастройкиУчетнойЗаписи.ПротоколВходящейПочты, ТекстОшибки);
		КонецЕсли;
		
		Если Не НастройкиУчетнойЗаписи.ИспользоватьДляОтправки Тогда
			ДополнительноеСообщение = Символы.ПС + НСтр("ru = '(Выполнена проверка получения электронных сообщений.)'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Отключает все учетные записи. Используется при начальной настройке узла РИБ.
Процедура ОтключитьИспользованиеУчетныхЗаписей()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УчетнаяЗапись = Выборка.Ссылка.ПолучитьОбъект();
		УчетнаяЗапись.ИспользоватьДляОтправки = Ложь;
		УчетнаяЗапись.ИспользоватьДляПолучения = Ложь;
		УчетнаяЗапись.ОбменДанными.Загрузка = Истина;
		УчетнаяЗапись.Записать(); // АПК:1327 блокировка данных не требуется при выполнении начальной настройки узла РИБ.
	КонецЦикла;
	
КонецПроцедуры

// Процедура является обработчиком событий ПриПолученииДанныхОтГлавного и ПриПолученииДанныхОтПодчиненного, возникающих
// при обмене данными в распределенной информационной базе.
//
// Параметры:
//   см. описание соответствующих обработчиков событий в синтакс-помощнике.
//
Процедура ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель)
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		Если ЭлементДанных.ЭтоНовый() Тогда
			ЭлементДанных.ИспользоватьДляПолучения = Ложь;
			ЭлементДанных.ИспользоватьДляОтправки = Ложь;
		Иначе
			ЭлементДанных.ИспользоватьДляПолучения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.Ссылка, "ИспользоватьДляПолучения");
			ЭлементДанных.ИспользоватьДляОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДанных.Ссылка, "ИспользоватьДляОтправки");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьВложения(Вложения, НастройкиСохранения) Экспорт
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый Массив;
	
	// подготовка архива
	ЕстьДобавленныеФайлыВАрхив = Ложь;
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
	
	ИмяФайлаДляАрхива = Неопределено;
	Для Индекс = -Вложения.ВГраница() По 0 Цикл
		Вложение = Вложения[-Индекс];
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда 
			АдресВоВременномХранилище = Вложение.АдресВоВременномХранилище;
			Вложения.Удалить(-Индекс);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ВычислитьИспользованиеВывода(ТабличныйДокумент) = ИспользованиеВывода.Запретить Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТабличныйДокумент.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
			ТипФайла = ТипФайлаТабличногоДокумента[ВыбранныйФормат];
			НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Вложение.Представление);
			Если ИмяФайлаДляАрхива = Неопределено Тогда
				ИмяФайлаДляАрхива = ИмяФайла + ".zip";
			Иначе
				ИмяФайлаДляАрхива = НСтр("ru = 'Документы'") + ".zip";
			КонецЕсли;
			ИмяФайла = ИмяФайла + "." + НастройкиФормата.Расширение;
			
			Если НастройкиСохранения.ПереводитьИменаФайловВТранслит Тогда
				ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
			КонецЕсли;
			
			ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
			ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайла);
			
			Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
				ВставитьКартинкиВHTML(ПолноеИмяФайла);
			КонецЕсли;
			
			Если ЗаписьZipФайла <> Неопределено Тогда 
				ЕстьДобавленныеФайлыВАрхив = Истина;
				ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			Иначе
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Представление", ИмяФайла);
				ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
				Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
					ОписаниеФайла.Вставить("Кодировка", "windows-1251");
				КонецЕсли;
				Результат.Добавить(ОписаниеФайла);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Если архив подготовлен, записываем и помещаем его во временное хранилище.
	Если ЕстьДобавленныеФайлыВАрхив Тогда 
		ЗаписьZipФайла.Записать();
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		
		// Используем имеющийся адрес во временном хранилище, привязанный к форме.
		ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ИмяФайлаДляАрхива);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		Результат.Добавить(ОписаниеФайла);
	КонецЕсли;
	
	Для Каждого ОписаниеФайла Из Результат Цикл
		Вложения.Добавить(ОписаниеФайла);
	КонецЦикла;
		
	УдалитьФайлы(ИмяВременнойПапки);
	Если ЗначениеЗаполнено(ИмяАрхива) Тогда
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	
КонецПроцедуры

Функция ВычислитьИспользованиеВывода(ТабличныйДокумент)
	Если ТабличныйДокумент.Вывод = ИспользованиеВывода.Авто Тогда
		Возврат ?(ПравоДоступа("Вывод", Метаданные), ИспользованиеВывода.Разрешить, ИспользованиеВывода.Запретить);
	Иначе
		Возврат ТабличныйДокумент.Вывод;
	КонецЕсли;
КонецФункции

Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;

КонецФункции

Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// Ожидается, что в папке будут только картинки.
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

Функция НастройкиПодсистемы() Экспорт
	Настройки = Новый Структура;
	Настройки.Вставить("ДоступноПолучениеПисем", Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации());
	РаботаСПочтовымиСообщениямиПереопределяемый.ПриОпределенииНастроек(Настройки);
	Возврат Настройки;
КонецФункции

Функция ОпределитьТипСодержимогоПоИмениФайла(ИмяФайла)
	Расширение = "";
	Позиция = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		Расширение = НРег(Сред(ИмяФайла, Позиция + 1));
	КонецЕсли;
	Возврат ТипыСодержимого()[Расширение];
КонецФункции

Функция ТипыСодержимого()
	Результат = Новый Соответствие;
	
	Результат.Вставить("json", "application/json");
	Результат.Вставить("pdf", "application/pdf");
	Результат.Вставить("xhtml", "application/xhtml+xml");
	Результат.Вставить("zip", "application/zip");
	Результат.Вставить("gzip", "application/gzip");
	
	Результат.Вставить("aac", "audio/aac");
	Результат.Вставить("ogg", "audio/ogg");
	Результат.Вставить("wma", "audio/x-ms-wma");
	Результат.Вставить("wav", "audio/vnd.wave");
	
	Результат.Вставить("gif", "image/gif");
	Результат.Вставить("jpeg", "image/jpeg");
	Результат.Вставить("png", "image/png");
	Результат.Вставить("svg", "image/svg");
	Результат.Вставить("tiff", "image/tiff");
	Результат.Вставить("ico", "image/vnd.microsoft.icon");
	
	Результат.Вставить("html", "text/html");
	Результат.Вставить("txt", "text/plain");
	Результат.Вставить("xml", "text/xml");
	
	Результат.Вставить("mpeg", "video/mpeg");
	Результат.Вставить("mp4", "video/mp4");
	Результат.Вставить("mov", "video/quicktime");
	Результат.Вставить("wmv", "video/x-ms-wmv");
	Результат.Вставить("flv", "video/x-flv");
	Результат.Вставить("3gpp", "video/3gpp");
	Результат.Вставить("3gp", "video/3gpp");
	Результат.Вставить("3gpp2", "video/3gpp2");
	Результат.Вставить("3g2", "video/3gpp2");
	
	Результат.Вставить("odt", "application/vnd.oasis.opendocument.text");
	Результат.Вставить("ods", "application/vnd.oasis.opendocument.spreadsheet");
	Результат.Вставить("odp", "application/vnd.oasis.opendocument.presentation");
	Результат.Вставить("odg", "application/vnd.oasis.opendocument.graphics");
	
	Результат.Вставить("doc", "application/msword");
	Результат.Вставить("docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	Результат.Вставить("xls", "application/vnd.ms-excel");
	Результат.Вставить("xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	Результат.Вставить("ppt", "application/vnd.ms-powerpoint");
	Результат.Вставить("pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation");
	
	Результат.Вставить("rar", "application/x-rar-compressed");
	
	Результат.Вставить("p7m", "application/x-pkcs7-mime");
	Результат.Вставить("p7s", "application/x-pkcs7-signature");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьHTMLФорматированногоДокументаДляПисьма(ФорматированныйДокумент)
	
	// Выгрузка форматированного документа в HTML текст и картинки.
	ТекстHTML = "";
	Картинки = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
	
	// Конвертация HTML текста в ДокументHTML.
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	// Замена имен картинок в документе HTML на идентификаторы.
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		АтрибутИсточникКартинки.ТекстовоеСодержимое = "cid:" + АтрибутИсточникКартинки.ТекстовоеСодержимое;
	КонецЦикла;
	
	// Конвертация ДокументHTML обратно в текст HTML.
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	ТекстHTML = ЗаписьHTML.Закрыть();
	
	// Подготовка результата.
	Результат = Новый Структура;
	Результат.Вставить("ТекстHTML", ТекстHTML);
	Результат.Вставить("Картинки", Картинки);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеПисьма(ТемаПисьма, ДатаПисьма)
	
	ШаблонПредставления = НСтр("ru = '%1 от %2'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		?(ПустаяСтрока(ТемаПисьма), НСтр("ru = '<Без темы>'"), ТемаПисьма),
		Формат(ДатаПисьма, "ДЛФ=D"));
	
КонецФункции

// Преобразует к единому виду коллекцию переданных вложений.
// Требуется для обхода случаев, когда исходная форма не заботится о времени жизни временного хранилища, в 
// которое помещены вложения. Вложения перекладываются во временное хранилище "на время сеанса".
Функция ОписанияВложений(КоллекцияВложений) Экспорт
	Если ТипЗнч(КоллекцияВложений) <> Тип("СписокЗначений") И ТипЗнч(КоллекцияВложений) <> Тип("Массив") Тогда
		Возврат КоллекцияВложений;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого Вложение Из КоллекцияВложений Цикл
		ОписаниеВложения = ОписаниеВложения();
		Если ТипЗнч(КоллекцияВложений) = Тип("СписокЗначений") Тогда
			ОписаниеВложения.Представление = Вложение.Представление;
			ДвоичныеДанные = Неопределено;
			Если ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные = Вложение.Значение;;
			Иначе
				Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.Значение);
				Иначе
					ПутьКФайлу = Вложение.Значение;
					ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
				КонецЕсли;
			КонецЕсли;
		Иначе // ТипЗнч(Параметры.Вложения) = "массив структур"
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
			ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение, , "АдресВоВременномХранилище");
		КонецЕсли;
		ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		Результат.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОписаниеВложения()
	Результат = Новый Структура;
	Результат.Вставить("Представление");
	Результат.Вставить("АдресВоВременномХранилище");
	Результат.Вставить("Кодировка");
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
КонецФункции

Функция ПочтовыйСерверХранитПисьмаОтправленныеПоSMTP(ИнтернетПочтовыйПрофиль)
	
	Возврат НРег(ИнтернетПочтовыйПрофиль.АдресСервераSMTP) = "smtp.gmail.com"
		Или СтрЗаканчиваетсяНа(НРег(ИнтернетПочтовыйПрофиль.АдресСервераSMTP), ".outlook.com") > 0;
	
КонецФункции

Функция ЕстьВнешниеРесурсы(ДокументHTML) Экспорт
	
	Фильтры = Новый Массив;
	Фильтры.Добавить(ФильтрПоАтрибуту("src", "^(http|https)://"));
	
	Фильтр = ОбъединитьФильтры(Фильтры);
	НайденныеУзлы = ДокументHTML.НайтиПоФильтру(ЗначениеВJSON(Фильтр));
	
	Возврат НайденныеУзлы.Количество() > 0;
	
КонецФункции

Процедура ОтключитьНебезопасноеСодержимое(ДокументHTML, ОтключитьВнешниеРесурсы = Истина) Экспорт
	
	Фильтры = Новый Массив;
	Фильтры.Добавить(ФильтрПоИмениУзла("script"));
	Фильтры.Добавить(ФильтрПоИмениУзла("link"));
	Фильтры.Добавить(ФильтрПоИмениУзла("iframe"));
	Фильтры.Добавить(ФильтрПоИмениАтрибута("onerror"));
	Фильтры.Добавить(ФильтрПоИмениАтрибута("onmouseover"));
	Фильтры.Добавить(ФильтрПоИмениАтрибута("onmouseout"));
	Фильтры.Добавить(ФильтрПоИмениАтрибута("onclick"));
	Фильтры.Добавить(ФильтрПоИмениАтрибута("onload"));
	
	Фильтр = ОбъединитьФильтры(Фильтры);
	ДокументHTML.УдалитьПоФильтру(ЗначениеВJSON(Фильтр));
	
	Если ОтключитьВнешниеРесурсы Тогда
		Фильтр = ФильтрПоАтрибуту("src", "^(http|https)://");
		НайденныеУзлы = ДокументHTML.НайтиПоФильтру(ЗначениеВJSON(Фильтр));
		Для Каждого Узел Из НайденныеУзлы Цикл
			Узел.Значение = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ФильтрПоИмениУзла(ИмяУзла)
	
	Результат = Новый Структура;
	Результат.Вставить("type", "elementname");
	Результат.Вставить("value", Новый Структура("value, operation", ИмяУзла, "equals"));
	
	Возврат Результат;
	
КонецФункции

Функция ОбъединитьФильтры(Фильтры, ТипОбъединения = "Или")
	
	Если Фильтры.Количество() = 1 Тогда
		Возврат Фильтры[0];
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("type", ?(ТипОбъединения = "И", "intersection", "union"));
	Результат.Вставить("value", Фильтры);
	
	Возврат Результат;
	
КонецФункции

Функция ФильтрПоАтрибуту(ИмяАтрибута, ШаблонЗначения)
	
	Фильтры = Новый Массив;
	Фильтры.Добавить(ФильтрПоИмениАтрибута(ИмяАтрибута));
	Фильтры.Добавить(ФильтрПоЗначениюАтрибута(ШаблонЗначения));
	
	Результат = ОбъединитьФильтры(Фильтры, "И");
	
	Возврат Результат;
	
КонецФункции

Функция ФильтрПоИмениАтрибута(ИмяАтрибута)
	
	Результат = Новый Структура;
	Результат.Вставить("type", "attribute");
	Результат.Вставить("value", Новый Структура("value, operation", ИмяАтрибута, "nameequals"));
	
	Возврат Результат;
	
КонецФункции

Функция ФильтрПоЗначениюАтрибута(ШаблонЗначения)
	
	Результат = Новый Структура;
	Результат.Вставить("type", "attribute");
	Результат.Вставить("value", Новый Структура("value, operation", ШаблонЗначения, "valuematchesregex"));
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// См. РаботаСПочтовымиСообщениями.ОтправитьПисьмо.
Функция ОтправитьПисьмо(УчетнаяЗапись, Письмо) Экспорт
	
	Письма = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Письмо);
	Возврат ОтправитьПисьма(УчетнаяЗапись, Письма)[Письмо];
	
КонецФункции

// См. РаботаСПочтовымиСообщениями.ОтправитьПисьма.
Функция ОтправитьПисьма(УчетнаяЗапись, Письма, ТекстОшибки = Неопределено) Экспорт
	
	РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты,ОтправлятьСкрытыеКопииПисемНаЭтотАдрес,ИспользоватьДляПолучения");
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ПротоколПолученияПочты = ПротоколИнтернетПочты.POP3;
	Если ИспользоватьIMAPПриОтправкеПисем(Профиль) Тогда
		ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль, ПротоколПолученияПочты);
		Если ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP Тогда
			ОпределитьПапкуОтправленные(Соединение);
		КонецЕсли;
	Исключение
		Если ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP И Не РеквизитыОтправителя.ИспользоватьДляПолучения Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу IMAP. Проверьте настройки учетной записи.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаПочты(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты,
				УчетнаяЗапись, ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПротоколПолученияПочты = ПротоколИнтернетПочты.POP3;
			Соединение.Подключиться(Профиль, ПротоколПолученияПочты);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	РезультатыОтправкиПисем = Новый Соответствие;
	
	ОбрабатыватьТексты = ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать;
	
	Попытка
		Для Каждого Письмо Из Письма Цикл
			Письмо.ИмяОтправителя = РеквизитыОтправителя.ИмяПользователя;
			Письмо.Отправитель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
			Письмо.Отправитель.Адрес = РеквизитыОтправителя.АдресЭлектроннойПочты;
			
			Если РеквизитыОтправителя.ОтправлятьСкрытыеКопииПисемНаЭтотАдрес Тогда
				Получатель = Письмо.СлепыеКопии.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
				Получатель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
			КонецЕсли;
			
			РезультатОтправкиПисьма = Новый Структура;
			РезультатОтправкиПисьма.Вставить("ОшибочныеПолучатели", Новый Соответствие);
			РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаSMTP", "");
			РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаIMAP", "");
			
			Если ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP Тогда
				Соединение.Послать(Письмо, ОбрабатыватьТексты, ПротоколИнтернетПочты.IMAP);
				РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаIMAP", Письмо.ИдентификаторСообщения);
				
				ФлагиПисьма = Новый ФлагиИнтернетПочтовогоСообщения;
				ФлагиПисьма.Прочитанное = Истина;
				ФлагиПисем = Новый Соответствие;
				ФлагиПисем.Вставить(Письмо.ИдентификаторСообщения, ФлагиПисьма);
				Соединение.УстановитьФлагиСообщений(ФлагиПисем);
			КонецЕсли;
			
			ОшибочныеПолучатели = Соединение.Послать(Письмо, ОбрабатыватьТексты, ПротоколИнтернетПочты.SMTP);
			РезультатОтправкиПисьма.Вставить("ОшибочныеПолучатели", ОшибочныеПолучатели);
			РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаSMTP", Письмо.ИдентификаторСообщения);
			
			Если ОшибочныеПолучатели.Количество() > 0 Тогда
				ТекстыОшибок = Новый Массив;
				Для Каждого ОшибочныйПолучатель Из ОшибочныеПолучатели Цикл
					Получатель = ОшибочныйПолучатель.Ключ;
					ТекстОшибки = ОшибочныйПолучатель.Значение;
					ТекстыОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1: %2'"), Получатель, ТекстОшибки));
				КонецЦикла;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка письма следующим получателям не выполнена:
					|%1'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрСоединить(ТекстыОшибок, Символы.ПС));
				ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаПочты(), УровеньЖурналаРегистрации.Ошибка, , УчетнаяЗапись, ТекстОшибки);
			КонецЕсли;
			
			РезультатыОтправкиПисем.Вставить(Письмо, РезультатОтправкиПисьма);
		КонецЦикла;
	Исключение
		Попытка
			Соединение.Отключиться();
		Исключение
			// Обработка и журналирование исключения не требуется, т.к. 
			// в вызывающий код передается исходное исключение, которое будет там обработано.
		КонецПопытки;
		
		Если РезультатыОтправкиПисем.Количество() = 0 Тогда
			ВызватьИсключение;
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаПочты(), УровеньЖурналаРегистрации.Ошибка, ,
				УчетнаяЗапись, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатыОтправкиПисем;
		КонецЕсли;
	КонецПопытки;
	
	Соединение.Отключиться();
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат РезультатыОтправкиПисем;
	
КонецФункции

Функция ИмяСобытияОтправкаПочты()
	
	Возврат НСтр("ru = 'Работа с почтовыми сообщениями.Отправка почты'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма) Экспорт
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты");
	Письмо.ИмяОтправителя              = РеквизитыОтправителя.ИмяПользователя;
	Письмо.Отправитель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
	Письмо.Отправитель.Адрес           = РеквизитыОтправителя.АдресЭлектроннойПочты;
	
	Если ПараметрыПисьма.Свойство("Тема") Тогда
		Письмо.Тема = ПараметрыПисьма.Тема;
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
	КонецЕсли;
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии") Тогда
		Для Каждого ПочтовыйАдресПолучателяКопии Из ПараметрыПисьма.Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СкрытыеКопии") Тогда
		Для Каждого СведенияОПолучателе Из ПараметрыПисьма.СкрытыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(СведенияОПолучателе.Адрес);
			Получатель.ОтображаемоеИмя = СведенияОПолучателе.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтвета") Тогда
		Для Каждого ПочтовыйАдресОтвета Из ПараметрыПисьма.АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Вложения = Неопределено;
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	Если Вложения <> Неопределено Тогда
		Для Каждого Вложение Из Вложения Цикл
			Если ТипЗнч(Вложение) = Тип("Структура") Тогда
				ДанныеФайла = Неопределено;
				Если ЭтоАдресВременногоХранилища(Вложение.АдресВоВременномХранилище) Тогда
					ДанныеФайла = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
				Иначе
					ДанныеФайла = Вложение.АдресВоВременномХранилище;
				КонецЕсли;
				НовоеВложение = Письмо.Вложения.Добавить(ДанныеФайла, Вложение.Представление);
				Если Вложение.Свойство("Кодировка") И Не ПустаяСтрока(Вложение.Кодировка) Тогда
					НовоеВложение.Кодировка = Вложение.Кодировка;
				КонецЕсли;
				Если Вложение.Свойство("Идентификатор") Тогда
					НовоеВложение.Идентификатор = Вложение.Идентификатор;
				КонецЕсли;
			Иначе // Поддержка обратной совместимости с 2.2.1.
				Если ТипЗнч(Вложение.Значение) = Тип("Структура") Тогда
					НовоеВложение = Письмо.Вложения.Добавить(Вложение.Значение.ДвоичныеДанные, Вложение.Ключ);
					Если Вложение.Значение.Свойство("Идентификатор") Тогда
						НовоеВложение.Идентификатор = Вложение.Значение.Идентификатор;
					КонецЕсли;
					Если Вложение.Значение.Свойство("Кодировка") Тогда
						НовоеВложение.Кодировка = Вложение.Значение.Кодировка;
					КонецЕсли;
					Если Вложение.Значение.Свойство("ТипСодержимого") Тогда
						НовоеВложение.ТипСодержимого = Вложение.Значение.ТипСодержимого;
					КонецЕсли;
					Если Вложение.Значение.Свойство("Имя") Тогда
						НовоеВложение.Имя = Вложение.Значение.Имя;
					КонецЕсли;
				Иначе
					ИнтернетПочтовоеВложение = Письмо.Вложения.Добавить(Вложение.Значение, Вложение.Ключ);
					Если ТипЗнч(Вложение.Значение) = Тип("ИнтернетПочтовоеСообщение") Тогда
						ИнтернетПочтовоеВложение.ТипСодержимого = "message/rfc822";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Вложение Из Письмо.Вложения Цикл
		Если Не ЗначениеЗаполнено(Вложение.ТипСодержимого) Тогда
			ТипСодержимого = ОпределитьТипСодержимогоПоИмениФайла(Вложение.Имя);
			Если ЗначениеЗаполнено(ТипСодержимого) Тогда
				Вложение.ТипСодержимого = ТипСодержимого;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	Тело = "";
	ПараметрыПисьма.Свойство("Тело", Тело);
	
	ТипТекста = Неопределено;
	Если ТипЗнч(Тело) = Тип("ФорматированныйДокумент") Тогда
		СодержимоеПисьма = ПолучитьHTMLФорматированногоДокументаДляПисьма(Тело);
		Тело = СодержимоеПисьма.ТекстHTML;
		Картинки = СодержимоеПисьма.Картинки;
		ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
		Для Каждого Картинка Из Картинки Цикл
			ИмяКартинки = Картинка.Ключ;
			ДанныеКартинки = Картинка.Значение;
			Вложение = Письмо.Вложения.Добавить(ДанныеКартинки.ПолучитьДвоичныеДанные(), ИмяКартинки);
			Вложение.Идентификатор = ИмяКартинки;
		КонецЦикла;
	КонецЕсли;
	Текст = Письмо.Тексты.Добавить(Тело);
	Если ЗначениеЗаполнено(ТипТекста) Тогда
		Текст.ТипТекста = ТипТекста;
	КонецЕсли;
	
	Если ТипТекста = Неопределено Тогда
		Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
			Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
				Если      ТипТекста = "HTML" Тогда
					Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
				ИначеЕсли ТипТекста = "RichText" Тогда
					Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
				Иначе
					Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
				Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
					ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
					Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
				ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
					Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
				Иначе
					Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				КонецЕсли;
			Иначе
				Текст.ТипТекста = ТипТекста;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		КонецЕсли;
	КонецЕсли;
	
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОДоставке") Тогда
		Письмо.УведомитьОДоставке = ПараметрыПисьма.УведомитьОДоставке;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОПрочтении") Тогда
		Письмо.УведомитьОПрочтении = ПараметрыПисьма.УведомитьОПрочтении;
		Письмо.АдресаУведомленияОПрочтении.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("ОбрабатыватьТексты") Или ПараметрыПисьма.ОбрабатыватьТексты Тогда
		Письмо.ОбработатьТексты();
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

#КонецОбласти
