///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область БлокировкаСеансовИЗаданий

// Возвращает текущее состояние блокировки сеансов и регламентных заданий для информационной базы.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//
// Возвращаемое значение: 
//   Структура - структура, описывающая состояние блокировки сеансов и регламентных заданий,
//                  описание см. АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий().
//
Функция БлокировкаСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	Результат = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(
		ИнформационнаяБаза,
		СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий());
	
	Если Результат.ДатаС = АдминистрированиеКластера.ПустаяДата() Тогда
		Результат.ДатаС = Неопределено;
	КонецЕсли;
	
	Если Результат.ДатаПо = АдминистрированиеКластера.ПустаяДата() Тогда
		Результат.ДатаПо = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.КодРазрешения) Тогда
		Результат.КодРазрешения = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Сообщение) Тогда
		Результат.Сообщение = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ПараметрБлокировки) Тогда
		Результат.ПараметрБлокировки = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает новое состояние блокировки сеансов и регламентных заданий для информационной базы.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   СвойстваБлокировкиСеансовИЗаданий - Структура - структура, описывающая состояние блокировки сеансов и регламентных
//                  заданий, описание см. АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий().
//
Процедура УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач СвойстваБлокировкиСеансовИЗаданий) Экспорт
	
	УстанавливаемаяБлокировка = Новый Структура();
	Для Каждого КлючИЗначение Из СвойстваБлокировкиСеансовИЗаданий Цикл
		УстанавливаемаяБлокировка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УстанавливаемаяБлокировка.ДатаС) Тогда
		УстанавливаемаяБлокировка.ДатаС = АдминистрированиеКластера.ПустаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УстанавливаемаяБлокировка.ДатаПо) Тогда
		УстанавливаемаяБлокировка.ДатаПо = АдминистрированиеКластера.ПустаяДата();
	КонецЕсли;
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
		ИнформационнаяБаза,
		УстанавливаемаяБлокировка,
		СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий());
	
	СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
	
КонецПроцедуры

// Проверяет корректность параметров администрирования.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   ПроверятьПараметрыАдминистрированияКластера - Булево -  флаг необходимости проверки параметров администрирования 
//                  кластера.
//  ПроверятьПараметрыАдминистрированияИнформационнойБазы - Булево - флаг необходимости проверки параметров
//                  администрирования кластера.
//
Процедура ПроверитьПараметрыАдминистрирования(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ = Неопределено,
	ПроверятьПараметрыАдминистрированияИнформационнойБазы = Истина,
	ПроверятьПараметрыАдминистрированияКластера = Истина) Экспорт
	
	Если ПроверятьПараметрыАдминистрированияКластера ИЛИ ПроверятьПараметрыАдминистрированияИнформационнойБазы Тогда
		
		Попытка
			COMСоединитель = COMСоединитель();
			
			СоединениеСАгентомСервера = СоединениеСАгентомСервера(
				COMСоединитель,
				ПараметрыАдминистрированияКластера.АдресАгентаСервера,
				ПараметрыАдминистрированияКластера.ПортАгентаСервера);
			
			Кластер = ПолучитьКластер(
				СоединениеСАгентомСервера,
				ПараметрыАдминистрированияКластера.ПортКластера,
				ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
				ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
		Исключение
			Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда 
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1
					           |
					           |Если компонента ""comcntr"" не зарегистрирована или ее версия не совпадает с требуемой,
					           |следует зарегистрировать ее на компьютере %2 выполнив команду cmd с повышением привилегий UAC
					           |для учетной записи ОС Windows, от имени которой выполняется 1С:Предприятие.
					           |
					           |Например:
					           |regsvr32.exe ""%3""'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					ИмяКомпьютера(),
					КаталогПрограммы() + "comcntr.dll");
			Иначе 
				ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ВызватьИсключение ТекстИсключения
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ПроверятьПараметрыАдминистрированияИнформационнойБазы Тогда
		
		СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
		
		ПолучитьИБ(СоединениеСРабочимПроцессом,
			Кластер,
			ПараметрыАдминистрированияИБ.ИмяВКластере,
			ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
			ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БлокировкаРегламентныхЗаданий

// Возвращает текущее состояние блокировки регламентных заданий для информационной базы.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//
// Возвращаемое значение: 
//   Булево - состояние блокировки.
//
Функция БлокировкаРегламентныхЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	Возврат ИнформационнаяБаза.ScheduledJobsDenied;
	
КонецФункции

// Устанавливает новое состояние блокировки регламентных заданий для информационной базы.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   БлокировкаРегламентныхЗаданий - Булево - флаг установки блокировки регламентных заданий информационной базы.
//
Процедура УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач БлокировкаРегламентныхЗаданий) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	ИнформационнаяБаза.ScheduledJobsDenied = БлокировкаРегламентныхЗаданий;
	СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
	
КонецПроцедуры

#КонецОбласти

#Область СеансыИнформационнойБазы

// Возвращает описания сеансов информационной базы.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//      Варианты:
//         1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//            Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//               Возвращаемое значение функции АдминистрированиеКластера.СвойстваСеанса(),
//            ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//               в условии фильтра. Допустимые значения:
//                  ВидСравнения.Равно,
//                  ВидСравнения.НеРавно,
//                  ВидСравнения.Больше (только для числовых значений),
//                  ВидСравнения.БольшеИлиРавно (только для числовых значений),
//                  ВидСравнения.Меньше (только для числовых значений),
//                  ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//                  ВидСравнения.ВСписке,
//                  ВидСравнения.НеВСписке,
//                  ВидСравнения.Интервал (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//            Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//               сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//               в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//               будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//               ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//               передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//               соответствующее сравнение,
//         2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//            выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//            равенство.
//
// Возвращаемое значение: 
//   Массив - массив структур, описывающих свойства сеансов. Описание
//                  см. АдминистрированиеКластера.СвойстваСеанса().
//
Функция СеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	ОписаниеИнформационнойБазы = ПолучитьОписаниеИБ(
		СоединениеСАгентомСервера,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере);
	
	Возврат ПолучитьСеансы(СоединениеСАгентомСервера, Кластер, ОписаниеИнформационнойБазы, Фильтр, Истина);
	
КонецФункции

// Удаляет сеансы с информационной базой по фильтру.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//      Варианты:
//         1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//            Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//               Возвращаемое значение функции АдминистрированиеКластера.СвойстваСеанса(),
//            ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//               в условии фильтра. Допустимые значения:
//                  ВидСравнения.Равно,
//                  ВидСравнения.НеРавно,
//                  ВидСравнения.Больше (только для числовых значений),
//                  ВидСравнения.БольшеИлиРавно (только для числовых значений),
//                  ВидСравнения.Меньше (только для числовых значений),
//                  ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//                  ВидСравнения.ВСписке,
//                  ВидСравнения.НеВСписке,
//                  ВидСравнения.Интервал (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//            Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//               сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//               в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//               будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//               ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//               передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//               соответствующее сравнение,
//         2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//            выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//            равенство.
//
Процедура УдалитьСеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	ОписаниеИнформационнойБазы = ПолучитьОписаниеИБ(
		СоединениеСАгентомСервера,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере);
	
	КоличествоПопыток = 3;
	ВсеСеансыУдалены = Ложь;
	
	Для ТекущаяПопытка = 0 По КоличествоПопыток Цикл
		
		Сеансы = ПолучитьСеансы(СоединениеСАгентомСервера, Кластер, ОписаниеИнформационнойБазы, Фильтр, Ложь);
		
		Если Сеансы.Количество() = 0 Тогда
			
			ВсеСеансыУдалены = Истина;
			Прервать;
			
		ИначеЕсли ТекущаяПопытка = КоличествоПопыток Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Для каждого Сеанс Из Сеансы Цикл
			
			Попытка
				
				СоединениеСАгентомСервера.TerminateSession(Кластер, Сеанс);
				
			Исключение
				
				// Сеанс мог завершиться к моменту вызова TerminateSession.
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ВсеСеансыУдалены Тогда
	
		ВызватьИсключение НСтр("ru = 'Не удалось удалить сеансы.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоединенияСИнформационнойБазой

// Возвращает описания соединений с информационной базой.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//      Варианты:
//         1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//            Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//               Возвращаемое значение функции АдминистрированиеКластера.СвойстваСеанса(),
//            ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//               в условии фильтра. Допустимые значения:
//                  ВидСравнения.Равно,
//                  ВидСравнения.НеРавно,
//                  ВидСравнения.Больше (только для числовых значений),
//                  ВидСравнения.БольшеИлиРавно (только для числовых значений),
//                  ВидСравнения.Меньше (только для числовых значений),
//                  ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//                  ВидСравнения.ВСписке,
//                  ВидСравнения.НеВСписке,
//                  ВидСравнения.Интервал (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//            Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//               сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//               в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//               будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//               ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//               передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//               соответствующее сравнение,
//         2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//            выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//            равенство.
//
// Возвращаемое значение: 
//   Массив - массив структур, описывающих свойства соединений. Описание
//                  см. АдминистрированиеКластера.СвойстваСоединения().
//
Функция СоединенияСИнформационнойБазой(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	Возврат ПолучитьСоединения(
		COMСоединитель,
		СоединениеСАгентомСервера,
		Кластер,
		ПараметрыАдминистрированияИБ,
		Фильтр,
		Истина);
	
КонецФункции

// Разрывает соединения с информационной базой по фильтру.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//      Варианты:
//         1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//            Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//               Возвращаемое значение функции АдминистрированиеКластера.СвойстваСеанса(),
//            ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//               в условии фильтра. Допустимые значения:
//                  ВидСравнения.Равно,
//                  ВидСравнения.НеРавно,
//                  ВидСравнения.Больше (только для числовых значений),
//                  ВидСравнения.БольшеИлиРавно (только для числовых значений),
//                  ВидСравнения.Меньше (только для числовых значений),
//                  ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//                  ВидСравнения.ВСписке,
//                  ВидСравнения.НеВСписке,
//                  ВидСравнения.Интервал (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//            Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//               сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//               в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//               будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//               ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//               передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//               соответствующее сравнение,
//         2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//            выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//            равенство.
//
Процедура РазорватьСоединенияСИнформационнойБазой(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
		
	Значение = Новый Массив;
	Значение.Добавить("1CV8");               // идентификатор приложения 1С:Предприятие в режиме запуска "Толстый клиент".
	Значение.Добавить("1CV8C");              // идентификатор приложения 1С:Предприятие в режиме запуска "Тонкий клиент".
	Значение.Добавить("WebClient");          // идентификатор приложения 1С:Предприятие в режиме запуска "Веб-клиент".
	Значение.Добавить("Designer");           // идентификатор приложения Конфигуратор.
	Значение.Добавить("COMConnection");      // идентификатор сессии внешнего соединения 1С:Предприятия через COM.
	Значение.Добавить("WSConnection");       // идентификатор сессии Web-сервиса.
	Значение.Добавить("BackgroundJob");      // идентификатор сессии обработки заданий.
	Значение.Добавить("WebServerExtension"); // идентификатор расширения Web-сервера.

	АдминистрированиеКластера.ДобавитьУсловиеФильтра(Фильтр, "ИдентификаторКлиентскогоПриложения", ВидСравнения.ВСписке, Значение);
		
	КоличествоПопыток = 3;
	ВсеСоединенияРазорваны = Ложь;
	
	Для ТекущаяПопытка = 0 По КоличествоПопыток Цикл
		
		Соединения = ПолучитьСоединения(
			COMСоединитель,
			СоединениеСАгентомСервера,
			Кластер,
			ПараметрыАдминистрированияИБ,
			Фильтр,
			Ложь);
	
		Если Соединения.Количество() = 0 Тогда
			
			ВсеСоединенияРазорваны = Истина;
			Прервать;
			
		ИначеЕсли ТекущаяПопытка = КоличествоПопыток Тогда
			
			Прервать;
			
		КонецЕсли;
	
		Для каждого Соединение Из Соединения Цикл
			
			Попытка
				
				Соединение.СоединениеСРабочимПроцессом.Disconnect(Соединение.Соединение);
				
			Исключение
				
				// Соединение могло уже завершиться к моменту вызова Disconnect.
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ ВсеСоединенияРазорваны Тогда
	
		ВызватьИсключение НСтр("ru = 'Не удалось разорвать соединения.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

// Возвращает имя профиля безопасности, назначенного для информационной базы.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//
// Возвращаемое значение: 
//   Строка - имя профиля безопасности, назначенного для информационной базы. Если для информационной базы не назначен
//                  профиль безопасности - возвращается пустая строка.
//
Функция ПрофильБезопасностиИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	Если ЗначениеЗаполнено(ИнформационнаяБаза.SecurityProfileName) Тогда
		Результат = ИнформационнаяБаза.SecurityProfileName;
	Иначе
		Результат = "";
	КонецЕсли;
	
	ИнформационнаяБаза = Неопределено;
	СоединениеСРабочимПроцессом = Неопределено;
	Кластер = Неопределено;
	СоединениеСАгентомСервера = Неопределено;
	COMСоединитель = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя профиля безопасности, назначенного для информационной базы в качестве профиля безопасности
//  безопасного режима.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//
// Возвращаемое значение: 
//   Строка - имя профиля безопасности, назначенного для информационной базы в качестве профиля безопасности безопасного
//                  режима. Если для информационной базы не назначен профиль безопасности, возвращается пустая строка.
//
Функция ПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	Если ЗначениеЗаполнено(ИнформационнаяБаза.SafeModeSecurityProfileName) Тогда
		Результат = ИнформационнаяБаза.SafeModeSecurityProfileName;
	Иначе
		Результат = "";
	КонецЕсли;
	
	ИнформационнаяБаза = Неопределено;
	СоединениеСРабочимПроцессом = Неопределено;
	Кластер = Неопределено;
	СоединениеСАгентомСервера = Неопределено;
	COMСоединитель = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Назначает для информационной базы использование профиля безопасности.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   ИмяПрофиля - Строка - имя профиля безопасности. Если передана пустая строка - для информационной базы будет 
//                  отключено использование профиля безопасности.
//
Процедура УстановитьПрофильБезопасностиИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач ИмяПрофиля = "") Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	ИнформационнаяБаза.SecurityProfileName = ИмяПрофиля;
	
	СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
	
	ИнформационнаяБаза = Неопределено;
	СоединениеСРабочимПроцессом = Неопределено;
	Кластер = Неопределено;
	СоединениеСАгентомСервера = Неопределено;
	COMСоединитель = Неопределено
	
КонецПроцедуры

// Назначает для информационной базы использование профиля безопасности безопасного режима.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ПараметрыАдминистрированияИБ - Структура - структура, описывающая параметры подключения к информационной базе,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияИнформационнойБазыКластера().
//   ИмяПрофиля - Строка - имя профиля безопасности. Если передана пустая строка - для информационной базы будет 
//                  отключено использование профиля безопасности безопасного режима.
//
Процедура УстановитьПрофильБезопасностиБезопасногоРежимаИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач ИмяПрофиля = "") Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Кластер,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	ИнформационнаяБаза.SafeModeSecurityProfileName = ИмяПрофиля;
	
	СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
	
	ИнформационнаяБаза = Неопределено;
	СоединениеСРабочимПроцессом = Неопределено;
	Кластер = Неопределено;
	СоединениеСАгентомСервера = Неопределено;
	COMСоединитель = Неопределено
	
КонецПроцедуры

// Проверяет существование в кластере серверов профиля безопасности.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ИмяПрофиля - Строка - имя профиля безопасности, существование которого проверяется.
//
// Возвращаемое значение: 
//   Булево
//
Функция ПрофильБезопасностиСуществует(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	Для Каждого ПрофильБезопасности Из СоединениеСАгентомСервера.GetSecurityProfiles(Кластер) Цикл
		
		Если ПрофильБезопасности.Name = ИмяПрофиля Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает свойства профиля безопасности.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//  ИмяПрофиля - Строка, имя профиля безопасности.
//
// Возвращаемое значение: 
//   Структура - структура, описывающая профиль безопасности, описание см.
//                  АдминистрированиеКластера.СвойстваПрофиляБезопасности().
//
Функция ПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	ПрофильБезопасности = ПолучитьПрофильБезопасности(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	
	Результат = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(
		ПрофильБезопасности,
		СловарьСвойствПрофиляБезопасности());
	
	// Виртуальный каталоги
	Результат.Вставить("ВиртуальныеКаталоги",
		ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(
			ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля),
			СловарьСвойствВиртуальногоКаталога()));
	
	// Разрешенные COM-классы
	Результат.Вставить("COMКлассы",
		ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(
			ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля),
			СловарьСвойствCOMКласса()));
	
	// Внешние компоненты
	Результат.Вставить("ВнешниеКомпоненты",
		ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(
			ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля),
			СловарьСвойствВнешнейКомпоненты()));
	
	// Внешние модули
	Результат.Вставить("ВнешниеМодули",
		ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(
			ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля),
			СловарьСвойствВнешнегоМодуля()));
	
	// Приложения ОС
	Результат.Вставить("ПриложенияОС",
		ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(
			ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля),
			СловарьСвойствПриложенияОС()));
	
	// Интернет-ресурсы
	Результат.Вставить("ИнтернетРесурсы",
		ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(
			ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля),
			СловарьСвойствИнтернетРесурса()));
	
	Возврат Результат;
	
КонецФункции

// Создает профиль безопасности по переданному описанию.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   СвойстваПрофиляБезопасности - Структура - структура, описывающая свойства создаваемого профиля безопасности,
//                  описание см. АдминистрированиеКластера.СвойстваПрофиляБезопасности().
//
Процедура СоздатьПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач СвойстваПрофиляБезопасности) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	ПрофильБезопасности = СоединениеСАгентомСервера.CreateSecurityProfile();
	ПрименитьИзмененияСвойствПрофиляБезопасности(СоединениеСАгентомСервера, Кластер, ПрофильБезопасности, СвойстваПрофиляБезопасности);
	
КонецПроцедуры

// Устанавливает свойства для существующего профиля безопасности по переданному описанию.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   СвойстваПрофиляБезопасности - Структура - структура, описывающая устанавливаемые для профиля безопасности свойства,
//                  описание см. АдминистрированиеКластера.СвойстваПрофиляБезопасности().
//
Процедура УстановитьСвойстваПрофиляБезопасности(Знач ПараметрыАдминистрированияКластера, Знач СвойстваПрофиляБезопасности)  Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	ПрофильБезопасности = ПолучитьПрофильБезопасности(
		СоединениеСАгентомСервера,
		Кластер,
		СвойстваПрофиляБезопасности.Имя);
	
	ПрименитьИзмененияСвойствПрофиляБезопасности(СоединениеСАгентомСервера, Кластер, ПрофильБезопасности, СвойстваПрофиляБезопасности);
	
КонецПроцедуры

// Удаляет профиль безопасности.
//
// Параметры:
//   ПараметрыАдминистрированияКластера - Структура - структура, описывающая параметры подключения к кластеру серверов,
//                  описание см. АдминистрированиеКластера.ПараметрыАдминистрированияКластера().
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
Процедура УдалитьПрофильБезопасности(Знач ПараметрыАдминистрированияКластера, Знач ИмяПрофиля) Экспорт
	
	COMСоединитель = COMСоединитель();
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Кластер = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
	ПолучитьПрофильБезопасности(
		СоединениеСАгентомСервера,
		Кластер,
		ИмяПрофиля);
	
	СоединениеСАгентомСервера.UnregSecurityProfile(Кластер, ИмяПрофиля);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает COM-объект V8*.ComConnector.
//
// Возвращаемое значение: 
//   COMОбъект.
//
Функция COMСоединитель()
	
	Если БезопасныйРежим() <> Ложь Тогда
		ВызватьИсключение НСтр("ru = 'Администрирование кластера невозможно в безопасном режиме'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'В модели сервиса недопустимо выполнение прикладной информационной базой функций администрирования кластера'");
	КонецЕсли;
	
	Возврат Новый COMОбъект(ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	
КонецФункции

// Устанавливает соединение с агентом сервера.
//
// Параметры:
//   COMСоединитель - COMОбъект -  com-объект V8*.ComConnector.
//   АдресАгентаСервера - Строка - сетевой адрес агента сервера.
//   ПортАгентаСервера - Число - сетевой порт агента сервера (типичное значение 1540).
//
// Возвращаемое значение: 
//   COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//
Функция СоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера)
	
	АдресИПорт = АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	Попытка
		
		СтрокаСоединенияСАгентомСервера = "tcp://" + АдресИПорт;
		СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
		Возврат СоединениеСАгентомСервера;
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Возвращает кластер серверов.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   ПортКластера - Число - сетевой порт менеджера кластера (типичное значение 1541).
//   ИмяАдминистратораКластера - Строка - имя учетной записи администратора кластера.
//   ПарольАдминистратораКластера - Строка - пароль учетной записи администратора кластера.
//
// Возвращаемое значение: 
//   COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//
Функция ПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера, Знач ПарольАдминистратораКластера)
	
	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
		Если Кластер.MainPort = ПортКластера Тогда
			Попытка
				СоединениеСАгентомСервера.Authenticate(Кластер, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
				Возврат Кластер;
			Исключение
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На рабочем сервере %1 не найден кластер %2'"),
		СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);
	
КонецФункции

// Устанавливает соединение с рабочим процессом.
//
// Параметры:
//   COMСоединитель - COMОбъект, com-объект V8*.ComConnector.
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//
// Возвращаемое значение: 
//   COMОбъект - com-объект, реализующий интерфейс IV8ServerConnection.
//
Функция СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер)
	
	Для Каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		Если РабочийПроцесс.Running И РабочийПроцесс.IsEnable  Тогда
			СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
			Возврат COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не найдено активных рабочих процессов.'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"));
	
КонецФункции

// Возвращает описание информационной базы.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяВКластере - Строка - имя информационной базы в кластере серверов.
//
// Возвращаемое значение: 
//   COMОбъект - com-объект, реализующий интерфейс IInfoBaseShort.
//
Функция ПолучитьОписаниеИБ(СоединениеСАгентомСервера, Кластер, Знач ИмяВКластере)
	
	Для Каждого ОписаниеИнформационнойБазы Из СоединениеСАгентомСервера.GetInfoBases(Кластер) Цикл
		
		Если ОписаниеИнформационнойБазы.Name = ИмяВКластере Тогда
			
			Возврат ОписаниеИнформационнойБазы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не найдена информационная база ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяВКластере);
	
КонецФункции

// Возвращает информационную базу.
//
// Параметры:
//   СоединениеСРабочимПроцессом - COMОбъект - com-объект, реализующий интерфейс IV8ServerConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяВКластере - Строка - имя информационной базы в кластере серверов.
//   ИмяАдминистратораИБ - Строка - имя администратора информационной базы.
//   ПарольАдминистратораИБ - Строка - пароль администратора информационной базы.
//
// Возвращаемое значение:
//   COMОбъект - com-объект, реализующий интерфейс IInfoBaseInfo.
//
Функция ПолучитьИБ(СоединениеСРабочимПроцессом, Кластер, Знач ИмяВКластере, Знач ИмяАдминистратораИБ, Знач ПарольАдминистратораИБ)
	
	СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	
	Для Каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
		
		Если ИнформационнаяБаза.Name = ИмяВКластере Тогда
			
			Если Не ЗначениеЗаполнено(ИнформационнаяБаза.DBMS) Тогда
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильные имя и пароль администратора информационной базы %1 в кластере серверов %2:%3 (имя: ""%4"").'"),
					ИмяВКластере,
					Кластер.HostName, 
					Кластер.MainPort,
					ИмяАдминистратораИБ);
				
			КонецЕсли;
			
			Возврат ИнформационнаяБаза;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не найдена информационная база ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяВКластере);
	
КонецФункции

// Возвращает сеансы информационной базы.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИнформационнаяБаза - COMОбъект - com-объект, реализующий интерфейс IInfoBaseInfo.
//   Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//      Варианты:
//         1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//            Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//               Возвращаемое значение функции АдминистрированиеКластера.СвойстваСеанса(),
//            ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//               в условии фильтра. Допустимые значения:
//                  ВидСравнения.Равно,
//                  ВидСравнения.НеРавно,
//                  ВидСравнения.Больше (только для числовых значений),
//                  ВидСравнения.БольшеИлиРавно (только для числовых значений),
//                  ВидСравнения.Меньше (только для числовых значений),
//                  ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//                  ВидСравнения.ВСписке,
//                  ВидСравнения.НеВСписке,
//                  ВидСравнения.Интервал (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//            Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//               сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//               в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//               будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//               ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//               передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//               соответствующее сравнение,
//         2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//            выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//            равенство.
//  Описания - Булево - если значение равно Ложь, функция вернет массив com-объектов, реализующих интерфейс ISessionInfo,
//                  иначе - массив структур, описывающих свойства сеансов,
//                  описание см. АдминистрированиеКластера.СвойстваСеанса().
//
// Возвращаемое значение: Массив(COMОбъект), Массив(Структура).
//
Функция ПолучитьСеансы(СоединениеСАгентомСервера, Кластер, ИнформационнаяБаза, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	Сеансы = Новый Массив;
	
	Словарь = СловарьСвойствСеансов();
	БлокировкиСеансов = Новый Соответствие();
	
	Для Каждого Блокировка Из СоединениеСАгентомСервера.GetInfoBaseLocks(Кластер, ИнформационнаяБаза) Цикл
		
		Если Блокировка.Session <> Неопределено Тогда
			
			АдминистрированиеКластера.ДанныеСеансаИзБлокировки(
				БлокировкиСеансов,
				Блокировка.LockDescr,
				Блокировка.Session.SessionID,
				ИнформационнаяБаза.Name);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Сеанс Из СоединениеСАгентомСервера.GetInfoBaseSessions(Кластер, ИнформационнаяБаза) Цикл
		
		ОписаниеСеанса = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Сеанс, Словарь);
		ОписаниеСеанса.Вставить("РежимБлокировкиБД",
			?(БлокировкиСеансов[ОписаниеСеанса.Номер] <> Неопределено, БлокировкиСеансов[ОписаниеСеанса.Номер].РежимБлокировкиБД, ""));
		ОписаниеСеанса.Вставить("Разделитель",
			?(БлокировкиСеансов[ОписаниеСеанса.Номер] <> Неопределено, БлокировкиСеансов[ОписаниеСеанса.Номер].Разделитель, ""));
		
		Если АдминистрированиеКластера.ПроверитьУсловияФильтра(ОписаниеСеанса, Фильтр) Тогда
			
			Если Описания Тогда
				Сеансы.Добавить(ОписаниеСеанса);
			Иначе
				Сеансы.Добавить(Сеанс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сеансы;
	
КонецФункции

// Возвращает соединения с информационной базой.
//
// Параметры:
//   COMСоединитель - COMОбъект - com-объект V8*.ComConnector.
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяВКластере - Строка - имя информационной базы в кластере серверов.
//   ИмяАдминистратораИБ - Строка - имя администратора информационной базы.
//   ПарольАдминистратораИБ - Строка - пароль администратора информационной базы.
//   Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//      Варианты:
//         1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//            Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//               Возвращаемое значение функции АдминистрированиеКластера.СвойстваСеанса(),
//            ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//               в условии фильтра. Допустимые значения:
//                  ВидСравнения.Равно,
//                  ВидСравнения.НеРавно,
//                  ВидСравнения.Больше (только для числовых значений),
//                  ВидСравнения.БольшеИлиРавно (только для числовых значений),
//                  ВидСравнения.Меньше (только для числовых значений),
//                  ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//                  ВидСравнения.ВСписке,
//                  ВидСравнения.НеВСписке,
//                  ВидСравнения.Интервал (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//                  ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//            Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//               сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//               в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//               будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//               ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//               передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//               соответствующее сравнение,
//         2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//            выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//            равенство.
//  Описания - Булево - если значение равно Ложь, функция вернет массив com-объектов, реализующих интерфейс
//                  IConnectionShort, иначе - массив структур, описывающих свойства соединений,
//                  описание см. АдминистрированиеКластера.СвойстваСоединения().
//
// Возвращаемое значение: 
//   Массив - массив com-объектов или массив структур.
//
Функция ПолучитьСоединения(COMСоединитель, СоединениеСАгентомСервера, Кластер, ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	ИмяВКластере = ПараметрыАдминистрированияИБ.ИмяВКластере;
	ИмяАдминистратораИБ = ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы;
	ПарольАдминистратораИБ = ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы;
	
	Соединения = Новый Массив();
	Словарь = СловарьСвойствСоединений();
	
	// Рабочие процессы, зарегистрированные в кластере.
	Для каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		
		Если РабочийПроцесс.Running = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Административное соединение с рабочим процессом.
		СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
		СоединениеСРабочимПроцессом = COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
		
		// Получение информационных баз (аутентификация не требуется).
		Для каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
			
			// Это требуемая информационная база.
			Если ИнформационнаяБаза.Name = ИмяВКластере Тогда
				
				// Для получение соединений с информационной базой требуется аутентификация.
				СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
				
				// Получение соединений с информационной базой.
				Для каждого Соединение Из СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза) Цикл
					
					ОписаниеСоединения = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Соединение, Словарь);
					
					// Проверка соединения на соответствие требуемым фильтрам.
					Если АдминистрированиеКластера.ПроверитьУсловияФильтра(ОписаниеСоединения, Фильтр) Тогда
						
						Если Описания Тогда
							
							Соединения.Добавить(ОписаниеСоединения);
							
						Иначе
							
							Соединения.Добавить(Новый Структура("СоединениеСРабочимПроцессом, Соединение", СоединениеСРабочимПроцессом, Соединение));
							
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат Соединения;
	
КонецФункции

// Возвращает профиль безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение:
//   COMОбъект - com-объект, реализующий интерфейс ISecurityProfile.
//
Функция ПолучитьПрофильБезопасности(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	Для Каждого ПрофильБезопасности Из СоединениеСАгентомСервера.GetSecurityProfiles(Кластер) Цикл
		
		Если ПрофильБезопасности.Name = ИмяПрофиля Тогда
			Возврат ПрофильБезопасности;
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не найден профиль безопасности ""%3""'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяПрофиля);
	
КонецФункции

// Возвращает виртуальные каталоги, разрешенные в профиле безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение: 
//   Массив - массив com-объектов, реализующих интерфейс ISecurityProfileVirtualDirectory.
//
Функция ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВиртуальныеКаталоги = Новый Массив();
	
	Для Каждого ВиртуальныйКаталог Из СоединениеСАгентомСервера.GetSecurityProfileVirtualDirectories(Кластер, ИмяПрофиля) Цикл
		
		ВиртуальныеКаталоги.Добавить(ВиртуальныйКаталог);
		
	КонецЦикла;
	
	Возврат ВиртуальныеКаталоги;
	
КонецФункции

// Возвращает COM-классы, разрешенные в профиле безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение: 
//   Массив- массив com-объектов, реализующих интерфейс ISecurityProfileCOMClass.
//
Функция ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	COMКлассы = Новый Массив();
	
	Для Каждого COMКласс Из СоединениеСАгентомСервера.GetSecurityProfileCOMClasses(Кластер, ИмяПрофиля) Цикл
		
		COMКлассы.Добавить(COMКласс);
		
	КонецЦикла;
	
	Возврат COMКлассы;
	
КонецФункции

// Возвращает внешние компоненты, разрешенные в профиле безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение: 
//   Массив - массив com-объектов, реализующих интерфейс ISecurityProfileAddIn.
//
Функция ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВнешниеКомпоненты = Новый Массив();
	
	Для Каждого ВнешняяКомпонента Из СоединениеСАгентомСервера.GetSecurityProfileAddIns(Кластер, ИмяПрофиля) Цикл
		
		ВнешниеКомпоненты.Добавить(ВнешняяКомпонента);
		
	КонецЦикла;
	
	Возврат ВнешниеКомпоненты;
	
КонецФункции

// Возвращает внешние модули, разрешенные в профиле безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение: 
//   Массив - массив com-объектов, реализующих интерфейс ISecurityProfileExternalModule.
//
Функция ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ВнешниеМодули = Новый Массив();
	
	Для Каждого ВнешнийМодуль Из СоединениеСАгентомСервера.GetSecurityProfileUnSafeExternalModules(Кластер, ИмяПрофиля) Цикл
		
		ВнешниеМодули.Добавить(ВнешнийМодуль);
		
	КонецЦикла;
	
	Возврат ВнешниеМодули;
	
КонецФункции

// Возвращает приложения ОС, разрешенные в профиле безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение: 
//   Массив - массив com-объектов, реализующих интерфейс ISecurityProfileApplication.
//
Функция ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ПриложенияОС = Новый Массив();
	
	Для Каждого ПриложениеОС Из СоединениеСАгентомСервера.GetSecurityProfileApplications(Кластер, ИмяПрофиля) Цикл
		
		ПриложенияОС.Добавить(ПриложениеОС);
		
	КонецЦикла;
	
	Возврат ПриложенияОС;
	
КонецФункции

// Возвращает приложения ОС, разрешенные в профиле безопасности.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ИмяПрофиля - Строка - имя профиля безопасности.
//
// Возвращаемое значение: 
//   Массив - массив com-объектов, реализующих интерфейс ISecurityProfileInternetResource.
//
Функция ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля)
	
	ИнтернетРесурсы = Новый Массив();
	
	Для Каждого ИнтернетРесурс Из СоединениеСАгентомСервера.GetSecurityProfileInternetResources(Кластер, ИмяПрофиля) Цикл
		
		ИнтернетРесурсы.Добавить(ИнтернетРесурс);
		
	КонецЦикла;
	
	Возврат ИнтернетРесурсы;
	
КонецФункции

// Перезаписывает свойства профиля безопасности переданными.
//
// Параметры:
//   СоединениеСАгентомСервера - COMОбъект - com-объект, реализующий интерфейс IV8AgentConnection.
//   Кластер - COMОбъект - com-объект, реализующий интерфейс IClusterInfo.
//   ПрофильБезопасности - COMОбъект - com-объект, реализующий интерфейс ISecurityProfile.
//   СвойстваПрофиляБезопасности - Структура - структура, описывающая профиль безопасности, 
//                  описание см. АдминистрированиеКластера.СвойстваПрофиляБезопасности().
//
Процедура ПрименитьИзмененияСвойствПрофиляБезопасности(СоединениеСАгентомСервера, Кластер, ПрофильБезопасности, СвойстваПрофиляБезопасности)
	
	ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
		ПрофильБезопасности,
		СвойстваПрофиляБезопасности,
		СловарьСвойствПрофиляБезопасности());
	
	ИмяПрофиля = СвойстваПрофиляБезопасности.Имя;
	
	СоединениеСАгентомСервера.RegSecurityProfile(Кластер, ПрофильБезопасности);
	
	// Виртуальный каталоги
	УдаляемыеВиртуальныеКаталоги = ПолучитьВиртуальныеКаталоги(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВиртуальныйКаталог Из УдаляемыеВиртуальныеКаталоги Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileVirtualDirectory(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВиртуальныйКаталог.Alias);
	КонецЦикла;
	СоздаваемыеВиртуальныеКаталоги = СвойстваПрофиляБезопасности.ВиртуальныеКаталоги;
	Для Каждого СоздаваемыйВиртуальныйКаталог Из СоздаваемыеВиртуальныеКаталоги Цикл
		ВиртуальныйКаталог = СоединениеСАгентомСервера.CreateSecurityProfileVirtualDirectory();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВиртуальныйКаталог,
			СоздаваемыйВиртуальныйКаталог,
			СловарьСвойствВиртуальногоКаталога());
		СоединениеСАгентомСервера.RegSecurityProfileVirtualDirectory(Кластер, ИмяПрофиля, ВиртуальныйКаталог);
	КонецЦикла;
	
	// Разрешенные COM-классы
	УдаляемыеCOMКлассы = ПолучитьCOMКлассы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйCOMКласс Из УдаляемыеCOMКлассы Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileCOMClass(
			Кластер,
			ИмяПрофиля,
			УдаляемыйCOMКласс.Name);
	КонецЦикла;
	СоздаваемыеCOMКлассы = СвойстваПрофиляБезопасности.COMКлассы;
	Для Каждого СоздаваемыйCOMКласс Из СоздаваемыеCOMКлассы Цикл
		COMКласс = СоединениеСАгентомСервера.CreateSecurityProfileCOMClass();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			COMКласс,
			СоздаваемыйCOMКласс,
			СловарьСвойствCOMКласса());
		СоединениеСАгентомСервера.RegSecurityProfileCOMClass(Кластер, ИмяПрофиля, COMКласс);
	КонецЦикла;
	
	// Внешние компоненты
	УдаляемыеВнешниеКомпоненты = ПолучитьВнешниеКомпоненты(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВнешнийКомпонент Из УдаляемыеВнешниеКомпоненты Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileAddIn(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВнешнийКомпонент.Name);
	КонецЦикла;
	СоздаваемыеВнешниеКомпоненты = СвойстваПрофиляБезопасности.ВнешниеКомпоненты;
	Для Каждого СоздаваемыйВнешнийКомпонент Из СоздаваемыеВнешниеКомпоненты Цикл
		ВнешнийКомпонент = СоединениеСАгентомСервера.CreateSecurityProfileAddIn();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВнешнийКомпонент,
			СоздаваемыйВнешнийКомпонент,
			СловарьСвойствВнешнейКомпоненты());
		СоединениеСАгентомСервера.RegSecurityProfileAddIn(Кластер, ИмяПрофиля, ВнешнийКомпонент);
	КонецЦикла;
	
	// Внешние модули
	УдаляемыеВнешниеМодули = ПолучитьВнешниеМодули(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйВнешнийМодуль Из УдаляемыеВнешниеМодули Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileUnSafeExternalModule(
			Кластер,
			ИмяПрофиля,
			УдаляемыйВнешнийМодуль.Name);
	КонецЦикла;
	СоздаваемыеВнешниеМодули = СвойстваПрофиляБезопасности.ВнешниеМодули;
	Для Каждого СоздаваемыйВнешнийМодуль Из СоздаваемыеВнешниеМодули Цикл
		ВнешнийМодуль = СоединениеСАгентомСервера.CreateSecurityProfileUnSafeExternalModule();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ВнешнийМодуль,
			СоздаваемыйВнешнийМодуль,
			СловарьСвойствВнешнегоМодуля());
		СоединениеСАгентомСервера.RegSecurityProfileUnSafeExternalModule(Кластер, ИмяПрофиля, ВнешнийМодуль);
	КонецЦикла;
	
	// Приложения ОС
	УдаляемыеПриложенияОС = ПолучитьПриложенияОС(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемоеПриложениеОС Из УдаляемыеПриложенияОС Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileApplication(
			Кластер,
			ИмяПрофиля,
			УдаляемоеПриложениеОС.Name);
	КонецЦикла;
	СоздаваемыеПриложенияОС = СвойстваПрофиляБезопасности.ПриложенияОС;
	Для Каждого СоздаваемоеПриложениеОС Из СоздаваемыеПриложенияОС Цикл
		ПриложениеОС = СоединениеСАгентомСервера.CreateSecurityProfileApplication();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ПриложениеОС,
			СоздаваемоеПриложениеОС,
			СловарьСвойствПриложенияОС());
		СоединениеСАгентомСервера.RegSecurityProfileApplication(Кластер, ИмяПрофиля, ПриложениеОС);
	КонецЦикла;
	
	// Интернет-ресурсы
	УдаляемыеИнтернетРесурсы = ПолучитьИнтернетРесурсы(СоединениеСАгентомСервера, Кластер, ИмяПрофиля);
	Для Каждого УдаляемыйИнтернетРесурс Из УдаляемыеИнтернетРесурсы Цикл
		СоединениеСАгентомСервера.UnregSecurityProfileInternetResource(
			Кластер,
			ИмяПрофиля,
			УдаляемыйИнтернетРесурс.Name);
	КонецЦикла;
	СоздаваемыеИнтернетРесурсы = СвойстваПрофиляБезопасности.ИнтернетРесурсы;
	Для Каждого СоздаваемыйИнтернетРесурс Из СоздаваемыеИнтернетРесурсы Цикл
		ИнтернетРесурс = СоединениеСАгентомСервера.CreateSecurityProfileInternetResource();
		ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
			ИнтернетРесурс,
			СоздаваемыйИнтернетРесурс,
			СловарьСвойствИнтернетРесурса());
		СоединениеСАгентомСервера.RegSecurityProfileInternetResource(Кластер, ИмяПрофиля, ИнтернетРесурс);
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание для объекта объектной модели COM-администратора.
//
// Параметры:
//   Объект - COMОбъект - com-объект, для которого формируется описание.
//   Словарь - Соответствие - содержит соответствие свойств объекта и в описании:
//     * Ключ - Имя свойства в описании,
//     * Значение - Имя свойства объекта.
//
// Возвращаемое значение: 
//   Структура - описание объекта объектной модели COM-администратора по переданному словарю.
//
Функция ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Знач Объект, Знач Словарь)
	
	СвойстваОбъекта = Новый Структура;
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			СвойстваОбъекта.Вставить(ФрагментСловаря.Значение);
		ИначеЕсли ТипЗнч(ФрагментСловаря.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			СвойстваОбъекта.Вставить(ФрагментСловаря.Значение.Ключ);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, Объект);
	
	Описание = Новый Структура();
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			Описание.Вставить(ФрагментСловаря.Ключ, СвойстваОбъекта[ФрагментСловаря.Значение]);
		ИначеЕсли ТипЗнч(ФрагментСловаря.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			ПодчиненныйОбъект = СвойстваОбъекта[ФрагментСловаря.Значение.Ключ];
			Если ПодчиненныйОбъект = Неопределено Тогда
				Описание.Вставить(ФрагментСловаря.Ключ, Неопределено);
			Иначе
				Свойство = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(ПодчиненныйОбъект, ФрагментСловаря.Значение.Словарь);
				Описание.Вставить(ФрагментСловаря.Ключ, Свойство);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

// Формирует описания объектов объектной модели COM-администратора.
//
// Параметры:
//   Объекты - Массив - массив com-объектов.
//   Словарь - Соответствие - содержит соответствие свойств объекта и в описании:
//     * Ключ - Имя свойства в описании,
//     * Значение - Имя свойства объекта.
//
// Возвращаемое значение: Массив(Структура), описания объекта объектной модели COM-администратора
//  по переданному словарю.
//
Функция ОписанияОбъектовОбъектнойМоделиCOMАдминистратора(Знач Объекты, Знач Словарь)
	
	Описания = Новый Массив();
	
	Для Каждого Объект Из Объекты Цикл
		Описания.Добавить(ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Объект, Словарь));
	КонецЦикла;
	
	Возврат Описания;
	
КонецФункции

// Заполняет свойства объекта объектной модели COM-администратора по свойствам из
//  переданного описания.
//
// Параметры:
//   Объект - COMОбъект - com-объект, свойства которого заполняются.
//   Описание - Структура - описание, используемое для заполнения свойств объекта.
//   Словарь - Соответствие - содержит соответствие свойств объекта и в описании:
//     * Ключ - Имя свойства в описании,
//     * Значение - Имя свойства объекта.
//
Процедура ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(Объект, Знач Описание, Знач Словарь)
	
	СвойстваОбъекта = Новый Структура;
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ТипЗнч(ФрагментСловаря.Значение) = Тип("Строка") Тогда
			Если Описание.Свойство(ФрагментСловаря.Ключ) Тогда
				СвойстваОбъекта.Вставить(ФрагментСловаря.Значение, Описание[ФрагментСловаря.Ключ]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваОбъекта);
	
КонецПроцедуры

// Возвращает соответствие имен свойств информационной базы, описывающих состояние
//  блокировки сеансов и регламентных заданий, для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. 
//                  АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий()).
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий()
	
	Результат = АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий();
	
	Результат.БлокировкаСеансов = "SessionsDenied";
	Результат.ДатаС = "DeniedFrom";
	Результат.ДатаПо = "DeniedTo";
	Результат.Сообщение = "DeniedMessage";
	Результат.КодРазрешения = "PermissionCode";
	Результат.ПараметрБлокировки = "DeniedParameter";
	Результат.БлокировкаРегламентныхЗаданий = "ScheduledJobsDenied";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств сеансов информационной базы для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваСеанса()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствСеансов()
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Ключ", "License");
	Лицензия.Вставить("Словарь", СловарьСвойствЛицензии());
	
	ОписаниеСоединения = Новый Структура;
	ОписаниеСоединения.Вставить("Ключ", "Connection");
	ОписаниеСоединения.Вставить("Словарь", СловарьСвойствОписанияСоединения());
	
	РабочийПроцесс = Новый Структура;
	РабочийПроцесс.Вставить("Ключ", "Process");
	РабочийПроцесс.Вставить("Словарь", СловарьСвойствРабочегоПроцесса());
	
	Результат = АдминистрированиеКластера.СвойстваСеанса();
	
	Результат.Номер = "SessionID";
	Результат.ИмяПользователя = "UserName";
	Результат.ИмяКлиентскогоКомпьютера = "Host";
	Результат.ИдентификаторКлиентскогоПриложения = "AppID";
	Результат.ИдентификаторЯзыка = "Locale";
	Результат.МоментСозданияСеанса = "StartedAt";
	Результат.МоментПоследнейАктивностиСеанса = "LastActiveAt";
	Результат.БлокировкаСУБД = "blockedByDBMS";
	Результат.Блокировка = "blockedByLS";
	Результат.Передано = "bytesAll";
	Результат.ПереданоЗа5Минут = "bytesLast5Min";
	Результат.СерверныхВызовов = "callsAll";
	Результат.СерверныхВызововЗа5Минут = "callsLast5Min";
	Результат.ДлительностьСерверныхВызовов = "durationAll";
	Результат.ДлительностьТекущегоСерверногоВызова = "durationCurrent";
	Результат.ДлительностьСерверныхВызововЗа5Минут = "durationLast5Min";
	Результат.ПереданоСУБД = "dbmsBytesAll";
	Результат.ПереданоСУБДЗа5Минут = "dbmsBytesLast5Min";
	Результат.ДлительностьВызововСУБД = "durationAllDBMS";
	Результат.ДлительностьТекущегоВызоваСУБД = "durationCurrentDBMS";
	Результат.ДлительностьВызововСУБДЗа5Минут = "durationLast5MinDBMS";
	Результат.СоединениеСУБД = "dbProcInfo";
	Результат.ВремяСоединенияСУБД = "dbProcTook";
	Результат.МоментЗахватаСоединенияСУБД = "dbProcTookAt";
	Результат.Спящий = "Hibernate";
	Результат.ЗавершитьЧерез = "HibernateSessionTerminateTime";
	Результат.ЗаснутьЧерез = "PassiveSessionHibernateTime";
	Результат.ПрочитаноСДиска = "InBytesAll";
	Результат.ПрочитаноСДискаВТекущемВызове = "InBytesCurrent";
	Результат.ПрочитаноСДискаЗа5Минут = "InBytesLast5Min";
	Результат.ЗанятоПамяти = "MemoryAll";
	Результат.ЗанятоПамятиВТекущемВызове = "MemoryCurrent";
	Результат.ЗанятоПамятиЗа5Минут = "MemoryLast5Min";
	Результат.ЗаписаноНаДиск = "OutBytesAll";
	Результат.ЗаписаноНаДискВТекущемВызове = "OutBytesCurrent";
	Результат.ЗаписаноНаДискЗа5Минут = "OutBytesLast5Min";
	Результат.Лицензия = Новый ФиксированнаяСтруктура(Лицензия);
	Результат.ОписаниеСоединения = Новый ФиксированнаяСтруктура(ОписаниеСоединения);
	Результат.РабочийПроцесс = Новый ФиксированнаяСтруктура(РабочийПроцесс);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств соединений с информационной базой для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
//
Функция СловарьСвойствСоединений()
	
	Результат = АдминистрированиеКластера.СвойстваСоединения();
	
	Результат.Номер = "ConnID";
	Результат.ИмяПользователя = "UserName";
	Результат.ИмяКлиентскогоКомпьютера = "HostName";
	Результат.ИдентификаторКлиентскогоПриложения = "AppID";
	Результат.МоментУстановкиСоединения = "ConnectedAt";
	Результат.РежимСоединенияСИнформационнойБазой = "IBConnMode";
	Результат.РежимСоединенияСБазойДанных = "dbConnMode";
	Результат.БлокировкаСУБД = "blockedByDBMS";
	Результат.Передано = "bytesAll";
	Результат.ПереданоЗа5Минут = "bytesLast5Min";
	Результат.СерверныхВызовов = "callsAll";
	Результат.СерверныхВызововЗа5Минут = "callsLast5Min";
	Результат.ПереданоСУБД = "dbmsBytesAll";
	Результат.ПереданоСУБДЗа5Минут = "dbmsBytesLast5Min";
	Результат.СоединениеСУБД = "dbProcInfo";
	Результат.ВремяСУБД = "dbProcTook";
	Результат.МоментЗахватаСоединенияСУБД = "dbProcTookAt";
	Результат.ДлительностьСерверныхВызовов = "durationAll";
	Результат.ДлительностьВызововСУБД = "durationAllDBMS";
	Результат.ДлительностьТекущегоСерверногоВызова = "durationCurrent";
	Результат.ДлительностьТекущегоВызоваСУБД = "durationCurrentDBMS";
	Результат.ДлительностьСерверныхВызововЗа5Минут = "durationLast5Min";
	Результат.ДлительностьВызововСУБДЗа5Минут = "durationLast5MinDBMS";
	Результат.ПрочитаноСДиска = "InBytesAll";
	Результат.ПрочитаноСДискаВТекущемВызове = "InBytesCurrent";
	Результат.ПрочитаноСДискаЗа5Минут = "InBytesLast5Min";
	Результат.ЗанятоПамяти = "MemoryAll";
	Результат.ЗанятоПамятиВТекущемВызове = "MemoryCurrent";
	Результат.ЗанятоПамятиЗа5Минут = "MemoryLast5Min";
	Результат.ЗаписаноНаДиск = "OutBytesAll";
	Результат.ЗаписаноНаДискВТекущемВызове = "OutBytesCurrent";
	Результат.ЗаписаноНаДискЗа5Минут = "OutBytesLast5Min";
	Результат.УправлениеНаходитсяНаСервере = "ThreadMode";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств профиля безопасности для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваПрофиляБезопасности()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствПрофиляБезопасности()
	
	Результат = АдминистрированиеКластера.СвойстваПрофиляБезопасности();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	Результат.ПрофильБезопасногоРежима = "SafeModeProfile";
	Результат.ПолныйДоступКПривилегированномуРежиму = "PrivilegedModeInSafeModeAllowed";
	Результат.ПолныйДоступКФункциямКриптографии = "CryptographyAllowed";
	
	Результат.ПолныйДоступКРасширениюВсехМодулей = "AllModulesExtension";
	Результат.ДоступныеДляРасширенияМодули = "ModulesAvailableForExtension";
	Результат.НедоступныеДляРасширенияМодули = "ModulesNotAvailableForExtension";
	
	Результат.ПолныйДоступКРасширениюПравДоступа = "RightExtension";
	Результат.РолиОграничивающиеРасширениеПравДоступа = "RightExtensionDefinitionRoles";
	
	Результат.ПолныйДоступКФайловойСистеме = "FileSystemFullAccess";
	Результат.ПолныйДоступКCOMОбъектам = "COMFullAccess";
	Результат.ПолныйДоступКВнешнимКомпонентам = "AddInFullAccess";
	Результат.ПолныйДоступКВнешнимМодулям = "UnSafeExternalModuleFullAccess";
	Результат.ПолныйДоступКПриложениямОперационнойСистемы = "ExternalAppFullAccess";
	Результат.ПолныйДоступКИнтернетРесурсам = "InternetFullAccess";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств виртуального каталога для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваВиртуальногоКаталога()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствВиртуальногоКаталога()
	
	Результат = АдминистрированиеКластера.СвойстваВиртуальногоКаталога();
	
	Результат.ЛогическийURL = "Alias";
	Результат.ФизическийURL = "PhysicalPath";
	
	Результат.Описание = "Descr";
	
	Результат.ЧтениеДанных = "AllowedRead";
	Результат.ЗаписьДанных = "AllowedWrite";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств COM-класса для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваCOMКласса()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствCOMКласса()
	
	Результат = АдминистрированиеКластера.СвойстваCOMКласса();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ФайлМоникер = "FileName";
	Результат.CLSID = "ObjectUUID";
	Результат.Компьютер = "ComputerName";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств внешней компоненты для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваВнешнейКомпоненты()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствВнешнейКомпоненты()
	
	Результат = АдминистрированиеКластера.СвойстваВнешнейКомпоненты();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ХэшСумма = "AddInHash";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств внешнего модуля для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваВнешнегоМодуля()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствВнешнегоМодуля()
	
	Результат = АдминистрированиеКластера.СвойстваВнешнегоМодуля();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ХэшСумма = "ExternalModuleHash";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств приложения операционной системы для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваПриложенияОС()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствПриложенияОС()
	
	Результат = АдминистрированиеКластера.СвойстваПриложенияОС();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.ШаблонСтрокиЗапуска = "CommandMask";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств Интернет-ресурса для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваИнтернетРесурса()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствИнтернетРесурса()
	
	Результат = АдминистрированиеКластера.СвойстваИнтернетРесурса();
	
	Результат.Имя = "Name";
	Результат.Описание = "Descr";
	
	Результат.Протокол = "Protocol";
	Результат.Адрес = "Address";
	Результат.Порт = "Port";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств Описания соединения для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваОписанияСоединения()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствОписанияСоединения()
	
	РабочийПроцесс = Новый Структура;
	РабочийПроцесс.Вставить("Ключ", "Process");
	РабочийПроцесс.Вставить("Словарь", СловарьСвойствРабочегоПроцесса());
	
	Результат = АдминистрированиеКластера.СвойстваОписанияСоединения();
	
	Результат.ИмяПриложения = "Application";
	Результат.Блокировка = "blockedByLS";
	Результат.МоментУстановкиСоединения = "ConnectedAt";
	Результат.Номер = "ConnID";
	Результат.ИмяКлиентскогоКомпьютера = "Host";
	Результат.НомерСеанса = "SessionID";
	Результат.РабочийПроцесс = Новый ФиксированнаяСтруктура(РабочийПроцесс);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств Лицензии для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваЛицензии()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствЛицензии()
	
	Результат = АдминистрированиеКластера.СвойстваЛицензии();
	
	Результат.ИмяФайла = "FileName";
	Результат.ПолноеПредставление = "FullPresentation";
	Результат.КраткоеПредставление = "ShortPresentation";
	Результат.ВыданаСервером = "IssuedByServer";
	Результат.ТипЛицензии = "LicenseType";
	Результат.МаксимальноеКоличествоПользователейДляКомплекта = "MaxUsersAll";
	Результат.МаксимальноеКоличествоПользователейВКлюче = "MaxUsersCur";
	Результат.ЛицензияПолученаЧерезAladdinLicenseManager = "Net";
	Результат.АдресПроцесса = "RMngrAddress";
	Результат.ИдентификаторПроцесса = "RMngrPID";
	Результат.ПортПроцесса = "RMngrPort";
	Результат.СерияКлюча = "Series";
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств Рабочего процесса для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура - фиксированная структура, у которой:
//     * Ключ - Строка - имя свойства в API (см. АдминистрированиеКластера.СвойстваРабочегоПроцесса()),
//     * Значение - Строка - имя свойства объекта.
//
Функция СловарьСвойствРабочегоПроцесса()
	
	Лицензия = Новый Структура;
	Лицензия.Вставить("Ключ", "License");
	Лицензия.Вставить("Словарь", СловарьСвойствЛицензии());
	
	Результат = АдминистрированиеКластера.СвойстваРабочегоПроцесса();
	
	Результат.ДоступнаяПроизводительность = "AvailablePerfomance";
	Результат.ЗатраченоКлиентом = "AvgBackCallTime";
	Результат.РеакцияСервера = "AvgCallTime";
	Результат.ЗатраченоСУБД = "AvgDBCallTime";
	Результат.ЗатраченоМенеджеромБлокировок = "AvgLockCallTime";
	Результат.ЗатраченоСервером = "AvgServerCallTime";
	Результат.КлиентскихПотоков = "AvgThreads";
	Результат.ОтносительнаяПроизводительность = "Capacity";
	Результат.Соединений = "Connections";
	Результат.ИмяКомпьютера = "HostName";
	Результат.Включен = "IsEnable";
	Результат.Порт = "MainPort";
	Результат.ПревышениеНадКритическимЗначением = "MemoryExcessTime";
	Результат.ЗанятоПамяти = "MemorySize";
	Результат.Идентификатор = "PID";
	Результат.Запущен = "Running";
	Результат.КоличествоВызововПоКоторымПосчитанаСтатистика = "SelectionSize";
	Результат.МоментЗапуска = "StartedAt";
	Результат.Использование = "Use";
	Результат.Лицензия = Новый ФиксированнаяСтруктура(Лицензия);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

#КонецОбласти