///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Запустить выполнение функции в фоновом задании, если это возможно.
// Вызываемая функция может быть с произвольным числом параметров, но не более 7.
// Значения передаваемых параметров функции, а также возвращаемое значение должны быть сериализуемыми.
// Параметры функции не должны быть возвращаемыми.
//
// Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
// Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//  ПараметрыВыполнения - ФормаКлиентскогоПриложения - форма, из которой из которой выполняется вызов;
//                      - УникальныйИдентификатор - идентификатор формы, из которой выполняется вызов;
//                      - Структура - см. ПараметрыВыполненияФункции
//  ИмяФункции - Строка - имя экспортной функции общего модуля, модуля менеджера объекта 
//                        или модуля обработки, которую необходимо выполнить в фоне.
//                        Например, "МойОбщийМодуль.МояПроцедура", "Отчет.ЗагруженныеДанные.Сформировать"
//                        или "Обработка.ЗагрузкаДанных.МодульОбъекта.Загрузить". 
//
//  Параметр1 - Произвольный - произвольные параметры вызова функции. Количество параметров может быть от 0 до 7.
//  Параметр2 - Произвольный
//  Параметр3 - Произвольный
//  Параметр4 - Произвольный
//  Параметр5 - Произвольный
//  Параметр6 - Произвольный
//  Параметр7 - Произвольный
//
// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                      помещен результат работы функции.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
//
// Пример:
//  В общем виде процесс запуска и обработки результата длительной операции в модуле формы выглядит следующим образом:
//
//   1) Функция, которая будет исполняться в фоне, располагается в модуле менеджера объекта или в серверном общем модуле:
//    Функция РассчитатьЗначение(Знач МойПараметр1, Знач МойПараметр2) Экспорт
//     ...
//     Возврат Результат;
//    КонецФункции
//
//   2) Запуск операции на сервере и подключение обработчика ожидания:
//    &НаКлиенте
//    Процедура РассчитатьЗначение()
//     ДлительнаяОперация = НачатьВыполнениеНаСервере();
//     ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
//     ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
//     ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
//    КонецПроцедуры
//
//    &НаСервере
//    Функция НачатьВыполнениеНаСервере()
//     ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
//     Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "Обработка.МояОбработка.РассчитатьЗначение", 
//      МойПараметр1, МойПараметр2);
//    КонецФункции
//    
//   3) Обработка результата длительной операции:
//    &НаКлиенте
//    Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
//     Если Результат = Неопределено Тогда
//      Возврат;
//     КонецЕсли;
//     ВывестиРезультат(Результат.АдресРезультата);
//    КонецПроцедуры 
//  
Функция ВыполнитьФункцию(Знач ПараметрыВыполнения, ИмяФункции, Знач Параметр1 = Неопределено,
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено,
	Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено) Экспорт
	
	ПараметрыВызова = СписокПараметров(Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7);
		
	ПараметрыВыполнения = ПодготовитьПараметрыВыполнения(ПараметрыВыполнения, Истина);
	
	Возврат ВыполнитьВФоне(ИмяФункции, ПараметрыВызова, ПараметрыВыполнения);
	
КонецФункции

// Запустить выполнение процедуры в фоновом задании, если это возможно.
// Вызываемая процедура может быть с произвольным числом параметров, но не более 7.
// Значения передаваемых параметров процедуры, а также возвращаемое значение должны быть сериализуемыми.
// Параметры процедуры не должны быть возвращаемыми.
//
// Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
// Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//
//  ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияПроцедуры
//
//  ИмяПроцедуры - Строка - имя экспортной процедуры общего модуля, модуля менеджера объекта 
//                          или модуля обработки, которую необходимо выполнить в фоне.
//                          Например, "МойОбщийМодуль.МояПроцедура", "Отчет.ЗагруженныеДанные.Сформировать"
//                          или "Обработка.ЗагрузкаДанных.МодульОбъекта.Загрузить". 
//
//  Параметр1 - Произвольный - произвольные параметры вызова процедуры. Количество параметров может быть от 0 до 7.
//  Параметр2 - Произвольный
//  Параметр3 - Произвольный
//  Параметр4 - Произвольный
//  Параметр5 - Произвольный
//  Параметр6 - Произвольный
//  Параметр7 - Произвольный
//
// Возвращаемое значение:
//  Структура - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
//
// Пример:
//  В общем виде процесс запуска и обработки результата длительной операции в модуле формы выглядит следующим образом:
//
//   1) Процедура, которая будет исполняться в фоне, располагается в модуле менеджера объекта или в серверном общем модуле:
//    Процедура ВыполнитьРасчет(Знач МойПараметр1, Знач МойПараметр2) Экспорт
//     ...
//    КонецПроцедуры
//
//   2) Запуск операции на сервере и подключение обработчика ожидания (при необходимости):
//    &НаКлиенте
//    Процедура ВыполнитьРасчет()
//     ДлительнаяОперация = НачатьВыполнениеНаСервере();
//     ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект);
//     ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
//     ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
//    КонецПроцедуры
//
//    &НаСервере
//    Функция НачатьВыполнениеНаСервере()
//     Возврат ДлительныеОперации.ВыполнитьПроцедуру(, "Обработка.МояОбработка.ВыполнитьРасчет", 
//      МойПараметр1, МойПараметр2);
//    КонецФункции
//    
//   3) Обработка результата длительной операции:
//    &НаКлиенте
//    Процедура ОбработатьРезультат(Результат, ДополнительныеПараметры) Экспорт
//     Если Результат = Неопределено Тогда
//      Возврат;
//     КонецЕсли;
//     ПриЗавершенииРасчета();
//    КонецПроцедуры 
//   
Функция ВыполнитьПроцедуру(Знач ПараметрыВыполнения = Неопределено, ИмяПроцедуры, Знач Параметр1 = Неопределено,
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено,
	Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено) Экспорт
	
	ПараметрыВызова = СписокПараметров(Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7);
		
	ПараметрыВыполнения = ПодготовитьПараметрыВыполнения(ПараметрыВыполнения, Ложь);
	
	Возврат ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВызова, ПараметрыВыполнения);
	
КонецФункции

// Управляет процессом выполнения многопоточной операции.
//
// Запустить выполнение функции в многопоточном фоновом задании, если это возможно.
// Вызываемая процедура может быть с произвольным числом параметров, но не более 7.
// Значения передаваемых параметров процедуры, а также возвращаемое значение должны быть сериализуемыми.
// Параметры процедуры не должны быть возвращаемыми.
//
// Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
// Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//  ИмяФункции - Строка - имя экспортной функции общего модуля, модуля менеджера объекта 
//                        или модуля обработки, которую необходимо выполнить в фоне.
//                        Например, "МойОбщийМодуль.МояПроцедура", "Отчеты.ЗагруженныеДанные.Сформировать"
//                        или "Обработки.ЗагрузкаДанных.МодульОбъекта.Загрузить". 
//  ПараметрыВыполнения - см. ПараметрыВыполненияФункции
//  НаборПараметровФункции - Соответствие из КлючИЗначение - произвольный набор параметров вызова функции:
//    * Ключ - Произвольный - ключ набора
//    * Значение - Массив - параметры вызова функции. Количество параметров может быть от 0 до 7.
//
// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет помещено Соответствие:
//                                      ** Ключ - Произвольный
//                                      ** Значение - см. ВыполнитьФункцию
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
//
Функция ВыполнитьФункциюВНесколькоПотоков(ИмяФункции, Знач ПараметрыВыполнения, Знач НаборПараметровФункции = Неопределено) Экспорт
	
	Если НаборПараметровФункции <> Неопределено И ТипЗнч(НаборПараметровФункции) <> Тип("Соответствие") Тогда
		ВызватьИсключение НСтр("ru ='Передан неверный тип набора параметров'");
	КонецЕсли;

	ПараметрыВыполненияДочернихПотоков = ПараметрыВыполненияВФоне();
	ПараметрыВыполненияДочернихПотоков.ОжидатьЗавершение = 0;
	
	ПараметрыВыполненияДочернихПотоков.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	АдресРезультатов = Новый Соответствие;
	
	Если НаборПараметровФункции <> Неопределено Тогда
		Для Каждого ПараметрФункции Из НаборПараметровФункции Цикл
			АдресРезультатаПотока = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			АдресРезультатов.Вставить(ПараметрФункции.Ключ, АдресРезультатаПотока);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМногопоточнойОперации = Новый Структура;
	ПараметрыМногопоточнойОперации.Вставить("ИмяМетода",         ИмяФункции);
	ПараметрыМногопоточнойОперации.Вставить("ДляФункции",        Истина);
	ПараметрыМногопоточнойОперации.Вставить("ПараметрыОперации", ПараметрыВыполнения);
	ПараметрыМногопоточнойОперации.Вставить("ПараметрыМетода",  НаборПараметровФункции);
	ПараметрыМногопоточнойОперации.Вставить("АдресРезультата",  ПараметрыВыполненияДочернихПотоков.АдресРезультата);
	ПараметрыМногопоточнойОперации.Вставить("ПрерватьВыполнениеЕслиОшибка", ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка);
	ПараметрыМногопоточнойОперации.Вставить("АдресРезультатов", АдресРезультатов);
	
	Возврат ВыполнитьФункцию(ПараметрыВыполненияДочернихПотоков, ИмяМетодаМногопоточногоПроцесса(), ПараметрыМногопоточнойОперации);
	
КонецФункции

// Управляет процессом выполнения многопоточной операции.
// 
// Запускает выполнение процедуры в многопоточном фоновом задании, если это возможно.
// Вызываемая процедура может быть с произвольным числом параметров, но не более 7.
// Значения передаваемых параметров процедуры, а также возвращаемое значение должны быть сериализуемыми.
// Параметры процедуры не должны быть возвращаемыми.
//
// Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
// Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя экспортной процедуры общего модуля, модуля менеджера объекта 
//                          или модуля обработки, которую необходимо выполнить в фоне.
//  ПараметрыВыполнения - см. ПараметрыВыполненияПроцедуры
//  НаборПараметровПроцедуры - Соответствие из КлючИЗначение - произвольный набор параметров вызова процедуры:
//    * Ключ - Произвольный - ключ набора
//    * Значение - Массив - параметры вызова процедуры. Количество параметров может быть от 0 до 7.
//
// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет помещено Соответствие:
//                                       ** Ключ - Произвольный
//                                       ** Значение - см. ВыполнитьПроцедуру
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
//
Функция ВыполнитьПроцедуруВНесколькоПотоков(ИмяПроцедуры, Знач ПараметрыВыполнения, Знач НаборПараметровПроцедуры = Неопределено) Экспорт
	
	Если НаборПараметровПроцедуры <> Неопределено И ТипЗнч(НаборПараметровПроцедуры) <> Тип("Соответствие") Тогда
		ВызватьИсключение НСтр("ru ='Передан неверный тип набора параметров'");
	КонецЕсли;
	
	ПараметрыВыполненияДочернихПотоков = ПараметрыВыполненияВФоне();
	ПараметрыВыполненияДочернихПотоков.ОжидатьЗавершение = 0;
	
	ПараметрыВыполненияДочернихПотоков.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	АдресРезультатов = Новый Соответствие;
	
	Если НаборПараметровПроцедуры <> Неопределено Тогда
		Для Каждого ПараметрФункции Из НаборПараметровПроцедуры Цикл
			АдресРезультатаПотока = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			АдресРезультатов.Вставить(ПараметрФункции.Ключ, АдресРезультатаПотока);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМногопоточнойОперации = Новый Структура;
	ПараметрыМногопоточнойОперации.Вставить("ИмяМетода",         ИмяПроцедуры);
	ПараметрыМногопоточнойОперации.Вставить("ДляФункции",        Ложь);
	ПараметрыМногопоточнойОперации.Вставить("ПараметрыОперации", ПараметрыВыполнения);
	ПараметрыМногопоточнойОперации.Вставить("ПараметрыМетода",   НаборПараметровПроцедуры);
	ПараметрыМногопоточнойОперации.Вставить("АдресРезультата",   ПараметрыВыполненияДочернихПотоков.АдресРезультата);
	ПараметрыМногопоточнойОперации.Вставить("ПрерватьВыполнениеЕслиОшибка", ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка);
	ПараметрыМногопоточнойОперации.Вставить("АдресРезультатов", АдресРезультатов);
	
	Результат = ВыполнитьФункцию(ПараметрыВыполненияДочернихПотоков, ИмяМетодаМногопоточногоПроцесса(), ПараметрыМногопоточнойОперации);
	
	Возврат Результат;

	
КонецФункции

// Конструктор коллекции ПараметрыВыполненияФункции для функции ВыполнитьФункцию.
//
// Если ЗапуститьВФоне = Ложь и ЗапуститьНеВФоне = Ложь, то задание будет выполнено в фоне по возможности.
// Запуск выполняется сразу в основном потоке при выполнении любого из следующих условий:
//  * если вызов выполняется в файловой базе во внешнем соединении (в этом режиме фоновые задания не поддерживаются);
//  * если приложение запущено в режиме отладки (параметр /C РежимОтладки) - для упрощения отладки конфигурации;
//  * если в файловой ИБ имеются активные фоновые задания - для снижения времени ожидания пользователя;
//  * если выполняется функция модуля внешней обработки или внешнего отчета.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, 
//                               во временное хранилище которой надо поместить результат выполнения процедуры.
//
// Возвращаемое значение:
//   Структура - параметры выполнения длительной операции:
//     * ИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы,
//                             во временное хранилище которой надо поместить результат выполнения процедуры.
//     * ОжидатьЗавершение   - Число - таймаут в секундах ожидания завершения фонового задания.
//                             Если задано Неопределено, то ждать до момента завершения задания.
//                             Если задано 0, то ждать завершения задания не требуется.
//                             По умолчанию - 2 секунды; а для низкой скорости соединения - 4.
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания - Строка - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                      По умолчанию не задан.
//     * АдресРезультата     - Строка - адрес временного хранилища, в которое должен быть помещен результат
//                                      работы процедуры. Если не задан, адрес формируется автоматически.
//     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне, кроме ситуаций:
//                                  а) если вызов выполняется в файловой базе во внешнем соединении 
//                                  (в этом режиме фоновые задания не поддерживаются);
//                                  б) если выполняется функция модуля внешней обработки или внешнего отчета.
//                                  Кроме того, в файловом варианте при наличии ранее запущенных фоновых заданий,
//                                  новое задание становится в очередь и начинает выполняться после завершения предыдущих.
//                                  Если Ложь, то задание будет выполнено в фоне по возможности. 
//     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
//                                  без использования фонового задания.
//     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
//                                  расширений конфигурации. Имеет приоритет над параметром ЗапуститьНеВФоне. 
//     * СРасширениямиБазыДанных  - Булево - если Истина, то фоновое задание будет запущено с последней версией
//                                  расширений конфигурации. Имеет приоритет над параметром ЗапуститьНеВФоне.
//     * ПрерватьВыполнениеЕслиОшибка - Булево - если Истина, то при возникновении ошибки в одном из дочерних фоновых
//                                  заданий, выполнение многопоточного фонового задания будет перервано.
//                                  Выполнение уже запущенных дочерних фоновых задания будет отменно.
//                                  Параметр только для функции ВыполнитьФункциюВНесколькоПотоков.
//
Функция ПараметрыВыполненияФункции(Знач ИдентификаторФормы) Экспорт
	
	Результат = ОбщиеПараметрыВыполненияВФоне();
	ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, ИдентификаторФормы);
	
	Возврат Результат;
	
КонецФункции

// Конструктор коллекции ПараметрыВыполненияПроцедуры для функции ВыполнитьПроцедуру.
//
// Если ЗапуститьВФоне = Ложь и ЗапуститьНеВФоне = Ложь, то задание будет выполнено в фоне по возможности.
// Запуск выполняется сразу в основном потоке при выполнении любого из следующих условий:
//  * если вызов выполняется в файловой базе во внешнем соединении (в этом режиме фоновые задания не поддерживаются);
//  * если приложение запущено в режиме отладки (параметр /C РежимОтладки) - для упрощения отладки конфигурации;
//  * если в файловой ИБ имеются активные фоновые задания - для снижения времени ожидания пользователя;
//  * если выполняется функция модуля внешней обработки или внешнего отчета.
//
// Возвращаемое значение:
//   Структура - параметры выполнения длительной операции:
//     * ОжидатьЗавершение   - Число  - таймаут в секундах ожидания завершения фонового задания.
//                                      Если задано Неопределено, то ждать до момента завершения задания.
//                                      Если задано 0, то ждать завершения задания не требуется.
//                                      По умолчанию - 2 секунды; а для низкой скорости соединения - 4.
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания - Строка - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                      По умолчанию не задан.
//     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне, кроме ситуаций:
//                                  а) если вызов выполняется в файловой базе во внешнем соединении 
//                                  (в этом режиме фоновые задания не поддерживаются);
//                                  б) если выполняется функция модуля внешней обработки или внешнего отчета.
//                                  Кроме того, в файловом варианте при наличии ранее запущенных фоновых заданий,
//                                  новое задание становится в очередь и начинает выполняться после завершения предыдущих.
//                                  Если Ложь, то задание будет выполнено в фоне по возможности. 
//     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
//                                  без использования фонового задания.
//     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
//                                  расширений конфигурации. Имеет приоритет над параметром ЗапуститьНеВФоне. 
//     * СРасширениямиБазыДанных  - Булево - если Истина, то фоновое задание будет запущено с последней версией
//                                  расширений конфигурации. Имеет приоритет над параметром ЗапуститьНеВФоне. 
//     * ПрерватьВыполнениеЕслиОшибка - Булево - если Истина, то при возникновении ошибки в одном из дочерних фоновых
//                                  заданий, выполнение многопоточного фонового задания будет перервано.
//                                  Выполнение уже запущенных дочерних фоновых задания будет отменно.
//                                  Параметр только для функции ВыполнитьПроцедуруВНесколькоПотоков.
//
Функция ПараметрыВыполненияПроцедуры() Экспорт
	
	Возврат ОбщиеПараметрыВыполненияВФоне();
	
КонецФункции

// Вместо этой функции рекомендуется использовать функции ВыполнитьФункцию и ВыполнитьПроцедуру.
// 
// Запустить выполнение процедуры в фоновом задании, если это возможно.
// Не следует использовать эту функцию, если необходимо безусловно запускать фоновое задание.
// Может применяться совместно с функцией ДлительныеОперацииКлиент.ОжидатьЗавершение.
// 
// Параметры:
//  ИмяПроцедуры           - Строка    - имя экспортной процедуры общего модуля, модуля менеджера объекта 
//                                       или модуля обработки, которую необходимо выполнить в фоне.
//                                       Например, "МойОбщийМодуль.МояПроцедура", "Отчет.ЗагруженныеДанные.Сформировать"
//                                       или "Обработка.ЗагрузкаДанных.МодульОбъекта.Загрузить". 
//                                       У процедуры должно быть два или три формальных параметра:
//                                        * Параметры       - Структура - произвольные параметры ПараметрыПроцедуры;
//                                        * АдресРезультата - Строка    - адрес временного хранилища, в которое нужно
//                                          поместить результат работы процедуры. Обязательно;
//                                        * АдресДополнительногоРезультата - Строка - если в ПараметрыВыполнения установлен 
//                                          параметр ДополнительныйРезультат, то содержит адрес дополнительного временного
//                                          хранилища, в которое нужно поместить результат работы процедуры. Опционально.
//                                       При необходимости выполнить в фоне функцию ее следует обернуть в процедуру,
//                                       а ее результат возвращать через второй параметр АдресРезультата.
//  ПараметрыПроцедуры     - Структура - произвольные параметры вызова процедуры ИмяПроцедуры.
//  ПараметрыВыполнения    - см. ДлительныеОперации.ПараметрыВыполненияВФоне
//
// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания  - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры
//                                      (или уже помещен, если Статус = "Выполнено").
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                      содержит адрес дополнительного временного хранилища,
//                                      в которое будет помещен результат работы процедуры
//                                      (или уже помещен, если Статус = "Выполнено").
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании, иначе пустой массив.
// 
// Пример:
//  В общем виде процесс запуска и обработки результата длительной операции выглядит следующим образом:
//
//   1) Процедура, которая будет исполняться в фоне, располагается в модуле менеджера объекта или в серверном общем модуле:
//    Процедура ВыполнитьДействие(Параметры, АдресРезультата) Экспорт
//     ...
//     ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
//    КонецПроцедуры
//
//   2) Запуск операции на сервере и подключение обработчика ожидания:
//    &НаКлиенте
//    Процедура ВыполнитьДействие()
//     ДлительнаяОперация = НачатьВыполнениеНаСервере();
//     ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
//     ...
//     ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", ЭтотОбъект);
//     ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
//    КонецПроцедуры
//
//    &НаСервере
//    Функция НачатьВыполнениеНаСервере()
//     ПараметрыПроцедуры = Новый Структура;
//     ...
//     ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
//     ...
//     Возврат ДлительныеОперации.ВыполнитьВФоне("Обработка.МояОбработка.ВыполнитьДействие", 
//     ПараметрыПроцедуры, ПараметрыВыполнения);
//    КонецФункции
//    
//   3) Обработка результата выполнения операции:
//    &НаКлиенте
//    Процедура ВыполнитьДействиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
//     Если Результат = Неопределено Тогда
//      Возврат;
//     КонецЕсли;
//     ВывестиРезультат(Результат);
//    КонецПроцедуры 
//  
Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ДлительныеОперации.ВыполнитьВФоне", "ПараметрыВыполнения", 
		ПараметрыВыполнения, Тип("Структура")); 
	Если ПараметрыВыполнения.ЗапуститьНеВФоне И ПараметрыВыполнения.ЗапуститьВФоне Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Параметры ""%1"" и ""%2""
			|не могут одновременно принимать значение %3 в %4.'"),
			"ЗапуститьНеВФоне", "ЗапуститьВФоне", "Истина", "ДлительныеОперации.ВыполнитьВФоне");
	КонецЕсли;
	Если ПараметрыВыполнения.БезРасширений И ПараметрыВыполнения.СРасширениямиБазыДанных Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Параметры ""%1"" и ""%2""
			|не могут одновременно принимать значение %3 в %4.'"),
			"БезРасширений", "СРасширениямиБазыДанных", "Истина", "ДлительныеОперации.ВыполнитьВФоне");
	КонецЕсли;
#Если ВнешнееСоединение Тогда
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Если ПараметрыВыполнения.БезРасширений И ИнформационнаяБазаФайловая Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Фоновое задание не может быть запущено с параметром ""%1""
			|в файловой информационной базе в %2.'"),
			"БезРасширений", "ДлительныеОперации.ВыполнитьВФоне");
	ИначеЕсли ПараметрыВыполнения.СРасширениямиБазыДанных И ИнформационнаяБазаФайловая Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Фоновое задание не может быть запущено с параметром ""%1""
			|в файловой информационной базе в %2.'"),
			"СРасширениямиБазыДанных", "ДлительныеОперации.ВыполнитьВФоне");
	КонецЕсли;
#КонецЕсли
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Выполняется");
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	Если ПараметрыВыполнения.Свойство("АдресРезультата") Тогда
		Если ПараметрыВыполнения.АдресРезультата = Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ИдентификаторФормы) И ОбщегоНазначения.РежимОтладки() Тогда
				Попытка
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru = 'Не указан ни уникальный идентификатор формы в параметре %1,
						|ни адрес временного хранилища в %2 в %3.
						|Убедиться, что при обработке результата временное хранилище очищается явно методом %4.'"),
						"ПараметрыВыполнения.ИдентификаторФормы", "ПараметрыВыполнения.АдресРезультата",
						"ДлительныеОперации.ВыполнитьВФоне", "УдалитьИзВременногоХранилища");
				Исключение
					// АПК:154-выкл Не ошибка, а предупреждение (рекомендация разработчику).
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Диагностика'", ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					// АПК:154-вкл 
				КонецПопытки;
			КонецЕсли;
			ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
		ИначеЕсли Не ЭтоАдресВременногоХранилища(ПараметрыВыполнения.АдресРезультата) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Не указан адрес временного хранилища в параметре %1
				|в %2.'"),
				"ПараметрыВыполнения.АдресРезультата", "ДлительныеОперации.ВыполнитьВФоне");
		КонецЕсли;	
		Результат.Вставить("АдресРезультата", ПараметрыВыполнения.АдресРезультата);
	КонецЕсли;
	Если ПараметрыВыполнения.Свойство("ДополнительныйРезультат") Тогда
		Результат.Вставить("АдресДополнительногоРезультата", "");
	КонецЕсли;
	Результат.Вставить("КраткоеПредставлениеОшибки", "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("Сообщения", Новый ФиксированныйМассив(Новый Массив));
	
	Если ПараметрыВыполнения.БезРасширений Тогда
		ПараметрыВыполнения.БезРасширений = ЗначениеЗаполнено(ПараметрыСеанса.ПодключенныеРасширения);
		
	ИначеЕсли Не ПараметрыВыполнения.СРасширениямиБазыДанных
	        И Не ПараметрыВыполнения.ЗапуститьНеВФоне
	        И СтандартныеПодсистемыСервер.ЭтоРазделенныйРежимСеансаБезРазделителей() Тогда
		
		ПараметрыВыполнения.СРасширениямиБазыДанных = Истина;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = ПараметрыПроцедуры;
	Если Не ПараметрыВыполнения.Свойство("ЭтоФункция") Тогда
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
		ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыВыполнения.АдресРезультата);
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ДополнительныйРезультат") И ПараметрыВыполнения.ДополнительныйРезультат Тогда
		Результат.АдресДополнительногоРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(Результат.АдресДополнительногоРезультата);
	КонецЕсли;
	
#Если ВнешнееСоединение Тогда
	ВыполнитьБезФоновогоЗадания = ИнформационнаяБазаФайловая 
		Или ОбщегоНазначения.РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне
		Или (ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне) 
		Или Не ВозможноВыполнитьВФоне(ИмяПроцедуры);
#Иначе
	ВыполнитьБезФоновогоЗадания = Не ПараметрыВыполнения.БезРасширений
		И Не ПараметрыВыполнения.СРасширениямиБазыДанных
		И (ОбщегоНазначения.РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне
			Или (ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне) 
			Или Не ВозможноВыполнитьВФоне(ИмяПроцедуры));
#КонецЕсли

	// Выполнить в основном потоке.
	Если ВыполнитьБезФоновогоЗадания Тогда
		Попытка
			Если ПараметрыВыполнения.Свойство("ЭтоФункция") И ПараметрыВыполнения.ЭтоФункция Тогда
				ВызватьФункцию(ИмяПроцедуры, ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения.АдресРезультата);
			Иначе
				ВызватьПроцедуру(ИмяПроцедуры, ПараметрыЭкспортнойПроцедуры);
			КонецЕсли;
			Результат.Статус = "Выполнено";
		Исключение
			Результат.Статус = "Ошибка";
			Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		КонецПопытки;
		Возврат Результат;
	КонецЕсли;
	
	// Выполнить в фоне.
	БезопасныйРежим = БезопасныйРежим();
	УстановитьОтключениеБезопасногоРежима(Истина);
	Попытка
		Задание = ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры,
			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры, БезопасныйРежим,
			ПараметрыВыполнения.ОжидатьЗавершение <> Неопределено);
	Исключение
		Результат.Статус = "Ошибка";
		Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Иначе
			Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецЕсли;
		Возврат Результат;
	КонецПопытки;
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
		Результат.Статус = "Ошибка";
		Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	ЗаданиеВыполнено = Ложь;
	
	Если ПараметрыВыполнения.ОжидатьЗавершение <> 0 Тогда
		Задание = Задание.ОжидатьЗавершенияВыполнения(ПараметрыВыполнения.ОжидатьЗавершение);
		Если Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			ЗаданиеВыполнено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаданиеВыполнено Тогда
		Если ПараметрыВыполнения.ОжидатьЗавершение <> Неопределено Тогда
			Сообщения = ПолучитьИзОповещений(Истина, Задание.УникальныйИдентификатор, "Сообщения");
		Иначе
			Сообщения = Задание.ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		Результат.Сообщения = Сообщения;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ОперацияВыполнена(Задание.УникальныйИдентификатор), , "Сообщения");
	Возврат Результат;
	
КонецФункции

// Возвращает новую структуру для параметра ПараметрыВыполнения функции ВыполнитьВФоне.
//
// Если ЗапуститьВФоне = Ложь и ЗапуститьНеВФоне = Ложь, то задание будет выполнено в фоне по возможности.
// Запуск выполняется сразу в основном потоке при выполнении любого из следующих условий:
//  * если вызов выполняется в файловой базе во внешнем соединении (в этом режиме фоновые задания не поддерживаются);
//  * если приложение запущено в режиме отладки (параметр /C РежимОтладки) - для упрощения отладки конфигурации;
//  * если в файловой ИБ имеются активные фоновые задания - для снижения времени ожидания пользователя;
//  * если выполняется функция модуля внешней обработки или внешнего отчета.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой 
//                                                  необходимо поместить результат выполнения процедуры.
//                      - Неопределено - если временное хранилище не нужно создавать автоматически на время жизни
//                                       формы, а его адрес предполагается задавать явно в свойстве АдресРезультата.
//                                       В таком случае, временное хранилище нужно очищать явно при обработке результата
//                                       длительной операции с помощью метода УдалитьИзВременногоХранилища.
// Возвращаемое значение:
//   Структура:
//     * ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы, 
//                                 во временное хранилище которой надо поместить результат выполнения процедуры.
//     * ДополнительныйРезультат - Булево     - признак использования дополнительного временного хранилища для передачи 
//                                 результата из фонового задания в родительский сеанс. По умолчанию - Ложь.
//     * ОжидатьЗавершение       - Число
//                               - Неопределено - таймаут в секундах ожидания завершения фонового задания. 
//                                 Если задано Неопределено, то ждать до момента завершения задания. 
//                                 Если задано 0, то ждать завершения задания не требуется. 
//                                 По умолчанию - 2 секунды; а для низкой скорости соединения - 4. 
//     * НаименованиеФоновогоЗадания - Строка - описание фонового задания. По умолчанию - имя процедуры.
//     * КлючФоновогоЗадания      - Строка    - уникальный ключ для активных фоновых заданий, имеющих такое же имя процедуры.
//                                              По умолчанию не задан.
//     * АдресРезультата          - Строка - адрес временного хранилища, в которое должен быть помещен результат
//                                           работы процедуры. Если не задан, адрес формируется автоматически 
//                                           на время жизни формы с помощью идентификатора ИдентификаторФормы.
//     * ЗапуститьВФоне           - Булево - если Истина, то задание будет всегда выполняться в фоне, кроме ситуаций:
//                                  а) если вызов выполняется в файловой базе во внешнем соединении 
//                                  (в этом режиме фоновые задания не поддерживаются);
//                                  б) если выполняется функция модуля внешней обработки или внешнего отчета.
//                                  Кроме того, в файловом варианте при наличии ранее запущенных фоновых заданий,
//                                  новое задание становится в очередь и начинает выполняться после завершения предыдущих.
//                                  Если Ложь, то задание будет выполнено в фоне по возможности. 
//     * ЗапуститьНеВФоне         - Булево - если Истина, задание всегда будет запускаться непосредственно,
//                                  без использования фонового задания.
//     * БезРасширений            - Булево - если Истина, то фоновое задание будет запущено без подключения
//                                  расширений конфигурации. Имеет приоритет над параметром ЗапуститьНеВФоне. 
//     * СРасширениямиБазыДанных  - Булево - если Истина, то фоновое задание будет запущено с последней версией
//                                  расширений конфигурации. Имеет приоритет над параметром ЗапуститьНеВФоне. 
//
Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = ОбщиеПараметрыВыполненияВФоне();
	ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, ИдентификаторФормы);
	Результат.Вставить("ДополнительныйРезультат", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует информацию о ходе выполнения длительной операции.
// Во избежание избыточного потребления памяти и ее утечек при выполнении одной длительной операции 
// не следует сообщать прогресс более 100 раз.
// Если прогресс сообщается менее чем через 3 сек после предыдущего вызова,
// то отправка сообщения пропускается.
//
// Для того чтобы выводить ход выполнения длительной операции для пользователя, следует установить 
// свойство ВыводитьПрогрессВыполнения в Истина (см. ДлительныеОперацииКлиент.ПараметрыОжидания).
//
// Параметры:
//  Процент                 - Число        - процент выполнения.
//  Текст                   - Строка       - информация о текущей операции.
//  ДополнительныеПараметры - Произвольный - любая дополнительная информация, которую необходимо передать на клиент. 
//                                           Значение должно быть простым (сериализуемым в XML-строку).
//
Процедура СообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не СтандартныеПодсистемыПовтИсп.ЭтоСеансДлительнойОперации() Тогда
		Возврат;
	КонецЕсли;
	
	ПередаваемоеЗначение = Новый Структура;
	Если Процент <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Процент", Процент);
	КонецЕсли;
	Если Текст <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("Текст", Текст);
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПередаваемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьОтключениеБезопасногоРежима(Истина);
	ДатаОтправки = ПараметрыСеанса.ДлительныеОперации.ДатаОтправкиСообщенияПрогресса;
	УстановитьОтключениеБезопасногоРежима(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	НоваяДатаОтправки = ТекущаяДатаСеанса();
	Если НоваяДатаОтправки < ДатаОтправки + 3 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьОтключениеБезопасногоРежима(Истина);
	Свойства = Новый Структура(ПараметрыСеанса.ДлительныеОперации);
	Свойства.ДатаОтправкиСообщенияПрогресса = НоваяДатаОтправки;
	ПараметрыСеанса.ДлительныеОперации = Новый ФиксированнаяСтруктура(Свойства);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОтправитьОповещениеКлиенту("Прогресс", ПередаваемоеЗначение);
	
КонецПроцедуры

// Считывает информацию о ходе выполнения длительной операции, 
// записанную процедурой ДлительныеОперации.СообщитьПрогресс.
//
// Рекомендуется получать прогресс через обработчик оповещения,
// который подключается с помощью ДлительныеОперацииКлиент.ОжидатьЗавершение.
//
// Параметры:
//   ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
// Возвращаемое значение:
//   Неопределено, Структура - информация о ходе выполнения фонового задания, записанная процедурой СообщитьПрогресс:
//    * Процент                 - Число  - необязательный. Процент выполнения.
//    * Текст                   - Строка - необязательный. Информация о текущей операции.
//    * ДополнительныеПараметры - Произвольный - необязательный. Любая дополнительная информация.
//
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ПолучитьИзОповещений(Истина, ИдентификаторЗадания, "Прогресс");
	
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// При этом если в длительной операции открывались транзакции, то будет произведен откат последней открытой транзакции.
//
// Таким образом, если длительная операция выполняет обработку (запись) данных, то для полной отмены всей операции
// следует выполнять запись в одной транзакции (в таком случае, будет отменена вся транзакция целиком).
// Если же достаточно, чтобы длительная операция была не отменена целиком, а прервана на достигнутом этапе,
// то, напротив, открывать одну длинную транзакцию не требуется.
// 
// Параметры:
//  ИдентификаторЗадания - см. ДлительныеОперации.ВыполнитьВФоне.
// 
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПараметрыСеанса.ДлительныеОперации.Отмененные.Найти(ИдентификаторЗадания) = Неопределено Тогда
		Свойства = Новый Структура(ПараметрыСеанса.ДлительныеОперации);
		Отмененные = Новый Массив(Свойства.Отмененные);
		Отмененные.Добавить(ИдентификаторЗадания);
		Свойства.Отмененные = Новый ФиксированныйМассив(Отмененные);
		ПараметрыСеанса.ДлительныеОперации = Новый ФиксированнаяСтруктура(Свойства);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Или Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Отмена выполнения фонового задания'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , , КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Проверяет состояние фонового задания по переданному идентификатору.
// При аварийном завершении задания вызывает исключение, возникшее в нем,
// либо исключение общего вида "Не удалось выполнить данную операцию. Подробности см. в Журнале регистрации".
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево - состояние выполнения задания.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Задание = Неопределено;
	Результат = ОперацияВыполнена(ИдентификаторЗадания, Задание);
	
	Если Результат.Статус = "Выполняется" Тогда
		Возврат Ложь;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Результат.Статус = "Отменено" Тогда
		ТекстОшибки = НСтр("ru = 'Операция отменена'");
		
	ИначеЕсли Задание = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Технические подробности:
			           |%2
			           |
			           |См. также журнал регистрации.'"),
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Технические подробности:
			           |Ошибка выполнения фонового задания %2 с идентификатором %3 по причине
			           |%4
			           |
			           |См. также журнал регистрации.'"),
			Результат.КраткоеПредставлениеОшибки,
			Задание.ИмяМетода,
			Строка(ИдентификаторЗадания),
			Результат.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// Получает сообщения пользователю из фонового задания длительной операции.
//
// Рекомендуется получать сообщения через обработчик оповещения,
// который подключается с помощью ДлительныеОперацииКлиент.ОжидатьЗавершение.
// 
// Параметры:
//  УдалятьПолученные    - Булево                  - признак необходимости удаления полученных сообщений.
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания, соответствующего длительной 
//                                                   операции, у которой требуется получить сообщения пользователю. 
//                                                   Если не задан, то сообщения пользователю возвращаются
//                                                   из сеанса текущего пользователя.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - объекты СообщениеПользователю, которые были сформированы в фоновом задании.
//
// Пример:
//   Операция = ДлительныеОперации.ВыполнитьВФоне(...);
//   ...
//   Сообщения = ДлительныеОперации.СообщенияПользователю(Истина, Операция.ИдентификаторЗадания);
//
Функция СообщенияПользователю(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат ПолучитьИзОповещений(УдалятьПолученные, ИдентификаторЗадания, "Сообщения");
	КонецЕсли;
	
	Возврат ПолучитьСообщенияПользователю(УдалятьПолученные);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ВыполнитьВФоне.
//
// Запускает выполнение процедуры в фоновом задании.
// Является менее функциональным аналогом ВыполнитьВФоне, предусмотрена для обратной совместимости.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры,
	Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ЗапущеноЗаданий = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	
	Если ОбщегоНазначения.РежимОтладки()
		Или ЗапущеноЗаданий > 0 Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		ПараметрыВыполнения = ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		БезопасныйРежим = БезопасныйРежим();
		УстановитьОтключениеБезопасногоРежима(Истина);
		Задание = ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры, БезопасныйРежим);
		УстановитьОтключениеБезопасногоРежима(Ложь);
		
		Задание = Задание.ОжидатьЗавершенияВыполнения(ВремяОжидания);
		
		Статус = ОперацияВыполнена(Задание.УникальныйИдентификатор);
		Результат.ЗаданиеВыполнено = Статус.Статус = "Выполнено";
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор
//  Задание - ФоновоеЗадание - возвращаемое значение - найденное фоновое задание.
//          - Неопределено - если фоновое задание не найдено.
//
// Возвращаемое значение:
//   см. НовыйРезультатВыполненияОперации
//
Функция ОперацияВыполнена(Знач ИдентификаторЗадания, Задание = Неопределено) Экспорт
	
	Результат = НовыйРезультатВыполненияОперации();
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено Тогда
		РезультатИзОповещения = ПолучитьИзОповещений(Ложь,
			ИдентификаторЗадания, "ДлительнаяОперацияЗавершена");
		Если РезультатИзОповещения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатИзОповещения);
			Возврат Результат;
		КонецЕсли;
		Результат.КраткоеПредставлениеОшибки =
			НСтр("ru = 'Операция не выполнена из-за аварийного завершения фонового задания.'");
		Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки + Символы.ПС
			+ НСтр("ru = 'Фоновое задание не существует'") + ": " + Строка(ИдентификаторЗадания);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Результат.ПодробноеПредставлениеОшибки);
		Результат.Статус = "Ошибка";
		Возврат Результат;
	КонецЕсли;
	
	ЗаписатьОстаткиСообщенийПользователю(Задание.УникальныйИдентификатор);
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ПараметрыСеанса.ДлительныеОперации.Отмененные.Найти(ИдентификаторЗадания) = Неопределено Тогда
			Результат.Статус = "Ошибка";
			Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
				Результат.КраткоеПредставлениеОшибки   = НСтр("ru = 'Операция отменена администратором.'");
				Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			КонецЕсли;
		Иначе
			Результат.Статус = "Отменено";
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
		Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		
		Результат.Статус = "Ошибка";
		Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Статус = "Выполнено";
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьПроцедуруМодуляОбъектаОбработки(Параметры, АдресХранилища) Экспорт 
	
	Если БезопасныйРежим() <> Ложь Тогда
		БезопасныйРежим = БезопасныйРежим();
	ИначеЕсли Параметры.Свойство("БезопасныйРежим") И Параметры.БезопасныйРежим <> Ложь Тогда
		БезопасныйРежим = Параметры.БезопасныйРежим;
	Иначе
		БезопасныйРежим = Ложь;
	КонецЕсли;
	
	Если Параметры.ЭтоВнешняяОбработка Тогда
		Ссылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДополнительнаяОбработкаСсылка");
		Если ЗначениеЗаполнено(Ссылка) И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			Обработка = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").ОбъектВнешнейОбработки(Ссылка);
		Иначе
			ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные);
			Обработка = ВнешниеОбработки.Создать(Параметры.ИмяОбработки, БезопасныйРежим);
		КонецЕсли;
	Иначе
		Обработка = Обработки[Параметры.ИмяОбработки].Создать();
	КонецЕсли;
	
	Если БезопасныйРежим() = Ложь И БезопасныйРежим <> Ложь Тогда
		УстановитьБезопасныйРежим(БезопасныйРежим);
	КонецЕсли;
	
	Попытка
		ПолноеИмяПроцедуры = Обработка.Метаданные().ПолноеИмя() + "." + Параметры.ИмяМетода;
	Исключение
		ПолноеИмяПроцедуры = Параметры.ИмяМетода;
	КонецПопытки;
	
	УстановитьПолноеИмяПрикладнойПроцедуры(ПолноеИмяПроцедуры);
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Параметры.ПараметрыВыполнения);
	ПараметрыМетода.Добавить(АдресХранилища);
	ОбщегоНазначения.ВыполнитьМетодОбъекта(Обработка, Параметры.ИмяМетода, ПараметрыМетода);
	
КонецПроцедуры

Процедура ВыполнитьПроцедуруМодуляОбъектаОтчета(Параметры, АдресХранилища) Экспорт
	
	Если БезопасныйРежим() <> Ложь Тогда
		БезопасныйРежим = БезопасныйРежим();
	ИначеЕсли Параметры.Свойство("БезопасныйРежим") И Параметры.БезопасныйРежим <> Ложь Тогда
		БезопасныйРежим = Параметры.БезопасныйРежим;
	Иначе
		БезопасныйРежим = Ложь;
	КонецЕсли;
	
	Если Параметры.ЭтоВнешнийОтчет Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные);
		Отчет = ВнешниеОтчеты.Создать(Параметры.ИмяОтчета, БезопасныйРежим);
	Иначе
		Отчет = Отчеты[Параметры.ИмяОтчета].Создать();
	КонецЕсли;
	
	Если БезопасныйРежим() = Ложь И БезопасныйРежим <> Ложь Тогда
		УстановитьБезопасныйРежим(БезопасныйРежим);
	КонецЕсли;
	
	Попытка
		ПолноеИмяПроцедуры = Отчет.Метаданные().ПолноеИмя() + "." + Параметры.ИмяМетода;
	Исключение
		ПолноеИмяПроцедуры = Параметры.ИмяМетода;
	КонецПопытки;
	
	УстановитьПолноеИмяПрикладнойПроцедуры(ПолноеИмяПроцедуры);
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Параметры.ПараметрыВыполнения);
	ПараметрыМетода.Добавить(АдресХранилища);
	ОбщегоНазначения.ВыполнитьМетодОбъекта(Отчет, Параметры.ИмяМетода, ПараметрыМетода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// Параметры:
//  ИмяПараметра - Строка
//  УстановленныеПараметры - Массив из Строка
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ДлительныеОперации" Тогда
		Свойства = Новый Структура;
		Свойства.Вставить("Отмененные", Новый ФиксированныйМассив(Новый Массив));
		Свойства.Вставить("ПолученныеОповещения", Новый ФиксированноеСоответствие(Новый Соответствие));
		Свойства.Вставить("ДатаОтправкиСообщенияПрогресса", '00010101');
		ПараметрыСеанса.ДлительныеОперации = Новый ФиксированнаяСтруктура(Свойства);
		УстановленныеПараметры.Добавить("ДлительныеОперации");
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Оповещение = СерверныеОповещения.НовоеСерверноеОповещение(ИмяОповещения());
	Оповещение.ИмяМодуляОтправки  = "";
	Оповещение.ИмяМодуляПолучения = "ДлительныеОперацииКлиент";
	
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйРезультатВыполненияОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Выполняется");
	Результат.Вставить("КраткоеПредставлениеОшибки", Неопределено);
	Результат.Вставить("ПодробноеПредставлениеОшибки", Неопределено);
	Результат.Вставить("Прогресс", Неопределено);
	Результат.Вставить("Сообщения", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриПериодическомПолученииДанныхКлиентаНаСервере
Процедура ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты) Экспорт
	
	ПараметрыПроверки = Параметры.Получить( // см. ДлительныеОперацииКлиент.ПараметрыПроверкиДлительныхОпераций
		"СтандартныеПодсистемы.БазоваяФункциональность.ПараметрыПроверкиДлительныхОпераций");
	
	Если ПараметрыПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результаты.Вставить("СтандартныеПодсистемы.БазоваяФункциональность.РезультатПроверкиДлительныхОпераций",
		РезультатПроверкиДлительныхОпераций(ПараметрыПроверки));
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ДлительныеОперацииКлиент.ПараметрыПроверкиДлительныхОпераций
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ     - УникальныйИдентификатор - идентификатор задания
//   * Значение - см. ОперацияВыполнена
//  
Функция РезультатПроверкиДлительныхОпераций(Параметры) Экспорт
	
	Результат = Новый Соответствие;
	Для Каждого ИдентификаторЗадания Из Параметры.ЗаданияДляПроверки Цикл
		Результат.Вставить(ИдентификаторЗадания, ОперацияВыполнена(ИдентификаторЗадания));
	КонецЦикла;
	
	Для Каждого ИдентификаторЗадания Из Параметры.ЗаданияДляОтмены Цикл
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		Результат.Вставить(ИдентификаторЗадания, Новый Структура("Статус", "Отменено"));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяПроцедуры,
			ПараметрыВыполнения, ПараметрыПроцедуры = Неопределено, БезопасныйРежим = Ложь, ОтправлятьОповещения = Ложь) Экспорт
	
	КлючФоновогоЗадания = ПараметрыВыполнения.КлючФоновогоЗадания;
	НаименованиеФоновогоЗадания = ?(ПустаяСтрока(ПараметрыВыполнения.НаименованиеФоновогоЗадания),
		ИмяПроцедуры, ПараметрыВыполнения.НаименованиеФоновогоЗадания);
	
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере(Ложь);
	Если ОтправлятьОповещения И Не ЗначениеЗаполнено(ПараметрыКлиента.Получить("КлючСеансаРодителя")) Тогда
		ПараметрыКлиента = Новый Соответствие(ПараметрыКлиента);
		ПараметрыКлиента.Вставить("КлючСеансаРодителя", СерверныеОповещения.КлючСеанса());
		ПараметрыКлиента = Новый ФиксированноеСоответствие(ПараметрыКлиента);
	КонецЕсли;
	
	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("ИмяПроцедуры",       ИмяПроцедуры);
	ВсеПараметры.Вставить("ПараметрыПроцедуры", ПараметрыПроцедуры);
	ВсеПараметры.Вставить("ПараметрыКлиентаНаСервере", ПараметрыКлиента);
	ВсеПараметры.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	ВсеПараметры.Вставить("БезопасныйРежим",     БезопасныйРежим);
	
	Если Не ПараметрыВыполнения.БезРасширений
		И Не ПараметрыВыполнения.СРасширениямиБазыДанных Тогда		
		Справочники.ВерсииРасширений.ВставитьЗарегистрированныйСоставУстановленныхРасширений(ВсеПараметры);
	КонецЕсли;
	
	ПараметрыПроцедурыФоновогоЗадания = Новый Массив;
	ПараметрыПроцедурыФоновогоЗадания.Добавить(ВсеПараметры);
	
	Если ИмяПроцедуры = РегистрыСведений.ПараметрыРаботыПрограммы.ИмяПроцедурыФоновогоЗадания() Тогда
		ИмяПроцедурыФоновогоЗадания = ИмяПроцедурыФоновогоЗаданияПередЗапускомПрограммы();
	Иначе
		ИмяПроцедурыФоновогоЗадания = "ДлительныеОперации.ВыполнитьСКонтекстомКлиента";
	КонецЕсли;
	
	Возврат ВыполнитьФоновоеЗадание(ПараметрыВыполнения,
		ИмяПроцедурыФоновогоЗадания, ПараметрыПроцедурыФоновогоЗадания,
		КлючФоновогоЗадания, НаименованиеФоновогоЗадания);
	
КонецФункции

Функция ПропуститьОбработчикПередЗапускомПрограммы() Экспорт
	
	Если ТекущийРежимЗапуска() <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();	
	Если ФоновоеЗадание = Неопределено
		Или ФоновоеЗадание.ИмяМетода <> ИмяПроцедурыФоновогоЗаданияПередЗапускомПрограммы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает имя процедуры фонового задания, которое является маркером
// для функции ПропуститьОбработчикПередЗапускомПрограммы, чтобы пропустить выполнение
// процедуры СтандартныеПодсистемыСервер.ПередЗапускомПрограммы при обновлении параметров работы программы.
//
Функция ИмяПроцедурыФоновогоЗаданияПередЗапускомПрограммы()
	
	Возврат "ДлительныеОперации.ВыполнитьСКонтекстомКлиентаПередЗапускомПрограммы";
	
КонецФункции

Процедура ВыполнитьСКонтекстомКлиентаПередЗапускомПрограммы(ВсеПараметры) Экспорт
	
	ВыполнитьСКонтекстомКлиента(ВсеПараметры);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
//
Функция ПолноеИмяПрикладнойПроцедурыДлительнойОперации() Экспорт
	
	Если Не СтандартныеПодсистемыПовтИсп.ЭтоСеансДлительнойОперации() Тогда
		Возврат "";
	КонецЕсли;
	
	ПолноеИмя = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере(Ложь).Получить(
		"ПолноеИмяПрикладнойПроцедурыДлительнойОперации");
	
	Возврат Строка(ПолноеИмя);
	
КонецФункции

Процедура УстановитьПолноеИмяПрикладнойПроцедуры(ПолноеИмяПроцедуры)
	
	Если Не СтандартныеПодсистемыПовтИсп.ЭтоСеансДлительнойОперации() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиента = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	ПараметрыКлиента.Вставить("ПолноеИмяПрикладнойПроцедурыДлительнойОперации", ПолноеИмяПроцедуры);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
КонецПроцедуры

// Продолжение процедуры ЗапуститьФоновоеЗаданиеСКонтекстомКлиента.
Процедура ВыполнитьСКонтекстомКлиента(ВсеПараметры) Экспорт
	
	ПараметрыКлиента = ВсеПараметры.ПараметрыКлиентаНаСервере;
	Если ЗначениеЗаполнено(ПараметрыКлиента.Получить("КлючСеансаРодителя"))
	   И Не ЗначениеЗаполнено(ПараметрыКлиента.Получить("ИдентификаторЗаданияМногопоточногоПроцесса")) Тогда
		
		ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ФоновоеЗадание <> Неопределено
		   И ВсеПараметры.ИмяПроцедуры = ИмяМетодаМногопоточногоПроцесса() Тогда
			ПараметрыКлиента = Новый Соответствие(ПараметрыКлиента);
			ПараметрыКлиента.Вставить("ИдентификаторЗаданияМногопоточногоПроцесса",
				ФоновоеЗадание.УникальныйИдентификатор);
			ПараметрыКлиента = Новый ФиксированноеСоответствие(ПараметрыКлиента);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = ПараметрыКлиента;
	Справочники.ВерсииРасширений.ВосстановитьЗарегистрированныйСоставУстановленныхРасширений(ВсеПараметры);
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если БезопасныйРежим() = Ложь И ВсеПараметры.БезопасныйРежим <> Ложь Тогда
		Если ВРег(ВсеПараметры.ИмяПроцедуры) = ВРег("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки")
		 Или ВРег(ВсеПараметры.ИмяПроцедуры) = ВРег("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОтчета") Тогда
			
			ВсеПараметры.ПараметрыПроцедуры[0].Вставить("БезопасныйРежим", ВсеПараметры.БезопасныйРежим);
		Иначе
			УстановитьБезопасныйРежим(ВсеПараметры.БезопасныйРежим);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПолноеИмяПрикладнойПроцедуры(ВсеПараметры.ИмяПроцедуры);
	Результат = НовыйРезультатВыполненияОперации();
	Попытка
		Если ВсеПараметры.ПараметрыВыполнения.Свойство("ЭтоФункция") И ВсеПараметры.ПараметрыВыполнения.ЭтоФункция Тогда
			ВызватьФункцию(ВсеПараметры.ИмяПроцедуры, ВсеПараметры.ПараметрыПроцедуры, ВсеПараметры.ПараметрыВыполнения.АдресРезультата);
		Иначе
			ВызватьПроцедуру(ВсеПараметры.ИмяПроцедуры, ВсеПараметры.ПараметрыПроцедуры);
		КонецЕсли;
		Результат.Статус = "Выполнено";
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат.Статус = "Ошибка";
		Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		УстановитьПолноеИмяПрикладнойПроцедуры("ДлительныеОперации.ВыполнитьСКонтекстомКлиента");
		ОтправитьОповещениеКлиенту("ДлительнаяОперацияЗавершена", Результат);
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПолноеИмяПрикладнойПроцедуры("ДлительныеОперации.ВыполнитьСКонтекстомКлиента");
	ОтправитьОповещениеКлиенту("ДлительнаяОперацияЗавершена", Результат);
	
КонецПроцедуры

Процедура ВызватьПроцедуру(ИмяПроцедуры, ПараметрыВызова)
	
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	ЭтоПроцедураМодуляОбработки = (ЧастиИмени.Количество() = 4) И ВРег(ЧастиИмени[2]) = "МОДУЛЬОБЪЕКТА";
	Если Не ЭтоПроцедураМодуляОбработки Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяПроцедуры, ПараметрыВызова);
		Возврат;
	КонецЕсли;
	
	ЭтоОбработка = ВРег(ЧастиИмени[0]) = "ОБРАБОТКА";
	ЭтоОтчет = ВРег(ЧастиИмени[0]) = "ОТЧЕТ";
	Если ЭтоОбработка Или ЭтоОтчет Тогда
		МенеджерОбъекта = ?(ЭтоОтчет, Отчеты, Обработки);
		ОбработкаОтчетОбъект = МенеджерОбъекта[ЧастиИмени[1]].Создать();
		ОбщегоНазначения.ВыполнитьМетодОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыВызова);
		Возврат;
	КонецЕсли;
	
	ЭтоВнешняяОбработка = ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА";
	ЭтоВнешнийОтчет = ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ";
	Если ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные);
		МенеджерОбъекта = ?(ЭтоВнешнийОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		ОбработкаОтчетОбъект = МенеджерОбъекта.Создать(ЧастиИмени[1], БезопасныйРежим());
		ОбщегоНазначения.ВыполнитьМетодОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыВызова);
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный формат параметра %2 (переданное значение: %1)'"), ИмяПроцедуры, "ИмяПроцедуры");
	
КонецПроцедуры

Процедура ВызватьФункцию(ИмяФункции, ПараметрыПроцедуры, АдресРезультата)
	
	ЧастиИмени = СтрРазделить(ИмяФункции, ".");
	ЭтоПроцедураМодуляОбработки = (ЧастиИмени.Количество() = 4) И ВРег(ЧастиИмени[2]) = "МОДУЛЬОБЪЕКТА";
	Если Не ЭтоПроцедураМодуляОбработки Тогда
		Результат = ОбщегоНазначения.ВызватьФункциюКонфигурации(ИмяФункции, ПараметрыПроцедуры);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ЭтоОбработка = ВРег(ЧастиИмени[0]) = "ОБРАБОТКА";
	ЭтоОтчет = ВРег(ЧастиИмени[0]) = "ОТЧЕТ";
	Если ЭтоОбработка Или ЭтоОтчет Тогда
		МенеджерОбъекта = ?(ЭтоОтчет, Отчеты, Обработки);
		ОбработкаОтчетОбъект = МенеджерОбъекта[ЧастиИмени[1]].Создать();
		Результат = ОбщегоНазначения.ВызватьФункциюОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыПроцедуры);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ЭтоВнешняяОбработка = ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА";
	ЭтоВнешнийОтчет = ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ";
	Если ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные);
		МенеджерОбъекта = ?(ЭтоВнешнийОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		ОбработкаОтчетОбъект = МенеджерОбъекта.Создать(ЧастиИмени[1], БезопасныйРежим());
		Результат = ОбщегоНазначения.ВызватьФункциюОбъекта(ОбработкаОтчетОбъект, ЧастиИмени[3], ПараметрыПроцедуры);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный формат параметра %2 (переданное значение: %1)'"), ИмяФункции, "ИмяФункции");
	
КонецПроцедуры

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Возврат Задание;
	
КонецФункции

Функция ПолучитьИзОповещений(ПропускатьПолученные, ИдентификаторЗадания, ВидОповещений)
	
	ЗаписатьОстаткиСообщенийПользователю(ИдентификаторЗадания);
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследнееОповещение = Неопределено;
	Если ПропускатьПолученные Тогда
		ПоследниеОповещения = ПараметрыСеанса.ДлительныеОперации.ПолученныеОповещения.Получить(ИдентификаторЗадания);
		Если ПоследниеОповещения <> Неопределено Тогда
			ПоследнееОповещение = ПоследниеОповещения[ВидОповещений];
		КонецЕсли;
	КонецЕсли;
	Оповещения = СерверныеОповещения.СерверныеОповещенияДляКлиента(ИдентификаторЗадания, ПоследнееОповещение);
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	СообщенияОповещений = Новый Массив;
	Если ВидОповещений = "Сообщения" Тогда
		Результат = Новый ФиксированныйМассив(СообщенияОповещений);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Для Каждого Оповещение Из Оповещения Цикл
		Параметры = Оповещение.Содержимое.Результат;
		Если ТипЗнч(Параметры) <> Тип("Структура")
		 Или Не Параметры.Свойство("Результат")
		 Или ТипЗнч(Параметры.Результат) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если ВидОповещений = "ДлительнаяОперацияЗавершена"
		   И Параметры.Свойство("ВидОповещения")
		   И Параметры.ВидОповещения = ВидОповещений Тогда
			Возврат Параметры.Результат;
		КонецЕсли;
		Если Не Параметры.Результат.Свойство(ВидОповещений)
		 Или ВидОповещений = "Сообщения"
		   И ТипЗнч(Параметры.Результат[ВидОповещений]) <> Тип("ФиксированныйМассив")
		 Или ВидОповещений = "Прогресс"
		   И ТипЗнч(Параметры.Результат[ВидОповещений]) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если ВидОповещений = "Сообщения" Тогда
			Для Каждого Сообщение Из Параметры.Результат.Сообщения Цикл
				СообщенияОповещений.Добавить(Сообщение)
			КонецЦикла;
			Результат = Новый ФиксированныйМассив(СообщенияОповещений);
		Иначе
			Результат = Параметры.Результат.Прогресс;
		КонецЕсли;
	КонецЦикла;
	
	Если ПропускатьПолученные И ЗначениеЗаполнено(Оповещение) Тогда
		Оповещение.Удалить("Содержимое");
		УстановитьОтключениеБезопасногоРежима(Истина);
		УстановитьПривилегированныйРежим(Истина);
		Свойства = Новый Структура(ПараметрыСеанса.ДлительныеОперации);
		ПолученныеОповещения = Новый Соответствие(Свойства.ПолученныеОповещения);
		ПоследниеОповещения = ПолученныеОповещения.Получить(ИдентификаторЗадания);
		Если ПоследниеОповещения = Неопределено Тогда
			ПоследниеОповещения = Новый Структура("Сообщения, Прогресс");
		Иначе
			ПоследниеОповещения = Новый Структура(ПоследниеОповещения);
		КонецЕсли;
		ПоследниеОповещения[ВидОповещений] = Новый ФиксированнаяСтруктура(Оповещение);
		ПолученныеОповещения.Вставить(ИдентификаторЗадания, Новый ФиксированнаяСтруктура(ПоследниеОповещения));
		КлючиУстаревших = Новый Массив;
		Для Каждого КлючИЗначение Из ПолученныеОповещения Цикл
			ПолученноеОповещение = ?(КлючИЗначение.Значение.Сообщения = Неопределено,
				КлючИЗначение.Значение.Прогресс, КлючИЗначение.Значение.Сообщения);
			Если ПолученноеОповещение.ДатаДобавления + 60*60 < ТекущаяДатаСеанса() Тогда
				КлючиУстаревших.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Ключ Из КлючиУстаревших Цикл
			ПолученныеОповещения.Удалить(Ключ);
		КонецЦикла;
		Свойства.ПолученныеОповещения = Новый ФиксированноеСоответствие(ПолученныеОповещения);
		ПараметрыСеанса.ДлительныеОперации = Новый ФиксированнаяСтруктура(Свойства);
		УстановитьПривилегированныйРежим(Ложь);
		УстановитьОтключениеБезопасногоРежима(Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяОповещения()
	
	Возврат "СтандартныеПодсистемы.БазоваяФункциональность.ДлительныеОперации";
	
КонецФункции

// Параметры:
//  Данные - см. СерверныеОповещения.НовыеДанныеСообщения
// 
// Возвращаемое значение:
//  Булево
//
Функция ПропуститьОповещение(Данные) Экспорт
	
	// Когда система взаимодействия не подключена
	// оповещение о завершении нужно пропускать,
	// так как оно требует дополнительного серверного
	// вызова ДлительныеОперацииВызовСервера.ФоновоеЗаданиеЗавершено.
	// При отсутствии системы взаимодействия этот контроль не нужен,
	// так как используется функция ОперацияВыполнена
	// в рамках дополнительного контроля завершения активных операций
	// через функцию РезультатПроверкиДлительныхОпераций.
	
	Возврат Данные.ИмяОповещения = ИмяОповещения()
	      И Данные.Результат.ВидОповещения = "ДлительнаяОперацияЗавершена"
	      И Не СерверныеОповещения.СистемаВзаимодействийПодключена();
	
КонецФункции

Процедура ОтправитьОповещениеКлиенту(ВидОповещения, ПередаваемоеЗначение, ФоновоеЗадание = Неопределено) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьСообщенияПользователю = ФоновоеЗадание <> Неопределено И ВидОповещения = "СообщениеПользователю";
	Если ЗаписатьСообщенияПользователю Тогда
		КлючСеансаРодителя = СерверныеОповещения.КлючСеанса();
		ИдентификаторОсновногоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	Иначе
		КлючСеансаРодителя = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере(Ложь).Получить(
			"КлючСеансаРодителя");
		Если Не ЗначениеЗаполнено(КлючСеансаРодителя) Тогда
			Возврат;
		КонецЕсли;
		ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ФоновоеЗадание = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИдентификаторЗаданияМногопоточногоПроцесса =
			СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере(Ложь).Получить(
				"ИдентификаторЗаданияМногопоточногоПроцесса");
		ИдентификаторОсновногоЗадания = ?(ЗначениеЗаполнено(ИдентификаторЗаданияМногопоточногоПроцесса),
			ИдентификаторЗаданияМногопоточногоПроцесса, ФоновоеЗадание.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ВидОповещения = "ДлительнаяОперацияЗавершена" Тогда
		Если ЗначениеЗаполнено(ИдентификаторЗаданияМногопоточногоПроцесса) Тогда
			Возврат;
		КонецЕсли;
		Результат = ПередаваемоеЗначение;
	Иначе
		Результат = НовыйРезультатВыполненияОперации();
	КонецЕсли;
	Если ВидОповещения = "СообщениеПользователю" Тогда
		Результат.Сообщения = Новый ФиксированныйМассив(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПередаваемоеЗначение));
	ИначеЕсли ВидОповещения = "Прогресс" Тогда
		Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			ОтправитьОповещениеКлиенту("СообщениеПользователю", Сообщение);
		КонецЦикла;
		Результат.Сообщения = Новый ФиксированныйМассив(Новый Массив);
		Результат.Прогресс = ПередаваемоеЗначение;
	ИначеЕсли ВидОповещения = "ДлительнаяОперацияЗавершена" Тогда
		Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			ОтправитьОповещениеКлиенту("СообщениеПользователю", Сообщение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОповещения, ИдентификаторЗадания, Результат",
		ВидОповещения, ИдентификаторОсновногоЗадания, Результат);
	
	КлючиСеансов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючСеансаРодителя);
	Адресаты = Новый Соответствие;
	Адресаты.Вставить(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор, КлючиСеансов);
	
	СерверныеОповещения.ОтправитьСерверноеОповещениеСИдентификаторомГруппы(ИмяОповещения(),
		ПараметрыОповещения, Адресаты, Не ЗаписатьСообщенияПользователю, ИдентификаторОсновногоЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
КонецПроцедуры

// Запись в очередь еще не записанных сообщений, которые были отправлены
// без использования процедуры ОбщегоНазначения.СообщитьПользователю.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор
//
Процедура ЗаписатьОстаткиСообщенийПользователю(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из Сообщения Цикл
			ОтправитьОповещениеКлиенту("СообщениеПользователю", Сообщение, ФоновоеЗадание);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьФоновыеЗаданияВФайловойИБ()
	
	ЗапущеноЗаданийВФайловойИБ = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданийВФайловойИБ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	Возврат ЗапущеноЗаданийВФайловойИБ > 0;

КонецФункции

Функция ВозможноВыполнитьВФоне(ИмяПроцедуры)
	
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоВнешняяОбработка = (ВРег(ЧастиИмени[0]) = "ВНЕШНЯЯОБРАБОТКА");
	ЭтоВнешнийОтчет = (ВРег(ЧастиИмени[0]) = "ВНЕШНИЙОТЧЕТ");
	Возврат Не (ЭтоВнешняяОбработка Или ЭтоВнешнийОтчет);

КонецФункции

Функция ВыполнитьФоновоеЗадание(ПараметрыВыполнения, ИмяМетода, Параметры, Ключ, Наименование)
	
	Если ТекущийРежимЗапуска() = Неопределено
		И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
		Если ПараметрыВыполнения.ОжидатьЗавершение = Неопределено И Сеанс.ИмяПриложения = "BackgroundJob" Тогда
			ВызватьИсключение НСтр("ru = 'В файловой информационной базе невозможно одновременно выполнять более одного фонового задания'");
		ИначеЕсли Сеанс.ИмяПриложения = "COMConnection" Тогда
			ВызватьИсключение НСтр("ru = 'В файловой информационной базе можно запустить фоновое задание только из клиентского приложения'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыполнения.БезРасширений Тогда
		Возврат РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеБезРасширений(ИмяМетода, Параметры, Ключ, Наименование);
	
	ИначеЕсли ПараметрыВыполнения.СРасширениямиБазыДанных Тогда
		Возврат РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(ИмяМетода, Параметры, Ключ, Наименование);
	Иначе
		Возврат ФоновыеЗадания.Выполнить(ИмяМетода, Параметры, Ключ, Наименование);
	КонецЕсли;
	
КонецФункции

Функция СписокПараметров(Знач Параметр1, Знач Параметр2, Знач Параметр3, Знач Параметр4,
	Знач Параметр5, Знач Параметр6, Знач Параметр7)
	
	ПереданныеПараметры = Новый Массив;
	ПереданныеПараметры.Добавить(Параметр7);
	ПереданныеПараметры.Добавить(Параметр6);
	ПереданныеПараметры.Добавить(Параметр5);
	ПереданныеПараметры.Добавить(Параметр4);
	ПереданныеПараметры.Добавить(Параметр3);
	ПереданныеПараметры.Добавить(Параметр2);
	ПереданныеПараметры.Добавить(Параметр1);
	
	Результат = Новый Массив;
	
	Для Каждого Параметр Из ПереданныеПараметры Цикл
		Если Результат.Количество() = 0 И Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(0, Параметр);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПодготовитьПараметрыВыполнения(ПереданныйПараметр, ДляФункции)
	
	Результат = ОбщиеПараметрыВыполненияВФоне();
	
	Если ЗначениеЗаполнено(ПереданныйПараметр) Тогда
		Если ТипЗнч(ПереданныйПараметр) = Тип("Структура") Тогда
			Результат = ПереданныйПараметр;
		ИначеЕсли ДляФункции Тогда
			Идентификатор = Неопределено;
			Если ТипЗнч(ПереданныйПараметр) = Тип("ФормаКлиентскогоПриложения") Тогда
				Идентификатор = ПереданныйПараметр.УникальныйИдентификатор;
			ИначеЕсли ТипЗнч(ПереданныйПараметр) = Тип("УникальныйИдентификатор") Тогда
				Идентификатор = ПереданныйПараметр;
			КонецЕсли;
			ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ЭтоФункция", ДляФункции);
	Возврат Результат;
	
КонецФункции

Функция ОбщиеПараметрыВыполненияВФоне()
	
	Результат = Новый Структура;
	Результат.Вставить("ОжидатьЗавершение", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8));
	Результат.Вставить("НаименованиеФоновогоЗадания", "");
	Результат.Вставить("КлючФоновогоЗадания", "");
	Результат.Вставить("ЗапуститьНеВФоне", Ложь);
	Результат.Вставить("ЗапуститьВФоне", Ложь);
	Результат.Вставить("БезРасширений", Ложь);
	Результат.Вставить("СРасширениямиБазыДанных", Ложь);
	Результат.Вставить("ПрерватьВыполнениеЕслиОшибка", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПараметрыВыполненияДляВозвратаРезультата(Параметры, ИдентификаторФормы)
	
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы); 
	Параметры.Вставить("АдресРезультата", Неопределено);
	
КонецПроцедуры

// Многопоточные операции

Функция ИмяМетодаМногопоточногоПроцесса()
	Возврат "ДлительныеОперации.ВыполнитьМногопоточныйПроцесс";
КонецФункции

Функция ВыполнитьМногопоточныйПроцесс(ПараметрыОперации) Экспорт
	
	УдалитьНесуществующиеПотоки();
	
	ИдентификаторФормы = ПараметрыОперации.ПараметрыОперации.ИдентификаторФормы;
	ПотокиПроцесса = ПотокиДлительныхОпераций(ИдентификаторФормы);
	
	РезультатДлительнойОперации = НовыйРезультатДлительнойОперации();
	
	Порции = ПараметрыОперации.ПараметрыМетода;
	Результаты = Новый Соответствие();

	Для каждого КлючЗначение Из Порции Цикл
		Результаты.Вставить(КлючЗначение.Ключ, Новый Структура(Новый ФиксированнаяСтруктура(РезультатДлительнойОперации)));
		Результаты[КлючЗначение.Ключ].АдресРезультата = ПараметрыОперации.АдресРезультатов[КлючЗначение.Ключ];
	КонецЦикла;

	КоличествоОбработанныхПорций = 0;
	
	ЗавершитьДосрочно = Ложь;
	
	Попытка
		
		Для Каждого КлючЗначение Из Порции Цикл
			
			ПорцияОбработана = Ложь;
			Пока Не ПорцияОбработана Цикл
				
				Поток = ДобавитьПоток(ПараметрыОперации, ПотокиПроцесса, ИдентификаторФормы, КлючЗначение.Ключ, КлючЗначение.Значение);
				
				Если ТипЗнч(Поток) =Тип("СтрокаТаблицыЗначений") Тогда
					Результат = ВыполнитьПоток(ПараметрыОперации, Поток, Результаты[КлючЗначение.Ключ], ИдентификаторФормы);
					
					ЗаполнитьЗначенияСвойств(Результаты[КлючЗначение.Ключ], Результат);
					
					Если Результат.Статус = "Ошибка" И ПараметрыОперации.ПрерватьВыполнениеЕслиОшибка Тогда
						ЗавершитьДосрочно = Истина;
						Прервать;
					КонецЕсли;
					ПорцияОбработана = Истина;
				
				КонецЕсли;
				
				ОтправитьСообщенияПотока(Поток.ИдентификаторЗадания);
				
				СтатусОжидания = ОжидатьСвободныйПоток(ИдентификаторФормы, Результаты, Поток.ИдентификаторЗадания, ПараметрыОперации.ПрерватьВыполнениеЕслиОшибка);
				
				Если Результат.Статус = "Ошибка" Или СтатусОжидания = Неопределено Тогда
					ЗавершитьДосрочно = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗавершитьДосрочно Тогда
				РезультатДлительнойОперации.Статус = "Ошибка";
				ОтменитьВыполнениеВсехПотоков(Результаты, ИдентификаторФормы);
				Прервать;
			КонецЕсли;
			
			КоличествоОбработанныхПорций = КоличествоОбработанныхПорций + 1;
			Процент = Окр(КоличествоОбработанныхПорций * 100 / Порции.Количество());
			Процент = ?(Процент < 100, Процент, 99);
			СообщитьПрогресс(Процент, Строка(КлючЗначение.Ключ), "ПрогрессМногопоточногоПроцесса");
			
		КонецЦикла;
		
		ОжидатьЗавершениеВсехПотоков(Результаты, ИдентификаторФормы, ПараметрыОперации.ПрерватьВыполнениеЕслиОшибка);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		РезультатДлительнойОперации.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		РезультатДлительнойОперации.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		РезультатДлительнойОперации.Статус                       = "Ошибка";
		
		ЗаписатьОшибку(РезультатДлительнойОперации.ПодробноеПредставлениеОшибки);
		
		ОтменитьВыполнениеВсехПотоков(Результаты, ИдентификаторФормы);
		
	КонецПопытки;
	
	Для каждого Результат Из Результаты Цикл
		
		Если Результат.Значение = Неопределено Тогда
			Продолжить;
		ИначеЕсли Результат.Значение.Статус = "Ошибка" Тогда
			РезультатДлительнойОперации.Статус = "Ошибка";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результаты;
	
КонецФункции

Функция ДобавитьПоток(ПараметрыОперации, Потоки, ИдентификаторПроцесса, КлючПотока, ПараметрыПотока)
	
	Поток = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДлительныеОперации"); 
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если КоличествоРаботающихПотоков() <= ДопустимоеКоличествоПотоков() Тогда
			
			Поток = Потоки.Добавить();
			Поток.ИдентификаторПотока   = Новый УникальныйИдентификатор;
			Поток.ИдентификаторПроцесса = ИдентификаторПроцесса;
			Поток.ПараметрыМетода       = ПараметрыПотока;
			Поток.КлючПотока            = КлючПотока;
			
			УстановитьПривилегированныйРежим(Истина);
			
			НаборЗаписей = РегистрыСведений.ДлительныеОперации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторПотока.Установить(Поток.ИдентификаторПотока);
			НаборЗаписей.Прочитать();
			Запись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, Поток, , "ИдентификаторПотока,ПараметрыМетода,КлючПотока");
			Запись.ИдентификаторПотока = Поток.ИдентификаторПотока;
			Запись.ПараметрыМетода = Новый ХранилищеЗначения(Поток.ПараметрыМетода);
			Запись.КлючПотока      = Новый ХранилищеЗначения(Поток.КлючПотока);
			
			НаборЗаписей.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Поток;
	
КонецФункции

// Выполнить указанный поток
//
// Параметры:
//  ОписаниеПотока - Структура
//  Поток - СтрокаТаблицыЗначений: см. НовоеОписаниеПотоков
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, если есть.
// 
// Возвращаемое значение:
//   см. ВыполнитьВФоне
//
Функция ВыполнитьПоток(ОписаниеПотока, Поток, Результат, ИдентификаторФормы = Неопределено)
	
	ПараметрыВыполнения = ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Поток.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Результат.АдресРезультата);
	Поток.АдресРезультата = ПараметрыВыполнения.АдресРезультата;
	
	ПараметрыВыполнения = ПодготовитьПараметрыВыполнения(ПараметрыВыполнения, ОписаниеПотока.ДляФункции);
	
	УстановитьПолноеИмяПрикладнойПроцедуры(ОписаниеПотока.ИмяМетода);
	РезультатЗапуска = ВыполнитьВФоне(ОписаниеПотока.ИмяМетода, Поток.ПараметрыМетода, ПараметрыВыполнения);
	УстановитьПолноеИмяПрикладнойПроцедуры(ИмяМетодаМногопоточногоПроцесса());
	
	Если РезультатЗапуска.Статус = "Выполняется" Тогда
		Поток.ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
	ИначеЕсли РезультатЗапуска.Статус <> "Выполняется" И РезультатЗапуска.Статус <> "Выполнено" Тогда
		УдалитьПоток(Поток.ИдентификаторПотока);
		Возврат РезультатЗапуска;
	КонецЕсли;
	
	СохранитьПоток(Поток);
	
	Возврат РезультатЗапуска;
	
КонецФункции

// Ожидать, пока количество выполняющихся потоков не станет меньше максимального.
//
// Параметры:
//  Группы - Соответствие
//
Функция ОжидатьСвободныйПоток(ИдентификаторПроцесса, Результаты, ИдентификаторЗадания, ЗавершитьДосрочноЕслиОшибка)
	
	Потоки = ПотокиДлительныхОпераций();
	МаксимумПотоков = ДопустимоеКоличествоПотоков();
	
	Пока Потоки.Количество() >= МаксимумПотоков Цикл
		
		ЕстьЗавершенныеПотоки = ЕстьЗавершенныеПотоки(Потоки, Результаты, ЗавершитьДосрочноЕслиОшибка);
		
		Если ЗавершитьДосрочноЕслиОшибка И ЕстьЗавершенныеПотоки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЕстьЗавершенныеПотоки Тогда
			Продолжить;
		КонецЕсли;
		
		ОтправитьСообщенияПотока(ИдентификаторЗадания);
		
		ОжидатьЗавершениеПотока(Потоки[0]);
		
		Потоки = ПотокиДлительныхОпераций();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Отправляет сообщения потока, которые были выведены
// без использования процедуры ОбщегоНазначения.СообщитьПользователю.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор
//
Процедура ОтправитьСообщенияПотока(Знач ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Сообщения Цикл
		ОтправитьОповещениеКлиенту("СообщениеПользователю", Сообщение);
	КонецЦикла;

КонецПроцедуры

// Ожидать завершение всех потоков.
//
// Параметры:
//  Группы - Соответствие
//
Процедура ОжидатьЗавершениеВсехПотоков(Результаты, ИдентификаторФормы, ЗавершитьДосрочноЕслиОшибка)
	
	Потоки = ПотокиДлительныхОпераций(ИдентификаторФормы);
	
	Пока Потоки.Количество() > 0 Цикл
		ЕстьЗавершенныеПотоки = ЕстьЗавершенныеПотоки(Потоки, Результаты, ЗавершитьДосрочноЕслиОшибка);
		
		Если ЕстьЗавершенныеПотоки = Неопределено Тогда
			ОтменитьВыполнениеВсехПотоков(Результаты, ИдентификаторФормы);
			Прервать;
		КонецЕсли;
		
		Если Не ЕстьЗавершенныеПотоки Тогда
			ОжидатьЗавершениеПотока(Потоки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Ожидать завершение потока в течение указанной длительности.
//
// Параметры:
//   Поток - СтрокаТаблицыЗначений - поток, завершение которого необходимо ожидать.
//   Длительность - Число - максимальная длительность ожидания в секундах.
//
// Возвращаемое значение:
//  Булево - Истина - поток выполнен, Ложь - поток еще выполняется.
//
Функция ОжидатьЗавершениеПотока(Поток, Длительность = 1)
	
	Если ЗначениеЗаполнено(Поток.ИдентификаторЗадания) Тогда
		
		ОтправитьСообщенияПотока(Поток.ИдентификаторЗадания);
		
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Поток.ИдентификаторЗадания);
		
		Если Задание <> Неопределено Тогда
			Задание = Задание.ОжидатьЗавершенияВыполнения(Длительность);
			ЗаданиеЗавершено = (Задание.Состояние <> СостояниеФоновогоЗадания.Активно);
			Возврат ЗаданиеЗавершено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьЗавершенныеПотоки(Потоки, Результаты, ЗавершитьДосрочноЕслиОшибка)
	
	ЕстьЗавершенныеПотоки = Ложь;
	
	Индекс = Потоки.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		Поток = Потоки[Индекс];
		
		ИдентификаторЗадания = Поток.ИдентификаторЗадания;
		КлючПотока = Поток.КлючПотока.Получить();
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			Попытка
				ЗаданиеВыполнено = ЗаданиеВыполнено(ИдентификаторЗадания);
				Если КлючПотока <> Неопределено И ЗаданиеВыполнено = Истина Тогда
					Результаты[КлючПотока].Статус = "Выполнено";
				КонецЕсли;
			
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаданиеВыполнено = Неопределено;
				
				Если КлючПотока <> Неопределено Тогда
					
					Результаты[КлючПотока].Статус = "Ошибка";
					Результаты[КлючПотока].КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
					Результаты[КлючПотока].ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					
					Если ЗавершитьДосрочноЕслиОшибка = Истина Тогда
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Или ЗаданиеВыполнено <> Ложь Тогда
			
			УдалитьПоток(Поток.ИдентификаторПотока);
			Потоки.Удалить(Поток);
			ЕстьЗавершенныеПотоки = Истина;
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ЕстьЗавершенныеПотоки;
	
КонецФункции

// Отменить выполнение потоков, если они активны.
// 
// Параметры:
//  Потоки - см. НовоеОписаниеПотоков
//  ПараметрыОперации - Структура
// 
Процедура ОтменитьВыполнениеВсехПотоков(Результаты, ИдентификаторФормы) Экспорт
	
	Потоки = ПотокиДлительныхОпераций(ИдентификаторФормы);
	
	ИндексПотока = Потоки.Количество() - 1;
	Пока ИндексПотока >= 0 Цикл
		Поток = Потоки[ИндексПотока];
		
		Если ЗначениеЗаполнено(Поток.ИдентификаторЗадания) Тогда
			ОтменитьВыполнениеЗадания(Поток.ИдентификаторЗадания);
		КонецЕсли;
		
		КлючПотока = Поток.КлючПотока.Получить();
		
		Если КлючПотока <> Неопределено Тогда
			Результаты[КлючПотока].Статус = "Отменено";
		КонецЕсли;
		
		УдалитьПоток(Поток.ИдентификаторПотока);
		Потоки.Удалить(ИндексПотока);
		ИндексПотока = ИндексПотока -1;
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить данные о потоках, если они активны.
// 
Процедура УдалитьНесуществующиеПотоки()
	
	Потоки = ПотокиДлительныхОпераций();
	
	ИндексПотока = Потоки.Количество() - 1;
	Пока ИндексПотока >= 0 Цикл
		Поток = Потоки[ИндексПотока];
		
		Если Не ЗначениеЗаполнено(Поток.ИдентификаторЗадания) Тогда
			УдалитьПоток(Поток.ИдентификаторПотока);
		Иначе 
			Задание = НайтиЗаданиеПоИдентификатору(Поток.ИдентификаторЗадания);
	
			Если Задание = Неопределено
				Или Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				УдалитьПоток(Поток.ИдентификаторПотока);
			КонецЕсли;
			
		КонецЕсли;
		
		Потоки.Удалить(ИндексПотока);
		ИндексПотока = ИндексПотока -1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьПоток(Поток)
	
	Идентификатор = Поток.ИдентификаторПотока;
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДлительныеОперации"); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторПотока", Идентификатор);
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.ДлительныеОперации.СоздатьНаборЗаписей();
	
		НаборЗаписей.Отбор.ИдентификаторПотока.Установить(Идентификатор);
		НаборЗаписей.Прочитать();
	
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(Запись, Поток, , "ИдентификаторПотока,ПараметрыМетода,КлючПотока");
		Запись.ИдентификаторПотока = Идентификатор;
		Запись.ПараметрыМетода = Новый ХранилищеЗначения(Поток.ПараметрыМетода);
		Запись.КлючПотока      = Новый ХранилищеЗначения(Поток.КлючПотока);
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьПоток(ИдентификаторПотока)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДлительныеОперации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПотока.Установить(ИдентификаторПотока);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает количество потоков многопоточной длительной операции.
//
// Возвращаемое значение:
//  Число - количество потоков.
//
Функция ДопустимоеКоличествоПотоков()
	
	Если ОбщегоНазначения.РазделениеВключено() 
		Или ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			Возврат 1;
	КонецЕсли;
	
	ДопустимоеКоличествоПотоков = Константы.КоличествоПотоковДлительныхОпераций.Получить();
	
	Возврат КоличествоПотоковСУчетомУправляющегоПотока(ДопустимоеКоличествоПотоков);
	
КонецФункции

Функция КоличествоПотоковСУчетомУправляющегоПотока(ДопустимоеКоличествоПотоков)
	
	Если ДопустимоеКоличествоПотоков > 1 Тогда
		Возврат ДопустимоеКоличествоПотоков - 1;
	ИначеЕсли ДопустимоеКоличествоПотоков = 1 Тогда
		Возврат ДопустимоеКоличествоПотоков;
	КонецЕсли;
	
	// Значение по умолчанию. Управляющий поток + 3 дочерних
	Возврат 3;
	
КонецФункции

Функция КоличествоРаботающихПотоков()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ДлительныеОперации.ИдентификаторПотока) КАК КоличествоПотоков
		|ИЗ
		|	РегистрСведений.ДлительныеОперации КАК ДлительныеОперации";
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().Получить(0).КоличествоПотоков;
	
КонецФункции

Функция ПотокиДлительныхОпераций(ИдентификаторПроцесса = Неопределено)
	
	ТаблицаПотоков = НовоеОписаниеПотоков();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДлительныеОперации.АдресРезультата КАК АдресРезультата,
		|	ДлительныеОперации.Наименование КАК Наименование,
		|	ДлительныеОперации.ПараметрыМетода КАК ПараметрыМетода,
		|	ДлительныеОперации.ИдентификаторЗадания КАК ИдентификаторЗадания,
		|	ДлительныеОперации.ИдентификаторПотока КАК ИдентификаторПотока,
		|	ДлительныеОперации.КлючПотока КАК КлючПотока
		|ИЗ
		|	РегистрСведений.ДлительныеОперации КАК ДлительныеОперации";
	
	Если ЗначениеЗаполнено(ИдентификаторПроцесса) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ДлительныеОперации.ИдентификаторПроцесса = &ИдентификаторПроцесса";
		
		Запрос.Параметры.Вставить("ИдентификаторПроцесса", ИдентификаторПроцесса);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Поток Из Результат Цикл
		
		Строка = ТаблицаПотоков.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Поток, , "ПараметрыМетода");
		Если Не ЗначениеЗаполнено(Строка.АдресРезультата) Тогда
			Строка.АдресРезультата = Неопределено;
		КонецЕсли;
		
		Если Поток.ПараметрыМетода <> Неопределено Тогда
			Строка.ПараметрыМетода = Поток.ПараметрыМетода.Получить();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПотоков;
	
КонецФункции

// Описание потоков.
//
// Возвращаемое значение:
//    ТаблицаЗначений - описание потоков со следующими колонками:
//      * Наименование - Строка - произвольное наименование потока (используется в наименовании фонового задания).
//      * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор фонового задания.
//      * ИдентификаторПроцесса - УникальныйИдентификатор - уникальный идентификатор процесса. 
//      * ИдентификаторПотока - УникальныйИдентификатор - уникальный идентификатор потока внутри процесса.
//      * ПараметрыМетода - Произвольный - параметры для процедуры или функции.
//      * АдресРезультата - Строка - адрес временного хранилища для сохранения результата выполнения фонового задания.
//      * КлючПотока - Произвольный - уникальный идентификатор порции (набора) данных.
//
Функция НовоеОписаниеПотоков()
	
	Потоки = Новый ТаблицаЗначений;
	Колонки = Потоки.Колонки;
	Колонки.Добавить("Наименование",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИдентификаторЗадания",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("ИдентификаторПотока",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("ИдентификаторПроцесса", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Колонки.Добавить("ПараметрыМетода",       Неопределено);
	Колонки.Добавить("АдресРезультата" ,      Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("КлючПотока",            Неопределено);
	
	Возврат Потоки;
	
КонецФункции

// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором;
//                                      Пустая строка, если задание не запускалось.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//                          - Неопределено - в других случаях
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет помещено Соответствие:
//                                      ** Ключ - Произвольный 
//                                      ** Значение - Структура
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
//
Функция НовыйРезультатДлительнойОперации()
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",                       "");
	Результат.Вставить("ИдентификаторЗадания",         Неопределено);
	Результат.Вставить("АдресРезультата",              "");
	Результат.Вставить("КраткоеПредставлениеОшибки",   "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("Сообщения", Новый ФиксированныйМассив(Новый Массив));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОшибку(Знач Текст)
	
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Многопоточные длительные операции'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти