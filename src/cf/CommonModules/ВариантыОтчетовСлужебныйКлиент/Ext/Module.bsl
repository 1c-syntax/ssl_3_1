///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ПолеФормы
//          - РасширениеПоляФормыДляПоляТабличногоДокумента
//  Область - ОбластьЯчеекТабличногоДокумента
//
Процедура ПоказатьКонтекстнуюНастройкуОтчета(Форма, Элемент, Область, СтандартнаяОбработка) Экспорт 
	
	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента")
		Или Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		Или Область.Расшифровка <> Неопределено
		И ТипЗнч(Область.Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	
	Заголовки = СвойстваРезультата.Заголовки;
	
	Область = Элемент.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента
	СвойстваЗаголовка = Заголовки[Область.Имя]; // 
	
	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура")
		Или ТипЗнч(СвойстваЗаголовка.Поле) <> Тип("ПолеКомпоновкиДанных")
		Или СвойстваЗаголовка.ТипЗначения.Типы().Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	
	КэшЗначенийОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "КэшЗначенийОтборов", Новый Соответствие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ДанныеРасшифровки", Форма.ОтчетДанныеРасшифровки);
	ПараметрыФормы.Вставить("Документ", Форма.ОтчетТабличныйДокумент);
	ПараметрыФормы.Вставить("Заголовки", Заголовки);
	ПараметрыФормы.Вставить("СвойстваЗаголовка", СвойстваЗаголовка);
	ПараметрыФормы.Вставить("КэшЗначенийОтборов", КэшЗначенийОтборов);
	
	ОткрытьФорму(
		"ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.КонтекстнаяНастройкаОтчета",
		ПараметрыФормы,
		Форма,
		Форма.УникальныйИдентификатор);
	
	СтандартнаяОбработка = Ложь
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ПолеФормы
//          - РасширениеПоляФормыДляПоляТабличногоДокумента
//  Расшифровка - ИдентификаторКомпоновкиДанных
//  СтандартнаяОбработка - Булево
//
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт 
	
	НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	ТекущаяОбласть = Элемент.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента
	
	Заголовки = СвойстваРезультата.Заголовки[ТекущаяОбласть.Имя];
	
	Если ТипЗнч(Заголовки) = Тип("Структура") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Форма.Элементы.КонтекстноеМенюОбластиЗаголовка.Видимость = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаДополнительнойРасшифровки(Форма, Данные, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт 
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОсновноеМеню = Новый Массив;
	
	СвойстваОбласти = СвойстваОбластиРасшифровки(Форма, Элемент.ТекущаяОбласть, Данные.Поле);
	
	Если СвойстваОбласти.ЭтоЗаголовок Тогда 
		
		СвойстваЗаголовка = СвойстваОбласти.СвойстваЗаголовка;
		
		Если ТипЗнч(СвойстваЗаголовка.Поле) <> Тип("ПолеКомпоновкиДанных")
			Или СвойстваЗаголовка.ТипЗначения.Типы().Количество() = 0 Тогда 
			
			Возврат;
		КонецЕсли;
		
		ДополнительноеМеню = КонтекстноеМенюОбластиЗаголовка();
	Иначе
		ОсновноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
		ДополнительноеМеню = КонтекстноеМенюОбластиДанных(СвойстваОбласти.СвойстваЗаголовка, Данные.ДоступныеВидыСравнения);
	КонецЕсли;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		Форма.ОтчетДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма.НастройкиОтчета.АдресСхемы));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Данные", Данные);
	ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
	ДополнительныеПараметры.Вставить("ОбработкаРасшифровки", ОбработкаРасшифровки);
	ДополнительныеПараметры.Вставить("СвойстваОбласти", СвойстваОбласти);
	ДополнительныеПараметры.Вставить("Меню", ДополнительноеМеню);
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьРасшифровку", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Обработчик, Расшифровка, ОсновноеМеню, ДополнительноеМеню);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Элемент - ПолеФормы
//          - РасширениеПоляФормыДляПоляТабличногоДокумента
//
Процедура ПриАктивизацииРезультатаОтчета(Форма, Элемент) Экспорт 
	
	Область = Элемент.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента
	
	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета 
	Элементы = Форма.Элементы;
	
	Заголовки = СвойстваРезультата.Заголовки[Область.Имя];
	
	Элементы.КонтекстноеМенюОбластиЗаголовка.Видимость = (ТипЗнч(Заголовки) = Тип("Структура"))
		И ТипЗнч(Заголовки.Поле) = Тип("ПолеКомпоновкиДанных");
	
	Элементы.КонтекстноеМенюОбластиДанных.Видимость = Не Элементы.КонтекстноеМенюОбластиЗаголовка.Видимость
		И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		И ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных");
	
	ВариантыОтчетовСлужебныйКлиентСервер.ОпределитьДоступностьДействийКонтекстногоМеню(Форма, Заголовки);
	
КонецПроцедуры

Функция ЭтоСобытиеКонтекстнойНастройки(Событие) Экспорт 
	
	События = СобытияКонтекстнойНастройки();
	
	Возврат События[Событие] = Истина;
	
КонецФункции

#Область ОбработчикиКомандКонтекстногоМенюТабличногоДокументаРезультатОтчета

#Область ВставкаПоляИлиГруппировки

Процедура ВставитьПолеСлева(Форма, Команда) Экспорт 
	
	ВыбратьПолеОтчетаИзМеню(Форма, Команда);
	
КонецПроцедуры

Процедура ВставитьПолеСправа(Форма, Команда) Экспорт 
	
	ВыбратьПолеОтчетаИзМеню(Форма, Команда);
	
КонецПроцедуры

Процедура ВставитьГруппировкуВыше(Форма, Команда) Экспорт 
	
	ВыбратьПолеОтчетаИзМеню(Форма, Команда);
	
КонецПроцедуры

Процедура ВставитьГруппировкуНиже(Форма, Команда) Экспорт 
	
	ВыбратьПолеОтчетаИзМеню(Форма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеПоля

Процедура ПереместитьПолеВлево(Форма, Команда) Экспорт 
	
	ПереместитьПолеГоризонтально(Форма, Команда);
	
КонецПроцедуры

Процедура ПереместитьПолеВправо(Форма, Команда) Экспорт 
	
	ПереместитьПолеГоризонтально(Форма, Команда);
	
КонецПроцедуры

Процедура ПереместитьПолеВыше(Форма, Команда) Экспорт 
	
	ПереместитьПолеВертикально(Форма, Команда);
	
КонецПроцедуры

Процедура ПереместитьПолеНиже(Форма, Команда) Экспорт 
	
	ПереместитьПолеВертикально(Форма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область Оформление

Процедура ОформитьКрасным(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено) Экспорт 
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	ДействиеКоманды = ДействиеКоманды(Команда);
	
	ПараметрыРаскраски = ПараметрыРаскраскиРазделаОтчета(ДействиеКоманды);
	ПараметрыРаскраски.Условие.ЛевоеЗначение = СвойстваЗаголовка.Поле;
	
	Если ДействиеКоманды = "ОформитьОтрицательные" Тогда 
		
		Если Не ДействиеНадПолемДоступно(ДействиеКоманды, СвойстваЗаголовка) Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыРаскраски.Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ПараметрыРаскраски.Условие.ПравоеЗначение = 0;
		
	Иначе
		
		ПараметрыРаскраски.Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПараметрыРаскраски.Условие.ПравоеЗначение = Значение;
		
	КонецЕсли;
	
	ЭлементыСтиля = СтандартныеПодсистемыКлиент.ЭлементыСтиля();
	
	Оформление = СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр = "ЦветТекста";
	Оформление.Значение = ЭлементыСтиля.ЦветТекстаОтрицательногоЗначения;
	
	ПараметрыРаскраски.Оформление.Добавить(Оформление);
	
	Оформление = СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр = "ЦветФона";
	Оформление.Значение = ЭлементыСтиля.ЦветФонаОтрицательногоЗначения;
	
	ПараметрыРаскраски.Оформление.Добавить(Оформление);
	
	РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка);
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

Процедура ОформитьЗеленым(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено) Экспорт 
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	ДействиеКоманды = ДействиеКоманды(Команда);
	
	ПараметрыРаскраски = ПараметрыРаскраскиРазделаОтчета(ДействиеКоманды);
	ПараметрыРаскраски.Условие.ЛевоеЗначение = СвойстваЗаголовка.Поле;
	
	Если ДействиеКоманды = "ОформитьПоложительные" Тогда 
		
		Если Не ДействиеНадПолемДоступно(ДействиеКоманды, СвойстваЗаголовка) Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыРаскраски.Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ПараметрыРаскраски.Условие.ПравоеЗначение = 0;
		
	Иначе
		
		ПараметрыРаскраски.Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПараметрыРаскраски.Условие.ПравоеЗначение = Значение;
		
	КонецЕсли;
	
	ЭлементыСтиля = СтандартныеПодсистемыКлиент.ЭлементыСтиля();
	
	Оформление = СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр = "ЦветТекста";
	Оформление.Значение = ЭлементыСтиля.ЦветТекстаПоложительногоЗначения;
	
	ПараметрыРаскраски.Оформление.Добавить(Оформление);
	
	Оформление = СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр = "ЦветФона";
	Оформление.Значение = ЭлементыСтиля.ЦветФонаПоложительногоЗначения;
	
	ПараметрыРаскраски.Оформление.Добавить(Оформление);
	
	РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка);
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Команда - КомандаФормы
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//  ВысотаСтроки - Число
//               - Неопределено
//  ПараметрыВысотыСтроки - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета 
//
Процедура УстановитьВысотуСтроки(Форма, Команда, СвойстваЗаголовка = Неопределено,
	ВысотаСтроки = Неопределено, ПараметрыВысотыСтроки = Неопределено) Экспорт 
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	Если ВысотаСтроки = Неопределено Тогда 
		
		ПараметрыВысотыСтроки = ПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Команда", Команда);
		ПараметрыОбработчика.Вставить("СвойстваЗаголовка", СвойстваЗаголовка);
		ПараметрыОбработчика.Вставить("ПараметрыРазмераПоля", ПараметрыВысотыСтроки);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВводаВысотыСтрокиОтчета", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьВводЧисла(Обработчик, ПараметрыВысотыСтроки.Размер, НСтр("ru = 'Высота строки'"), 5);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыВысотыСтроки = Неопределено
		Или ПараметрыВысотыСтроки.Элемент = Неопределено Тогда 
		
		ДобавитьПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, ВысотаСтроки);
	Иначе
		ОбновитьПараметрыРазмера(ПараметрыВысотыСтроки, ВысотаСтроки);
	КонецЕсли;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Команда - КомандаФормы
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//  ШиринаКолонки - Число
//                - Неопределено
//  ПараметрыШириныКолонки - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета 
//
Процедура УстановитьШиринуКолонки(Форма, Команда, СвойстваЗаголовка = Неопределено,
	ШиринаКолонки = Неопределено, ПараметрыШириныКолонки = Неопределено) Экспорт 
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	Если ШиринаКолонки = Неопределено Тогда 
		
		ПараметрыШириныКолонки = ПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, "Ширина");
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Команда", Команда);
		ПараметрыОбработчика.Вставить("СвойстваЗаголовка", СвойстваЗаголовка);
		ПараметрыОбработчика.Вставить("ПараметрыРазмераПоля", ПараметрыШириныКолонки);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВводаШириныКолонкиОтчета", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьВводЧисла(Обработчик, ПараметрыШириныКолонки.Размер, НСтр("ru = 'Ширина колонки'"), 5);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыШириныКолонки = Неопределено
		Или ПараметрыШириныКолонки.Элемент = Неопределено Тогда 
		
		ДобавитьПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, ШиринаКолонки, "Ширина");
	Иначе
		ОбновитьПараметрыРазмера(ПараметрыШириныКолонки, ШиринаКолонки);
	КонецЕсли;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

Процедура ОформитьЕще(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено) Экспорт 
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	ИспользуемыеНастройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	
	Раздел = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	ИдентификаторГруппировки = ИспользуемыеНастройки.ПолучитьИдентификаторПоОбъекту(Группировка);
	ИдентификаторОформления = ИдентификаторЭлементаОформленияГруппировкиОтчета(Группировка, СвойстваЗаголовка.Поле);
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("КомпоновщикНастроек", КомпоновщикНастроекОтчета(Форма));
	ПараметрыОформления.Вставить("НастройкиОтчета", Форма.НастройкиОтчета);
	ПараметрыОформления.Вставить("ИдентификаторЭлементаСтруктурыНастроек", ИдентификаторГруппировки);
	ПараметрыОформления.Вставить("ИдентификаторКД", ИдентификаторОформления);
	ПараметрыОформления.Вставить("Наименование", "");
	ПараметрыОформления.Вставить("Поле", СвойстваЗаголовка.Поле);
	ПараметрыОформления.Вставить("Условие", УсловиеОформленияГруппировкиОтчета(СвойстваЗаголовка.Поле, Значение));
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("Раздел", Раздел);
	ПараметрыОбработчика.Вставить("Группировка", Группировка);
	ПараметрыОбработчика.Вставить("Поле", СвойстваЗаголовка.Поле);
	ПараметрыОбработчика.Вставить("Ресурс", СвойстваЗаголовка.Ресурс);
	ПараметрыОбработчика.Вставить("Действие", ДействиеКоманды(Команда));
	
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияЭлементаОформленияГруппировкиОтчета", ЭтотОбъект, ПараметрыОбработчика);
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ЭлементУсловногоОформленияОтчета",
		ПараметрыОформления, Форма, Форма.УникальныйИдентификатор,,, Обработчик);
	
КонецПроцедуры

#КонецОбласти

#Область Фильтрация

Процедура ПоказатьРасширеннуюНастройкуФильтра(Форма, СвойстваЗаголовка) Экспорт 
	
	НастройкиОтчета = Форма.НастройкиОтчета;
	
	Поле = Форма.Элементы.ОтчетТабличныйДокумент; // ПолеТабличногоДокумента
	ТекущаяОбласть = Поле.ТекущаяОбласть;
	
	Ячейка = Новый Структура("Текст, Расшифровка", "");
	
	Если ТекущаяОбласть.Верх <> СвойстваЗаголовка.Верх
		Или ТекущаяОбласть.Низ <> СвойстваЗаголовка.Низ
		Или ТекущаяОбласть.Лево <> СвойстваЗаголовка.Лево
		Или ТекущаяОбласть.Право <> СвойстваЗаголовка.Право Тогда 
			
		ЗаполнитьЗначенияСвойств(Ячейка, ТекущаяОбласть);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючТекущегоВарианта", Форма.КлючТекущегоВарианта);
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", КомпоновщикНастроекОтчета(Форма));
	ПараметрыФормы.Вставить("СвойстваЗаголовка", СвойстваЗаголовка);
	ПараметрыФормы.Вставить("ДанныеРасшифровки", Форма.ОтчетДанныеРасшифровки);
	ПараметрыФормы.Вставить("Ячейка", Ячейка);
	
	ОткрытьФорму(
		"ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.РасширеннаяНастройкаФильтраОтчета",
		ПараметрыФормы,
		Форма,
		Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СнятьФильтр(Форма, СвойстваЗаголовка) Экспорт 
	
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	
	Фильтры = ВариантыОтчетовСлужебныйКлиентСервер.ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка);
	Фильтр = ВариантыОтчетовСлужебныйКлиентСервер.ФильтрРазделаОтчета(Фильтры, СвойстваЗаголовка.Поле);
	
	Если Фильтр = Неопределено Тогда 
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По полю ""%1"" отсутствуют фильтры'"), СвойстваЗаголовка.Текст);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Фильтры.Элементы.Удалить(Фильтр);
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, "СнятьФильтр");
	
КонецПроцедуры

#КонецОбласти

#Область ОстальныеДействия

Процедура СкрытьПоле(Форма, Команда) Экспорт 
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	
	Если СвойстваЗаголовка.ИдентификаторНастроек = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	
	ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
	
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	ОписаниеПоля = ОписаниеПоляОтчета(КомпоновщикНастроек, СвойстваЗаголовка.Поле);
	
	Если ОписаниеПоля <> Неопределено
		И ОписаниеПоля.Ресурс Тогда 
		
		СкрытьВыбранноеПолеРаздела(Раздел, СвойстваЗаголовка.Поле);
		
	Иначе
		
		СкрытьВыбранноеПолеГруппировки(Группировка, СвойстваЗаголовка.Поле);
		СкрытьГруппировку(Настройки, Группировка, СвойстваЗаголовка.Поле);
		
	КонецЕсли;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

Процедура ПереименоватьПоле(Форма, Команда, Заголовок = "") Экспорт 
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	ОписаниеПоля = ОписаниеПоляОтчета(КомпоновщикНастроек, СвойстваЗаголовка.Поле);
	
	ПолеОтчета = ПолеОтчета(Группировка.Выбор, СвойстваЗаголовка.Поле);
	
	Если Не ЗначениеЗаполнено(Заголовок) Тогда 
		
		ПараметрыОбработчика = Новый Структура("Форма, Команда", Форма, Команда);
		Обработчик = Новый ОписаниеОповещения("ПослеВводаЗаголовкаПоляОтчета", ЭтотОбъект, ПараметрыОбработчика);
		
		ТекущийЗаголовок = ТекущийЗаголовокПоляОтчета(ПолеОтчета, ОписаниеПоля);
		
		ЗаголовокДиалога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заголовок поля: %1'"),
			?(ОписаниеПоля = Неопределено, Строка(ПолеОтчета), ОписаниеПоля.Заголовок));
		
		ПоказатьВводСтроки(Обработчик, ТекущийЗаголовок, ЗаголовокДиалога);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПолеОтчета = Неопределено Тогда 
		
		Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
		ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
		ПолеОтчета = ПолеОтчета(Группировка.Выбор, СвойстваЗаголовка.Поле);
		
	КонецЕсли;
	
	Если ПолеОтчета <> Неопределено Тогда 
		УстановитьЗаголовокПоляОтчета(Заголовок, ПолеОтчета, ОписаниеПоля);
	КонецЕсли;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

Процедура Сортировать(Форма, Команда, СвойстваЗаголовка = Неопределено) Экспорт 
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	Если Не ТипСортировкиРазделаДоступен(Команда, СвойстваЗаголовка) Тогда 
		Возврат;
	КонецЕсли;
	
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	
	Если СвойстваЗаголовка.КоличествоРазделов = 1 Тогда 
		
		ЭлементыСортировки = Настройки.Порядок.Элементы;
		
	Иначе
		
		Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
		Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
		
		Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных")
			И Раздел.Строки.Количество() = 1 Тогда 
			
			ОсновнаяГруппировка = Раздел.Строки[0];
			ПолеГруппировки = ПолеОтчета(ОсновнаяГруппировка.ПоляГруппировки, СвойстваЗаголовка.Поле);
			
			Если СвойстваЗаголовка.Ресурс
				Или ПолеГруппировки <> Неопределено Тогда 
				
				Группировка = ОсновнаяГруппировка;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыСортировки = Группировка.Порядок.Элементы;
		
	КонецЕсли;
	
	ЭлементСортировки = ЭлементСортировкиРаздела(ЭлементыСортировки, СвойстваЗаголовка.Поле);
	
	Если ЭлементСортировки = Неопределено Тогда 
		
		Индекс = ИндексЭлементСортировкиРаздела(ЭлементыСортировки, СвойстваЗаголовка.Поле);
		ЭлементСортировки = ЭлементыСортировки.Вставить(Индекс, Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементСортировки.Поле = СвойстваЗаголовка.Поле;
		
	КонецЕсли;
	
	ЭлементСортировки.ТипУпорядочивания = ТипСортировкиРаздела(Команда);
	ЭлементСортировки.Использование = Истина;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВставкаПоля

Процедура ВставитьПоле(КомпоновщикНастроек, Настройки, ВыбранноеПоле, Действие, СвойстваЗаголовка, РолиПолей)
	
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
	
	ВставитьПолеВПоляГруппировки(Группировка.ПоляГруппировки, ВыбранноеПоле, СвойстваЗаголовка.Поле, Действие, РолиПолей);
	ВставитьПолеВГруппировкуРаздела(Группировка, ВыбранноеПоле, СвойстваЗаголовка.Поле, Действие, РолиПолей)
	
КонецПроцедуры

Процедура ВставитьПолеВПоляГруппировки(Поля, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей)
	
	Если ВыбранноеПоле.Ресурс Тогда 
		Возврат;
	КонецЕсли;
	
	НайденноеТекущееПоле = ПолеОтчета(Поля, ТекущееПоле);
	
	Если НайденноеТекущееПоле = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущееПолеЯвляетсяПериодом = (РолиПолей.Периоды[ТекущееПоле] <> Неопределено);
	ВыбранноеПолеЯвляетсяПериодом = (РолиПолей.Периоды[ВыбранноеПоле.Поле] <> Неопределено);
	
	Если ТекущееПолеЯвляетсяПериодом И Не ВыбранноеПолеЯвляетсяПериодом
		Или Не ТекущееПолеЯвляетсяПериодом И ВыбранноеПолеЯвляетсяПериодом Тогда 
		
		Возврат;
	КонецЕсли;
	
	ИндексПоля = Поля.Элементы.Индекс(НайденноеТекущееПоле);
	
	Если Действие = "ВставитьПолеСправа" Тогда 
		ИндексПоля = ИндексПоля + 1;
	КонецЕсли;
	
	НайденноеПоле = ПолеОтчета(Поля, ВыбранноеПоле.Поле);
	ВставляемоеПоле = Неопределено;
	
	Если НайденноеПоле <> Неопределено Тогда 
		
		Если Поля.Элементы.Индекс(НайденноеПоле) = ИндексПоля Тогда 
			
			ВставляемоеПоле = НайденноеПоле;
			ВставляемоеПоле.Использование = Истина;
			
		Иначе
			Поля.Элементы.Удалить(НайденноеПоле);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВставляемоеПоле <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВставляемоеПоле = Поля.Элементы.Вставить(ИндексПоля, Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(ВставляемоеПоле, ВыбранноеПоле);
	
КонецПроцедуры

Процедура ВставитьПолеВГруппировкуРаздела(Группировка, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей)
	
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных")
		И ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 
		
		Возврат;
	КонецЕсли;
	
	Поля = Группировка.Выбор;
	НайденноеТекущееПоле = ПолеОтчета(Поля, ТекущееПоле);
	
	Если НайденноеТекущееПоле = Неопределено Тогда 
		
		ИндексПоля = 0;
		
	Иначе
		
		ИндексПоля = Поля.Элементы.Индекс(НайденноеТекущееПоле);
		
		Если Действие = "ВставитьПолеСправа" Тогда 
			ИндексПоля = ИндексПоля + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденноеПоле = ПолеОтчета(Поля, ВыбранноеПоле.Поле);
	ВставляемоеПоле = Неопределено;
	ЗаголовокПоля = ВыбранноеПоле.Заголовок;
	
	Если НайденноеПоле <> Неопределено Тогда 
		
		Если Поля.Элементы.Индекс(НайденноеПоле) = ИндексПоля Тогда 
			
			ВставляемоеПоле = НайденноеПоле;
			ВставляемоеПоле.Использование = Истина;
			
		Иначе
			
			ЗаголовокПоля = НайденноеПоле.Заголовок;
			Поля.Элементы.Удалить(НайденноеПоле);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВставляемоеПоле = Неопределено Тогда 
		
		ВставляемоеПоле = Поля.Элементы.Вставить(ИндексПоля, Тип("ВыбранноеПолеКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ВставляемоеПоле, ВыбранноеПоле);
		ВставляемоеПоле.Заголовок = ЗаголовокПоля;
		
	КонецЕсли;
	
	УстановитьВыводРеквизитовГруппировкиОтдельно(Группировка);
	
	ВставитьПолеВГруппировкиРаздела(Группировка, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей);
	
КонецПроцедуры

Процедура ВставитьПолеВГруппировкиРаздела(Родитель, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей)
	
	Если Не ВыбранноеПоле.Ресурс Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Родитель) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		Группировки = Родитель.Строки;
	Иначе
		Группировки = Родитель.Структура;
	КонецЕсли;
	
	Для Каждого Группировка Из Группировки Цикл 
		ВставитьПолеВГруппировкуРаздела(Группировка, ВыбранноеПоле, ТекущееПоле, Действие, РолиПолей);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВыводРеквизитовГруппировкиОтдельно(Группировка)
	
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных")
		И Не ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 
		
		Возврат;
	КонецЕсли;
	
	ВыводРеквизитов = Группировка.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	
	Если Не ВыводРеквизитов.Использование Тогда 
		
		ВыводРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
		ВыводРеквизитов.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВставкаГруппировки

// Параметры:
//  Действие - НастройкиКомпоновкиДанных
//  Действие - Строка
//  Поле - ПолеКомпоновкиДанных
//       - ДоступноеПолеКомпоновкиДанных
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//
Процедура ВставитьГруппировку(Настройки, Действие, Поле, СвойстваЗаголовка)
	
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	КоллекцияГруппировок = КоллекцияГруппировокРаздела(
		Раздел, Группировка, СвойстваЗаголовка.ИдентификаторГруппировки, Действие);
	
	ПеремещаемыеГруппировки = Новый Массив;
	
	Для Каждого Элемент Из КоллекцияГруппировок.Группировки Цикл 
		ПеремещаемыеГруппировки.Добавить(Элемент);
	КонецЦикла;
	
	Если ТипЗнч(КоллекцияГруппировок.Группировки) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда 
		
		НоваяГруппировка = КоллекцияГруппировок.Группировки.Вставить(
			КоллекцияГруппировок.ИндексГруппировки, Тип("ГруппировкаКомпоновкиДанных")); // ГруппировкаКомпоновкиДанных
		
	Иначе
		
		НоваяГруппировка = КоллекцияГруппировок.Группировки.Вставить(КоллекцияГруппировок.ИндексГруппировки);
		
	КонецЕсли;
	
	НовоеПоле = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	НовоеПоле.Поле = ?(ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных"), Поле, Поле.Поле);
	НовоеПоле.Использование = Истина;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Для Каждого Группировка Из ПеремещаемыеГруппировки Цикл 
		
		ПоискЭлементов = Новый Соответствие;
		ОтчетыКлиентСервер.СкопироватьРекурсивно(
			Настройки, Группировка, НоваяГруппировка.Структура, КоллекцияГруппировок.ИндексГруппировки, ПоискЭлементов);
		
		КоллекцияГруппировок.Группировки.Удалить(Группировка);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Раздел - НастройкиКомпоновкиДанных
//         - НастройкиВложенногоОбъектаКомпоновкиДанных
//         - ГруппировкаКомпоновкиДанных
//         - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
//         - ТаблицаКомпоновкиДанных
//         - ГруппировкаТаблицыКомпоновкиДанных
//         - КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
//         - Неопределено
//  Группировка - НастройкиКомпоновкиДанных
//              - НастройкиВложенногоОбъектаКомпоновкиДанных
//              - ГруппировкаКомпоновкиДанных
//              - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
//              - ТаблицаКомпоновкиДанных
//              - ГруппировкаТаблицыКомпоновкиДанных
//              - КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
//              - Неопределено
//  ИдентификаторГруппировки - ИдентификаторКомпоновкиДанных
//  Действие - Строка
//
// Возвращаемое значение:
//  Структура:
//    * ИндексГруппировки - Число
//    * Группировки - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
//                  - КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
//
Функция КоллекцияГруппировокРаздела(Раздел, Группировка, ИдентификаторГруппировки, Действие)
	
	Коллекция = Новый Структура;
	Коллекция.Вставить("Группировки", Неопределено);
	Коллекция.Вставить("ИндексГруппировки", 0);
	
	Если Действие = "ВставитьГруппировкуНиже" Тогда 
		
		Коллекция.Группировки = Группировка.Структура;
		
		Возврат Коллекция;
		
	КонецЕсли;
	
	Родитель = Группировка.Родитель; // ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных
	
	Если Родитель <> Раздел Тогда 
		
		Группировки = Родитель.Структура; // КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
		Коллекция.Группировки = Группировки;
		Коллекция.ИндексГруппировки = Группировки.Индекс(Группировка);
		
		Возврат Коллекция;
		
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		Коллекция.Группировки = ?(СтрНайти(ИдентификаторГруппировки, "/row/") > 0, Раздел.Строки, Раздел.Колонки);
		
	Иначе
		
		Коллекция.Группировки = Раздел.Структура;
		
	КонецЕсли;
	
	Группировки = Коллекция.Группировки; // КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных 
	Коллекция.ИндексГруппировки = Группировки.Индекс(Группировка);
	
	Возврат Коллекция;
	
КонецФункции

#КонецОбласти

#Область СкрытиеПоля

Процедура СкрытьВыбранноеПолеРаздела(Раздел, Поле)
	
	ГруппировкиРаздела = Новый Массив;
	
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		ГруппировкиРаздела.Добавить(Раздел.Строки);
		ГруппировкиРаздела.Добавить(Раздел.Колонки);
		
	Иначе
		
		ГруппировкиРаздела.Добавить(Раздел.Структура);
		СкрытьВыбранноеПолеГруппировки(Раздел, Поле);
		
	КонецЕсли;
	
	Для Каждого Группировки Из ГруппировкиРаздела Цикл 
		
		Для Каждого Группировка Из Группировки Цикл 
			
			СкрытьВыбранноеПолеГруппировки(Группировка, Поле);
			СкрытьВыбранноеПолеРаздела(Группировка, Поле);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкрытьВыбранноеПолеГруппировки(Группировка, Поле)
	
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных")
		И ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 
		
		Возврат;
	КонецЕсли;
	
	ПоляОтчета = ПолеОтчета(Группировка.Выбор, Поле);
	
	Если ПоляОтчета <> Неопределено Тогда 
		ПоляОтчета.Использование = Ложь;
	КонецЕсли;
	
	ПоляОтчета = ПолеОтчета(Группировка.ПоляГруппировки, Поле);
	
	Если ПоляОтчета <> Неопределено Тогда 
		ПоляОтчета.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьГруппировку(Настройки, Группировка, Поле)
	
	Поля = Группировка.ПоляГруппировки;
	
	Если Поля.Элементы.Количество() = 0
		И Группировка.Структура.Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	КоличествоИспользуемыхПолей = 0;
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если Элемент.Использование Тогда 
			КоличествоИспользуемыхПолей = КоличествоИспользуемыхПолей + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоИспользуемыхПолей > 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Группировка.Использование = Ложь;
	РодительскаяГруппировка = Группировка.Родитель;
	
	Если ТипЗнч(РодительскаяГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		ИдентификаторГруппировки = Настройки.ПолучитьИдентификаторПоОбъекту(Группировка);
		
		Если СтрНайти(ИдентификаторГруппировки, "/row/") > 0 Тогда 
			Группировки = РодительскаяГруппировка.Строки;
		Иначе
			Группировки = РодительскаяГруппировка.Колонки;
		КонецЕсли;
		
	Иначе
		Группировки = РодительскаяГруппировка.Структура;
	КонецЕсли;
	
	ИндексГруппировки = Группировки.Индекс(Группировка);
	
	Для Каждого ДочерняяГруппировка Из Группировка.Структура Цикл 
		
		Если Не ДочерняяГруппировка.Использование Тогда 
			Продолжить;
		КонецЕсли;
		
		ПоискЭлементов = Новый Соответствие;
		ОтчетыКлиентСервер.СкопироватьРекурсивно(Настройки, ДочерняяГруппировка, Группировки, ИндексГруппировки, ПоискЭлементов);
		
		ДочерняяГруппировка.Использование = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованиеПоля

Процедура ПослеВводаЗаголовкаПоляОтчета(Заголовок, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(Заголовок) Тогда 
		ПереименоватьПоле(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Команда, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущийЗаголовокПоляОтчета(Поле, ОписаниеПоля)
	
	ТекущийЗаголовок = "";
	
	Если Поле <> Неопределено
		И ЗначениеЗаполнено(Поле.Заголовок) Тогда 
		
		ТекущийЗаголовок = Поле.Заголовок;
		
	ИначеЕсли ОписаниеПоля <> Неопределено Тогда 
		
		ТекущийЗаголовок = ОписаниеПоля.Заголовок;
		
	ИначеЕсли Поле <> Неопределено Тогда 
		
		ТекущийЗаголовок = Строка(Поле);
		
	КонецЕсли;
	
	Возврат ТекущийЗаголовок;
	
КонецФункции

Процедура УстановитьЗаголовокПоляОтчета(Заголовок, Поле, ОписаниеПоля)
	
	Если ОписаниеПоля <> Неопределено
		И Заголовок = ОписаниеПоля.Заголовок Тогда 
		
		Поле.Заголовок = "";
		
	Иначе
		
		Поле.Заголовок = Заголовок;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Фильтрация

Процедура Фильтровать(Форма, ВидСравнения, СвойстваЗаголовка, ДанныеРасшифровки)
	
	Если ТипЗнч(ВидСравнения) = Тип("Строка") Тогда 
		
		ПоказатьРасширеннуюНастройкуФильтра(Форма, СвойстваЗаголовка);
		Возврат;
		
	КонецЕсли;
	
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	
	Фильтры = ВариантыОтчетовСлужебныйКлиентСервер.ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка);
	Фильтр = ВариантыОтчетовСлужебныйКлиентСервер.ФильтрРазделаОтчета(Фильтры, СвойстваЗаголовка.Поле);
	
	Если Фильтр = Неопределено Тогда 
		
		Фильтр = Фильтры.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Фильтр.ЛевоеЗначение = СвойстваЗаголовка.Поле;
		
	КонецЕсли;
	
	Фильтр.ВидСравнения = ВидСравнения;
	Фильтр.ПравоеЗначение = ДанныеРасшифровки.Значение;
	Фильтр.Использование = Истина;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, "Фильтровать");
	
КонецПроцедуры

#КонецОбласти

#Область Сортировка

Функция ТипСортировкиРазделаДоступен(Команда, СвойстваЗаголовка)
	
	ТекстПредупреждения = "";
	ШаблонПредупреждения = НСтр("ru = 'Поле ""%1"" уже отсортировано по %2'");
	
	Если СтрЗаканчиваетсяНа(ДействиеКоманды(Команда), "ПоВозрастанию")
		И Не СвойстваЗаголовка.СортироватьПоВозрастанию Тогда 
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредупреждения, СвойстваЗаголовка.Текст, НСтр("ru = 'возрастанию'"));
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДействиеКоманды(Команда), "ПоУбыванию")
		И Не СвойстваЗаголовка.СортироватьПоУбыванию Тогда 
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредупреждения, СвойстваЗаголовка.Текст, НСтр("ru = 'убыванию'"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТипСортировкиРаздела(Команда)
	
	Если СтрЗаканчиваетсяНа(ДействиеКоманды(Команда), "ПоВозрастанию") Тогда 
		
		Возврат НаправлениеСортировкиКомпоновкиДанных.Возр;
		
	КонецЕсли;
	
	Возврат НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
КонецФункции

Функция ЭлементСортировкиРаздела(ЭлементыСортировки, Поле)
	
	ЭлементСортировки = Неопределено;
	
	Для Каждого Элемент Из ЭлементыСортировки Цикл 
		
		Если ТипЗнч(Элемент) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных")
			И Элемент.Поле = Поле Тогда 
			
			ЭлементСортировки = Элемент;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементСортировки;
	
КонецФункции

Функция ИндексЭлементСортировкиРаздела(ЭлементыСортировки, Поле)
	
	Для Каждого Элемент Из ЭлементыСортировки Цикл 
		
		Если ТипЗнч(Элемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда 
			Возврат ЭлементыСортировки.Индекс(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементыСортировки.Количество();
	
КонецФункции

#КонецОбласти

#Область Оформление

Процедура ОформитьЖелтым(Форма, Команда, СвойстваЗаголовка = Неопределено, Значение = Неопределено)
	
	Если СвойстваЗаголовка = Неопределено Тогда 
		СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	КонецЕсли;
	
	ПараметрыРаскраски = ПараметрыРаскраскиРазделаОтчета(ДействиеКоманды(Команда));
	ПараметрыРаскраски.Условие.ЛевоеЗначение = СвойстваЗаголовка.Поле;
	ПараметрыРаскраски.Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПараметрыРаскраски.Условие.ПравоеЗначение = Значение;
	
	ЭлементыСтиля = СтандартныеПодсистемыКлиент.ЭлементыСтиля();
	
	Оформление = СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр = "ЦветТекста";
	Оформление.Значение = ЭлементыСтиля.ЦветТекстаВнимание;
	
	ПараметрыРаскраски.Оформление.Добавить(Оформление);
	
	Оформление = СтандартныйПараметрРаскраскиРазделаОтчета();
	Оформление.Параметр = "ЦветФона";
	Оформление.Значение = ЭлементыСтиля.ЦветФонаВнимание;
	
	ПараметрыРаскраски.Оформление.Добавить(Оформление);
	
	РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка);
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

#Область РаскраскаГруппировкиОтчета

// Параметры:
//  Действие - Строка
//
// Возвращаемое значение:
//  Структура:
//    * Условие - Структура:
//        ** ЛевоеЗначение - ПолеКомпоновкиДанных
//        ** ВидСравнения - ВидСравненияКомпоновкиДанных
//        ** ПравоеЗначение - Неопределено
//    * Массив
//
Функция ПараметрыРаскраскиРазделаОтчета(Действие)
	
	Условие = Новый Структура;
	Условие.Вставить("ЛевоеЗначение", Неопределено);
	Условие.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	Условие.Вставить("ПравоеЗначение", Неопределено);
	
	ПараметрыРаскраски = Новый Структура;
	ПараметрыРаскраски.Вставить("Условие", Условие);
	ПараметрыРаскраски.Вставить("Оформление", Новый Массив);
	
	Возврат ПараметрыРаскраски;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//    * Параметр - Строка
//    * Значение - Неопределено
//
Функция СтандартныйПараметрРаскраскиРазделаОтчета()
	
	Параметр = Новый Структура;
	Параметр.Вставить("Параметр", "");
	Параметр.Вставить("Значение", Неопределено);
	
	Возврат Параметр;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ПараметрыРаскраски - см. ПараметрыРаскраскиРазделаОтчета
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//
Процедура РаскраситьРазделОтчета(Форма, ПараметрыРаскраски, СвойстваЗаголовка)
	
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		РаскраситьГруппировкиРазделаОтчета(Раздел.Строки, ПараметрыРаскраски, СвойстваЗаголовка);
	Иначе
		РаскраситьГруппировкуРазделаОтчета(Раздел, ПараметрыРаскраски, СвойстваЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаскраситьГруппировкиРазделаОтчета(Группировки, ПараметрыРаскраски, СвойстваЗаголовка)
	
	Для Каждого Группировка Из Группировки Цикл 
		РаскраситьГруппировкуРазделаОтчета(Группировка, ПараметрыРаскраски, СвойстваЗаголовка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаскраситьГруппировкуРазделаОтчета(Группировка, ПараметрыРаскраски, СвойстваЗаголовка)
	
	Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		РаскраситьГруппировкиРазделаОтчета(Группировка.Строки, ПараметрыРаскраски, СвойстваЗаголовка);
		
	Иначе
		
		ПолеОформления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаскраски.Условие, "ЛевоеЗначение");
		
		ПараметрыРаскраскиПрименимы = ОформлениеПрименимоКГруппировке(
			Группировка, ПолеОформления, СвойстваЗаголовка.Ресурс);
		
		Если ПараметрыРаскраскиПрименимы Тогда 
			
			Раскраска = РаскраскаГруппировкиОтчета(Группировка.УсловноеОформление, ПараметрыРаскраски);
			
			Если Раскраска = Неопределено Тогда 
				ДобавитьРаскраскуГруппировкиОтчета(Группировка.УсловноеОформление, ПараметрыРаскраски);
			КонецЕсли;
			
		КонецЕсли;
		
		РаскраситьГруппировкиРазделаОтчета(Группировка.Структура, ПараметрыРаскраски, СвойстваЗаголовка)
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Группировка - НастройкиКомпоновкиДанных
//              - НастройкиВложенногоОбъектаКомпоновкиДанных
//              - ГруппировкаКомпоновкиДанных
//              - ДиаграммаКомпоновкиДанных
//              - КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных
//              - ГруппировкаДиаграммыКомпоновкиДанных
//              - КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
//              - ГруппировкаТаблицыКомпоновкиДанных
//              - Неопределено
//  Поле - ПолеКомпоновкиДанных
//       - Неопределено
//  ЭтоРесурс - Булево
//
// Возвращаемое значение:
//   Булево
//
Функция ОформлениеПрименимоКГруппировке(Группировка, Поле, ЭтоРесурс)
	
	ПоляГруппировки = Группировка.ПоляГруппировки;
	
	Возврат ЭтоРесурс
		Или Поле = Неопределено
		Или ПоляГруппировки.Элементы.Количество() = 0
		Или ПолеОтчета(ПоляГруппировки, Поле) <> Неопределено;
	
КонецФункции

Функция РаскраскаГруппировкиОтчета(УсловноеОформление, ПараметрыРаскраски)
	
	 Для Каждого Элемент Из УсловноеОформление.Элементы Цикл 
		
		Условие = УсловиеРаскраскиГруппировкиОтчета(Элемент.Отбор, ПараметрыРаскраски.Условие);
		
		Если Условие <> Неопределено Тогда 
			
			ОбновитьРаскраскуГруппировкиОтчета(Элемент, Условие, ПараметрыРаскраски);
			Возврат Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УсловиеРаскраскиГруппировкиОтчета(Отбор, Поиск)
	
	Условие = Неопределено;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных")
			И Элемент.ЛевоеЗначение = Поиск.ЛевоеЗначение
			И Элемент.ВидСравнения = Поиск.ВидСравнения
			И Элемент.ПравоеЗначение = Поиск.ПравоеЗначение Тогда 
			
			Условие = Элемент;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Условие;
	
КонецФункции

Процедура ОбновитьРаскраскуГруппировкиОтчета(Оформление, Условие, ПараметрыРаскраски)
	
	Оформление.Использование = Истина;
	Условие.Использование = Истина;
	
	Оформление.Поля.Элементы.Очистить();
	
	Поле = Оформление.Поля.Элементы.Добавить();
	Поле.Поле = ПараметрыРаскраски.Условие.ЛевоеЗначение;
	Поле.Использование = Истина;
	
	СброситьОформлениеГруппировкиОтчета(Оформление);
	
	Для Каждого Параметр Из ПараметрыРаскраски.Оформление Цикл 
		Оформление.Оформление.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение);
	КонецЦикла;
	
	УстановитьОбластьОформленияГруппировкиОтчета(Оформление);
	
КонецПроцедуры

Процедура ДобавитьРаскраскуГруппировкиОтчета(УсловноеОформление, ПараметрыРаскраски)
	
	Оформление = УсловноеОформление.Элементы.Добавить();
	
	Условие = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(Условие, ПараметрыРаскраски.Условие);
	Условие.Использование = Истина;
	
	Поле = Оформление.Поля.Элементы.Добавить();
	Поле.Поле = ПараметрыРаскраски.Условие.ЛевоеЗначение;
	Поле.Использование = Истина;
	
	Для Каждого Параметр Из ПараметрыРаскраски.Оформление Цикл 
		Оформление.Оформление.УстановитьЗначениеПараметра(Параметр.Параметр, Параметр.Значение);
	КонецЦикла;
	
	УстановитьОбластьОформленияГруппировкиОтчета(Оформление);
	
КонецПроцедуры

Процедура СброситьОформлениеГруппировкиОтчета(ЭлементОформления, ТолькоПараметры = Истина)
	
	Для Каждого Элемент Из ЭлементОформления.Оформление.Элементы Цикл 
		Элемент.Использование = Ложь;
	КонецЦикла;
	
	Если ТолькоПараметры Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементОформления.Поля.Элементы.Очистить();
	ЭлементОформления.Отбор.Элементы.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеРазмера

Процедура ПослеВводаВысотыСтрокиОтчета(ВысотаСтроки, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ВысотаСтроки) Тогда 
		
		УстановитьВысотуСтроки(
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.Команда,
			ДополнительныеПараметры.СвойстваЗаголовка,
			ВысотаСтроки,
			ДополнительныеПараметры.ПараметрыРазмераПоля);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВводаШириныКолонкиОтчета(ШиринаКолонки, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ШиринаКолонки) Тогда 
		
		УстановитьШиринуКолонки(
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.Команда,
			ДополнительныеПараметры.СвойстваЗаголовка,
			ШиринаКолонки,
			ДополнительныеПараметры.ПараметрыРазмераПоля);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//  Ориентация - Строка
//
// Возвращаемое значение:
//  Структура:
//    * Размер - Число
//    * МаксимальныйРазмер - Число
//    * МинимальныйРазмер - Число
//    * Элемент - ЭлементУсловногоОформления
//    * Поле - ПолеКомпоновкиДанных
//
Функция ПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, Ориентация = "Высота") Экспорт 
	
	Если ТипЗнч(СвойстваЗаголовка.ИдентификаторНастроек) <> Тип("ИдентификаторКомпоновкиДанных") Тогда 
		Возврат СтандартныеПараметрыРазмераПоляОтчета();
	КонецЕсли;
	
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	Для Каждого Элемент Из Группировка.УсловноеОформление.Элементы Цикл 
		
		ПараметрыОформления = Элемент.Оформление.Элементы;
		
		Идентификаторы = ИдентификаторыПараметровРазмераПоля(Ориентация);
		МинимальныйРазмер = ПараметрыОформления.Найти(Идентификаторы.МинимальныйРазмер);
		МаксимальныйРазмер = ПараметрыОформления.Найти(Идентификаторы.МаксимальныйРазмер);
		
		Если МинимальныйРазмер.Использование
			Или МаксимальныйРазмер.Использование Тогда 
			
			Параметры = СтандартныеПараметрыРазмераПоляОтчета();
			Параметры.Поле = СвойстваЗаголовка.Поле;
			Параметры.Элемент = Элемент;
			Параметры.МинимальныйРазмер = МинимальныйРазмер;
			Параметры.МаксимальныйРазмер = МаксимальныйРазмер;
			Параметры.Размер = Макс(МинимальныйРазмер.Значение, МаксимальныйРазмер.Значение);
			
			Возврат Параметры;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтандартныеПараметрыРазмераПоляОтчета();
	
КонецФункции

Функция ИдентификаторыПараметровРазмераПоля(Ориентация)
	
	Идентификаторы = Новый Структура;
	
	Если Ориентация = "Высота" Тогда 
		
		Идентификаторы.Вставить("МинимальныйРазмер", "МинимальнаяВысота");
		Идентификаторы.Вставить("МаксимальныйРазмер", "МаксимальнаяВысота");
		
	Иначе
		
		Идентификаторы.Вставить("МинимальныйРазмер", "МинимальнаяШирина");
		Идентификаторы.Вставить("МаксимальныйРазмер", "МаксимальнаяШирина");
		
	КонецЕсли;
	
	Возврат Идентификаторы;
	
КонецФункции

Процедура ДобавитьПараметрыРазмераПоляОтчета(Форма, СвойстваЗаголовка, Размер, Ориентация = "Высота")
	
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	Элемент = Группировка.УсловноеОформление.Элементы.Добавить();
	
	ПараметрыОформления = Элемент.Оформление.Элементы;
	
	Идентификаторы = ИдентификаторыПараметровРазмераПоля(Ориентация);
	
	Параметры = СтандартныеПараметрыРазмераПоляОтчета(Размер);
	Параметры.Поле = СвойстваЗаголовка.Поле;
	Параметры.Элемент = Элемент;
	Параметры.МинимальныйРазмер = ПараметрыОформления.Найти(Идентификаторы.МинимальныйРазмер);
	Параметры.МаксимальныйРазмер = ПараметрыОформления.Найти(Идентификаторы.МаксимальныйРазмер);
	
	ОбновитьПараметрыРазмера(Параметры, Размер);
	
КонецПроцедуры

Процедура ОбновитьПараметрыРазмера(Параметры, Размер)
	
	Параметры.Элемент.Использование = Истина;
	
	Параметры.МинимальныйРазмер.Значение = Размер;
	Параметры.МинимальныйРазмер.Использование = Истина;
	
	Параметры.МаксимальныйРазмер.Значение = Размер;
	Параметры.МаксимальныйРазмер.Использование = Истина;
	
	ПроверитьИзменяемоеПоле(Параметры.Элемент.Поля, Параметры.Поле);
	УстановитьОбластьИзмененияРазмера(Параметры.Элемент);
	
КонецПроцедуры

// Параметры:
//  Размер - Число
//         - Неопределено
//
// Возвращаемое значение:
//  Структура:
//    * Размер - Число
//             - Неопределено
//    * МаксимальныйРазмер - Число
//    * МинимальныйРазмер - Число
//    * Элемент - ЭлементУсловногоОформления
//    * Поле - ПолеТабличногоДокумента
//
Функция СтандартныеПараметрыРазмераПоляОтчета(Размер = 0)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Поле", Неопределено);
	Параметры.Вставить("Элемент", Неопределено);
	Параметры.Вставить("МинимальныйРазмер", Неопределено);
	Параметры.Вставить("МаксимальныйРазмер", Неопределено);
	Параметры.Вставить("Размер", Размер);
	
	Возврат Параметры;
	
КонецФункции

// Параметры:
//  Поля - ОформляемыеПоляКомпоновкиДанных
//  ПолеИскомое - ПолеКомпоновкиДанных
//
Процедура ПроверитьИзменяемоеПоле(Поля, ПолеИскомое)
	
	Поле = Неопределено;
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если Элемент.Поле = ПолеИскомое Тогда 
			
			Поле = Элемент;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Поле = Неопределено Тогда 
		
		Поле = Поля.Элементы.Добавить();
		Поле.Поле = ПолеИскомое;
		
	КонецЕсли;
	
	Поле.Использование = Истина;
	
КонецПроцедуры

Процедура УстановитьОбластьИзмененияРазмера(Элемент)
	
	НеиспользуемыеОбласти = Новый Массив;
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОбщемИтоге");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОтборе");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВПараметрах");
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПараметрыКлиента.ВерсияРежимаСовместимости, "8.3.16.0") >= 0 Тогда 
		НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеОбщегоИтога");
	КонецЕсли;
	
	Для Каждого Область Из НеиспользуемыеОбласти Цикл 
		Элемент[Область] = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасширенноеОформлениеГруппировкиОтчета

Функция ЭлементОформленияГруппировкиОтчета(Группировка, Поле)
	
	Оформление = Группировка.УсловноеОформление;
	
	Для Каждого ЭлементОформления Из Оформление.Элементы Цикл 
		
		Для Каждого ПолеОформления Из ЭлементОформления.Поля.Элементы Цикл 
			
			Если ПолеОформления.Поле = Поле Тогда 
				Возврат ЭлементОформления;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИдентификаторЭлементаОформленияГруппировкиОтчета(Группировка, Поле)
	
	ЭлементОформления = ЭлементОформленияГруппировкиОтчета(Группировка, Поле);
	
	Если ЭлементОформления <> Неопределено Тогда 
		Возврат Группировка.УсловноеОформление.ПолучитьИдентификаторПоОбъекту(ЭлементОформления);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция УсловиеОформленияГруппировкиОтчета(Поле, Значение)
	
	Если Значение = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Условие = Новый Структура;
	Условие.Вставить("ЛевоеЗначение", Поле);
	Условие.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	Условие.Вставить("ПравоеЗначение", Значение);
	
	Возврат Условие;
	
КонецФункции

// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Структура
//
Процедура ПослеИзмененияЭлементаОформленияГруппировкиОтчета(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ОформитьРазделОтчета(
		ДополнительныеПараметры.Раздел,
		Результат.ЭлементКД,
		ДополнительныеПараметры.Поле,
		ДополнительныеПараметры.Ресурс);
	
	ОповеститьОЗавершенииКонтекстнойНастройки(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Действие);
	
КонецПроцедуры

Процедура ОформитьРазделОтчета(Раздел, ОбразецОформления, Поле, ЭтоРесурс)
	
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		ОформитьГруппировкиРазделаОтчета(Раздел.Строки, ОбразецОформления, Поле, ЭтоРесурс);
	Иначе
		ОформитьГруппировкуРазделаОтчета(Раздел, ОбразецОформления, Поле, ЭтоРесурс);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьГруппировкиРазделаОтчета(Группировки, ОбразецОформления, Поле, ЭтоРесурс)
	
	Для Каждого Группировка Из Группировки Цикл 
		ОформитьГруппировкуРазделаОтчета(Группировка, ОбразецОформления, Поле, ЭтоРесурс);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьГруппировкуРазделаОтчета(Группировка, ОбразецОформления, Поле, ЭтоРесурс)
	
	Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		ОформитьГруппировкиРазделаОтчета(Группировка.Строки, ОбразецОформления, Поле, ЭтоРесурс);
		
	Иначе
		
		ОформлениеПрименимоКГруппировке = ОформлениеПрименимоКГруппировке(Группировка, Поле, ЭтоРесурс);
		
		Если ОформлениеПрименимоКГруппировке Тогда 
			
			Оформление = Группировка.УсловноеОформление;
			ЭлементОформления = ЭлементОформленияГруппировкиОтчета(Группировка, Поле);
			
			Если ЭлементОформления = Неопределено Тогда 
				ЭлементОформления = Оформление.Элементы.Добавить();
			Иначе
				СброситьОформлениеГруппировкиОтчета(ЭлементОформления, Ложь);
			КонецЕсли;
			
			ОтчетыКлиентСервер.ЗаполнитьСвойстваРекурсивно(Оформление, ЭлементОформления, ОбразецОформления);
			
			УстановитьОбластьОформленияГруппировкиОтчета(ЭлементОформления);
			
		КонецЕсли;
		
		ОформитьГруппировкиРазделаОтчета(Группировка.Структура, ОбразецОформления, Поле, ЭтоРесурс);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОбластьОформленияГруппировкиОтчета(ЭлементОформления)
	
	НеиспользуемыеОбласти = НеиспользуемыеОбластиОформления();
	
	Для Каждого Область Из НеиспользуемыеОбласти Цикл 
		ЭлементОформления[Область] = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	КонецЦикла;
	
КонецПроцедуры

Функция НеиспользуемыеОбластиОформления()
	
	НеиспользуемыеОбласти = Новый Массив;
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовке");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеПолей");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОбщемИтоге");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВОтборе");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВПараметрах");
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПараметрыКлиента.ВерсияРежимаСовместимости, "8.3.16.0") < 0 Тогда 
		Возврат НеиспользуемыеОбласти;
	КонецЕсли;
	
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеПолейРесурсов");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеОбщегоИтога");
	НеиспользуемыеОбласти.Добавить("ИспользоватьВЗаголовкеПолейРесурсовОбщегоИтога");
	
	Возврат НеиспользуемыеОбласти;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеПолейРаздела

Процедура ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел)
	
	ГруппировкиРаздела = Новый Массив;
	
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		ГруппировкиРаздела.Добавить(Раздел.Строки);
		ГруппировкиРаздела.Добавить(Раздел.Колонки);
		
	Иначе
		
		ОбновитьПоляГруппировки(КомпоновщикНастроек, Настройки, Раздел);
		ГруппировкиРаздела.Добавить(Раздел.Структура);
		
	КонецЕсли;
	
	Для Каждого Группировки Из ГруппировкиРаздела Цикл 
		
		Для Каждого Группировка Из Группировки Цикл 
			
			ОбновитьПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка);
			ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Группировка);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка)
	
	Если ТипЗнч(Группировка) <> Тип("ГруппировкаКомпоновкиДанных")
		И ТипЗнч(Группировка) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 
		
		ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Группировка);
	КонецЕсли;
	
	ДобавляемыеПоля = СтандартныеДобавляемыеПоля();
	ИспользуемыеНастройки = ИспользуемыеНастройкиГруппировки(Настройки, Группировка);
	
	НайтиПоляГруппировки(ИспользуемыеНастройки, Группировка, ДобавляемыеПоля);
	НайтиВыбранныеПоляГруппировки(КомпоновщикНастроек, ИспользуемыеНастройки, Группировка, Группировка.Выбор, ДобавляемыеПоля);
	
	Поля = Группировка.Выбор.Элементы;
	Поля.Очистить();
	
	СоздатьИерархиюПолейГруппировки(Поля, ДобавляемыеПоля.ИндексГрупп);
	
	Для Каждого СвойстваПоля Из ДобавляемыеПоля.Свойства Цикл
		
		СвойстваТекущегоПоля = СвойстваПоля; // см. СвойстваПоля
		Родитель = СвойстваТекущегоПоля.Родитель; // см. СвойстваПоля
		
		Если Родитель = Неопределено Тогда 
			
			Если СвойстваТекущегоПоля.Индекс < Поля.Количество() Тогда 
				ПолеОтчета = Поля.Вставить(СвойстваТекущегоПоля.Индекс, Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				ПолеОтчета = Поля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
			
		Иначе
			
			ГруппаПолейОтчета = ДобавляемыеПоля.ИндексГрупп[Родитель.Идентификатор]; // ГруппаВыбранныхПолейКомпоновкиДанных
			
			Если СвойстваТекущегоПоля.Индекс < ГруппаПолейОтчета.Элементы.Количество() Тогда 
				ПолеОтчета = ГруппаПолейОтчета.Элементы.Вставить(СвойстваТекущегоПоля.Индекс, Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				ПолеОтчета = ГруппаПолейОтчета.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПолеОтчета, СвойстваТекущегоПоля);
		
	КонецЦикла;
	
	ПолеОтчета = Поля.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ПолеОтчета.Использование = Ложь;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//    * Свойства - Массив из Структура
//    * ИндексПолей - Соответствие
//    * ИндексГрупп - Соответствие
// 
Функция СтандартныеДобавляемыеПоля()
	
	ДобавляемыеПоля = Новый Структура;
	ДобавляемыеПоля.Вставить("Свойства", Новый Массив);
	ДобавляемыеПоля.Вставить("ИндексПолей", Новый Соответствие);
	ДобавляемыеПоля.Вставить("ИндексГрупп", Новый Соответствие);
	
	Возврат ДобавляемыеПоля;
	
КонецФункции

Процедура НайтиПоляГруппировки(Настройки, Группировка, ДобавляемыеПоля)
	
	Если Не ИспользуетсяАвтоПоле(Группировка.Выбор) Тогда 
		Возврат;
	КонецЕсли;
	
	ПоляГруппировки = Группировка.ПоляГруппировки;
	
	Для Каждого Элемент Из ПоляГруппировки.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных")
			И Элемент.Использование Тогда 
			
			ВыбранноеПолеГруппировки = ПолеОтчета(Группировка.Выбор, Элемент.Поле);
			ВыбранноеПолеНастроек = ПолеОтчета(Настройки.Выбор, Элемент.Поле);
			
			Если ВыбранноеПолеГруппировки = Неопределено
				И ВыбранноеПолеНастроек = Неопределено Тогда 
				
				ДобавитьПредыдущиеПоляГруппировки(ДобавляемыеПоля, Группировка, Элемент);
				ДобавитьПолеГруппировки(ДобавляемыеПоля, ПоляГруппировки, Элемент);
				
			ИначеЕсли ВыбранноеПолеГруппировки = Неопределено
				И ВыбранноеПолеНастроек <> Неопределено
				И Не ВыбранноеПолеНастроек.Использование Тогда 
				
				ДобавитьПолеГруппировки(ДобавляемыеПоля, ПоляГруппировки, Элемент);
				
			ИначеЕсли ВыбранноеПолеНастроек = Неопределено
				И ВыбранноеПолеГруппировки <> Неопределено
				И Не ВыбранноеПолеГруппировки.Использование Тогда 
				
				ДобавитьПолеГруппировки(ДобавляемыеПоля, ПоляГруппировки, Элемент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВыбранныеПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка, Поля, ДобавляемыеПоля)
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда 
			
			НайтиВыбранныеПоляНастроек(КомпоновщикНастроек, Группировка, Настройки.Выбор, Настройки.Выбор, ДобавляемыеПоля);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			НайтиВыбранныеПоляГруппировки(КомпоновщикНастроек, Настройки, Группировка, Элемент, ДобавляемыеПоля);
			
		ИначеЕсли РазрешеноИспользоватьПолеВГруппировке(КомпоновщикНастроек, Группировка, Элемент.Поле) Тогда 
			
			ДобавитьПолеГруппировки(ДобавляемыеПоля, Группировка.Выбор, Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВыбранныеПоляНастроек(КомпоновщикНастроек, Группировка, Узел, Поля, ДобавляемыеПоля)
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			НайтиВыбранныеПоляНастроек(КомпоновщикНастроек, Группировка, Узел, Элемент, ДобавляемыеПоля);
			
		ИначеЕсли ТипЗнч(Элемент) <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			И РазрешеноИспользоватьПолеВГруппировке(КомпоновщикНастроек, Группировка, Элемент.Поле) Тогда 
			
			ПолеОтчета = ПолеОтчета(Группировка.Выбор, Элемент.Поле);
			
			Если ПолеОтчета = Неопределено Тогда 
				ДобавитьПолеГруппировки(ДобавляемыеПоля, Узел, Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользуемыеНастройкиГруппировки(Настройки, Группировка)
	
	Если ТипЗнч(Группировка.Родитель) = Тип("НастройкиКомпоновкиДанных") Тогда 
		Возврат Группировка.Родитель;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ИспользуетсяАвтоПоле(Поля)
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			Или ТипЗнч(Элемент) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда 
			
			Возврат Элемент.Использование;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РазрешеноИспользоватьПолеВГруппировке(КомпоновщикНастроек, Группировка, Поле)
	
	Элементы = Группировка.ПоляГруппировки.Элементы;
	
	Если Элементы.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоляОтчета(КомпоновщикНастроек, Поле);
	
	Если ОписаниеПоля = Неопределено Тогда 
		ОписаниеПоля = Группировка.ПоляГруппировки.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле);
	КонецЕсли;
	
	Если ОписаниеПоля <> Неопределено
		И ОписаниеПоля.Ресурс Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных")
			И Элемент.Использование
			И (Элемент.Поле = Поле
				Или СтрНайти(Строка(Элемент.Поле), Строка(Поле)) > 0
				Или СтрНайти(Строка(Поле), Строка(Элемент.Поле)) > 0) Тогда 
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьПредыдущиеПоляГруппировки(ДобавляемыеПоля, Группировка, ТекущееПоле)
	
	ПоляГруппировки = Группировка.ПоляГруппировки.Элементы;
	ИндексТекущегоПоля = ПоляГруппировки.Индекс(ТекущееПоле);
	
	Если ИндексТекущегоПоля = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По ИндексТекущегоПоля - 1 Цикл 
		
		Поле = ПоляГруппировки[Индекс];
		
		Если ДобавляемыеПоля.ИндексПолей[Поле.Поле] = Неопределено Тогда 
			ДобавитьПолеГруппировки(ДобавляемыеПоля, Группировка.ПоляГруппировки, Поле);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолеГруппировки(ДобавляемыеПоля, Узел, Поле)
	
	Если ДобавляемыеПоля.ИндексПолей[Поле.Поле] <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СвойстваПоля = СвойстваПоля(Поле);
	СвойстваПоля.Идентификатор = Узел.ПолучитьИдентификаторПоОбъекту(Поле);
	
	Если СвойстваПоля.Родитель = Неопределено Тогда 
		СвойстваПоля.Индекс = Узел.Элементы.Индекс(Поле);
	Иначе
		СвойстваПоля.Индекс = Поле.Родитель.Элементы.Индекс(Поле);
	КонецЕсли;
	
	ДобавляемыеПоля.Свойства.Добавить(СвойстваПоля);
	ДобавляемыеПоля.ИндексПолей.Вставить(Поле.Поле, СвойстваПоля);
	
	ДобавитьГруппуПолей(ДобавляемыеПоля, Узел, СвойстваПоля);
	
КонецПроцедуры

// Параметры:
//  Поле - ВыбранноеПолеКомпоновкиДанных
//       - АвтоВыбранноеПолеКомпоновкиДанных
//       - ГруппаВыбранныхПолейКомпоновкиДанных
//       - ПолеГруппировкиКомпоновкиДанных
//
// Возвращаемое значение:
//  Структура:
//    * Тип - Тип
//    * Индекс - Число
//    * Идентификатор - ИдентификаторКомпоновкиДанных
//    * РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных 
//    * Поле - ПолеКомпоновкиДанных
//    * Использование - Булево
//    * Заголовок - Строка
//    * Родитель - Структура
//
Функция СвойстваПоля(Поле)
	
	СвойстваПоля = Новый Структура;
	СвойстваПоля.Вставить("Заголовок", "");
	СвойстваПоля.Вставить("Использование", Ложь);
	СвойстваПоля.Вставить("Поле", Неопределено);
	СвойстваПоля.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	СвойстваПоля.Вставить("Родитель", Неопределено);
	СвойстваПоля.Вставить("Идентификатор", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СвойстваПоля, Поле);
	
	СвойстваПоля.Вставить("Индекс", -1);
	СвойстваПоля.Вставить("Тип", ТипЗнч(Поле));
	
	Возврат СвойстваПоля;
	
КонецФункции

Процедура ДобавитьГруппуПолей(ДобавляемыеПоля, Узел, Элемент, Группа = Неопределено)
	
	Если Элемент.Тип = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
		Или Элемент.Тип = Тип("ВыбранноеПолеКомпоновкиДанных")
		И ТипЗнч(Элемент.Родитель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
		
		Группа = Элемент.Родитель;
	КонецЕсли;
	
	Если ТипЗнч(Группа) <> Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Идентификатор = Узел.ПолучитьИдентификаторПоОбъекту(Группа);
	СвойстваГруппы = ДобавляемыеПоля.ИндексГрупп[Идентификатор];
	
	Если СвойстваГруппы = Неопределено Тогда 
		
		СвойстваГруппы = СвойстваГруппыПолей(Группа);
		СвойстваГруппы.Идентификатор = Идентификатор;
		
		ДобавляемыеПоля.ИндексГрупп.Вставить(Идентификатор, СвойстваГруппы);
		
	КонецЕсли;
	
	СвойстваГруппы.Элементы.Добавить(Элемент);
	Элемент.Родитель = СвойстваГруппы;
	
	Если ТипЗнч(Группа.Родитель) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
		ДобавитьГруппуПолей(ДобавляемыеПоля, Узел, СвойстваГруппы);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Группа - ГруппаВыбранныхПолейКомпоновкиДанных
//
// Возвращаемое значение:
//   Структура:
//     * Заголовок - Строка
//     * Использование - Булево
//     * Поле - Неопределено
//     * Расположение - РасположениеПоляКомпоновкиДанных
//     * РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных
//     * Родитель - Структура
//     * Идентификатор - ИдентификаторКомпоновкиДанных
//     * Элементы - Массив
//     * Тип - Тип
//
Функция СвойстваГруппыПолей(Группа)
	
	СвойстваГруппы = Новый Структура;
	СвойстваГруппы.Вставить("Заголовок", "");
	СвойстваГруппы.Вставить("Использование", Ложь);
	СвойстваГруппы.Вставить("Поле", Неопределено);
	СвойстваГруппы.Вставить("Расположение", РасположениеПоляКомпоновкиДанных.Авто);
	СвойстваГруппы.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	СвойстваГруппы.Вставить("Родитель", Неопределено);
	СвойстваГруппы.Вставить("Идентификатор", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СвойстваГруппы, Группа);
	
	СвойстваГруппы.Вставить("Элементы", Новый Массив);
	СвойстваГруппы.Вставить("Тип", ТипЗнч(Группа));
	
	Возврат СвойстваГруппы;
	
КонецФункции

// Параметры:
//  Поля - КоллекцияВыбранныхПолейКомпоновкиДанных
//  ИндексГрупп - Соответствие из КлючИЗначение:
//    * Ключ - ИдентификаторКомпоновкиДанных
//    * Значение - см. СвойстваГруппыПолей
//
Процедура СоздатьИерархиюПолейГруппировки(Поля, ИндексГрупп)
	
	СоздатьОсновныеГруппыПолейГруппировки(Поля, ИндексГрупп);
	
	Для Каждого Индекс Из ИндексГрупп Цикл 
		
		СвойстваГруппы = Индекс.Значение; // см. СвойстваГруппыПолей
		
		Если ТипЗнч(СвойстваГруппы) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		СвойстваРодителяГруппы = СвойстваГруппы.Родитель; // см. СвойстваГруппыПолей
		
		Если СвойстваРодителяГруппы <> Неопределено Тогда 
			
			Родитель = ИндексГрупп[СвойстваРодителяГруппы.Идентификатор]; // ВыбранныеПоляКомпоновкиДанных
			
			Группа = Родитель.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Группа, СвойстваГруппы);
			
			ИндексГрупп.Вставить(Индекс.Ключ, Группа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОсновныеГруппыПолейГруппировки(Поля, ИндексГрупп)
	
	Для Каждого Индекс Из ИндексГрупп Цикл 
		
		СвойстваГруппы = Индекс.Значение; // см. 
		
		Если ТипЗнч(СвойстваГруппы) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СвойстваГруппы.Родитель = Неопределено Тогда 
			
			Группа = Поля.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(Группа, СвойстваГруппы);
			
			ИндексГрупп.Вставить(Индекс.Ключ, Группа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискПоля

// Параметры:
//  Поля - ВыбранныеПоляКомпоновкиДанных
//       - ПоляГруппировкиКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  ПолеОтчета - ВыбранноеПолеКомпоновкиДанных
//             - ПолеГруппировкиКомпоновкиДанных
//             - Неопределено
//
// Возвращаемое значение:
//  ВыбранноеПолеКомпоновкиДанных
//  ПолеГруппировкиКомпоновкиДанных
//  Неопределено
//
Функция ПолеОтчета(Поля, Поле, ПолеОтчета = Неопределено) Экспорт 
	
	НайтиПолеОтчета(Поля, Поле, ПолеОтчета);
	
	Возврат ПолеОтчета;
	
КонецФункции

// Параметры:
//  Поля - ВыбранныеПоляКомпоновкиДанных
//       - ПоляГруппировкиКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  НайденноеПоле - ВыбранноеПолеКомпоновкиДанных
//                - ПолеГруппировкиКомпоновкиДанных
//                - Неопределено
//
Процедура НайтиПолеОтчета(Поля, Поле, НайденноеПоле)
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			И Элемент.Поле = Поле Тогда 
			
			НайденноеПоле = Элемент;
			Возврат;
			
		ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			НайтиПолеОтчета(Элемент, Поле, НайденноеПоле);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПоля

Процедура ВыбратьПолеОтчета(Форма, Действие, ИмяКоллекции, Обработчик = Неопределено,
	Поле = Неопределено, ИдентификаторУзлаНастроек = Неопределено)
	
	Если Обработчик = Неопределено Тогда 
		Обработчик = ОбработчикВыбораПоляОтчета(Форма, Действие);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НастройкиОтчета", Форма.НастройкиОтчета);
	ПараметрыВыбора.Вставить("КомпоновщикНастроек", КомпоновщикНастроекОтчета(Форма));
	ПараметрыВыбора.Вставить("Режим", ИмяКоллекции);
	ПараметрыВыбора.Вставить("ПолеКД", Поле);
	ПараметрыВыбора.Вставить("ИдентификаторЭлементаСтруктурыНастроек",
		ИдентификаторЭлементаСтруктурыНастроек(Форма, ИдентификаторУзлаНастроек));
	
	ОткрытьФорму(
		"ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ВыборПоляОтчета",
		ПараметрыВыбора, Форма, Форма.УникальныйИдентификатор,,, Обработчик);
	
КонецПроцедуры

Процедура ВыбратьПолеОтчетаИзМеню(Форма, Команда, ИмяКоллекции = "ВыбранныеПоля")
	
	Обработчик = ОбработчикВыбораПоляОтчета(Форма, ДействиеКоманды(Команда));
	УточнитьИмяКоллекции(ИмяКоллекции, Обработчик);
	
	ПоляОтчета = ПоляОтчета(Форма, Команда, ИмяКоллекции);
	
	Если ПоляОтчета.Количество() > 20
		Или ПоляОтчета.Количество() = 1
		И ПоляОтчета.НайтиПоЗначению("Еще") <> Неопределено Тогда 
		
		ВыбратьПолеОтчета(Форма, ДействиеКоманды(Команда), ИмяКоллекции, Обработчик);
		Возврат;
		
	КонецЕсли;
	
	Форма.ПоказатьВыборИзМеню(Обработчик, ПоляОтчета, Форма.ТекущийЭлемент);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Действие - Строка
//
// Возвращаемое значение:
//  ОписаниеОповещения
//
Функция ОбработчикВыбораПоляОтчета(Форма, Действие)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("Действие", Действие);
	ПараметрыОбработчика.Вставить("СвойстваЗаголовка", СвойстваЗаголовкаОтчета(Форма));
	
	Возврат Новый ОписаниеОповещения("ПослеВыбораПоля", Форма, ПараметрыОбработчика);
	
КонецФункции

// Параметры:
//  ВыбранноеПоле - ЭлементСпискаЗначений
//                - ВыбранноеПолеКомпоновкиДанных
//  ДополнительныеПараметры - Структура:
//    * Форма - ФормаКлиентскогоПриложения
//    * Действие - Строка
//    * СвойстваЗаголовка - см. СвойстваЗаголовкаОтчета
//
Процедура ПослеВыбораПоля(ВыбранноеПоле, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранноеПоле = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Поле = ?(ТипЗнч(ВыбранноеПоле) = Тип("ЭлементСпискаЗначений"), ВыбранноеПоле.Значение, ВыбранноеПоле);
	
	Если Поле = "Еще" Тогда 
		
		ВыбратьПолеОтчета(Форма, ДополнительныеПараметры.Действие, ДополнительныеПараметры.ИмяКоллекции);
		Возврат;
		
	КонецЕсли;
	
	СвойстваЗаголовка = ДополнительныеПараметры.СвойстваЗаголовка;
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Действие = ДополнительныеПараметры.Действие;
	РолиПолей = Форма.НастройкиОтчета.СвойстваРезультата.РолиПолей;
	
	Если СтрНачинаетсяС(Действие, "ВставитьПоле") Тогда 
		
		ВставитьПоле(КомпоновщикНастроек, Настройки, Поле, Действие, СвойстваЗаголовка, РолиПолей);
		
	ИначеЕсли СтрНачинаетсяС(Действие, "ВставитьГруппировку") Тогда 
		
		ВставитьГруппировку(Настройки, Действие, Поле, СвойстваЗаголовка);
		
	КонецЕсли;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, Действие);
	
КонецПроцедуры

#КонецОбласти

#Область ПоляОтчета

Функция ПоляОтчета(Форма, Команда, ИмяКоллекции)
	
	ДоступныеПоля = ДоступныеПоляОтчета(КомпоновщикНастроекОтчета(Форма), ИмяКоллекции);
	ПоляОтчета = ОсновныеПоляОтчета(Форма.НастройкиОтчета.СвойстваРезультата, ДоступныеПоля);
	
	Если ПоляОтчета.Количество() = 0 Тогда 
		ДобавитьДоступныеПоляОтчета(ПоляОтчета, ДоступныеПоля);
	КонецЕсли;
	
	ИсключитьИспользуемыеПоляОтчета(ПоляОтчета, Форма, Команда);
	ИсключитьНедоступныеПоляОтчета(ПоляОтчета, Форма, Команда);
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	
	Если Не СвойстваЗаголовка.Ресурс
		И ПоляОтчета.НайтиПоЗначению("Еще") = Неопределено Тогда 
		
		ПоляОтчета.Добавить("Еще", НСтр("ru = 'Еще...'"));
	КонецЕсли;
	
	Возврат ПоляОтчета;
	
КонецФункции

Функция ОписаниеПоляОтчета(КомпоновщикНастроек, Поле, ИмяКоллекции = "Выбор")
	
	ДоступныеПоля = ДоступныеПоляОтчета(КомпоновщикНастроек, ИмяКоллекции);
	
	Возврат ДоступныеПоля.НайтиПоле(Поле);
	
КонецФункции

Функция ДоступныеПоляОтчета(КомпоновщикНастроек, ИмяКоллекции = "Выбор")
	
	Если ИмяКоллекции = "Отборы" Тогда 
		
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
		
	ИначеЕсли ИмяКоллекции = "Сортировка" Тогда 
		
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка;
		
	ИначеЕсли ИмяКоллекции = "ПоляГруппировки" Тогда 
		
		Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
		
	КонецЕсли;
	
	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	
КонецФункции

Функция ОсновныеПоляОтчета(СвойстваРезультата, ДоступныеПоля)
	
	ОсновныеПоляИзДоступных = Новый СписокЗначений;
	
	ОсновныеПоля = СвойстваРезультата.ОсновныеПоля;
	
	Для Каждого Поле Из ОсновныеПоля Цикл 
		
		ДоступноеПоле = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле));
		
		Если ДоступноеПоле <> Неопределено Тогда 
			ОсновныеПоляИзДоступных.Добавить(ДоступноеПоле, ДоступноеПоле.Заголовок,, КартинкаПоля(ДоступноеПоле.ТипЗначения));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсновныеПоляИзДоступных;
	
КонецФункции

Процедура ДобавитьДоступныеПоляОтчета(ПоляОтчета, ДоступныеПоля)
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля.Элементы Цикл 
		
		Если Не ДоступноеПоле.Папка Тогда 
			ПоляОтчета.Добавить(ДоступноеПоле, ДоступноеПоле.Заголовок,, КартинкаПоля(ДоступноеПоле.ТипЗначения));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОсновныеПоля - СписокЗначений
//  Форма - ФормаКлиентскогоПриложения
//  Команда - КомандаФормы
//
Процедура ИсключитьИспользуемыеПоляОтчета(ОсновныеПоля, Форма, Команда)
	
	Владелец = Форма.ТекущийЭлемент;
	
	Если ТипЗнч(Владелец) <> Тип("КнопкаФормы")
		И (ТипЗнч(Владелец) <> Тип("ПолеФормы") Или Владелец.Вид <> ВидПоляФормы.ПолеТабличногоДокумента) Тогда 
		
		Возврат;
	КонецЕсли;
	
	Если ДействиеКоманды(Команда) <> "ВставитьПолеСлева"
		И ДействиеКоманды(Команда) <> "ВставитьПолеСправа" Тогда 
		
		Возврат;
	КонецЕсли;
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	ИспользуемыеПоля = ИспользуемыеПоляОтчета(
		СвойстваЗаголовка, Форма.НастройкиОтчета.СвойстваРезультата.ИндексПолей);
	
	Индекс = ОсновныеПоля.Количество() - 1;
	
	Пока Индекс >= 0 Цикл 
		
		ДоступноеПоле = ОсновныеПоля[Индекс].Значение;
		
		Если ИспользуемыеПоля[ДоступноеПоле.Поле] <> Неопределено Тогда 
			ОсновныеПоля.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользуемыеПоляОтчета(СвойстваЗаголовка, ИндексПолей)
	
	ИндексПолейРаздела = ИндексПолей[СвойстваЗаголовка.ПорядокРаздела];
	ИндексПолейГруппировки = ИндексПолейРаздела[СвойстваЗаголовка.ПорядокГруппировки];
	
	Возврат ИндексПолейГруппировки;
	
КонецФункции

Функция КартинкаПоля(ТипЗначенияПоля)
	
	ДоступныеТипы = ТипЗначенияПоля.Типы();
	
	Если ДоступныеТипы.Количество() = 0 Тогда 
		Возврат БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	Если ДоступныеТипы.Количество() > 1 Тогда 
		Возврат БиблиотекаКартинок.ТипСоставной;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда 
		Возврат БиблиотекаКартинок.ТипЧисло;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда 
		Возврат БиблиотекаКартинок.ТипСтрока;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Дата")) Тогда 
		Возврат БиблиотекаКартинок.ТипДата;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Булево")) Тогда 
		Возврат БиблиотекаКартинок.ТипБулево;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		Возврат БиблиотекаКартинок.ТипИдентификатор;
	КонецЕсли;
	
	Возврат БиблиотекаКартинок.ТипСсылка;
	
КонецФункции

// Параметры:
//  ОсновныеПоля - СписокЗначений
//  Форма - ФормаКлиентскогоПриложения
//  Команда - КомандаФормы
//
Процедура ИсключитьНедоступныеПоляОтчета(ОсновныеПоля, Форма, Команда)
	
	Владелец = Форма.ТекущийЭлемент;
	
	Если ТипЗнч(Владелец) <> Тип("КнопкаФормы")
		И (ТипЗнч(Владелец) <> Тип("ПолеФормы") Или Владелец.Вид <> ВидПоляФормы.ПолеТабличногоДокумента) Тогда 
		
		Возврат;
	КонецЕсли;
	
	Если ДействиеКоманды(Команда) <> "ВставитьПолеСлева"
		И ДействиеКоманды(Команда) <> "ВставитьПолеСправа" Тогда 
		
		Возврат;
	КонецЕсли;
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	РолиПолей = Форма.НастройкиОтчета.СвойстваРезультата.РолиПолей;
	
	Индекс = ОсновныеПоля.Количество() - 1;
	
	Пока Индекс >= 0 Цикл 
		
		ДоступноеПоле = ОсновныеПоля[Индекс].Значение;
		
		Если СвойстваЗаголовка.Ресурс
			И Не ДоступноеПоле.Ресурс Тогда 
			
			ОсновныеПоля.Удалить(Индекс);
			
		ИначеЕсли СвойстваЗаголовка.Период
			И РолиПолей.Периоды[ДоступноеПоле.Поле] = Неопределено Тогда 
			
			ОсновныеПоля.Удалить(Индекс);
			
		ИначеЕсли Не СвойстваЗаголовка.Период
			И РолиПолей.Периоды[ДоступноеПоле.Поле] <> Неопределено Тогда 
			
			ОсновныеПоля.Удалить(Индекс);
			
		ИначеЕсли СвойстваЗаголовка.ИспользуетсяВПоляхГруппировки
			И СвойстваЗаголовка.ПереместитьПолеВправо
			И ДействиеКоманды(Команда) = "ВставитьПолеСправа"
			И ДоступноеПоле.Ресурс Тогда 
			
			ОсновныеПоля.Удалить(Индекс);
			
		ИначеЕсли СвойстваЗаголовка.ИспользуетсяВПоляхГруппировки
			И ДействиеКоманды(Команда) = "ВставитьПолеСлева"
			И ДоступноеПоле.Ресурс Тогда 
			
			ОсновныеПоля.Удалить(Индекс);
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПеремещениеПоля

Процедура ПереместитьПолеГоризонтально(Форма, Команда)
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
	
	Поля = Группировка.Выбор;
	ТекущееПоле = ПолеОтчета(Поля, СвойстваЗаголовка.Поле);
	
	ИсходныйИндексПоля = Поля.Элементы.Индекс(ТекущееПоле);
	
	Если ДействиеКоманды(Команда) = "ПереместитьПолеВлево" Тогда 
		
		НаправлениеСдвига = -1
		
	ИначеЕсли ДействиеКоманды(Команда) = "ПереместитьПолеВправо" Тогда 
		
		НаправлениеСдвига = 1
		
	КонецЕсли;
	
	КонечныйИндексПоля = ИсходныйИндексПоля + НаправлениеСдвига;
	
	Если КонечныйИндексПоля >= 0 Тогда 
	
		СоседнееПоле = Поля.Элементы[КонечныйИндексПоля];
		
		Пока КонечныйИндексПоля > 0 И Не СоседнееПоле.Использование Цикл 
			
			КонечныйИндексПоля = КонечныйИндексПоля + НаправлениеСдвига;
			СоседнееПоле = Поля.Элементы[КонечныйИндексПоля];
			
		КонецЦикла;
		
	КонецЕсли;
	
	Поля.Элементы.Сдвинуть(ТекущееПоле, КонечныйИндексПоля - ИсходныйИндексПоля);
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

Процедура ПереместитьПолеВертикально(Форма, Команда)
	
	СвойстваЗаголовка = СвойстваЗаголовкаОтчета(Форма);
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	Настройки = ИспользуемыеНастройки(Форма, СвойстваЗаголовка.ИдентификаторНастроек);
	Раздел = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Группировка = Настройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
	
	ОбновитьПоляРаздела(КомпоновщикНастроек, Настройки, Раздел);
	
	ПолеГруппировки = ПолеОтчета(Группировка.ПоляГруппировки, СвойстваЗаголовка.Поле);
	ВыбранноеПоле = ПолеОтчета(Группировка.Выбор, СвойстваЗаголовка.Поле);
	
	СоседняяГруппировка = СоседняяГруппировка(Форма, Команда, Настройки, СвойстваЗаголовка.ПорядокГруппировки);
	
	Если СоседняяГруппировка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИсходныйИндексПоля = Группировка.Выбор.Элементы.Индекс(ВыбранноеПоле);
	
	Поля = СоседняяГруппировка.ПоляГруппировки;
	КоличествоПолей = Поля.Элементы.Количество();
	
	Если КоличествоПолей > 0 Тогда 
		
		ИндексПоля = ?(ИсходныйИндексПоля < КоличествоПолей, ИсходныйИндексПоля, КоличествоПолей);
		НовоеПоле = Поля.Элементы.Вставить(ИндексПоля, Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовоеПоле, ?(ПолеГруппировки = Неопределено, ВыбранноеПоле, ПолеГруппировки));
		
	КонецЕсли;
	
	Поля = СоседняяГруппировка.Выбор;
	ИндексПоля = ИндексВыбранногоПоля(ИсходныйИндексПоля, Поля, СвойстваЗаголовка.Поле);
	НовоеПоле = Поля.Элементы.Вставить(ИндексПоля, Тип("ВыбранноеПолеКомпоновкиДанных"));
	
	ЗаполнитьЗначенияСвойств(НовоеПоле, ?(ВыбранноеПоле = Неопределено, ПолеГруппировки, ВыбранноеПоле));
	
	УстановитьВыводРеквизитовГруппировкиОтдельно(СоседняяГруппировка);
	
	Если ПолеГруппировки <> Неопределено Тогда 
		Группировка.ПоляГруппировки.Элементы.Удалить(ПолеГруппировки);
	КонецЕсли;
	
	Если ВыбранноеПоле <> Неопределено Тогда 
		
		Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда 
			
			ВыбранноеПоле.Использование = Ложь;
			СкрытьГруппировку(Настройки, Группировка, СвойстваЗаголовка.Поле);
			
		Иначе
			Группировка.Выбор.Элементы.Удалить(ВыбранноеПоле);
		КонецЕсли;
		
	КонецЕсли;
	
	ОповеститьОЗавершенииКонтекстнойНастройки(Форма, ДействиеКоманды(Команда));
	
КонецПроцедуры

Функция СоседняяГруппировка(Форма, Команда, Настройки, ПорядокГруппировки)
	
	СоседняяГруппировка = Неопределено;
	
	Если ДействиеКоманды(Команда) = "ПереместитьПолеВыше" Тогда 
		ПорядокСоседнейГруппировки = ПорядокГруппировки - 1;
	Иначе
		ПорядокСоседнейГруппировки = ПорядокГруппировки + 1;
	КонецЕсли;
	
	Заголовки = ЗаголовкиОтчета(Форма);
	
	Для Каждого Свойства Из Заголовки Цикл 
		
		Если Свойства.Значение.ПорядокГруппировки = ПорядокСоседнейГруппировки Тогда 
			
			СоседняяГруппировка = Настройки.ПолучитьОбъектПоИдентификатору(Свойства.Значение.ИдентификаторГруппировки);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоседняяГруппировка;
	
КонецФункции

Функция ИндексВыбранногоПоля(ИсходныйИндексПоля, КонечнаяКоллекцияПолей, Поле)
	
	Граница = КонечнаяКоллекцияПолей.Элементы.Количество();
	
	НовоеПоле = ПолеОтчета(КонечнаяКоллекцияПолей, Поле);
	
	Если НовоеПоле <> Неопределено Тогда 
		КонечнаяКоллекцияПолей.Элементы.Удалить(НовоеПоле);
	КонецЕсли;
	
	Для Каждого Элемент Из КонечнаяКоллекцияПолей.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			Или ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		ДоступноеПоле = КонечнаяКоллекцияПолей.ДоступныеПоляВыбора.НайтиПоле(Элемент.Поле);
		
		Если ДоступноеПоле <> Неопределено
			И ДоступноеПоле.Ресурс Тогда 
			
			Граница = КонечнаяКоллекцияПолей.Элементы.Индекс(Элемент);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(ИсходныйИндексПоля < Граница, ИсходныйИндексПоля, Граница);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаДополнительнойРасшифровки

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Область - ОбластьЯчеекТабличногоДокумента
//  ИмяПоля - Строка
//
// Возвращаемое значение:
//  Структура:
//    * ЭтоЗаголовок - Булево
//
Функция СвойстваОбластиРасшифровки(Форма, Область, ИмяПоля)
	
	НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	СвойстваЗаголовка = СвойстваРезультата.Заголовки[Область.Имя]; // см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
	
	СвойстваОбласти = Новый Структура;
	СвойстваОбласти.Вставить("ЭтоЗаголовок", ТипЗнч(СвойстваЗаголовка) = Тип("Структура"));
	СвойстваОбласти.Вставить("СвойстваЗаголовка", СвойстваЗаголовка);
	
	Если СвойстваОбласти.ЭтоЗаголовок Тогда 
		Возврат СвойстваОбласти;
	КонецЕсли;
	
	ПорядокРаздела = 0;
	ГраницаТекущегоРаздела = 0;
	
	Для Каждого Граница Из СвойстваРезультата.ГраницыРазделов Цикл 
		
		ПорядокРаздела = ПорядокРаздела + 1;
		
		Если Область.Верх >= ГраницаТекущегоРаздела
			И Область.Верх < Граница.Значение Тогда 
			
			Прервать;
		КонецЕсли;
		
		ГраницаТекущегоРаздела = Граница.Значение;
		
	КонецЦикла;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого Элемент Из СвойстваРезультата.Заголовки Цикл 
		
		СвойстваЗаголовка = Элемент.Значение;
		
		Если СвойстваЗаголовка.ПорядокРаздела = ПорядокРаздела
			И СвойстваЗаголовка.Поле = Поле Тогда 
			
			СвойстваОбласти.СвойстваЗаголовка = СвойстваЗаголовка;
			Возврат СвойстваОбласти;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СвойстваОбласти;
	
КонецФункции

#Область КонтекстноеМеню

Функция КонтекстноеМенюОбластиЗаголовка()
	
	КонтекстноеМеню = Новый СписокЗначений;
	
	// Фильтровать
	КонтекстноеМеню.Добавить("СнятьФильтр", НСтр("ru = 'Снять фильтр'"));
	КонтекстноеМеню.Добавить("Фильтровать", НСтр("ru = 'Фильтровать...'"),, БиблиотекаКартинок.ОтборКомпоновкиДанных);
	
	// Сортировать
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Возр, НСтр("ru = 'Сортировать по возрастанию'"),, БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию);
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Убыв, НСтр("ru = 'Сортировать по убыванию'"),, БиблиотекаКартинок.СортироватьСтрокиПоУбыванию);
	
	// Оформить
	ПодменюОформления = Новый СписокЗначений;
	ПодменюОформления.Добавить("УстановитьВысотуСтроки", НСтр("ru = 'Высота строки...'"),, БиблиотекаКартинок.ВысотаСтроки);
	ПодменюОформления.Добавить("УстановитьШиринуКолонки", НСтр("ru = 'Ширина колонки...'"),, БиблиотекаКартинок.ШиринаКолонки);
	
	КонтекстноеМеню.Добавить(ПодменюОформления, НСтр("ru = 'Оформить'"),, БиблиотекаКартинок.УсловноеОформлениеКомпоновкиДанных);
	
	Возврат КонтекстноеМеню;
	
КонецФункции

Функция КонтекстноеМенюОбластиДанных(СвойстваЗаголовка, ДоступныеВидыСравнения)
	
	КонтекстноеМеню = Новый СписокЗначений;
	КонтекстноеМеню.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение, НСтр("ru = 'Открыть'"));
	
	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Тогда 
		Возврат КонтекстноеМеню;
	КонецЕсли;
	
	Информация = Новый СистемнаяИнформация;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Информация.ВерсияПриложения, "8.3.16.0") >= 0 Тогда 
		
		КартинкиОформления = Новый Структура;
		КартинкиОформления.Вставить("ОформитьКрасным", БиблиотекаКартинок["ОформлениеКругКрасный"]);
		КартинкиОформления.Вставить("ОформитьЖелтым", БиблиотекаКартинок["ОформлениеКругЖелтый"]);
		КартинкиОформления.Вставить("ОформитьЗеленым", БиблиотекаКартинок["ОформлениеКругЗеленый"]);
		
	Иначе
		
		ПустаяКартинка = БиблиотекаКартинок["Пустая"];
		
		КартинкиОформления = Новый Структура;
		КартинкиОформления.Вставить("ОформитьКрасным", ПустаяКартинка);
		КартинкиОформления.Вставить("ОформитьЖелтым", ПустаяКартинка);
		КартинкиОформления.Вставить("ОформитьЗеленым", ПустаяКартинка);
		
	КонецЕсли;
	
	// Фильтровать
	УточнитьДоступныеВидыСравнения(ДоступныеВидыСравнения);
	КонтекстноеМеню.Добавить(ДоступныеВидыСравнения, НСтр("ru = 'Фильтровать'"),, БиблиотекаКартинок.ОтборКомпоновкиДанных);
	
	// Сортировать
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Возр, НСтр("ru = 'Сортировать по возрастанию'"),, БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию);
	КонтекстноеМеню.Добавить(НаправлениеСортировкиКомпоновкиДанных.Убыв, НСтр("ru = 'Сортировать по убыванию'"),, БиблиотекаКартинок.СортироватьСтрокиПоУбыванию);
	
	// Оформить
	ПодменюОформления = Новый СписокЗначений;
	ПодменюОформления.Добавить("ОформитьКрасным", НСтр("ru = 'Красным'"),, КартинкиОформления.ОформитьКрасным);
	ПодменюОформления.Добавить("ОформитьЖелтым", НСтр("ru = 'Желтым'"),, КартинкиОформления.ОформитьЖелтым);
	ПодменюОформления.Добавить("ОформитьЗеленым", НСтр("ru = 'Зеленым'"),, КартинкиОформления.ОформитьЗеленым);
	ПодменюОформления.Добавить("ОформитьОтрицательные", НСтр("ru = 'Отрицательные красным'"));
	ПодменюОформления.Добавить("ОформитьПоложительные", НСтр("ru = 'Положительные зеленым'"));
	ПодменюОформления.Добавить("УстановитьВысотуСтроки", НСтр("ru = 'Высота строки...'"),, БиблиотекаКартинок.ВысотаСтроки);
	ПодменюОформления.Добавить("УстановитьШиринуКолонки", НСтр("ru = 'Ширина колонки...'"),, БиблиотекаКартинок.ШиринаКолонки);
	ПодменюОформления.Добавить("ОформитьЕще", НСтр("ru = 'Еще...'"));
	
	КонтекстноеМеню.Добавить(ПодменюОформления, НСтр("ru = 'Оформить'"),, БиблиотекаКартинок.УсловноеОформлениеКомпоновкиДанных);
	
	Возврат КонтекстноеМеню;
	
КонецФункции

Процедура УточнитьДоступныеВидыСравнения(ДоступныеВидыСравнения)
	
	НедоступныеВидыСравнения = Новый Массив;
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	НедоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	Для Каждого Вид Из НедоступныеВидыСравнения Цикл 
		
		НайденныйВид = ДоступныеВидыСравнения.НайтиПоЗначению(Вид);
		
		Если НайденныйВид <> Неопределено Тогда 
			ДоступныеВидыСравнения.Удалить(НайденныйВид);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Расшифровка

Процедура ВыполнитьРасшифровку(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт 
	
	Если ВыполненноеДействие = Неопределено
		Или ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Данные = ДополнительныеПараметры.Данные;
	СвойстваОбласти = ДополнительныеПараметры.СвойстваОбласти;
	Меню = ДополнительныеПараметры.Меню;
	
	Если СвойстваОбласти.ЭтоЗаголовок Тогда 
		
		СвойстваЗаголовка = СвойстваОбласти.СвойстваЗаголовка;
		
		Если ТипЗнч(ВыполненноеДействие) = Тип("Строка")
			И СвойстваЗаголовка.Свойство(ВыполненноеДействие)
			И Не СвойстваЗаголовка[ВыполненноеДействие] Тогда 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Действие ""%1"" недоступно'"), Меню.НайтиПоЗначению(ВыполненноеДействие));
			
			ПоказатьПредупреждение(, ТекстСообщения);
			
		КонецЕсли;
		
		Если СтрНайти(СвойстваЗаголовка.ИдентификаторГруппировки, "/column/") = 0 Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполненноеДействие) = Тип("Строка")
		И ВыполненноеДействие = "СнятьФильтр" Тогда 
		
		СнятьФильтр(Форма, СвойстваОбласти.СвойстваЗаголовка);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполненноеДействие) = Тип("ВидСравненияКомпоновкиДанных")
		Или ТипЗнч(ВыполненноеДействие) = Тип("Строка") И СтрНачинаетсяС(ВыполненноеДействие, "Фильтровать") Тогда 
		
		Фильтровать(Форма, ВыполненноеДействие, СвойстваОбласти.СвойстваЗаголовка, Данные);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполненноеДействие) = Тип("НаправлениеСортировкиКомпоновкиДанных") Тогда 
		
		Если ВыполненноеДействие = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда 
			Команда = Форма.Команды.Найти("СортироватьПоВозрастанию");
		Иначе
			Команда = Форма.Команды.Найти("СортироватьПоУбыванию");
		КонецЕсли;
		
		Сортировать(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполненноеДействие) = Тип("Строка")
		И (ВыполненноеДействие = "ОформитьКрасным"
		Или ВыполненноеДействие = "ОформитьЖелтым"
		Или ВыполненноеДействие = "ОформитьЗеленым"
		Или ВыполненноеДействие = "ОформитьОтрицательные"
		Или ВыполненноеДействие = "ОформитьПоложительные"
		Или ВыполненноеДействие = "УстановитьВысотуСтроки"
		Или ВыполненноеДействие = "УстановитьШиринуКолонки"
		Или ВыполненноеДействие = "ОформитьЕще") Тогда 
		
		Команда = Форма.Команды.Найти(ВыполненноеДействие);
		
		Если ВыполненноеДействие = "ОформитьКрасным"
			Или ВыполненноеДействие = "ОформитьОтрицательные" Тогда 
			
			ОформитьКрасным(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значение);
			
		ИначеЕсли ВыполненноеДействие = "ОформитьЖелтым" Тогда 
			
			ОформитьЖелтым(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значение);
			
		ИначеЕсли ВыполненноеДействие = "ОформитьЗеленым"
			Или ВыполненноеДействие = "ОформитьПоложительные" Тогда 
			
			ОформитьЗеленым(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значение);
			
		ИначеЕсли ВыполненноеДействие = "УстановитьВысотуСтроки" Тогда 
			
			УстановитьВысотуСтроки(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка);
			
		ИначеЕсли ВыполненноеДействие = "УстановитьШиринуКолонки" Тогда 
			
			УстановитьШиринуКолонки(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка);
			
		ИначеЕсли ВыполненноеДействие = "ОформитьЕще" Тогда 
			
			ОформитьЕще(Форма, Команда, СвойстваОбласти.СвойстваЗаголовка, Данные.Значение);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		
		ПоказатьЗначение(, Данные.Значение);
		Возврат;
		
	КонецЕсли;
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
		
		ДополнительныеПараметры.Вставить("Настройки", ПараметрВыполненногоДействия);
		ОткрытьФормуОтчета(Форма, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуОтчета(Форма, ПараметрыОткрытия)
	
	НастройкиОтчета = Форма.НастройкиОтчета;
	Расшифровка = ПараметрыОткрытия.Расшифровка;
	
	СтандартнаяОбработка = Истина;
	
	Если СтандартнаяОбработка Тогда
		
		Расшифровка = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(
			Форма.ОтчетДанныеРасшифровки, ПараметрыОткрытия.Расшифровка, ПараметрыОткрытия.Настройки); 
		
		ПредставлениеВарианта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (Расшифровка)'"), Форма.ПредставлениеТекущегоВарианта);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Расшифровка", Расшифровка);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("ПредставлениеВарианта", ПредставлениеВарианта);
		ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
		
		ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Общее

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных
//
Функция КомпоновщикНастроекОтчета(Форма)
	
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КонтекстнаяНастройкаОтчета")
		Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КонтекстнаяНастройкаОтчета") Тогда 
		
		Возврат Форма.КомпоновщикНастроек;
	КонецЕсли;
	
	НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	
	Возврат СвойстваРезультата.КомпоновщикНастроек;
	
КонецФункции

// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   ИдентификаторНастроек - ИдентификаторКомпоновкиДанных
//                         - Неопределено
//
// Возвращаемое значение:
//  НастройкиКомпоновкиДанных
//
Функция ИспользуемыеНастройки(Форма, ИдентификаторНастроек = Неопределено)
	
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	ИспользуемыеНастройки = КомпоновщикНастроек.Настройки;
	
	Если ТипЗнч(ИдентификаторНастроек) <> Тип("ИдентификаторКомпоновкиДанных") Тогда 
		Возврат ИспользуемыеНастройки;
	КонецЕсли;
	
	НастройкиПоИдентификатору = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторНастроек);
	
	Если НастройкиПоИдентификатору = Неопределено Тогда 
		Возврат ИспользуемыеНастройки;
	КонецЕсли;
	
	Возврат НастройкиПоИдентификатору;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Соответствие
//
Функция ЗаголовкиОтчета(Форма)
	
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма")
		Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета")
		Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "КонтекстнаяНастройкаОтчета") Тогда 
		
		НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
		СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
		
		Возврат СвойстваРезультата.Заголовки;
	КонецЕсли;
	
	Возврат Форма.ЗаголовкиОтчета;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//   см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//
Функция СвойстваЗаголовкаОтчета(Форма)
	
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма")
		Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета") Тогда 
		
		Заголовки = ЗаголовкиОтчета(Форма);
		Поле = Форма.ТекущийЭлемент; // ПолеФормы, РасширениеПоляФормыДляПоляТабличногоДокумента
		Область = Поле.ТекущаяОбласть; // ОбластьЯчеекТабличногоДокумента
		
		Возврат Заголовки[Область.Имя];
		
	КонецЕсли;
	
	Возврат Форма.СвойстваЗаголовка;
	
КонецФункции

Процедура УточнитьИмяКоллекции(ИмяКоллекции, Обработчик)
	
	ДополнительныеПараметры = Обработчик.ДополнительныеПараметры;
	
	Если ДополнительныеПараметры.СвойстваЗаголовка.ТипПоля = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда 
		ИмяКоллекции = "ПоляГруппировки";
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИмяКоллекции", ИмяКоллекции);
	
КонецПроцедуры

Функция ИдентификаторЭлементаСтруктурыНастроек(Форма, ИдентификаторУзлаНастроек)
	
	Если ИдентификаторУзлаНастроек <> Неопределено Тогда 
		Возврат ИдентификаторУзлаНастроек;
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма")
		Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета") Тогда 
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ИдентификаторЭлементаСтруктурыНастроек;
	
КонецФункции

Функция ДействиеКоманды(Команда)
	
	Возврат ?(ЗначениеЗаполнено(Команда.Действие), Команда.Действие, Команда.Имя);
	
КонецФункции

Процедура ОповеститьОЗавершенииКонтекстнойНастройки(Форма, Действие)
	
	ЭтоФормОтчета = СтрЗаканчиваетсяНа(Форма.ИмяФормы, "Форма")
		Или СтрЗаканчиваетсяНа(Форма.ИмяФормы, "ФормаОтчета");
	
	ИспользуемыеНастройки = ИспользуемыеНастройки(Форма);
	КомпоновщикНастроек = КомпоновщикНастроекОтчета(Форма);
	КомпоновщикНастроек.ЗагрузитьНастройки(ИспользуемыеНастройки);
	
	ИдентификаторВладельца = ?(ЭтоФормОтчета, Форма.УникальныйИдентификатор, Форма.ВладелецФормы.УникальныйИдентификатор);
	
	Результат = СтандартныйРезультатНастройкиИзКонтекстногоМеню(КомпоновщикНастроек, Действие, ИдентификаторВладельца);
	
	Если ЭтоФормОтчета Тогда 
		Оповестить(Действие, Результат, ЭтотОбъект);
	Иначе
		Форма.ОповеститьОВыборе(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
//  Действие - Строка
//  ИдентификаторВладельца - УникальныйИдентификатор
//
// Возвращаемое значение:
//   Структура:
//     * Действие - Строка
//     * ИдентификаторВладельца - УникальныйИдентификатор
//     * КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
//     * Переформировать - Булево
//     * ВариантМодифицирован - Булево
//     * ПользовательскиеНастройкиМодифицированы - Булево
//     * СброситьПользовательскиеНастройки - Булево
//
Функция СтандартныйРезультатНастройкиИзКонтекстногоМеню(КомпоновщикНастроек, Действие, ИдентификаторВладельца) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("КомпоновщикНастроекКД", КомпоновщикНастроек);
	Результат.Вставить("Действие", Действие);
	Результат.Вставить("ИдентификаторВладельца", ИдентификаторВладельца);
	Результат.Вставить("Переформировать", СтрЗаканчиваетсяНа(Действие, "Сформировать"));
	Результат.Вставить("УчитыватьВремяФормирования", Истина);
	Результат.Вставить("ВариантМодифицирован", Истина);
	Результат.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	Результат.Вставить("СброситьПользовательскиеНастройки", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция СобытияКонтекстнойНастройки()
	
	События = Новый Соответствие;
	События.Вставить("ВставитьПолеСправа", Истина);
	События.Вставить("ВставитьПолеСправа", Истина);
	События.Вставить("ВставитьГруппировкуВыше", Истина);
	События.Вставить("ВставитьГруппировкуНиже", Истина);
	
	События.Вставить("ПереместитьПолеВлево", Истина);
	События.Вставить("ПереместитьПолеВправо", Истина);
	События.Вставить("ПереместитьПолеВыше", Истина);
	События.Вставить("ПереместитьПолеНиже", Истина);
	
	События.Вставить("СкрытьПоле", Истина);
	События.Вставить("ПереименоватьПоле", Истина);
	
	События.Вставить("СнятьФильтр", Истина);
	События.Вставить("Фильтровать", Истина);
	События.Вставить("ФильтроватьИСформировать", Истина);
	
	События.Вставить("СортироватьПоВозрастанию", Истина);
	События.Вставить("СортироватьПоУбыванию", Истина);
	
	События.Вставить("ОформитьКрасным", Истина);
	События.Вставить("ОформитьЖелтым", Истина);
	События.Вставить("ОформитьЗеленым", Истина);
	
	События.Вставить("ОформитьОтрицательные", Истина);
	События.Вставить("ОформитьПоложительные", Истина);
	
	События.Вставить("УстановитьВысотуСтроки", Истина);
	События.Вставить("УстановитьШиринуКолонки", Истина);
	
	События.Вставить("ОформитьЕще", Истина);
	
	Возврат События;
	
КонецФункции

Функция ДействиеНадПолемДоступно(Действие, СвойстваЗаголовка)
	
	Если Не СвойстваЗаголовка[Действие] Тогда 
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Действие недоступно для поля %1'"), СвойстваЗаголовка.Текст);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
