///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Открывает файл для просмотра или редактирования.
// Если файл открывается для просмотра, тогда получает файл в рабочий каталог пользователя,
// при этом ищет файл в рабочем каталоге и предлагает открыть существующий или получить файл с сервера.
// Если файл открывается для редактирования, тогда открывает файл в рабочем каталоге (если есть) или
// получает его с сервера.
//
// Параметры:
//  ДанныеФайла       - Структура - данные файла. Описание см. РаботаСФайлами.ДанныеФайла.
//  ДляРедактирования - Булево - Истина, если файл открывается для редактирования, иначе Ложь.
//
Процедура ОткрытьФайл(Знач ДанныеФайла, Знач ДляРедактирования = Ложь) Экспорт
	
	Если ДляРедактирования Тогда
		РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(Неопределено, ДанныеФайла);
	Иначе
		РаботаСФайламиСлужебныйКлиент.ОткрытьФайлСОповещением(Неопределено, ДанныеФайла, , ДляРедактирования); 
	КонецЕсли;
	
КонецПроцедуры

// Открывает в стандартной программе просмотра (проводнике) каталог на компьютере,
// в котором размещен указанный файл.
//
// Параметры:
//  ДанныеФайла - Структура - данные файла. Описание см. РаботаСФайлами.ДанныеФайла.
//
Процедура ОткрытьКаталогФайла(ДанныеФайла) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.КаталогФайла(Неопределено, ДанныеФайла);
	
КонецПроцедуры

// Открывает диалог выбора файлов для помещения в программу одного или нескольких файлов.
// При этом проверяются необходимые условия:
// - размер файла не превышает максимально допустимого,
// - файл имеет допустимое расширение,
// - имеется свободное место в томе (при хранении файлов в томах),
// - прочие условия.
//
// Параметры:
//  ВладелецФайла      - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект, к которому
//                       требуется прикрепить добавляемый файл.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                       которой будет помещен файл.
//  Фильтр             - Строка - фильтр выбираемого файла, например, картинки для номенклатуры.
//  ГруппаФайлов       - ОпределяемыйТип.ПрисоединенныйФайл - группа справочника с файлами, в которую будет 
//                       добавлен новый файл.
//  ОбработчикРезультата - ОписаниеОповещения - содержит описание процедуры, вызов которой будет произведен
//                       после добавления файлов со следующими параметрами:
//      * Результат - Массив - ссылки на добавленные файлы. Если файлы не были добавлены, пустой массив.
//      * ДополнительныеПараметры - Произвольный - значение, указанное при создании описания оповещения.
//
Процедура ДобавитьФайлы(Знач ВладелецФайла, Знач ИдентификаторФормы, Знач Фильтр = "", ГруппаФайлов = Неопределено,
	ОбработчикРезультата = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		ВызватьИсключение НСтр("ru = 'Не задано значение параметра ВладелецФайла в РаботаСФайламиКлиент.ДобавитьФайлы.'");
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВладелецФайла",        ВладелецФайла);
	Параметры.Вставить("ИдентификаторФормы",   ИдентификаторФормы);
	Параметры.Вставить("Фильтр",               Фильтр);
	Параметры.Вставить("ГруппаФайлов",         ГруппаФайлов);
	Параметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлыРасширениеПредложено", РаботаСФайламиСлужебныйКлиент, Параметры);
	РаботаСФайламиСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

// Открывает диалог выбора файлов для помещения в программу одного выбранного файла.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - содержит описание процедуры, вызов которой будет произведен
//                        после добавления файла со следующими параметрами:
//                    * Результат - Структура с полями:
//                       ** ФайлСсылка - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом,
//                                     если он был добавлен, иначе Неопределено.
//                       ** ФайлДобавлен - Булево - Истина, если файл добавлен.
//                       ** ТекстОшибки  - Строка - текст ошибки, если файл не был добавлен.
//                    * ДополнительныеПараметры - значение, которое было указано при создании объекта оповещения.
//
//   ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект, к которому
//                 требуется прикрепить добавляемый файл.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызвано создание файла.
//   РежимСоздания - Неопределено, Число - режим создания файла:
//       - Неопределено - показать диалог выбора режима создания файла.
//       - Число - создать файл указанным способом:
//           * 1 - из шаблона (копированием другого файла);
//           * 2 - с диска (из файловой системы клиента);
//           * 3 - со сканера.
//
//   ПараметрыДобавления - Структура - дополнительные параметры добавления файлов.
//     * МаксимальныйРазмер  - Число - ограничение на размер файла (в мегабайтах), загружаемого из файловой системы.
//                           Если принимает значение 0, проверка размера не проводится. Свойство игнорируется,
//                           если принимает значение больше, чем указано в константе МаксимальныйРазмерФайла.
//     * ФильтрДиалогаВыбора - Строка - фильтр, устанавливаемый в диалог выбора при добавлении файла.
//                           Формат см. в свойстве Фильтр объекта ДиалогВыбораФайла в синтакс-помощнике.
//     * НеОткрыватьКарточку - Булево - действие после создания. Если принимает значение Истина, карточка файла
//                           не будет открыта после создания, иначе - карточку файла будет открыта.
//
Процедура ДобавитьФайл(ОбработчикРезультата, ВладелецФайла, ФормаВладелец, РежимСоздания = Неопределено, 
	ПараметрыДобавления = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		ВызватьИсключение НСтр("ru = 'Не задано значение параметра ВладелецФайла в РаботаСФайламиКлиент.ДобавитьФайл.'");
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	Если ПараметрыДобавления = Неопределено
		Или ТипЗнч(ПараметрыДобавления) = Тип("Булево") Тогда
		
		ПараметрыВыполнения.Вставить("МаксимальныйРазмер" , 0);
		ПараметрыВыполнения.Вставить("НеОткрыватьКарточку", ?(ПараметрыДобавления = Неопределено, Ложь, ПараметрыДобавления));
		ПараметрыВыполнения.Вставить("ФильтрДиалогаВыбора",  НСтр("ru = 'Все файлы (*.*)|*.*'"));
		
	Иначе
		ПараметрыВыполнения.Вставить("МаксимальныйРазмер" , ПараметрыДобавления.МаксимальныйРазмер);
		ПараметрыВыполнения.Вставить("НеОткрыватьКарточку", ПараметрыДобавления.НеОткрыватьКарточку);
		ПараметрыВыполнения.Вставить("ФильтрДиалогаВыбора", ПараметрыДобавления.ФильтрДиалогаВыбора);
	КонецЕсли;
	
	Если РежимСоздания = Неопределено Тогда
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайл(ОбработчикРезультата, ВладелецФайла, ФормаВладелец, , ПараметрыВыполнения);
	Иначе
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыВыполнения.Вставить("ВладелецФайла", ВладелецФайла);
		ПараметрыВыполнения.Вставить("ФормаВладелец", ФормаВладелец);
		ПараметрыВыполнения.Вставить("ТолькоОдинФайл", Истина);
		РаботаСФайламиСлужебныйКлиент.ДобавитьПослеВыбораРежимаСоздания(РежимСоздания, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму для настройки параметров рабочего каталога из персональных настроек пользователя программы.
// Рабочий каталог - папка на персональном компьютере пользователя, в которой временно хранятся файлы,
// полученные из программы для просмотра или редактирования.
//
Процедура ОткрытьФормуНастройкиРабочегоКаталога() Экспорт
	
	ОткрытьФорму("ОбщаяФорма.НастройкаРабочегоКаталога");
	
КонецПроцедуры

// Показать предупреждение перед закрытием формы объекта в том случае,
// если у пользователя остались захваченные файлы, присоединенные к этому объекту.
// Вызывается из события ПередЗакрытием форм с файлами.
//
// Если захваченные файлы остались, то в параметре Отказ устанавливается значение Истина,
// а пользователю задается вопрос. Если пользователь ответил утвердительно, то форма закрывается.
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - форма, в которой редактируется файл.
//   Отказ            - Булево - параметр события ПередЗакрытием.
//   ЗавершениеРаботы - Булево - признак того, что форма закрывается в процессе завершения работы приложения.
//   ВладелецФайлов   - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект, к которому присоединены
//                    файлы.
//   ИмяРеквизита     - Строка - имя реквизита типа Булево, в котором хранится признак того,
//                    что вопрос уже выводился.
//
// Пример:
//
//	&НаКлиенте
//	Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
//		РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
//	КонецПроцедуры
//
Процедура ПоказатьПодтверждениеЗакрытияФормыСФайлами(Форма, Отказ, ЗавершениеРаботы, ВладелецФайлов,
	ИмяРеквизита = "МожноЗакрытьФормуСФайлами") Экспорт
	
	ИмяПроцедуры = "РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Форма", Форма, Тип("ФормаКлиентскогоПриложения"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Отказ", Отказ, Тип("Булево"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ЗавершениеРаботы", ЗавершениеРаботы, Тип("Булево"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяРеквизита", ИмяРеквизита, Тип("Строка"));
		
	Если Форма[ИмяРеквизита] Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Количество = РаботаСФайламиСлужебныйВызовСервера.КоличествоФайловЗанятыхТекущимПользователем(ВладелецФайлов);
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстВопроса = НСтр("ru = 'Один или несколько файлов заняты для редактирования.
	                          |
	                          |Продолжить?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(Форма, Отказ, ЗавершениеРаботы, ТекстВопроса, ИмяРеквизита);
	
КонецПроцедуры

// Открывает форму нового файла с копией указанного файла.
//
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект, к которому присоединен файл.
//  ФайлОснование - ОпределяемыйТип.ПрисоединенныйФайл - копируемый файл.
//  ДополнительныеПараметры - Структура - параметры открытия формы.
//    * ИмяСправочникаХранилищаФайлов - Строка - определяет справочник для хранения копии файла.
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание процедуры, которая будет вызвана при закрытии формы
//                                со следующими параметрами:
//                                <РезультатЗакрытия> - значение, переданное при вызове Закрыть() открываемой формы;
//                                <ДополнительныеПараметры> - значение, указанное при создании
//                                ОписаниеОповещенияОЗакрытии.
//                                Если параметр не указан, то по завершению никакая процедура вызвана не будет.
//
Процедура СкопироватьФайл(ВладелецФайла, ФайлОснование, ДополнительныеПараметры = Неопределено,
	ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		ВызватьИсключение НСтр("ru = 'Не задано значение параметра ВладелецФайла в РаботаСФайламиКлиент.СкопироватьФайл.'");
	КонецЕсли;
	
	ЭтоФайлы = ТипЗнч(ФайлОснование) = Тип("СправочникСсылка.Файлы");
	
	ПараметрыФормы = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
		ИмяСправочникаХранилищаФайлов = Неопределено;
		Если ДополнительныеПараметры.Свойство("ИмяСправочникаХранилищаФайлов", ИмяСправочникаХранилищаФайлов) Тогда
			ЭтоФайлы = (ИмяСправочникаХранилищаФайлов = "Файлы");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначениеКопирования", ФайлОснование);
	ПараметрыФормы.Вставить("ВладелецФайла", ВладелецФайла);
	Если ЭтоФайлы Тогда
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
	Иначе
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

// Открывает список электронных подписей файла и предлагает выбрать подписи
// для сохранения вместе с файлом по выбранному пользователем пути.
// Имя файл подписи формируется из имени файла и автора подписи с расширением "p7s".
//
// При отсутствии в конфигурации подсистемы «Электронная подпись» сохранение файла не будет выполнено.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  ИдентификаторФормы - УникальныйИдентификатор  - уникальный идентификатор формы, который используется для блокировки файл.
//
Процедура СохранитьВместеСЭП(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(ПрисоединенныйФайл);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	ПараметрыВыполнения.Вставить("ДанныеФайла",        ДанныеФайла);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Истина);
	ОписаниеДанных.Вставить("Представление",       ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОписаниеДанных.Вставить("Объект",              ПрисоединенныйФайл);
	
	ОписаниеДанных.Вставить("Данные",
		Новый ОписаниеОповещения("ПриСохраненииДанныхФайла", РаботаСФайламиСлужебныйКлиент, ПараметрыВыполнения));
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	МодульЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью(ОписаниеДанных);
	
КонецПроцедуры

// Открывает диалог сохранения файл, где пользователь может определить путь и имя для сохранения файла.
//
// Параметры:
//   ДанныеФайла           - Структура - данные файла. Описание см. РаботаСФайлами.ДанныеФайла.
//   ОбработчикЗавершения  - ОписаниеОповещения, Неопределено - содержит описание процедуры, которая
//                         будет вызвана после завершения со следующими параметрами:
//      * ПутьКФайлу              - Строка - полный путь к сохраненному файлу.
//      * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура СохранитьФайлКак(Знач ДанныеФайла, ОбработчикЗавершения = Неопределено) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("СохранитьФайлКакПослеСохранения",
		РаботаСФайламиСлужебныйКлиент, ОбработчикЗавершения);
	
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(Оповещение, ДанныеФайла, Неопределено);
	
КонецПроцедуры

// Открывает форму выбора файлов.
// Используется в обработчике выбора для переопределения стандартного поведения.
//
// Параметры:
//  ВладелецФайлов - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект,
//                   к которому прикреплены выбираемые файлы.
//  ЭлементФормы   - ТаблицаФормы, ПолеФормы - элемент формы, которому будет отправлено
//                   оповещение о выборе.
//  СтандартнаяОбработка - Булево - (возвращаемое значение), всегда устанавливается в Ложь.
//  ОписаниеОповещенияОВыборе - ОписаниеОповещения - описание процедуры, которая будет вызвана при закрытии формы 
//                                со следующими параметрами:
//    * ЗначениеВыбора - ОпределяемыйТип.ПрисоединенныйФайл, Неопределено - если произошел выбор, тогда будет 
//                       возвращено значение выбора. Иначе - Неопределено.
//    * ДополнительныеПараметры - Произвольный - значение, указанное при создании ОписаниеОповещенияОЗакрытии.
//
Процедура ОткрытьФормуВыбораФайлов(Знач ВладелецФайлов, Знач ЭлементФормы, СтандартнаяОбработка = Ложь,
	ОписаниеОповещенияОВыборе = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;

	Если ВладелецФайлов.Пустая() Тогда
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОНеобходимостиЗаписиПослеЗавершения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,
			НСтр("ru = 'Данные еще не записаны. 
				|Переход к ""Присоединенные файлы"" возможен только после записи данных.'"),
				РежимДиалогаВопрос.ОК);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВладелецФайла", ВладелецФайлов);
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭлементФормы,,,,
						?(ОписаниеОповещенияОВыборе <> Неопределено, ОписаниеОповещенияОВыборе, Неопределено));
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму файла.
// Может использоваться как обработчик открытия файла.
//
// Параметры:
//  ПрисоединенныйФайл      - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  СтандартнаяОбработка    - Булево - (возвращаемое значение) всегда устанавливается в Ложь.
//  ДополнительныеПараметры - Структура - параметры открытия формы.
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание процедуры, которая будет вызвана при закрытии формы,
//                                со следующими параметрами:
//                                <РезультатЗакрытия> - значение, переданное при вызове Закрыть() открываемой формы;
//                                <ДополнительныеПараметры> - значение, указанное при создании 
//                                ОписаниеОповещенияОЗакрытии. 
//                                Если параметр не указан, то по завершении никакая процедура вызвана не будет.
//
Процедура ОткрытьФормуФайла(Знач ПрисоединенныйФайл, СтандартнаяОбработка = Ложь, ДополнительныеПараметры = Неопределено, 
	ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	КонецЕсли;	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.Файлы") Тогда
		ПараметрыФормы.Вставить("Ключ", ПрисоединенныйФайл);
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
	Иначе	
		ПараметрыФормы.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,, ПрисоединенныйФайл,,, ОписаниеОповещенияОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет печать файлов на принтер.
//
// Параметры:
//  Файлы              - ОпределяемыйТип.ПрисоединенныйФайл, Массив - ссылка или массив ссылок на объекты с файлами.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                       которой будет помещен файл.
//
Процедура НапечататьФайлы(Знач Файлы, ИдентификаторФормы = Неопределено) Экспорт
	
	Если ТипЗнч(Файлы) <> Тип("Массив") Тогда
		Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Файлы);
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("НомерФайла",   0);
	ПараметрыВыполнения.Вставить("ДанныеФайлов", Файлы);
	ПараметрыВыполнения.Вставить("ДанныеФайла",  Файлы);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", ИдентификаторФормы);
	НапечататьФайлыВыполнение(Неопределено, ПараметрыВыполнения);
	
КонецПроцедуры

// Выполняет подписание файла электронной подписью.
// При отсутствии подсистемы «Электронная подпись» будет показано предупреждение
// о невозможности добавления электронной подписи.
//
// Параметры:
//  ПрисоединенныйФайл      - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы,
//                            который используется для блокировки файла.
//  ДополнительныеПараметры - Неопределено - стандартное поведение (см. ниже).
//                          - Структура - со свойствами:
//       * ДанныеФайла            - Структура - данные файла, если свойства нет, будет вставлено.
//       * ОбработкаРезультата    - ОписаниеОповещения - при вызове передается значение типа Булево,
//                                  если Истина - файл успешно подписан, иначе не подписан,
//                                  если свойства нет, оповещение не будет вызвано.
//
Процедура ПодписатьФайл(ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран файл, который нужно подписать.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Добавление электронных подписей не поддерживается.'"));
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если Не МодульЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Чтобы добавить электронную подпись, включите
			           |в настройках программы использование электронных подписей.'"));
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ДанныеФайла") Тогда
		ДополнительныеПараметры.Вставить("ДанныеФайла", РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(
			ПрисоединенныйФайл,, ИдентификаторФормы));
	КонецЕсли;
	
	ОбработкаРезультата = Неопределено;
	ДополнительныеПараметры.Свойство("ОбработкаРезультата", ОбработкаРезультата);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(ПрисоединенныйФайл,
		ДополнительныеПараметры.ДанныеФайла, ИдентификаторФормы, ОбработкаРезультата);
	
КонецПроцедуры

// См. РаботаСФайлами.ДанныеФайла.
// Возвращает структурированную информацию о файле. Используется в различных командах работы с файлами
// и как значение параметра ДанныеФайла других процедур и функций.
//
Функция ДанныеФайла(Знач ФайлСсылка,
                    Знач ИдентификаторФормы = Неопределено,
                    Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
                    Знач ДляРедактирования = Ложь) Экспорт
	
	Возврат РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
		ФайлСсылка,
		ИдентификаторФормы,
		ПолучатьСсылкуНаДвоичныеДанные,
		ДляРедактирования);

КонецФункции

// Получает файл из хранилища файлов в рабочий каталог пользователя.
// Аналог интерактивного действия Просмотреть или Редактировать без открытия полученного файла.
// Свойство ТолькоПросмотр полученного файла будет установлено в зависимости от того, захвачен
// файл для редактирования или нет. Если не захвачен - устанавливается только просмотр.
// Если в рабочем каталоге уже существует файл, тогда он будет удален и заменен файлом,
// полученным из хранилища файлов.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, которое выполняется после получения файла в
//   рабочий каталог пользователя. В качестве результата возвращается структура со свойствами:
//     * ПолноеИмяФайла - Строка - полное имя файла (с путем).
//     * ОписаниеОшибки - Строка - текст ошибки, если получить файл не удалось.
//
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище
//                       которой будет помещен файл.
//
//  ДополнительныеПараметры - Неопределено - использовать значения по умолчанию.
//     - Структура - с необязательными свойствами:
//         * ДляРедактирования - Булево    - начальное значение Ложь. Если Истина,
//                                           тогда файл будет захвачен для редактирования.
//         * ДанныеФайла       - Структура - свойства файла, которые можно передать для ускорения,
//                                           если они ранее были получены на клиент с сервера.
//
Процедура ПолучитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.ПолучитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры);
	
КонецПроцедуры

// Помещает файл из рабочего каталога пользователя в хранилище файлов.
// Аналог интерактивного действия Закончить редактирование.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, которое выполняется после помещения файла в
//   хранилище файлов. В качестве результата возвращается структура со свойствами:
//     * ОписаниеОшибки - Строка - текст ошибки, если поместить файл не удалось.
//
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы,
//          во временное хранилище которой надо поместить данные и вернуть новый адрес.
//
//  ДополнительныеПараметры - Неопределено - использовать значения по умолчанию.
//     - Структура - с необязательными свойствами:
//         * ПолноеИмяФайла - Строка - если заполнено, то указанный файл будет помещен в рабочий каталог
//                                     пользователя, а затем в хранилище файлов.
//         * ДанныеФайла    - Структура - свойства файла, которые можно передать для ускорения,
//                                        если они ранее были получены на клиент с сервера.
//
Процедура ПоместитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.ПоместитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайл, ИдентификаторФормы, ДополнительныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со сканером.

// Открывает форму настройки сканирования из пользовательских настроек.
//
Процедура ОткрытьФормуНастройкиСканирования() Экспорт
	
	Если Не РаботаСФайламиСлужебныйКлиент.ДоступноСканирование() Тогда
		ТекстСообщения = НСтр("ru = 'Для сканирования необходимо использовать 32-битную версию программы  для ОС Windows.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСФайламиСлужебныйКлиент.ПроинициализироватьКомпоненту();
	
	Если Не КомпонентаУстановлена Тогда
		ТекстВопроса = 
			НСтр("ru = 'Для продолжения работы необходимо установить компоненту сканирования. 
			           |Установить компоненту?'");
		Обработчик = Новый ОписаниеОповещения("ПоказатьВопросУстановкиКомпонентыСканирования", 
			ЭтотОбъект, КомпонентаУстановлена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиСканированияЗавершение(КомпонентаУстановлена, Неопределено);
	
КонецПроцедуры

#Область УправлениеПрисоединеннымиФайлами

// Обработчик события ПриОткрытии управляемой формы владельца файла.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма владельца файла.
//  Отказ - Булево - стандартный параметр события ПриОткрытии управляемой формы.
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	НаличиеСканера = РаботаСФайламиСлужебныйКлиентПовтИсп.ДоступнаКомандаСканировать();
	Если Не НаличиеСканера Тогда
		ИзменитьВидимостьДополнительныхКоманд(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения управляемой формы владельца файла.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма владельца файла.
//  ИмяСобытия - Строка - стандартный параметр события ОбработкаОповещения управляемой формы.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия) Экспорт
	
	Если ИмяСобытия <> "Запись_Файл" Тогда
		Возврат;
	КонецЕсли;
		
	Для НомерЭлемента = 0 По Форма.ПараметрыРаботыСФайлами.ВГраница() Цикл
		
		ОтображатьКоличество = Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ОтображатьКоличество;
		Если Не ОтображатьКоличество Тогда
			Продолжить;
		КонецЕсли;
		
		ВладелецПрисоединенныхФайлов = ЗначениеПараметраПрисоединенногоФайла(Форма, НомерЭлемента, "ПутьКДаннымВладельца");
		КоличествоПрисоединенныхФайлов = РаботаСФайламиСлужебныйВызовСервера.КоличествоПрисоединенныхФайлов(ВладелецПрисоединенныхФайлов);
		КоличествоПрисоединенныхФайловСтрокой = Формат(КоличествоПрисоединенныхФайлов, "ЧГ=");
		
		Гиперссылка = Форма.Элементы.Найти("УправлениеПрисоединеннымиФайламиОткрытьСписок" + НомерЭлемента);
		Если Гиперссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ПозицияКоличестваВЗаголовке = СтрНайти(Гиперссылка.Заголовок, "(");
		Если ПозицияКоличестваВЗаголовке = 0 Тогда
			Гиперссылка.Заголовок = Гиперссылка.Заголовок 
						+ ?(КоличествоПрисоединенныхФайлов = 0, "",
						" (" + КоличествоПрисоединенныхФайловСтрокой + ")");
		Иначе
			Гиперссылка.Заголовок = Лев(Гиперссылка.Заголовок, ПозицияКоличестваВЗаголовке - 1)
						+ ?(КоличествоПрисоединенныхФайлов = 0, "",
						"(" + КоличествоПрисоединенныхФайловСтрокой + ")");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик выполнения дополнительных команд управления присоединенными файлами.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма владельца файла.
//  Команда - КомандаФормы - выполняемая команда.
//
Процедура КомандаУправленияПрисоединеннымиФайлами(Форма, Команда) Экспорт
	
	ЧастиИмениКоманды = СтрРазделить(Команда.Имя, "_");
	Если ЧастиИмениКоманды.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	НомерЭлемента = Число(ЧастиИмениКоманды[1]);
	ВладелецПрисоединенныхФайлов = ЗначениеПараметраПрисоединенногоФайла(Форма, НомерЭлемента, "ПутьКДаннымВладельца");
	Если Не ЗначениеЗаполнено(ВладелецПрисоединенныхФайлов) Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Действие", "ВыполнениеКоманды");
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Команда", Команда);
		ПараметрыОбработчика.Вставить("НомерЭлемента", НомерЭлемента);
		
		ЗадатьВопросОЗаписиВладельца(ПараметрыОбработчика);
		
	Иначе
		КомандаУправленияПрисоединеннымиФайламиЗавершение(Форма, Команда, ВладелецПрисоединенныхФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на поле предпросмотра.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма владельца файла.
//  Элемент              - ПолеФормы - поле предпросмотра.
//  СтандартнаяОбработка - Булево - стандартный параметр события Нажатие поля формы.
//  Просмотр             - Булево - если параметр принимает значение Истина, открывает файл
//                       для просмотра. Иначе - загружает файл с диска.
//                       Значение по умолчанию - Ложь.
//
Процедура ПолеПредпросмотраНажатие(Форма, Элемент, СтандартнаяОбработка, Просмотр = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	НомерЭлемента = Число(СтрЗаменить(Элемент.Имя, "ПолеКартинкиПрисоединенногоФайла", ""));
	ТолькоОдинФайл = Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ТолькоОдинФайл;
	ВладелецПрисоединенныхФайлов = ЗначениеПараметраПрисоединенногоФайла(Форма, Число(НомерЭлемента), "ПутьКДаннымВладельца");
	
	Если Не ЗначениеЗаполнено(ВладелецПрисоединенныхФайлов) Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Действие", "ПредпросмотрНажатие");
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("Просмотр", Просмотр);
		ПараметрыОбработчика.Вставить("НомерЭлемента", НомерЭлемента);
		ПараметрыОбработчика.Вставить("ТолькоОдинФайл", ТолькоОдинФайл);
		
		ЗадатьВопросОЗаписиВладельца(ПараметрыОбработчика);
		
	Иначе
		ПолеПредпросмотраНажатиеЗавершение(Форма, ВладелецПрисоединенныхФайлов, Элемент, СтандартнаяОбработка,
			Просмотр, ТолькоОдинФайл);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перетаскивания на поле предпросмотра.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма владельца файла.
//  Элемент                 - ПолеФормы - поле предпросмотра.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - стандартный параметр события Перетаскивание 
//                          поля формы.
//  СтандартнаяОбработка    - Булево - стандартный параметр события Перетаскивание поля формы.
//
Процедура ПолеПредпросмотраПеретаскивание(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
	
	НомерЭлемента = Число(СтрЗаменить(Элемент.Имя, "ПолеКартинкиПрисоединенногоФайла", ""));
	ТолькоОдинФайл = Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ТолькоОдинФайл;
	ВладелецПрисоединенныхФайлов = ЗначениеПараметраПрисоединенногоФайла(Форма, Число(НомерЭлемента), "ПутьКДаннымВладельца");
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Действие", "Перетаскивание");
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("Элемент", Элемент);
	ПараметрыОбработчика.Вставить("НомерЭлемента", НомерЭлемента);
	ПараметрыОбработчика.Вставить("ТолькоОдинФайл", ТолькоОдинФайл);
	ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
	ПараметрыОбработчика.Вставить("ВладелецПрисоединенныхФайлов", ВладелецПрисоединенныхФайлов);
	
	Если Не ЗначениеЗаполнено(ВладелецПрисоединенныхФайлов) Тогда
		ЗадатьВопросОЗаписиВладельца(ПараметрыОбработчика);
	Иначе
		ОповещениеОбУстановке = Новый ОписаниеОповещения("ПолеПредпросмотраПеретаскиваниеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОповещениеОбУстановке, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик проверки перетаскивания на поле предпросмотра.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма владельца файла.
//  Элемент                 - ПолеФормы - поле предпросмотра.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - стандартный параметр события Проверка
//                          перетаскивания поля формы.
//  СтандартнаяОбработка    - Булево - стандартный параметр события Проверка перетаскивания поля формы.
//
Процедура ПолеПредпросмотраПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РаботаСФайламиКлиент.ОткрытьФормуФайла
// Открывает форму файла из формы элемента справочника файлов. Форма элемента закрывается.
// 
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - Форма справочника присоединенных файлов.
//
Процедура ПерейтиКФормеФайла(Знач Форма) Экспорт
	
	ПрисоединенныйФайл = Форма.Ключ;
	
	Форма.Закрыть();
	
	Для Каждого ОкноКП Из ПолучитьОкна() Цикл
		
		Содержимое = ОкноКП.ПолучитьСодержимое();
		
		Если Содержимое = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Содержимое.ИмяФормы = "Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл" Тогда
			Если Содержимое.Параметры.Свойство("ПрисоединенныйФайл")
				И Содержимое.Параметры.ПрисоединенныйФайл = ПрисоединенныйФайл Тогда
				ОкноКП.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОткрытьФормуФайла(ПрисоединенныйФайл);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура предназначена для печати файла соответствующим приложением
//
// Параметры
//  ДанныеФайла          - Структура - данные файла. Описание см. РаботаСФайлами.ДанныеФайла.
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
//
Процедура НапечататьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла)
	
#Если МобильныйКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов данного типа не поддерживается в мобильном клиенте.'"));
	Возврат;
#Иначе
	
	РасширенияИсключения = 
	" m3u, m4a, mid, midi, mp2, mp3, mpa, rmi, wav, wma, 
	| 3g2, 3gp, 3gp2, 3gpp, asf, asx, avi, m1v, m2t, m2ts, m2v, m4v, mkv, mov, mp2v, mp4, mp4v, mpe, mpeg, mts, vob, wm, wmv, wmx, wvx,
	| 7z, zip, rar, arc, arh, arj, ark, p7m, pak, package, 
	| app, com, exe, jar, dll, res, iso, isz, mdf, mds,
	| cf, dt, epf, erf";
	
	Расширение = НРег(ДанныеФайла.Расширение);
	
	Если СтрНайти(РасширенияИсключения, " " + Расширение + ",") > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов данного типа не поддерживается.'"));
		Возврат;
	ИначеЕсли Расширение = "grs" Тогда
		Схема = Новый ГрафическаяСхема;
		Схема.Прочитать(ИмяОткрываемогоФайла);
		Схема.Напечатать();
	Иначе
		
		Попытка
			
			Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
				ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
			КонецЕсли;
			
			НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо))); 
			
		КонецПопытки;
		
	КонецЕсли;
	
#КонецЕсли

КонецПроцедуры

// Процедура печати Файла
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения для дальнейшего вызова.
//  ПараметрыВыполнения  - Структура - со свойствами:
//        * НомерФайла               - Число - номер текущего файла,
//        * ДанныеФайла              - Структура - данные файла,
//        * УникальныйИдентификатор  - УникальныйИдентификатор.
//
Процедура НапечататьФайлыВыполнение(ОбработчикРезультата, ПараметрыВыполнения) Экспорт
	
	ОбработкаПрерыванияПользователя();
	
	Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыполнения.ДанныеФайла = 
		РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляПечати(ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла],
		ПараметрыВыполнения.УникальныйИдентификатор);
		
#Если ВебКлиент Тогда
	Если ПараметрыВыполнения.ДанныеФайла.Расширение <> "mxl" Тогда
		Текст = НСтр("ru = 'Необходимо сохранить файл на компьютер, после чего выполнить
			|печать при помощи приложения, предназначенного
			|для работы с данным файлом.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
#КонецЕсли
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ТабличныйДокумент") Тогда
		ПараметрыВыполнения.ДанныеФайла.ТабличныйДокумент.Напечатать();
		// переходим к печати следующего файла.
		ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
		Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
		ВыполнитьОбработкуОповещения(Обработчик);
		Возврат
	КонецЕсли;
	
	Если РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Обработчик = Новый ОписаниеОповещения("НапечататьФайлПослеПолученияВерсииВРабочийКаталог", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(
			Обработчик,
			ПараметрыВыполнения.ДанныеФайла,
			"",
			ПараметрыВыполнения.УникальныйИдентификатор);
	Иначе
		ПараметрыВыполнения.ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ПараметрыВыполнения.ДанныеФайлов[ПараметрыВыполнения.НомерФайла], Неопределено);
		ОткрытьФайл(ПараметрыВыполнения.ДанныеФайла, Ложь);
	КонецЕсли;
КонецПроцедуры

// Процедура печати Файла после получения на диск
//
// Параметры:
//  ПараметрыВыполнения  - Структура - со свойствами:
//        * НомерФайла               - Число - номер текущего файла,
//        * ДанныеФайла              - Структура - данные файла,
//        * УникальныйИдентификатор  - УникальныйИдентификатор.
//
Процедура НапечататьФайлПослеПолученияВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда
		
		Если ПараметрыВыполнения.НомерФайла >= ПараметрыВыполнения.ДанныеФайлов.Количество() Тогда
			Возврат;
		КонецЕсли;
	
		НапечататьФайлПриложением(ПараметрыВыполнения.ДанныеФайла, Результат.ПолноеИмяФайла);
		
	КонецЕсли;

	// переходим к печати следующего файла.
	ПараметрыВыполнения.НомерФайла = ПараметрыВыполнения.НомерФайла + 1;
	Обработчик = Новый ОписаниеОповещения("НапечататьФайлыВыполнение", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьОбработкуОповещения(Обработчик);
	
КонецПроцедуры

// Выполняет печать файла внешним приложением.
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла.
//
Процедура НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла)
	
#Если Не МобильныйКлиент Тогда
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Shell = Новый COMОбъект("Shell.Application");
		Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "print", 1);
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

Процедура ПоказатьВопросУстановкиКомпонентыСканирования(Результат, КомпонентаУстановлена) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("ОткрытьФормуНастройкиСканированияЗавершение", ЭтотОбъект);
		РаботаСФайламиСлужебныйКлиент.УстановитьКомпоненту(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуНастройкиСканированияЗавершение(КомпонентаУстановлена, ПараметрыВыполнения) Экспорт
	
	Если Не КомпонентаУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КомпонентаУстановлена", КомпонентаУстановлена);
	ПараметрыФормы.Вставить("ИдентификаторКлиента",  ИдентификаторКлиента);
	
	ОткрытьФорму("Обработка.Сканирование.Форма.НастройкаСканирования", ПараметрыФормы);
	
КонецПроцедуры

Процедура ВопросОНеобходимостиЗаписиПослеЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеПрисоединеннымиФайлами

Функция ПараметрыКомандыУправления(Форма)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Форма",              Форма);
	ПараметрыВыполнения.Вставить("Действие",           "ЗагрузитьФайл");
	ПараметрыВыполнения.Вставить("НомерЭлемента",      "");
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);
	Возврат ПараметрыВыполнения;
	
КонецФункции

Функция ЗначениеПараметраПрисоединенногоФайла(Форма, Знач НомерЭлемента, ИмяПараметра)
	
	Если ТипЗнч(НомерЭлемента) = Тип("Строка") Тогда
		НомерЭлемента = Число(НомерЭлемента);
	КонецЕсли;
	
	ПутьКДанным = Форма.ПараметрыРаботыСФайлами[НомерЭлемента][ИмяПараметра];
	ЧастиПутиКДанным = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".", Истина, Истина);
	Если ЧастиПутиКДанным.Количество() > 0 Тогда
		
		ЗначениеПараметра = Форма[ЧастиПутиКДанным[0]];
		Для Индекс = 1 По ЧастиПутиКДанным.ВГраница() Цикл
			ЗначениеПараметра = ЗначениеПараметра[ЧастиПутиКДанным[Индекс]];
		КонецЦикла;
		
		Возврат ЗначениеПараметра;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗадатьВопросОЗаписиВладельца(ПараметрыОбработчикаЗавершения)
	
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Переход к присоединенным файлам возможен только после записи данных.
		|Данные будут записаны.'");
	ОбработчикОповещения = Новый ОписаниеОповещения("ПоказатьВопросЗаписиНовогоВладельца", ЭтотОбъект, ПараметрыОбработчикаЗавершения);
	
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

// Параметры:
//   Ответ - КодВозвратаДиалога, Неопределено - .
//   ДополнительныеПараметры - Структура - .
//
Процедура ПоказатьВопросЗаписиНовогоВладельца(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		Форма = ДополнительныеПараметры.Форма; // РасширениеФормыКлиентскогоПриложенияДляСправочника
		Если Не Форма.Записать() Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ВладелецПрисоединенныхФайлов = ЗначениеПараметраПрисоединенногоФайла(Форма, 
			ДополнительныеПараметры.НомерЭлемента, "ПутьКДаннымВладельца");
		
		Если Не ЗначениеЗаполнено(ВладелецПрисоединенныхФайлов) Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Действие = "ВыполнениеКоманды" Тогда
			КомандаУправленияПрисоединеннымиФайламиЗавершение(Форма, ДополнительныеПараметры.Команда, ВладелецПрисоединенныхФайлов);
		ИначеЕсли ДополнительныеПараметры.Действие = "ПредпросмотрНажатие" Тогда
			ПолеПредпросмотраНажатиеЗавершение(Форма, ВладелецПрисоединенныхФайлов,
				ДополнительныеПараметры.Элемент, СтандартнаяОбработка,
				ДополнительныеПараметры.Просмотр, ДополнительныеПараметры.ТолькоОдинФайл);
		ИначеЕсли ДополнительныеПараметры.Действие = "Перетаскивание" Тогда
			ОповещениеОбУстановке = Новый ОписаниеОповещения("ПолеПредпросмотраПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОповещениеОбУстановке, , Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандаУправленияПрисоединеннымиФайламиЗавершение(Форма, Команда, ВладелецПрисоединенныхФайлов)
	
	ЧастиИмениКоманды = СтрРазделить(Команда.Имя, "_");
	ИмяКоманды        = СтрЗаменить(ЧастиИмениКоманды[0], "УправлениеПрисоединеннымиФайлами", "");
	
	ПараметрыВыполнения = ПараметрыКомандыУправления(Форма);
	ПараметрыВыполнения.НомерЭлемента = ЧастиИмениКоманды[1];
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ЗавершениеВыполненияКомандыСОповещением",
		ЭтотОбъект, ПараметрыВыполнения);
		
	ТипЧисло = Новый ОписаниеТипов("Число");
	НомерЭлемента = ТипЧисло.ПривестиЗначение(ПараметрыВыполнения.НомерЭлемента);
	ПараметрыДобавленияФайла = Новый Структура;
	ПараметрыДобавленияФайла.Вставить("МаксимальныйРазмер",
		Форма.ПараметрыРаботыСФайлами[НомерЭлемента].МаксимальныйРазмер);
	ПараметрыДобавленияФайла.Вставить("ФильтрДиалогаВыбора",
		Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ФильтрДиалогаВыбора);
	ПараметрыДобавленияФайла.Вставить("НеОткрыватьКарточку", Истина);
	
	Если СтрНачинаетсяС(ИмяКоманды, "ОткрытьСписок") Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВладелецФайла", ВладелецПрисоединенныхФайлов);
		ПараметрыФормы.Вставить("СкрыватьВладельца", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Форма.УникальныйИдентификатор);
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы);
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ЗагрузитьФайл") Тогда
		
		ИмяКоманды = СтрЗаменить(ИмяКоманды, "ЗагрузитьФайл", "");
		ФайлыВладельца = РаботаСФайламиСлужебныйВызовСервера.КоличествоПрисоединенныхФайлов(ВладелецПрисоединенныхФайлов, Истина);
		Если СтрНачинаетсяС(ИмяКоманды, "ТолькоОдинФайл")
			И ФайлыВладельца.Количество > 0 Тогда
			
			ДанныеФайла = ФайлыВладельца.ДанныеФайла; // См. РаботаСФайлами.ДанныеФайла
			
			ПараметрыВыполнения.Действие = "ЗаменитьФайл";
			ПараметрыВыполнения.Вставить("ФайлКартинки", ДанныеФайла.Ссылка);
			
			РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(ОбработчикЗавершения,
				ДанныеФайла, Форма.УникальныйИдентификатор, ПараметрыДобавленияФайла);
			
		Иначе
			ДобавитьФайл(ОбработчикЗавершения, ВладелецПрисоединенныхФайлов, Форма, 2, ПараметрыДобавленияФайла);
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ЗаголовокПрисоединенногоФайла") Тогда
		
		Размещение = ЗначениеПараметраПрисоединенногоФайла(Форма, ПараметрыВыполнения.НомерЭлемента, "ПутьКРеквизитуРазмещения");
		Если Не ЗначениеЗаполнено(Размещение) Тогда
			ДобавитьФайл(ОбработчикЗавершения, ВладелецПрисоединенныхФайлов, Форма, 2, ПараметрыДобавленияФайла);
		Иначе
			ПараметрыВыполнения.Действие = "ПросмотретьФайл";
			ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения);
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "СоздатьПоШаблону") Тогда
		ДобавитьФайл(ОбработчикЗавершения, ВладелецПрисоединенныхФайлов, Форма, 1, ПараметрыДобавленияФайла);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "Сканировать") Тогда
		ДобавитьФайл(ОбработчикЗавершения, ВладелецПрисоединенныхФайлов, Форма, 3, ПараметрыДобавленияФайла);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ВыбратьФайл") Тогда
		ПараметрыВыполнения.Действие = "ВыбратьФайл";
		ОткрытьФормуВыбораФайлов(ВладелецПрисоединенныхФайлов, Неопределено, Ложь, ОбработчикЗавершения);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ПросмотретьФайл") Тогда
		ПараметрыВыполнения.Действие = "ПросмотретьФайл";
		ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "Очистить") Тогда
		ОбновитьРеквизитХраненияПрисоединенногоФайла(Форма, ПараметрыВыполнения.НомерЭлемента, Неопределено);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ОткрытьФорму") Тогда
		ПараметрыВыполнения.Действие = "ОткрытьФорму";
		ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "РедактироватьФайл") Тогда
		ПараметрыВыполнения.Действие = "РедактироватьФайл";
		ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ПоместитьФайл") Тогда
		ПараметрыВыполнения.Действие = "ПоместитьФайл";
		ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ОтменитьРедактирование") Тогда
		ПараметрыВыполнения.Действие = "ОтменитьРедактирование";
		ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеПредпросмотраНажатиеЗавершение(Форма, ВладелецПрисоединенныхФайлов, Элемент, СтандартнаяОбработка,
	Просмотр = Ложь, ТолькоОдинФайл = Ложь)
	
	СтандартнаяОбработка = Ложь;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ПолеКартинкиПрисоединенногоФайла", "");
	ПараметрыВыполнения = ПараметрыКомандыУправления(Форма);
	ПараметрыВыполнения.НомерЭлемента = НомерЭлемента;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	НомерЭлемента = ТипЧисло.ПривестиЗначение(ПараметрыВыполнения.НомерЭлемента);
	ПараметрыДобавленияФайла = Новый Структура;
	ПараметрыДобавленияФайла.Вставить("МаксимальныйРазмер",
		Форма.ПараметрыРаботыСФайлами[НомерЭлемента].МаксимальныйРазмер);
	ПараметрыДобавленияФайла.Вставить("ФильтрДиалогаВыбора",
		Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ФильтрДиалогаВыбора);
	ПараметрыДобавленияФайла.Вставить("НеОткрыватьКарточку", Истина);
	
	ПараметрыДобавленияИзображения = РаботаСФайламиСлужебныйВызовСервера.ПараметрыДобавленияИзображения(ВладелецПрисоединенныхФайлов);
	Если Просмотр
		Или Не ПараметрыДобавленияИзображения.ПравоДобавления Тогда
		
		ПараметрыВыполнения.Действие = "ПросмотретьФайл";
		ВыполнитьДействиеСФайлом(ПараметрыВыполнения, Неопределено);
		
	Иначе
		
		ОбработчикЗавершения = Новый ОписаниеОповещения("ЗавершениеВыполненияКомандыСОповещением",
			ЭтотОбъект, ПараметрыВыполнения);
		
		Если ТолькоОдинФайл Тогда
			
			ФайлыВладельца = ПараметрыДобавленияИзображения.ФайлыВладельца;
			Если ФайлыВладельца.КоличествоФайлов > 0 Тогда
				
				ДанныеФайла = ФайлыВладельца.ДанныеФайла; // См. РаботаСФайлами.ДанныеФайла
				ПараметрыВыполнения.Действие = "ЗаменитьФайл";
				ПараметрыВыполнения.Вставить("ФайлКартинки", ДанныеФайла.Ссылка);
				
				РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(ОбработчикЗавершения, ДанныеФайла,
					Форма.УникальныйИдентификатор, ПараметрыДобавленияФайла);
				
			Иначе
				ДобавитьФайл(ОбработчикЗавершения, ВладелецПрисоединенныхФайлов, Форма, 2, ПараметрыДобавленияФайла);
			КонецЕсли;
			
		Иначе
			ДобавитьФайл(ОбработчикЗавершения, ВладелецПрисоединенныхФайлов, Форма, 2, ПараметрыДобавленияФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   РасширениеУстановлено - Булево - .
//   ДополнительныеПараметры - Структура - где:
//     * Элемент - ПолеФормы - .
//
Процедура ПолеПредпросмотраПеретаскиваниеЗавершение(РасширениеУстановлено, ДополнительныеПараметры) Экспорт
	
	Если Не РасширениеУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	ВладелецПрисоединенныхФайлов = ДополнительныеПараметры.ВладелецПрисоединенныхФайлов;
	
	ПараметрыВыполнения = ПараметрыКомандыУправления(Форма);
	ПараметрыВыполнения.НомерЭлемента = СтрЗаменить(Элемент.Имя, "ПолеКартинкиПрисоединенногоФайла", "");
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	НомерЭлемента = ТипЧисло.ПривестиЗначение(ПараметрыВыполнения.НомерЭлемента);
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СсылкаНаФайл")
		И РаботаСФайламиСлужебныйВызовСервера.ЕстьПравоДоступа("Добавление", ВладелецПрисоединенныхФайлов) Тогда
		
		Файл = ПараметрыПеретаскивания.Значение.Файл;
		Если Файл = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.Действие = "ЗавершитьПеретаскивание";
		ОбработчикЗавершения = Новый ОписаниеОповещения("ЗавершениеВыполненияКомандыСОповещением",
			ЭтотОбъект, ПараметрыВыполнения);
		
		ПараметрыДобавления = Новый Структура;
		ПараметрыДобавления.Вставить("ОбработчикРезультата", ОбработчикЗавершения);
		ПараметрыДобавления.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
		ПараметрыДобавления.Вставить("ВладелецФайла", ВладелецПрисоединенныхФайлов);
		ПараметрыДобавления.Вставить("ФормаВладелец", Форма);
		ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
		ПараметрыДобавления.Вставить("ИмяСоздаваемогоФайла", Файл.ИмяБезРасширения);
		ПараметрыДобавления.Вставить("МаксимальныйРазмер",
			Форма.ПараметрыРаботыСФайлами[НомерЭлемента].МаксимальныйРазмер);
		ПараметрыДобавления.Вставить("ФильтрДиалогаВыбора",
			Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ФильтрДиалогаВыбора);
			
		РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширением(ПараметрыДобавления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитХраненияПрисоединенногоФайла(Форма, Знач НомерЭлемента, Файл)
	
	Если ТипЗнч(НомерЭлемента) = Тип("Строка") Тогда
		НомерЭлемента = Число(НомерЭлемента);
	КонецЕсли;
	
	ПутьКДанным = Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ПутьКРеквизитуРазмещения;
	ЧастиПутиКДанным = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".", Истина, Истина);
	
	Если ЧастиПутиКДанным.Количество() > 0 Тогда
		
		УровеньРасположенияРеквизита = ЧастиПутиКДанным.Количество();
		Если УровеньРасположенияРеквизита = 1 Тогда
			Форма[ЧастиПутиКДанным[0]] = Файл;
		ИначеЕсли УровеньРасположенияРеквизита = 2 Тогда
			Форма[ЧастиПутиКДанным[0]][ЧастиПутиКДанным[1]] = Файл;
		Иначе
			Возврат;
		КонецЕсли;
		
		ОбновитьОбластьПредпросмотра(Форма, НомерЭлемента, Файл);
		
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОбластьПредпросмотра(Форма, НомерЭлемента, Файл)
	
	ИмяРеквизита = Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ПутьКДаннымИзображения;
	ЭлементКартинки = Форма.Элементы.Найти("ПолеКартинкиПрисоединенногоФайла" + НомерЭлемента);
	ЭлементЗаголовка = Форма.Элементы.Найти("ЗаголовокПрисоединенногоФайла" + НомерЭлемента);
	
	ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанных.ВызыватьИсключение = Ложь;
	ПараметрыДанных.ИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	ДанныеОбновления = РаботаСФайламиСлужебныйВызовСервера.ДанныеОбновленияПоляИзображения(
		Файл, ПараметрыДанных);
		
	ДанныеФайла = ДанныеОбновления.ДанныеФайла;
	Если ЭлементКартинки <> Неопределено Тогда
		
		ТекстНевыбраннойКартинки = Форма.ПараметрыРаботыСФайлами[НомерЭлемента].ТекстНевыбраннойКартинки;
		Если ДанныеФайла = Неопределено Тогда
			Форма[ИмяРеквизита] = Неопределено;
			ЭлементКартинки.ТекстНевыбраннойКартинки = ТекстНевыбраннойКартинки;
		ИначеЕсли ДанныеОбновления.ФайлПоврежден Тогда
			Форма[ИмяРеквизита] = Неопределено;
			ЭлементКартинки.ТекстНевыбраннойКартинки = НСтр("ru = 'Изображение отсутствует'");
		Иначе
			Форма[ИмяРеквизита] = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			ЭлементКартинки.ТекстНевыбраннойКартинки = ТекстНевыбраннойКартинки;
		КонецЕсли;
		
		ЭлементКартинки.ЦветТекста = ДанныеОбновления.ЦветТекста;
		
	КонецЕсли;
	
	Если ЭлементЗаголовка <> Неопределено Тогда
		
		Если ДанныеФайла = Неопределено Тогда
			ЭлементЗаголовка.Заголовок = НСтр("ru = 'загрузить'");
			ЭлементЗаголовка.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Иначе
			ЭлементЗаголовка.Заголовок = ДанныеФайла.ИмяФайла;
			ЭлементЗаголовка.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействиеСФайлом(ПараметрыВыполнения, ОбработчикЗавершения)
	
	Форма = ПараметрыВыполнения.Форма;
	Размещение = ЗначениеПараметраПрисоединенногоФайла(Форма, Число(ПараметрыВыполнения.НомерЭлемента), "ПутьКРеквизитуРазмещения");
	Если ЗначениеЗаполнено(Размещение) Тогда
		
		Если ПараметрыВыполнения.Действие = "ПросмотретьФайл" Тогда
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Размещение, Неопределено, Форма.УникальныйИдентификатор);
			ОткрытьФайл(ДанныеФайла);
		ИначеЕсли ПараметрыВыполнения.Действие = "ОткрытьФорму" Тогда
			ОткрытьФормуФайла(Размещение);
		ИначеЕсли ПараметрыВыполнения.Действие = "РедактироватьФайл" Тогда
			РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(ОбработчикЗавершения, Размещение);
		ИначеЕсли ПараметрыВыполнения.Действие = "ПоместитьФайл" Тогда
			
			ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(ОбработчикЗавершения,
				Размещение, Форма.УникальныйИдентификатор);
			ПараметрыОбновленияФайла.Вставить("СоздатьНовуюВерсию", Ложь);
			РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
			
		ИначеЕсли ПараметрыВыполнения.Действие = "ОтменитьРедактирование" Тогда
			
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(Размещение);
			
			РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайлы(МассивФайлов);
			ЗавершениеВыполненияКомандыСОповещением(Неопределено, ПараметрыВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеВыполненияКомандыСОповещением(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Действие = "ЗаменитьФайл" Тогда
		
		ОбновитьОбластьПредпросмотра(ДополнительныеПараметры.Форма, ДополнительныеПараметры.НомерЭлемента,
			ДополнительныеПараметры.ФайлКартинки);
		
	ИначеЕсли (ДополнительныеПараметры.Действие = "ЗагрузитьФайл"
		ИЛИ ДополнительныеПараметры.Действие = "ЗавершитьПеретаскивание")
		И Результат <> Неопределено
		И Результат.ФайлДобавлен Тогда
		
		ОбновитьРеквизитХраненияПрисоединенногоФайла(ДополнительныеПараметры.Форма, ДополнительныеПараметры.НомерЭлемента,
			Результат.ФайлСсылка);
		
	ИначеЕсли ДополнительныеПараметры.Действие = "ВыбратьФайл"
		И Результат <> Неопределено Тогда
		
		ОбновитьРеквизитХраненияПрисоединенногоФайла(ДополнительныеПараметры.Форма, ДополнительныеПараметры.НомерЭлемента,
			Результат);
		
	ИначеЕсли ДополнительныеПараметры.Действие = "РедактироватьФайл" Тогда
		ИзменитьДоступностьКнопок(ДополнительныеПараметры.Форма, ДополнительныеПараметры.НомерЭлемента, Истина);
	ИначеЕсли ДополнительныеПараметры.Действие = "ПоместитьФайл"
		Или ДополнительныеПараметры.Действие = "ОтменитьРедактирование" Тогда
		ИзменитьДоступностьКнопок(ДополнительныеПараметры.Форма, ДополнительныеПараметры.НомерЭлемента, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//
// Форма - ФормаКлиентскогоПриложения -.
//
Процедура ИзменитьДоступностьКнопок(Форма, НомерЭлемента, НачалоРедактирования)
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("УправлениеПрисоединеннымиФайламиПоместитьФайл" + НомерЭлемента, , НачалоРедактирования);
	Кнопки.Добавить("УправлениеПрисоединеннымиФайламиОтменитьРедактирование" + НомерЭлемента, , НачалоРедактирования);
	Кнопки.Добавить("УправлениеПрисоединеннымиФайламиРедактироватьФайл" + НомерЭлемента, , Не НачалоРедактирования);
	Кнопки.Добавить("ПоместитьФайлИзКонтекстногоМеню" + НомерЭлемента, , НачалоРедактирования);
	Кнопки.Добавить("ОтменитьРедактированиеИзКонтекстногоМеню" + НомерЭлемента, , НачалоРедактирования);
	Кнопки.Добавить("РедактироватьФайлИзКонтекстногоМеню" + НомерЭлемента, , Не НачалоРедактирования);
	
	Элементы = Форма.Элементы;
	Для Каждого Кнопка Из Кнопки Цикл
		
		КнопкаФормы = Элементы.Найти(Кнопка.Значение);
		Если КнопкаФормы <> Неопределено Тогда
			КнопкаФормы.Доступность = Кнопка.Пометка;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ИзменитьВидимостьДополнительныхКоманд(Форма)
	
	Для ИндексЭлемента = 0 По Форма.ПараметрыРаботыСФайлами.ВГраница() Цикл
		
		ПодменюКоманд                 = Форма.Элементы.Найти("ПодменюДобавленияФайла" + ИндексЭлемента);
		КнопкаКомандыВыбрать          = Форма.Элементы.Найти("УправлениеПрисоединеннымиФайламиВыбратьФайл" + ИндексЭлемента);
		КнопкаКомандыЗагрузить        = Форма.Элементы.Найти("УправлениеПрисоединеннымиФайламиЗагрузитьФайл" + ИндексЭлемента);
		КнопкаКомандыСканировать      = Форма.Элементы.Найти("УправлениеПрисоединеннымиФайламиСканировать" + ИндексЭлемента);
		КнопкаКомандыСоздатьИзШаблона = Форма.Элементы.Найти("УправлениеПрисоединеннымиФайламиСоздатьПоШаблону" + ИндексЭлемента);
		
		Если КнопкаКомандыСканировать <> Неопределено Тогда
			КнопкаКомандыСканировать.Видимость = Ложь;
			ЭлементКонтекстногоМеню = Форма.Элементы["УправлениеПрисоединеннымиФайламиСканироватьИзКонтекстногоМеню" 
				+ ИндексЭлемента];
			
			ЭлементКонтекстногоМеню.Видимость = Ложь;
		КонецЕсли;
		
		Если КнопкаКомандыСоздатьИзШаблона <> Неопределено Тогда
			КнопкаКомандыСоздатьИзШаблона.Видимость = Ложь;
			ЭлементКонтекстногоМеню = Форма.Элементы["УправлениеПрисоединеннымиФайламиСоздатьПоШаблонуИзКонтекстногоМеню" 
				+ ИндексЭлемента];
			
			ЭлементКонтекстногоМеню.Видимость = Ложь;
		КонецЕсли;
		
		ВидимостьПодменю = Ложь;
		Если ПодменюКоманд <> Неопределено Тогда
			ВидимостьПодменю = КнопкаКомандыВыбрать <> Неопределено;
			ПодменюКоманд.Видимость = ВидимостьПодменю;
		КонецЕсли;
		
		Если КнопкаКомандыЗагрузить <> Неопределено Тогда
			КнопкаКомандыЗагрузить.Видимость = Не ВидимостьПодменю;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
