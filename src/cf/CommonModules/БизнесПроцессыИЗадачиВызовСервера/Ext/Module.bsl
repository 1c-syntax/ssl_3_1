///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать БизнесПроцессыИЗадачиСервер.ФормаВыполненияЗадачи.
// Получить структуру с описанием формы выполнения задачи.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//   см. БизнесПроцессыИЗадачиПереопределяемый.ПриПолученииФормыВыполненияЗадачи.ПараметрыФормы
//
Функция ФормаВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ФормаВыполненияЗадачи(ЗадачаСсылка);
	
КонецФункции

// Устарела. Следует использовать БизнесПроцессыИЗадачиСервер.ЭтоЗадачаИсполнителю.
// Проверяет, находится ли в ячейке отчета ссылка на задачу и в параметре
// ЗначениеРасшифровки возвращает значение расшифровки.
//
// Параметры:
//  Расшифровка             - Строка - имя ячейки.
//  ДанныеРасшифровкиОтчета - Строка - адрес во временном хранилище.
//  ЗначениеРасшифровки     - ЗадачаСсылка.ЗадачаИсполнителя
//                          - Произвольный - значение расшифровки из ячейки.
// 
// Возвращаемое значение:
//  Булево - Истина, если это задача исполнителю.
//
Функция ЭтоЗадачаИсполнителю(Знач Расшифровка, Знач ДанныеРасшифровкиОтчета, ЗначениеРасшифровки) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЭтоЗадачаИсполнителю(Расшифровка, ДанныеРасшифровкиОтчета, ЗначениеРасшифровки);
	
КонецФункции

// Устарела. Следует использовать БизнесПроцессыИЗадачиСервер.ВыполнитьЗадачу.
// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик.
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса,
// к которому относится задача ЗадачаСсылка.
//
// Параметры:
//  ЗадачаСсылка        - ЗадачаСсылка
//  ДействиеПоУмолчанию - Булево       - признак необходимости вызова процедуры 
//                                       ОбработкаВыполненияПоУмолчанию у бизнес-процесса задачи.
//
Процедура ВыполнитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию = Ложь) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ВыполнитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию);
	
КонецПроцедуры

// Устарела. Следует использовать БизнесПроцессыИЗадачиСервер.ЭтоВедущаяЗадача.
// Проверяет, является ли указанная задача ведущей.
//
// Параметры:
//  ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоВедущаяЗадача(Знач ЗадачаСсылка) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЭтоВедущаяЗадача(ЗадачаСсылка);
	
КонецФункции

// Устарела. Следует использовать БизнесПроцессыИЗадачиСервер.СформироватьДанныеВыбораИсполнителя.
// Формирует список подбора для указания исполнителя в полях ввода составного типа (Пользователь и Роль).
//
// Параметры:
//  Текст - Строка - фрагмент текста для поиска возможных исполнителей.
// 
// Возвращаемое значение:
//  СписокЗначений - список подбора, содержащий возможных исполнителей.
//
Функция СформироватьДанныеВыбораИсполнителя(Знач Текст) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.СформироватьДанныеВыбораИсполнителя(Текст);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отмечает указанные бизнес-процессы как активные.
//
// Параметры:
//  БизнесПроцессы - Массив из ОпределяемыйТип.БизнесПроцесс
//
Процедура СделатьАктивнымБизнесПроцессы(БизнесПроцессы) Экспорт
	
	БизнесПроцессыИЗадачиСервер.СделатьАктивнымБизнесПроцессы(БизнесПроцессы);
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как активный.
//
// Параметры:
//  БизнесПроцесс - ОпределяемыйТип.БизнесПроцесс
//
Процедура СделатьАктивнымБизнесПроцесс(БизнесПроцесс) Экспорт
	
	БизнесПроцессыИЗадачиСервер.СделатьАктивнымБизнесПроцесс(БизнесПроцесс);
	
КонецПроцедуры

// Отмечает указанные бизнес-процессы как остановленные.
//
// Параметры:
//  БизнесПроцессы - Массив из ОпределяемыйТип.БизнесПроцесс
//
Процедура ОстановитьБизнесПроцессы(БизнесПроцессы) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ОстановитьБизнесПроцессы(БизнесПроцессы);
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как остановленный.
//
// Параметры:
//  БизнесПроцесс - ОпределяемыйТип.БизнесПроцесс
//
Процедура ОстановитьБизнесПроцесс(БизнесПроцесс) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ОстановитьБизнесПроцесс(БизнесПроцесс);
	
КонецПроцедуры

// Отмечает указанные задачи как принятые к исполнению.
//
// Параметры:
//   Задачи - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ПринятьЗадачиКИсполнению(Задачи) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ПринятьЗадачиКИсполнению(Задачи);
	
КонецПроцедуры

// Отмечает указанные задачи как не принятые к исполнению.
//
// Параметры:
//   Задачи - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ОтменитьПринятиеЗадачКИсполнению(Задачи) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ОтменитьПринятиеЗадачКИсполнению(Задачи);
	
КонецПроцедуры

// Перенаправить задачи ПеренаправляемыеЗадачи новому исполнителю, указанному в параметре ИнфоОПеренаправлении.
//
// Параметры:
//  ПеренаправляемыеЗадачи - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//  ИнфоОПеренаправлении   - Структура - новые значения реквизитов адресации задачи.
//  ТолькоПроверка         - Булево    - если Истина, то функция не будет выполнять
//                                       физического перенаправления задач, а только 
//                                       проверит возможность перенаправления.
//  ПеренаправленныеЗадачи - Массив из ЗадачаСсылка.ЗадачаИсполнителя - перенаправленные задачи.
//                                       Может отличаться по составу элементов от массива 
//                                       ПеренаправляемыеЗадачи, если не все задачи удалось перенаправить.
//
// Возвращаемое значение:
//   Булево   - Истина, если перенаправление выполнено успешно.
//
Функция ПеренаправитьЗадачи(Знач ПеренаправляемыеЗадачи, Знач ИнфоОПеренаправлении, Знач ТолькоПроверка = Ложь,
	ПеренаправленныеЗадачи = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачи(ПеренаправляемыеЗадачи, ИнфоОПеренаправлении, ТолькоПроверка,
		ПеренаправленныеЗадачи);
	
КонецФункции

// Возвращаемое значение:
//  Число
//
Функция КоличествоНевыполненныхЗадачБизнесПроцессов(Знач БизнесПроцессы) Экспорт
	
	МассивБизнесПроцессов = Новый Массив;
	Для каждого БизнесПроцесс Из БизнесПроцессы Цикл
		Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивБизнесПроцессов.Добавить(БизнесПроцесс);
	КонецЦикла;
		
	Если МассивБизнесПроцессов.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителя
		|ГДЕ
		|	ЗадачиИсполнителя.БизнесПроцесс В (&БизнесПроцессы)
		|	И ЗадачиИсполнителя.Выполнена = ЛОЖЬ");

	Запрос.УстановитьПараметр("БизнесПроцессы", МассивБизнесПроцессов);
	Возврат Запрос.Выполнить().Выгрузить()[0].Количество;
	
КонецФункции

// Возвращаемое значение:
//  Число
//
Функция КоличествоНевыполненныхЗадачБизнесПроцесса(Знач БизнесПроцесс) Экспорт
	
	Возврат КоличествоНевыполненныхЗадачБизнесПроцессов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БизнесПроцесс));
	
КонецФункции

// Возвращаемое значение:
//  - БизнесПроцессСсылка
//  - Неопределено
//
Функция ПометитьНаУдалениеБизнесПроцессы(Знач ВыделенныеСтроки) Экспорт
	
	Количество = 0;
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		БизнесПроцессСсылка = СтрокаТаблицы.Владелец;
		Если БизнесПроцессСсылка = Неопределено ИЛИ БизнесПроцессСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию();
		Попытка
			БизнесПроцессыИЗадачиСервер.ЗаблокироватьБизнесПроцессы(БизнесПроцессСсылка);
			БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НЕ БизнесПроцессОбъект.ПометкаУдаления);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Количество = Количество + 1;
	КонецЦикла;
	Возврат ?(Количество = 1, ВыделенныеСтроки[0].Владелец, Неопределено);
КонецФункции

#КонецОбласти