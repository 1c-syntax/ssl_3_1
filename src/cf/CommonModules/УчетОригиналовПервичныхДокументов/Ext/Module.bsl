///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФорм

// Обработчик события "ПриСозданииНаСервере" формы документа.
//
//	Параметры:
//	Форма - УправляемаяФорма - форма списка документа.
//	Расположение - ЭлементФормы - группа, в которой будет располагаться надпись о текущем состоянии оригинала.
//		Если Неопределено, тогда надпись будет расположена в нижнем правом углу формы. Необязательный. 
//
Процедура ПриСозданииНаСервере_ФормаДокумента(Форма, Расположение = Неопределено) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетОригиналовПервичныхДокументов") = Ложь
	Или Не ПравоДоступа("Чтение",Метаданные.РегистрыСведений.СостоянияОригиналовПервичныхДокументов) Тогда
		ОтключаемаяДекорация = Форма.Элементы.Найти("ДекорацияСостояниеОригинала");
		Если Не ОтключаемаяДекорация = Неопределено Тогда
			ОтключаемаяДекорация.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("СписокВыбораСостоянийОригинала", Новый ОписаниеТипов("СписокЗначений")));
	
	Форма.ИзменитьРеквизиты(Реквизиты);

	СостоянияОригиналов = ИспользуемыеСостояния();
	
	ЗаполнитьСписокВыбораСостоянийОригинала(Форма, СостоянияОригиналов);
	
	Если Расположение = Неопределено Тогда
		Родитель = Форма;
	Иначе
		Родитель = Расположение;
	КонецЕсли;
	
	ДекорацияСостояниеОригинала = Форма.Элементы.Добавить("ДекорацияСостояниеОригинала", Тип("ДекорацияФормы"), Родитель);
	ДекорацияСостояниеОригинала.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияСостояниеОригинала.Гиперссылка = Истина;
	Если Расположение = Неопределено Тогда
		ДекорацияСостояниеОригинала.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КонецЕсли;
	ДекорацияСостояниеОригинала.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияСостояниеОригиналаНажатие");

	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ТекущиеСостояниеОригинала = СведенияОСостоянииОригиналаПоСсылке(Форма.Объект.Ссылка);
		Если ПустаяСтрока(ТекущиеСостояниеОригинала) Тогда
			ТекущиеСостояниеОригинала=НСтр("ru='<Состояние оригинала неизвестно>'");
			ДекорацияСостояниеОригинала.ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
		Иначе
			ТекущиеСостояниеОригинала = ТекущиеСостояниеОригинала.СостояниеОригиналаПервичногоДокумента;
		КонецЕсли;
	Иначе
		ТекущиеСостояниеОригинала=НСтр("ru='<Состояние оригинала неизвестно>'");
		ДекорацияСостояниеОригинала.ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	КонецЕсли;

	ДекорацияСостояниеОригинала.Заголовок = ТекущиеСостояниеОригинала;

КонецПроцедуры

// Обработчик события "ПриСозданииНаСервере" формы списка.
//
//	Параметры:
//	Форма - УправляемаяФорма - форма списка документа.
//	Список - ЭлементФормы - основной список формы.
//	Расположение - ЭлементФормы - колонка списка, перед которой будут располагаться новые колонки состояний.
//		Если Неопределено, тогда колонки будут расположены в конце списка. Необязательный.
//
Процедура ПриСозданииНаСервере_ФормаСписка(Форма, Список, Расположение = Неопределено) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетОригиналовПервичныхДокументов") = Ложь 
	Или Не ПравоДоступа("Чтение",Метаданные.РегистрыСведений.СостоянияОригиналовПервичныхДокументов) Тогда
		ОтключаемаяКолонка = Форма.Элементы.Найти("СостояниеОригиналПолучен");
		Если Не ОтключаемаяКолонка = Неопределено Тогда
			ОтключаемаяКолонка.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Создание колонок в динамическом списке
	РеквизитСписокСостояние = Форма.Элементы.Вставить("СостояниеОригиналПолучен",Тип("ПолеФормы"),Список,Расположение);
	РеквизитСписокСостояние.Вид = ВидПоляФормы.ПолеКартинки;
	РеквизитСписокСостояние.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет; 
	РеквизитСписокСостояние.КартинкаЗначений = БиблиотекаКартинок.КоллекцияПиктограммНаличиеОригиналаПервичногоДокумента;
	РеквизитСписокСостояние.КартинкаШапки = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен;
	РеквизитСписокСостояние.ПутьКДанным = Список.Имя + ".СостояниеОригиналПолучен";
	
	РеквизитСписокСостояние = Форма.Элементы.Вставить("СостояниеОригиналаПервичногоДокумента",Тип("ПолеФормы"),Список,Расположение);
	РеквизитСписокСостояние.Вид = ВидПоляФормы.ПолеНадписи;
	РеквизитСписокСостояние.ГиперссылкаЯчейки = Истина; 
	РеквизитСписокСостояние.Заголовок = НСтр("ru='Состояние оригинала'");
	РеквизитСписокСостояние.ПутьКДанным = Список.Имя + ".СостояниеОригиналаПервичногоДокумента";
	
	Если Не УчетОригиналовПервичныхДокументовВызовСервера.ПраваНаИзменениеСостояния() Тогда
		Возврат;
	КонецЕсли;
	
	// Создание списка
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("СписокВыбораСостоянийОригинала", Новый ОписаниеТипов("СписокЗначений")));	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	СостоянияОригиналов = ИспользуемыеСостояния();
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		ВывестиНаФормуКомандыСостоянияОригинала(Форма, Список, СостоянияОригиналов);
	КонецЕсли;

	ЗаполнитьСписокВыбораСостоянийОригинала(Форма, СостоянияОригиналов);

КонецПроцедуры

// Обработчик события "ПриПолученииДанныхНаСервере" формы списка.
//
//	Параметры:
//	СтрокиСписка - УправляемаяФорма - форма списка документа.
//
Процедура ПриПолученииДанныхНаСервере(СтрокиСписка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетОригиналовПервичныхДокументов") = Ложь 
	Или Не ПравоДоступа("Чтение",Метаданные.РегистрыСведений.СостоянияОригиналовПервичныхДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиСписка Цикл
		Строка = СтрокиСписка[Строка.Ключ];
		Если Строка.Оформление.Получить("СостояниеОригиналаПервичногоДокумента") = Неопределено Тогда
			Возврат
		КонецЕсли;
		Прервать;
	КонецЦикла;

	Ключи = СтрокиСписка.ПолучитьКлючи();
	Ссылки = Новый Массив;
	Для Каждого Ключ Из Ключи Цикл
		Ссылки.Добавить(Ключ.Ссылка);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияОригиналовПервичныхДокументов.Состояние КАК СостояниеОригиналаПервичногоДокумента,
	               |	СостоянияОригиналовПервичныхДокументов.ОбщееСостояние КАК ОбщееСостояние,
	               |	ВЫБОР
	               |		КОГДА СостоянияОригиналовПервичныхДокументов.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СостояниеОригиналПолучен,
	               |	СостоянияОригиналовПервичныхДокументов.Ссылка КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	               |ГДЕ
	               |	СостоянияОригиналовПервичныхДокументов.ОбщееСостояние
	               |	И СостоянияОригиналовПервичныхДокументов.Ссылка В(&Ссылка)";
	Запрос.УстановитьПараметр("Ссылка",Ссылки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого Строка Из СтрокиСписка Цикл
		Строка = СтрокиСписка[Строка.Ключ];
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Строка.Данные["Ссылка"], "Ссылка") Тогда 
			Строка.Данные["СостояниеОригиналаПервичногоДокумента"] = Выборка.СостояниеОригиналаПервичногоДокумента;
			Строка.Оформление["СостояниеОригиналаПервичногоДокумента"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет); 
			Строка.Данные["СостояниеОригиналПолучен"] = Выборка.СостояниеОригиналПолучен;
		Иначе
			Строка.Данные["СостояниеОригиналаПервичногоДокумента"] = НСтр("ru = '<Неизвестно>'");
			Строка.Оформление["СостояниеОригиналаПервичногоДокумента"].УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Обновляет команды установки состояния оригинала на форме списка.
//
//	Параметры:
//	Форма - УправляемаяФорма - форма списка документа.
//	Список - ЭлементФормы - основной список формы.
//
Процедура ОбновитьКомандыСостоянияОригинала(Форма, Список) Экспорт

	СостоянияОригиналов = ИспользуемыеСостояния();

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		ПодменюУстановитьНастроитьСостояниеОригинала = Форма.Элементы.Найти("ПодменюУстановитьНастроитьСостояниеОригиналаОбычное");		
		Если Не ПодменюУстановитьНастроитьСостояниеОригинала = Неопределено Тогда
			Форма.Элементы.Удалить(ПодменюУстановитьНастроитьСостояниеОригинала);
		КонецЕсли;
		
		ПодменюУстановитьНастроитьСостояниеОригинала = Форма.Элементы.Найти("ПодменюУстановитьНастроитьСостояниеОригиналаСмТакже");		
		Если Не ПодменюУстановитьНастроитьСостояниеОригинала = Неопределено Тогда
			Форма.Элементы.Удалить(ПодменюУстановитьНастроитьСостояниеОригинала);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиНаФормуКомандыСостоянияОригинала(Форма, Список, СостоянияОригиналов);

	ЗаполнитьСписокВыбораСостоянийОригинала(Форма, СостоянияОригиналов);

КонецПроцедуры

// Устанавливает условное форматирование для подключаемых элементов в списке.
//
//	Параметры:
//	Форма - УправляемаяФорма - форма списка документа.
//	Список - ЭлементФормы - основной список формы.
//
Процедура УстановитьУсловноеОформлениеВФормеСписка(Форма, Список) Экспорт

	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Список.Имя+".СостояниеОригиналаПервичногоДокумента"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Неизвестно>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементОформления.Использование = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СостояниеОригиналаПервичногоДокумента");
	ПолеОформления.Использование = Истина;
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Список.Имя+".СостояниеОригиналаПервичногоДокумента"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементОформления.Использование = Истина;

	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СостояниеОригиналаПервичногоДокумента");
	ПолеОформления.Использование = Истина;

КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ДополнитьПрофильРольюДляИзмененияСостоянийОригиналовДокументов(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ИзменениеСостоянийОригиналовПервичныхДокументов");

КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ДополнитьПрофильРольюДляНастройкиСостоянийОригиналовДокументов(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСостоянийОригиналовПервичныхДокументов");

КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ДополнитьПрофильРольюДляЧтенияСостоянийОригиналовДокументов(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ЧтениеСостоянийОригиналовПервичныхДокументов");

КонецПроцедуры

// Возвращает массив всех состояний.
//
//	Возвращаемое значение:
//	Массив - все возможные состояния оригинала, включая скрытое "Оригиналы не все".
//
Функция ВсеСостояния() Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	СостоянияОригиналовПервичныхДокументов.Ссылка КАК Состояние
	              |ИЗ
	              |	Справочник.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	              |ГДЕ
	              |	НЕ СостоянияОригиналовПервичныхДокументов.ПометкаУдаления
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	СостоянияОригиналовПервичныхДокументов.РеквизитДопУпорядочивания" ;

	Выборка = Запрос.Выполнить();

	Возврат Выборка.Выгрузить().ВыгрузитьКолонку("Состояние");

КонецФункции

// Выводит подключаемые команды в форме. Вызывается без подключения подсистемы "Подключаемые команды".
//
//	Параметры:
//	Форма - УправляемаяФорма - форма списка документа.
//	Список - ЭлементФормы - основной список формы.
//	СостоянияОригиналов - ТаблицаЗначений - состояния оригинала, разрешенные пользователям, и используемые при смене состояния оригинала.
//
Процедура ВывестиНаФормуКомандыСостоянияОригинала(Форма, Список, СостоянияОригиналов) Экспорт

	// Проверка и создание подменю и групп кнопок на командной панели списка
	Элементы = Форма.Элементы;

	Если Элементы.Найти("ПодменюУстановитьНастроитьСостояниеОригинала") = Неопределено Тогда
		ПодменюУстановитьНастроитьСостояниеОригинала = Элементы.Добавить("ПодменюУстановитьНастроитьСостояниеОригинала",Тип("ГруппаФормы"),Список.КоманднаяПанель);
		ПодменюУстановитьНастроитьСостояниеОригинала.Вид = ВидГруппыФормы.Подменю;
		ПодменюУстановитьНастроитьСостояниеОригинала.Отображение = ОтображениеКнопки.Картинка; 
		ПодменюУстановитьНастроитьСостояниеОригинала.Картинка = БиблиотекаКартинок.УстановитьСостояниеОригиналаПервичногоДокумента;
		ПодменюУстановитьНастроитьСостояниеОригинала.Заголовок = НСтр("ru='Установить состояние оригинала'");
		ПодменюУстановитьНастроитьСостояниеОригинала.Подсказка = НСтр("ru='Подменю команд предназначенных для установки и изменения состояния оригиналов первичных документов.'");
	КонецЕсли;
	ПодменюУстановитьНастроитьСостояниеОригинала = Элементы.Найти("ПодменюУстановитьНастроитьСостояниеОригинала");
	
	Если Элементы.Найти("ГруппаУстановитьСостояниеОригинала") = Неопределено Тогда
		ГруппаУстановитьСостояниеОригинала = Элементы.Добавить("ГруппаУстановитьСостояниеОригинала",Тип("ГруппаФормы"),ПодменюУстановитьНастроитьСостояниеОригинала);
		ГруппаУстановитьСостояниеОригинала.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	ГруппаУстановитьСостояниеОригинала = Элементы.Найти("ГруппаУстановитьСостояниеОригинала");

	Если Элементы.Найти("ГруппаНастроитьСостоянияОригинала") = Неопределено Тогда
		ГруппаНастроитьСостоянияОригинала = Элементы.Добавить("ГруппаНастроитьСостоянияОригинала",Тип("ГруппаФормы"),ПодменюУстановитьНастроитьСостояниеОригинала);
		ГруппаНастроитьСостоянияОригинала.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	ГруппаНастроитьСостоянияОригинала = Элементы.Найти("ГруппаНастроитьСостоянияОригинала");

	Если Элементы.Найти("ГруппаУстановитьОригиналПолучен") = Неопределено Тогда
		ГруппаУстановитьОригиналПолучен =  Элементы.Добавить("ГруппаУстановитьОригиналПолучен",Тип("ГруппаФормы"),Список.КоманднаяПанель); 
		ГруппаУстановитьОригиналПолучен.Вид = ВидГруппыФормы.ГруппаКнопок;
		ГруппаУстановитьОригиналПолучен.Подсказка = НСтр("ru='Команда предназначена для установки конечного состояния оригинала первичного документа ""Оригинал получен"".'");
	КонецЕсли;
	ГруппаУстановитьОригиналПолучен = Элементы.Найти("ГруппаУстановитьОригиналПолучен");
	
	Для Каждого Состояние Из ГруппаУстановитьСостояниеОригинала.ПодчиненныеЭлементы Цикл
		НайденнаяКоманда = Форма.Команды.Найти(Состояние.ИмяКоманды);
		НайденнаяКнопка = Форма.Элементы.Найти(Состояние.ИмяКоманды);

		Если Не НайденнаяКоманда = Неопределено Тогда
			Форма.Команды.Удалить(НайденнаяКоманда);
			Форма.Элементы.Удалить(НайденнаяКнопка);
		КонецЕсли;			
	КонецЦикла;
	
	// Удаляем последнюю кнопку
	Если ГруппаУстановитьСостояниеОригинала.ПодчиненныеЭлементы.Количество() > 0 Тогда 
		Состояние = ГруппаУстановитьСостояниеОригинала.ПодчиненныеЭлементы[0];
		НайденнаяКоманда = Форма.Команды.Найти(Состояние.ИмяКоманды);
		НайденнаяКнопка = Форма.Элементы.Найти(Состояние.ИмяКоманды);
	КонецЕсли;
	
	Если Не НайденнаяКоманда = Неопределено Тогда
		Форма.Команды.Удалить(НайденнаяКоманда);
		Форма.Элементы.Удалить(НайденнаяКнопка);
	КонецЕсли;
	
	Для Каждого Состояние Из СостоянияОригиналов Цикл
		ИмяКоманды = "Команда" + СтрЗаменить(Состояние.Ссылка.УникальныйИдентификатор(),"-","_");
		ИмяКнопки = Состояние.Наименование;

		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Действие = "Подключаемый_УстановитьСостояниеОригинала";

			// Кнопки командной панели
			КнопкаУстановитьСостояние = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаУстановитьСостояниеОригинала);
			КнопкаУстановитьСостояние.Заголовок = ИмяКнопки;
			КнопкаУстановитьСостояние.ИмяКоманды = ИмяКоманды;

			// Устанавливаем картинки
			Если Состояние.Ссылка = Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен Тогда
				КнопкаУстановитьСостояние.Картинка = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен;
			ИначеЕсли Состояние.Ссылка = Справочники.СостоянияОригиналовПервичныхДокументов.ФормаНапечатана Тогда
				КнопкаУстановитьСостояние.Картинка = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналНеПолучен;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

// Добавляет кнопку для перехода к настройкам состояний в подменю командой панели списка "Установить состояние", если у
// польз. есть соответствующая роль
	Если ПравоДоступа("Добавление",Метаданные.Справочники.СостоянияОригиналовПервичныхДокументов) 
		И ПравоДоступа("Изменение",Метаданные.Справочники.СостоянияОригиналовПервичныхДокументов) Тогда
		ИмяКоманды = "НастройкаСостояний";
		ИмяКнопки = НСтр("ru='Настроить...'");

		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаФормы  = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "Подключаемый_УстановитьСостояниеОригинала";
			КомандаФормы.Заголовок = ИмяКнопки;
			
			КнопкаНастроитьСостояния = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"),ГруппаНастроитьСостоянияОригинала);
			КнопкаНастроитьСостояния.Заголовок = ИмяКнопки;
			КнопкаНастроитьСостояния.ИмяКоманды = ИмяКоманды;
			КнопкаНастроитьСостояния.Картинка = БиблиотекаКартинок.НастроитьСостоянияОригиналаПервичногоДокумента;
		КонецЕсли; 
		
	КонецЕсли;

	// Добавляет кнопку "Установить оригинал получен" на командой панели списка 
	ИмяКоманды = "УстановитьОригиналПолучен";
	ИмяКнопки = НСтр("ru='Установить ""Оригинал получен""'");
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы  = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_УстановитьСостояниеОригинала";
		КомандаФормы.Заголовок = ИмяКнопки;
		
		НоваяКнопка = Форма.Элементы.Добавить("Кнопка" + ИмяКоманды , Тип("КнопкаФормы"),ГруппаУстановитьОригиналПолучен);
		НоваяКнопка.Картинка = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен;
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
//	Параметры:
//	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.142";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "УчетОригиналовПервичныхДокументов.ЗаполнитьСостоянияОригиналаПервичногоДокумента";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Справочники.СостоянияОригиналовПервичныхДокументов);

КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт

	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.СостоянияОригиналовПервичныхДокументов.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетОригиналовПервичныхДокументов")Тогда
		Возврат;
	КонецЕсли;

	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "УстановкаСостоянияОригинала";
	Вид.ИмяПодменю  = "ПодменюУстановитьНастроитьСостояниеОригинала";
	Вид.Заголовок   = НСтр("ru = 'Установить состояние оригинала'");
	Вид.Картинка    = БиблиотекаКартинок.УстановитьСостояниеОригиналаПервичногоДокумента;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "УстановкаСостоянияОригиналПолучен";
	Вид.ИмяПодменю  = "УстановитьСостояниеОригиналПолучен";
	Вид.Заголовок   = НСтр("ru='Установить состояние ""Оригинал получен""'");
	Вид.Картинка    = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен;	
	Вид.Отображение = ОтображениеКнопки.Картинка;

КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Не УчетОригиналовПервичныхДокументовВызовСервера.ПраваНаИзменениеСостояния() Тогда
		Возврат;
	КонецЕсли;

	ОбъектыСУчетомОригиналовПервичныхДокументов = Новый Массив;
		
	УчетОригиналовПервичныхДокументовПереопределяемый.ПриОпределенииОбъектовСКомандамиУчетаОригиналов(ОбъектыСУчетомОригиналовПервичныхДокументов);
	
	ВыводитьКоманды = Ложь;
	
	Для Каждого Объект Из ОбъектыСУчетомОригиналовПервичныхДокументов Цикл		
		Если СтрНайти(НастройкиФормы.ИмяФормы, Объект) Тогда
			ВыводитьКоманды = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ВыводитьКоманды Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСУчетомОригиналовПервичныхДокументов.Очистить();
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ОбъектСУчетомОригиналовПервичныхДокументов.Тип.Типы() Цикл
		Если Тип = Тип("Строка") Тогда
			Возврат;
		КонецЕсли;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ОбъектыСУчетомОригиналовПервичныхДокументов.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	Для Каждого Источник Из Источники.Строки Цикл
		Если ОбъектыСУчетомОригиналовПервичныхДокументов.Найти(Источник.ПолноеИмя) <> Неопределено Тогда
			ВыводитьКоманды = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ВыводитьКоманды Тогда
		Возврат;
	КонецЕсли;

	СостоянияОригиналов = ИспользуемыеСостояния();
	
	Порядок = 0;
	
	// Команды по состояниям оригинала
	Для Каждого Состояние Из СостоянияОригиналов Цикл		
		Команда = Команды.Добавить();
		Команда.Вид = "УстановкаСостоянияОригинала";
		Команда.Представление = Состояние.Наименование;
		Команда.Порядок = Порядок + 1; 
		// Устанавливаем картинки
		Если Состояние.Ссылка = Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен Тогда
			Команда.Картинка = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен;
		ИначеЕсли Состояние.Ссылка = Справочники.СостоянияОригиналовПервичныхДокументов.ФормаНапечатана Тогда
			Команда.Картинка = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналНеПолучен;
		КонецЕсли;		
		Команда.ТипПараметра = Метаданные.ОпределяемыеТипы.ОбъектСУчетомОригиналовПервичныхДокументов.Тип;
		Команда.Назначение = "ДляСписка";
		Команда.РежимЗаписи = "Проводить";
		Команда.ФункциональныеОпции = "ИспользоватьУчетОригиналовПервичныхДокументов";
		Команда.Обработчик = "УчетОригиналовПервичныхДокументовКлиент.Подключаемый_УстановитьСостояниеОригинала";
		
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// Команда для перехода к настройкам состояний в подменю командой панели списка "Установить состояние", если у польз.
	// есть соответствующая роль
	Если ПравоДоступа("Добавление",Метаданные.Справочники.СостоянияОригиналовПервичныхДокументов) 
		И ПравоДоступа("Изменение",Метаданные.Справочники.СостоянияОригиналовПервичныхДокументов) Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "УстановкаСостоянияОригинала";
		Команда.Идентификатор = "НастройкаСостояний";
		Команда.Представление = НСтр("ru='Настроить...'");
		Команда.Важность = "СмТакже";
		Команда.Картинка = БиблиотекаКартинок.НастроитьСостоянияОригиналаПервичногоДокумента;
		Команда.ТипПараметра = Метаданные.ОпределяемыеТипы.ОбъектСУчетомОригиналовПервичныхДокументов.Тип;
		Команда.Назначение = "ДляСписка";
		Команда.РежимЗаписи = "НеЗаписывать";
		Команда.ФункциональныеОпции = "ИспользоватьУчетОригиналовПервичныхДокументов";
		Команда.Обработчик = "УчетОригиналовПервичныхДокументовКлиент.Подключаемый_УстановитьСостояниеОригинала";	
	КонецЕсли;
	
	Наименование = Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен.Наименование;

	// Команда "Установить оригинал получен" на командой панели списка 
		Команда = Команды.Добавить();
		Команда.Вид = "УстановкаСостоянияОригиналПолучен";
		Команда.Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='Установить состояние ""[Наименование]""'"),Новый Структура("Наименование",Наименование));
		Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
		Команда.Картинка = БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен;
		Команда.ТипПараметра = Метаданные.ОпределяемыеТипы.ОбъектСУчетомОригиналовПервичныхДокументов.Тип;
		Команда.Назначение = "ДляСписка";
		Команда.РежимЗаписи = "Проводить";
		Команда.ФункциональныеОпции = "ИспользоватьУчетОригиналовПервичныхДокументов";
		Команда.Обработчик = "УчетОригиналовПервичныхДокументовКлиент.Подключаемый_УстановитьСостояниеОригинала";	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записывает новое состояние оригинала документа.
//
//	Параметры:
//	ДанныеЗаписи - Массив
//	             - Структура - массив или структура содержащие данные об изменяемой записи в регистре.
//	ИмяСостояния - Строка - устанавливаемое состояние.
//	Изменено - Булево - ИСТИНА, если состояние оригинала документа не повторяется и было записано. Необязательный.
//
Процедура УстановитьНовоеСостояниеОригинала(ДанныеЗаписи, ИмяСостояния, Изменено = Ложь) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетОригиналовПервичныхДокументов") = Ложь Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(ДанныеЗаписи) = Тип("Массив") Тогда
		Для Каждого Запись Из ДанныеЗаписи Цикл

			Если СокрЛП(Запись.СостояниеОригиналаПервичногоДокумента) <> СокрЛП(ИмяСостояния) Тогда
				Если Запись.ОбщееСостояние Тогда
					ПроверкаЗаписьСостоянияОригинала = РегистрыСведений.СостоянияОригиналовПервичныхДокументов.СоздатьНаборЗаписей();
					ПроверкаЗаписьСостоянияОригинала.Отбор.Ссылка.Установить(Запись.Ссылка);
					ПроверкаЗаписьСостоянияОригинала.Отбор.ОбщееСостояние.Установить(Ложь);
					ПроверкаЗаписьСостоянияОригинала.Прочитать();

					Если ПроверкаЗаписьСостоянияОригинала.Количество()>0 Тогда
						Для Каждого ПрошлаяЗапись Из ПроверкаЗаписьСостоянияОригинала Цикл
							Если СокрЛП(ПрошлаяЗапись.Состояние) <> ИмяСостояния Тогда								
								Изменено = Истина;
								РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьСостояниеОригиналаДокументаПоПечатнымФормам(Запись.Ссылка,
									ПрошлаяЗапись.ПервичныйДокумент,ПрошлаяЗапись.ПервичныйДокументПредставление,ИмяСостояния,ПрошлаяЗапись.ФормаИзвне);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Изменено = Истина;
					РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьОбщееСостояниеОригиналаДокумента(Запись.Ссылка,ИмяСостояния);
				Иначе
					ПроверкаЗаписьСостоянияОригинала = РегистрыСведений.СостоянияОригиналовПервичныхДокументов.СоздатьНаборЗаписей();
					ПроверкаЗаписьСостоянияОригинала.Отбор.Ссылка.Установить(Запись.Ссылка);
					ПроверкаЗаписьСостоянияОригинала.Прочитать();
					Если ПроверкаЗаписьСостоянияОригинала.Количество()> 0 Тогда
						ПроверкаЗаписьСостоянияОригинала.Отбор.ПервичныйДокумент.Установить(Запись.ПервичныйДокумент);
						ПроверкаЗаписьСостоянияОригинала.Прочитать();
						Для Каждого ПрошлаяЗапись Из ПроверкаЗаписьСостоянияОригинала Цикл
							Если СокрЛП(ПрошлаяЗапись.Состояние) <> ИмяСостояния Тогда
								Изменено = Истина;
								РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьСостояниеОригиналаДокументаПоПечатнымФормам(Запись.Ссылка,
									Запись.ПервичныйДокумент,Запись.ПервичныйДокументПредставление,ИмяСостояния,Запись.Извне);
								Если СостояниеПечатныхФормОдинаково(Запись.Ссылка,ИмяСостояния) Тогда
									Изменено = Истина;
									РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьОбщееСостояниеОригиналаДокумента(Запись.Ссылка,ИмяСостояния);
								Иначе
									Изменено = Истина;
									РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьОбщееСостояниеОригиналаДокумента(Запись.Ссылка,Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналыНеВсе);
								КонецЕсли;
							КонецЕсли; 
						КонецЦикла;
					Иначе
						Изменено = Истина;
						РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьОбщееСостояниеОригиналаДокумента(Запись.Ссылка,ИмяСостояния);
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	Иначе
		ПроверкаЗаписьСостоянияОригинала = РегистрыСведений.СостоянияОригиналовПервичныхДокументов.СоздатьНаборЗаписей();
		ПроверкаЗаписьСостоянияОригинала.Отбор.Ссылка.Установить(ДанныеЗаписи.Ссылка);
		ПроверкаЗаписьСостоянияОригинала.Отбор.ОбщееСостояние.Установить(Истина);
		ПроверкаЗаписьСостоянияОригинала.Прочитать();
		Если ПроверкаЗаписьСостоянияОригинала.Количество()>0 Тогда
			Если СокрЛП(ПроверкаЗаписьСостоянияОригинала[0].Состояние) <> ИмяСостояния Тогда

				ПроверкаЗаписьСостоянияОригинала.Отбор.ОбщееСостояние.Установить(Ложь);
				ПроверкаЗаписьСостоянияОригинала.Прочитать();

				Если ПроверкаЗаписьСостоянияОригинала.Количество()>0 Тогда
					Для Каждого ПрошлаяЗапись Из ПроверкаЗаписьСостоянияОригинала Цикл
						Если СокрЛП(ПрошлаяЗапись.Состояние) <> ИмяСостояния Тогда
							Изменено = Истина;
							РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьСостояниеОригиналаДокументаПоПечатнымФормам(ДанныеЗаписи.Ссылка,
								ПрошлаяЗапись.ПервичныйДокумент,ПрошлаяЗапись.ПервичныйДокументПредставление,ИмяСостояния,ПрошлаяЗапись.ФормаИзвне);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Изменено = Истина;
		РегистрыСведений.СостоянияОригиналовПервичныхДокументов.ЗаписатьОбщееСостояниеОригиналаДокумента(ДанныеЗаписи.Ссылка,ИмяСостояния);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет выпадающий список выбора состояний на форме.
//
//	Параметры:
//	Форма - УправляемаяФорма - форма списка документа.
//
Процедура ЗаполнитьСписокВыбораСостоянийОригинала(Форма, СостоянияОригиналов)

	СписокВыбораСостоянийОригинала = Форма.СписокВыбораСостоянийОригинала;
	СписокВыбораСостоянийОригинала.Очистить(); 

	Для каждого Состояние Из СостоянияОригиналов Цикл

		Если Состояние.Ссылка = Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен Тогда 
			СписокВыбораСостоянийОригинала.Добавить(Состояние.Наименование,,,БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналПолучен);
		ИначеЕсли Состояние.Ссылка = Справочники.СостоянияОригиналовПервичныхДокументов.ФормаНапечатана Тогда
			СписокВыбораСостоянийОригинала.Добавить(Состояние.Наименование,,,БиблиотекаКартинок.СостояниеОригиналаПервичногоДокументаОригиналНеПолучен);
		Иначе
			СписокВыбораСостоянийОригинала.Добавить(Состояние.Наименование);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Возвращает массив состояний, доступных пользователю.
//
//	Возвращаемое значение:
//	ТаблицаЗначений - состояния оригинала, разрешенные пользователям, и используемые при смене состояния оригинала.
//
Функция ИспользуемыеСостояния()Экспорт 

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОригиналовПервичныхДокументов.Наименование КАК Наименование,
	               |	СостоянияОригиналовПервичныхДокументов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	               |ГДЕ
	               |	НЕ СостоянияОригиналовПервичныхДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияОригиналовПервичныхДокументов.ОригиналыНеВсе)
	               |	И НЕ СостоянияОригиналовПервичныхДокументов.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СостоянияОригиналовПервичныхДокументов.РеквизитДопУпорядочивания";

	Выборка = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Выборка.Выгрузить();

КонецФункции

// Возвращает ключ записи регистра общего состояния оригинала документа по ссылке.
//
//	Параметры:
//	ДокументСсылка - СсылкаДокумент - ссылка на документ,для которого необходимо получить ключ записи общего состояния.
//
//	Возвращаемое значение:
//	КлючЗаписиРегистра - ключ записи регистра общего состояния оригинала документа.
//
Функция КлючЗаписиОбщегоСостояния(ДокументСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	СостоянияОригиналовПервичныхДокументов.Ссылка КАК Ссылка,
	              |	СостоянияОригиналовПервичныхДокументов.ПервичныйДокумент КАК ПервичныйДокумент,
	              |	СостоянияОригиналовПервичныхДокументов.ОбщееСостояние КАК ОбщееСостояние,
	              |	СостоянияОригиналовПервичныхДокументов.ФормаИзвне КАК ФормаИзвне
	              |ИЗ
	              |	РегистрСведений.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	              |ГДЕ
	              |	СостоянияОригиналовПервичныхДокументов.Ссылка = &Ссылка
	              |	И СостоянияОригиналовПервичныхДокументов.ОбщееСостояние" ;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);

	Выборка = Запрос.Выполнить().Выгрузить();

	Для Каждого Ключ Из Выборка Цикл
		ПередаваемыеПараметры = Новый Структура("Ссылка, ПервичныйДокумент, ОбщееСостояние, ФормаИзвне");
		ЗаполнитьЗначенияСвойств(ПередаваемыеПараметры,Ключ);

		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(ПередаваемыеПараметры);

		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.СостоянияОригиналовПервичныхДокументов", ПараметрыМассив);
	КонецЦикла;

	Возврат КлючЗаписиРегистра;

КонецФункции

// Проверяет и возвращает признак того, является ли документ по ссылке документом с учетом оригиналов.
//
//	Параметры:
//	ДокументСсылка - СсылкаДокумент - ссылка на документ, который необходимо проверить.
//
//	Возвращаемое значение:
//	Булево - ИСТИНА, если документ является объектом учетом оригиналов.
//
Функция ЭтоОбъектУчета(ДокументСсылка) Экспорт

	ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОбъектСУчетомОригиналовПервичныхДокументов.Тип.Типы();
	Для Каждого Тип Из ДоступныеТипы Цикл
		ТипДокумента = Метаданные.НайтиПоТипу(Тип);
		ТипПоСсылке = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка);
		ТипПоСсылке =  Метаданные.НайтиПоПолномуИмени(ТипПоСсылке);
		Если ТипДокумента = ТипПоСсылке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

// Возвращает массив с описанием типов подключенных к подсистеме объектов.
//
//	Возвращаемое значение:
//	ДоступныеТипы - Массив - массив с описанием типов подключенных к подсистеме объектов.
//
Функция СведенияОПодключенныхОбъектах() Экспорт

	ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОбъектСУчетомОригиналовПервичныхДокументов.Тип.Типы();
	
	Возврат ДоступныеТипы;

КонецФункции

// Проверяет и возвращает признак того, является ли документ по ссылке документом с учетом оригиналов.
//
//	Параметры:
//	ДокументСсылка - СсылкаДокумент - ссылка на документ, который необходимо проверить.
//
//	Возвращаемое значение:
//	Булево - ИСТИНА, если документ является объектом учетом оригиналов.
//
Функция ВозможностьЗаписиОбъектов(МассивСтрок) Экспорт
	
	МассивСсылокДляПроверки = Новый Массив;
	ОбъектыЗаписи = Новый Массив;
	Для Каждого Строка Из МассивСтрок Цикл
		Если ЭтоОбъектУчета(Строка.Ссылка) Тогда
			МассивСсылокДляПроверки.Добавить(Строка.Ссылка);
			ОбъектыЗаписи.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	НепроведенныеДокументы = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(МассивСсылокДляПроверки);
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе 
		Возврат ОбъектыЗаписи;
	КонецЕсли

КонецФункции

// Возвращает ссылку на документ по штрихкоду табличного документа.
//
//	Параметры:
//	Штрихкод - Строка - штрихкод.
//	Менеджеры - Массив - менеджеры документов.
//
//	Возвращаемое значение:
//	Массив - ссылки на документы.
//
Функция СсылкаПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры = Неопределено) 

	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Штрихкод, Ложь, Ложь)
		ИЛИ СокрЛП(Штрихкод) = "" Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ШтрихкодВШестнадцатеричномВиде = ПреобразоватьДесятичноеЧислоВШестнадцатеричнуюСистемуСчисления(Число(Штрихкод));
	Пока СтрДлина(ШтрихкодВШестнадцатеричномВиде) < 32 Цикл
		ШтрихкодВШестнадцатеричномВиде = "0" + ШтрихкодВШестнадцатеричномВиде;
	КонецЦикла;

	Идентификатор =
	        Сред(ШтрихкодВШестнадцатеричномВиде, 1,  8)
	+ "-" + Сред(ШтрихкодВШестнадцатеричномВиде, 9,  4)
	+ "-" + Сред(ШтрихкодВШестнадцатеричномВиде, 13, 4)
	+ "-" + Сред(ШтрихкодВШестнадцатеричномВиде, 17, 4)
	+ "-" + Сред(ШтрихкодВШестнадцатеричномВиде, 21, 12);

	Если СтрДлина(Идентификатор) <> 36 Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Если Менеджеры = Неопределено Тогда
		МенеджерыОбъектов = Новый Массив();
		Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
			МенеджерыОбъектов.Добавить(Документы[ЭлементМетаданных.Имя]);
		КонецЦикла;
	Иначе
		МенеджерыОбъектов = Новый Массив();
		Для Каждого ПустаяСсылка Из Менеджеры Цикл
			ТипСсылки = ТипЗнч(ПустаяСсылка);
			
			Если Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
				МенеджерыОбъектов.Добавить(Документы[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
				МенеджерыОбъектов.Добавить(Справочники[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли Задачи.ТипВсеСсылки(ТипСсылки) Тогда	
				МенеджерыОбъектов.Добавить(Задачи[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки(ТипСсылки) Тогда	
				МенеджерыОбъектов.Добавить(БизнесПроцессы[ПустаяСсылка.Метаданные().Имя]);
				
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки(ТипСсылки) Тогда
				МенеджерыОбъектов.Добавить(ПланыВидовХарактеристик[ПустаяСсылка.Метаданные().Имя]);
				
			Иначе
				ТекстИсключения = НСтр("ru = 'Ошибка распознавания штрихкода: тип ""%Тип%"" не поддерживается.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения,"%Тип%",ТипСсылки);
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;

	МассивСсылок = Новый Массив;
	ПервыйЗапрос = Истина;
	Для Каждого Менеджер Из МенеджерыОбъектов Цикл

		Попытка
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			Продолжить;
		КонецПопытки;
		
		МетаданныеСсылки = Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Ссылка);
		
		Если НЕ ПервыйЗапрос Тогда
			Запрос.Текст = Запрос.Текст + 
			"ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ" + ?(ПервыйЗапрос," " + "РАЗРЕШЕННЫЕ" + " "," ") + "Таблица.Ссылка КАК Ссылка
		|ИЗ " + МетаданныеСсылки.ПолноеИмя() + " КАК Таблица
		|ГДЕ Ссылка В (&МассивСсылок)
		|";
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;

	Если Не ПервыйЗапрос Тогда
		Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;

КонецФункции

// Процедура обрабатывает действия по учету оригиналов после сканирования штрихкода документа.
//
//	Параметры:
//	Штрихкод - Строка - отсканированный штрихкод документа.
//
Процедура ОбработатьШтрихкод(Штрихкод) Экспорт

	СсылкаПоШтрихкоду = СсылкаПоШтрихкодуТабличногоДокумента(Штрихкод);
	УчетОригиналовПервичныхДокументовВызовСервера.УстановитьНовоеСостояниеОригинала(СсылкаПоШтрихкоду,Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен);

КонецПроцедуры

// Проверяет после записи состояний печатных форм документа в регистр, имеют ли они одинаковые состояния.
//
//	Параметры:
//	ДокументСсылка - СсылкаДокумент - ссылка на документ,у которого необходимо проверить состояния печатных форм.
//	ИмяСостояния - Строка - имя состояния, которое было установлено.
//
//	Возвращаемое значение:
//	Булево - ИСТИНА, если все печатные формы документа имеют одинаковое состояние.
//
Функция СостояниеПечатныхФормОдинаково(ДокументСсылка,ИмяСостояния) Экспорт

	СостояниеФормОдинаково = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОригиналовПервичныхДокументов.Состояние.Наименование КАК СостояниеОригинала
	               |ИЗ
	               |	РегистрСведений.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	               |ГДЕ
	               |	СостоянияОригиналовПервичныхДокументов.Ссылка = &Ссылка
	               |	И НЕ СостоянияОригиналовПервичныхДокументов.ОбщееСостояние";
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Выборка.СостояниеОригинала = СокрЛП(ИмяСостояния) Тогда
			СостояниеФормОдинаково = Истина
		Иначе
			СостояниеФормОдинаково = Ложь;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат СостояниеФормОдинаково;

КонецФункции

// Возвращает структуру с данными о текущим общем состоянии оригинала документа по ссылке.
//
//	Параметры:
//	ДокументСсылка - СсылкаДокумент - ссылка на документ, для которого необходимо получить сведения о общем состоянии. 
//
//	Возвращаемые значения:
//	Структура/Строка - основные сведения о общем состоянии оригинала,если до этого состояние оригинала было записано,
//		если нет, то пустая строка.
//
Функция СведенияОСостоянииОригиналаПоСсылке(ДокументСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	СостоянияОригиналовПервичныхДокументов.Состояние КАК Состояние,
	              |	СостоянияОригиналовПервичныхДокументов.ОбщееСостояние КАК ОбщееСостояние
	              |ИЗ
	              |	РегистрСведений.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	              |ГДЕ
	              |	СостоянияОригиналовПервичныхДокументов.Ссылка = &Ссылка
	              |	И СостоянияОригиналовПервичныхДокументов.ОбщееСостояние = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	СведенияОСостоянии="";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СведенияОСостоянии = Новый Структура;
		СведенияОСостоянии.Вставить("Ссылка",ДокументСсылка);
		СведенияОСостоянии.Вставить("СостояниеОригиналаПервичногоДокумента",Выборка.Состояние);
	КонецЕсли;

	Возврат СведенияОСостоянии;

КонецФункции

// Процедура обработчика обновления для заполнения начальных элементов справочника "Состояния оригиналов первичных документов".
Процедура ЗаполнитьСостоянияОригиналаПервичногоДокумента() Экспорт

	СостояниеОригинала = Справочники.СостоянияОригиналовПервичныхДокументов.ФормаНапечатана.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(СостояниеОригинала.Ссылка);
	СостояниеОригинала.Наименование = НСтр("ru='Форма напечатана'");
	СостояниеОригинала.Описание = НСтр("ru='Состояние, означающее, что  печатная форма только печаталась.'");
	СостояниеОригинала.РеквизитДопУпорядочивания = "1";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СостояниеОригинала);

	СостояниеОригинала = Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналыНеВсе.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(СостояниеОригинала.Ссылка);
	СостояниеОригинала.Наименование = НСтр("ru='Оригиналы не все'");
	СостояниеОригинала.Описание = НСтр("ru='Общее состояние для документа, у которого оригиналы печатных форм находятся в разных состояниях.'");
	СостояниеОригинала.РеквизитДопУпорядочивания = "99998";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СостояниеОригинала);

	СостояниеОригинала = Справочники.СостоянияОригиналовПервичныхДокументов.ОригиналПолучен.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(СостояниеОригинала.Ссылка);
	СостояниеОригинала.Наименование = НСтр("ru='Оригинал получен'");
	СостояниеОригинала.Описание = НСтр("ru='Состояние, означающее, что подписанный оригинал печатной формы есть в наличии.'");
	СостояниеОригинала.РеквизитДопУпорядочивания = "99999";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СостояниеОригинала);


КонецПроцедуры

Функция ПреобразоватьДесятичноеЧислоВШестнадцатеричнуюСистемуСчисления(Знач ДесятичноеЧисло)

	Результат = "";

	Пока ДесятичноеЧисло > 0 Цикл
		ОстатокОтДеления = ДесятичноеЧисло % 16;
		ДесятичноеЧисло = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
		Результат = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

#КонецОбласти
