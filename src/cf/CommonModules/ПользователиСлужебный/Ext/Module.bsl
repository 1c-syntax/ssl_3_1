///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// Вызывается при входе в систему.
//
// Параметры:
//  РегистрироватьВЖурнале - Булево - если Истина, тогда записать ошибку в журнал регистрации.
//
// Возвращаемое значение:
//  Структура:
//   * ОшибкаАвторизации      - Строка - текст ошибки, если заполнено.
//   * ТребуетсяСменитьПароль - Булево - если Истина, тогда текст ошибки устаревания пароля.
//   
Функция АвторизоватьТекущегоПользователяПриВходе(РегистрироватьВЖурнале) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаАвторизации", "");
	Результат.Вставить("ТребуетсяСменитьПароль", Ложь);
	
	Попытка
		ОшибкаАвторизации = АвторизоватьТекущегоПользователя(Истина, РегистрироватьВЖурнале);
		
		Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
			ОтключитьНеактивныхИПросроченныхПользователей(Истина, ОшибкаАвторизации, РегистрироватьВЖурнале);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
			ПроверитьВходВПрограммуРазрешен(ОшибкаАвторизации);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
			Результат.ТребуетсяСменитьПароль = ТребуетсяСменитьПароль(ОшибкаАвторизации,
				Истина, РегистрироватьВЖурнале);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОшибкаАвторизации = КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			ИнформацияОбОшибке,, РегистрироватьВЖурнале);
		Если РегистрироватьВЖурнале Тогда
			ОшибкаАвторизации = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
				+ ?(Пользователи.ЭтоПолноправныйПользователь(,, Ложь),
					НСтр("ru = 'Подробнее см. в журнале регистрации.'"),
					НСтр("ru = 'Обратитесь к администратору.'"));
		КонецЕсли;
	КонецПопытки;
	
	Результат.ОшибкаАвторизации = ОшибкаАвторизации;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при начале работы системы, чтобы проверить возможность выполнения авторизации и
// вызвать заполнение значений параметров сеанса ТекущийПользователь и ТекущийВнешнийПользователь.
// Также вызывается при входе в область данных.
//
// Возвращаемое значение:
//  Строка - пустая строка   - авторизация выполнена успешно.
//           Непустая строка - описание ошибки.
//                             При начале работы системы следует
//                             завершить работу 1С:Предприятия.
//
Функция АвторизоватьТекущегоПользователя(ПриНачалеРаботыСистемы = Ложь, РегистрироватьВЖурнале = Ложь) Экспорт
	
	СостояниеДоВызоваАвторизоватьТекущегоПользователя(, Истина);
	
	Если Не ПриНачалеРаботыСистемы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ЭтоВнешнийПользователь = ЗначениеЗаполнено(Справочники.ВнешниеПользователи.НайтиПоРеквизиту(
		"ИдентификаторПользователяИБ", ТекущийПользовательИБ.УникальныйИдентификатор));
	
	ТекстОшибки = ПроверитьПраваПользователя(ТекущийПользовательИБ,
		"ПриЗапуске", ЭтоВнешнийПользователь, Не ПриНачалеРаботыСистемы, РегистрироватьВЖурнале);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Авторизуется пользователь по умолчанию.
		Попытка
			Значения = ЗначенияПараметровСеансаТекущийПользователь();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить параметр сеанса %1 по причине:
				           |""%2"".
				           |
				           |Обратитесь к администратору.'"),
				"ТекущийПользователь", "%1");
			Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
				ШаблонОшибки, РегистрироватьВЖурнале);
		КонецПопытки;
		Если ТипЗнч(Значения) = Тип("Строка") Тогда
			Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(Значения, , РегистрироватьВЖурнале);
		КонецЕсли;
		Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;
	
	НайденныйПользователь = Неопределено;
	ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор,, НайденныйПользователь);
	
	Если Не ЗначениеЗаполнено(НайденныйПользователь) Тогда
		СтандартнаяОбработка = Истина;
		ИнтеграцияПодсистемБСП.ПриАвторизацииНовогоПользователяИБ(ТекущийПользовательИБ, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат "";
		КонецЕсли;
		ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор,, НайденныйПользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйПользователь) Тогда
		// ПользовательИБ найден в справочнике.
		Если ПриНачалеРаботыСистемы И РолиАдминистратораДоступны() Тогда
			ИнтеграцияПодсистемБСП.ПриСозданииАдминистратора(НайденныйПользователь,
				НСтр("ru = 'При авторизации у пользователя найдены роли администратора.'"));
		КонецЕсли;
		Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	КонецЕсли;
	
	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если ПользователиИБ.Количество() > 1
	   И Не РолиАдминистратораДоступны()
	   И Не ПравоДоступа("Администрирование", Метаданные, ТекущийПользовательИБ) Тогда
		
		// Авторизуется обычный пользователь, созданный в конфигураторе.
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользовательИБ.Имя),
			, РегистрироватьВЖурнале);
	КонецЕсли;
	
	// Авторизуется администратор, созданный в конфигураторе.
	Если Не РолиАдминистратораДоступны() Тогда
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
			НСтр("ru = 'Запуск от имени пользователя с правом Администрирование невозможен,
			           |так как он не зарегистрирован в списке пользователей.
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'"),
			, РегистрироватьВЖурнале);
	КонецЕсли;
	
	Попытка
		Пользователь = Пользователи.СоздатьАдминистратора(ТекущийПользовательИБ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			НСтр("ru = 'Не удалось выполнить автоматическую регистрацию администратора в списке по причине:
			           |""%1"".
			           |
			           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
			           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'"),
			РегистрироватьВЖурнале);
	КонецПопытки;
	
	Комментарий =
		НСтр("ru = 'Выполнен запуск от имени пользователя с ролью ""Полные права"",
		           |который не зарегистрирован в списке пользователей.
		           |Выполнена автоматическая регистрация в списке пользователей.
		           |
		           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
		           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
	
	ИнтеграцияПодсистемБСП.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Служебный") = Истина Тогда
		Комментарий =
			НСтр("ru = 'Выполнен запуск от имени пользователя с ролью ""Полные права"",
			           |который не зарегистрирован в списке пользователей.
			           |Выполнена автоматическая регистрация в списке пользователей.'");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Пользователи.Администратор зарегистрирован в справочнике Пользователи'",
		     ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.Пользователи,
		Пользователь,
		Комментарий);
	
	Возврат РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале);
	
КонецФункции

// Параметры:
//  ПроверитьРолиАдминистратораДоступны - Булево - если истина, вернуть результат
//    с учетом проверки РолиАдминистратораДоступны() для текущего пользователя сеанса.
//  Отключить - Булево - отключает состояние и возвращает Ложь.
// 
// Возвращаемое значение:
//  Булево
//
Функция СостояниеДоВызоваАвторизоватьТекущегоПользователя(ПроверитьРолиАдминистратораДоступны = Ложь,
			Отключить = Ложь) Экспорт
	
	ИмяПараметра = "СостояниеДоВызоваАвторизоватьТекущегоПользователя";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(ИмяПараметра) <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Отключить Тогда
		Возврат Не ПроверитьРолиАдминистратораДоступны
			Или РолиАдминистратораДоступны();
	КонецЕсли;
	
	ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	ТекущиеПараметры.Удалить("СостояниеДоВызоваАвторизоватьТекущегоПользователя");
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
	
	Возврат Ложь;
	
КонецФункции

// Определяет, что используется нестандартный способ установки ролей пользователям ИБ.
//
// Возвращаемое значение:
//  Булево
//
Функция ЗапретРедактированияРолей() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.Настройки().РедактированиеРолей <> Истина;
	
КонецФункции

// Проверяет, что определяемый тип ВнешнийПользователь
// содержит ссылки на объекты авторизации, а не тип Строка.
//
// Возвращаемое значение:
//  Булево
//
Функция ВнешниеПользователиВнедрены() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.ПустыеСсылкиТиповОбъектовАвторизации().Количество() > 0;
	
КонецФункции

// Устанавливает начальные настройки для пользователя информационной базы.
//
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы, для которого сохраняются настройки.
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура УстановитьНачальныеНастройки(Знач ИмяПользователя, ЭтоВнешнийПользователь = Ложь) Экспорт
	
	НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов = Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения = РежимОткрытияФормПриложения.Закладки;
	НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
	НастройкиИнтерфейса = Новый НастройкиКомандногоИнтерфейса;
	НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаИТекст;
	
	НастройкиТакси = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	НастройкиТакси.УстановитьСостав(НастройкиСостава);

	НачальныеНастройки = Новый Структура;
	НачальныеНастройки.Вставить("НастройкиКлиента",    НастройкиКлиента);
	НачальныеНастройки.Вставить("НастройкиИнтерфейса", НастройкиИнтерфейса);
	НачальныеНастройки.Вставить("НастройкиТакси",      НастройкиТакси);
	НачальныеНастройки.Вставить("ЭтоВнешнийПользователь", ЭтоВнешнийПользователь);
	
	ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек(НачальныеНастройки);
	
	Если НачальныеНастройки.НастройкиКлиента <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиКлиента, , ИмяПользователя);
	КонецЕсли;
	
	Если НачальныеНастройки.НастройкиИнтерфейса <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "",
			НачальныеНастройки.НастройкиИнтерфейса, , ИмяПользователя);
	КонецЕсли;
		
	Если НачальныеНастройки.НастройкиТакси <> Неопределено Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "",
			НачальныеНастройки.НастройкиТакси, , ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст ошибки, если у текущего пользователя нет ни роли базовые права, ни ролей администратора.
// Регистрирует ошибку в журнале.
//
// Параметры:
//  РегистрироватьВЖурнале - Булево
//
// Возвращаемое значение:
//  Строка
//
Функция ОшибкаНедостаточноПравДляВходаВПрограмму(РегистрироватьВЖурнале = Истина) Экспорт
	
	// АПК:336-выкл Не заменять на РолиДоступны. Это специальная проверка ролей при входе.
	//@skip-check using-isinrole
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		Возврат "";
	КонецЕсли;
	// АПК:336-вкл
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваВнешнихПользователейБСП.Имя;
	Иначе
		ИмяРолиБазовыеПрава = Метаданные.Роли.БазовыеПраваБСП.Имя;
	КонецЕсли;
	
	// АПК:336-выкл Не заменять на РолиДоступны. Это специальная проверка ролей при входе.
	//@skip-check using-isinrole
	Если РольДоступна(ИмяРолиБазовыеПрава) Тогда
		Возврат "";
	КонецЕсли;
	// АПК:336-вкл
	
	Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(
		НСтр("ru = 'Недостаточно прав для входа в приложение.
		           |
		           |Обратитесь к администратору.'"),
		, РегистрироватьВЖурнале);
	
КонецФункции

// Только для вызова из процедуры ПроверитьПравоОтключитьЛогикуНачалаРаботыСистемы
// общего модуля СтандартныеПодсистемыВызовСервера.
//
// Возвращаемое значение:
//  Строка - текст ошибки.
//
Функция ОшибкаПроверкиПравТекущегоПользователяПриВходе() Экспорт
	
	Возврат ПроверитьПраваПользователя(ПользователиИнформационнойБазы.ТекущийПользователь(),
		"ПриЗапуске", Пользователи.ЭтоСеансВнешнегоПользователя(), Ложь);
	
КонецФункции

// Создает пользователя <Не указан>.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ссылка на пользователя <Не указан>.
// 
Функция СоздатьНеуказанногоПользователя() Экспорт
	
	СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
	
	Если ОбщегоНазначения.СсылкаСуществует(СвойстваНеуказанногоПользователя.СтандартнаяСсылка) Тогда
		
		Возврат СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
		
	Иначе
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный = Истина;
		НовыйПользователь.Наименование = СвойстваНеуказанногоПользователя.ПолноеИмя;
		НовыйПользователь.УстановитьСсылкуНового(СвойстваНеуказанногоПользователя.СтандартнаяСсылка);
		НовыйПользователь.ОбменДанными.Загрузка = Истина;
		НовыйПользователь.Записать();
		
		Возврат НовыйПользователь.Ссылка;
		
	КонецЕсли;
	
КонецФункции

// Смотри также ПользователиПереопределяемый.ПриОпределенииФормыВыбораПользователей
//
// Возвращаемое значение:
//  Структура:
//   * ВыбранныеПользователи - Массив из СправочникСсылка.Пользователи - пользователи,
//                               которые должны отображаться в подобранных.
//   * ЗаголовокФормыПодбора - Строка - если заполнен, переопределяет заголовок формы подбора.
//   * ЗаголовокКнопкиЗавершенияПодбора - Строка - если заполнен, переопределяет заголовок кнопки.
//
Функция НовыеПараметрыРасширеннойФормыПодбора() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокФормыПодбора", "");
	Результат.Вставить("ВыбранныеПользователи", Новый Массив);
	Результат.Вставить("ЗаголовокКнопкиЗавершенияПодбора", "");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей в управляемой форме.

// Только для внутреннего использования.
//
// Параметры:
//  Действие - Строка - НастроитьИнтерфейсРолейПриЧтенииНаСервере,
//                      НастроитьИнтерфейсРолейПриСозданииФормы,
//                      НастроитьИнтерфейсРолейПриЗагрузкеНастроек,
//                      ЗаполнитьРоли,
//                      ОбновитьДеревоРолей,
//                      ОбновитьСоставРолей,
//                      ТолькоВыбранныеРоли,
//                      УстановитьТолькоПросмотрРолей,
//                      ГруппировкаПоПодсистемам.
//
//  Параметры - Структура:
//    * ОсновнойПараметр - Неопределено
//                       - Булево
//                       - Строка
//                       - Массив
//                       - Соответствие
//
//    * Форма - ФормаКлиентскогоПриложения:
//       ** ПоказатьПодсистемыРолей - Булево
//       ** Роли - ДанныеФормыДерево:
//            *** ЭтоРоль - Булево
//            *** Имя     - Строка
//            *** Синоним - Строка
//            *** ЭтоНедоступнаяРоль    - Булево
//            *** ЭтоНесуществующаяРоль - Булево
//            *** Пометка               - Булево
//            *** НомерКартинки         - Число
//       ** Элементы - ВсеЭлементыФормы:
//            *** РолиУстановитьФлажки            - КнопкаФормы
//            *** РолиСнятьФлажки                 - КнопкаФормы
//            *** РолиПоказатьТолькоВыбранныеРоли - КнопкаФормы
//            *** РолиПоказатьПодсистемыРолей     - КнопкаФормы
//
//    * КоллекцияРолей - ТаблицаЗначений:
//        ** Роль - Строка
//    * НазначениеРолей - Строка
//    * СкрытьРольПолныеПрава - Булево
//    * ЗапретИзмененияАдминистративногоДоступа - Булево
//
Процедура ОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
	
	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
		УстановитьТолькоПросмотрРолей(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
		НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
		НастроитьИнтерфейсРолейПриСозданииФормы(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЧтенииНаСервере" Тогда
		НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
		
	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
		ТолькоВыбранныеРоли(Параметры);
		
	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
		ГруппировкаПоПодсистемам(Параметры);
		
	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
		ОбновитьДеревоРолей(Параметры);
		
	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
		ОбновитьСоставРолей(Параметры);
		
	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
		ЗаполнитьРоли(Параметры);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в процедуре %1
			           |Неверное значение параметра Действие: ""%2"".'"),
			"ПользователиСлужебный.ОбработатьИнтерфейсРолей",
			Действие);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения.

// Возвращает имена и синонимы ролей.
//
// Возвращаемое значение:
//  Структура:
//   * Массив - ФиксированныйМассив из Строка - массив имен ролей.
//   * Соответствие - ФиксированноеСоответствие из КлючИЗначение:
//      ** Ключ     - Строка - имя роли.
//      ** Значение - Строка - синоним роли.
//   * Таблица - ХранилищеЗначения из ТаблицаЗначений:
//      ** Имя - Строка - имя роли.
//
Функция ВсеРоли() Экспорт
	
	Возврат ПользователиСлужебныйПовтИсп.ВсеРоли();
	
КонецФункции

// Возвращает недоступные роли для разделенных пользователей или внешних пользователей
// с учетом прав текущего пользователя и режима работы (локальный или модель сервиса).
//
// Параметры:
//  ДляВнешнихПользователей - Булево - если истина, значит для внешних пользователей.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ     - Строка - имя роли.
//   * Значение - Булево - Истина.
//
Функция НедоступныеРолиПоТипуПользователя(ДляВнешнихПользователей) Экспорт
	
	Если ДляВнешнихПользователей Тогда
		НазначениеРолейПользователя = "ДляВнешнихПользователей";
		
	ИначеЕсли Не ОбщегоНазначения.РазделениеВключено()
	        И Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		// Пользователь с ролью АдминистраторСистемы в локальном режиме работы
		// может выдавать административные права.
		НазначениеРолейПользователя = "ДляАдминистраторов";
	Иначе
		НазначениеРолейПользователя = "ДляПользователей";
	КонецЕсли;
	
	Возврат ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеРолейПользователя);
	
КонецФункции

// Возвращает свойства пользователя для пользователя ИБ с пустым именем.
//
// Возвращаемое значение:
//  Структура:
//    * Ссылка - СправочникСсылка.Пользователи - ссылка на найденный элемент справочника,
//                 соответствующий неуказанному пользователю.
//             - Неопределено - элемент не найден.
//
//    * СтандартнаяСсылка - СправочникСсылка.Пользователи - ссылка, используемая
//                 для поиска и создания неуказанного пользователя в справочнике Пользователи.
//
//    * ПолноеИмя - Строка - полное имя, которое устанавливается в элемент справочника Пользователи
//                    при создании несуществующего неуказанного пользователя.
//
//    * ПолноеИмяДляПоиска - Строка - полное имя, которое используется для поиска
//                  неуказанного пользователя старым способом, необходимым для поддержки
//                  старых версий неуказанного пользователя. Это имя не требуется изменять.
//
Функция СвойстваНеуказанногоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка", Неопределено);
	
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
	
	Свойства.Вставить("ПолноеИмя", Пользователи.ПолноеИмяНеуказанногоПользователя());
	
	Свойства.Вставить("ПолноеИмяДляПоиска", "<" + НСтр("ru = 'Не указан'") + ">");
	
	// Поиск по уникальному идентификатору.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	НачатьТранзакцию();
	Попытка
		Если Запрос.Выполнить().Пустой() Тогда
			Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Наименование = &ПолноеИмя";
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Свойства.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			Свойства.Ссылка = Свойства.СтандартнаяСсылка;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Свойства;
	
КонецФункции

// Определяет наличие элемента в справочнике Пользователи
// или справочнике ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки наличия сопоставления пользователяИБ только
// с одним элементом справочников Пользователи и ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  СсылкаНаТекущего - СправочникСсылка.Пользователи
//                   - СправочникСсылка.ВнешниеПользователи - исключить
//                       указанную ссылку из поиска.
//                     Неопределено - искать среди всех элементов справочников.
//
//  НайденныйПользователь - Неопределено - пользователь не существует.
//                        - СправочникСсылка.Пользователи
//                        - СправочникСсылка.ВнешниеПользователи - возвращаемое значение, если найден.
//
//  ИдентификаторПользователяСервиса - Булево
//                     Ложь   - проверять ИдентификаторПользователяИБ.
//                     Истина - проверять ИдентификаторПользователяСервиса.
//
// Возвращаемое значение:
//  Булево
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор,
                                               СсылкаНаТекущего = Неопределено,
                                               НайденныйПользователь = Неопределено,
                                               ИдентификаторПользователяСервиса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
	
	Результат = Ложь;
	НайденныйПользователь = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденныйПользователь = Выборка.Пользователь;
		Результат = Истина;
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторПользователяИБ - УникальныйИдентификатор
//
Функция ПользовательИБПоИдентификатору(ИдентификаторПользователяИБ) Экспорт
	
	Если ТипЗнч(ИдентификаторПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	Иначе
		СеансЗапущенБезРазделителей = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И СеансЗапущенБезРазделителей
	   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
	   И ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	КонецЕсли;
	
	Возврат ПользовательИБ;
	
КонецФункции

// Только для внутреннего использования.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ДобавлятьПользователей - Булево
//  ТолькоВнешниеПользователи - Булево
//
Процедура ОбновитьНазначениеПриСозданииНаСервере(Форма, ДобавлятьПользователей = Истина, ТолькоВнешниеПользователи = Ложь) Экспорт
	
	Назначение = Форма.Объект.Назначение;
	
	Если Не ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		Назначение.Очистить();
		НоваяСтрока = Назначение.Добавить();
		Форма.Элементы.ВыбратьНазначение.Родитель.Видимость = Ложь;
		НоваяСтрока.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ДобавлятьПользователей И Назначение.Количество() = 0 Тогда
		Если ТолькоВнешниеПользователи Тогда
			ПустыеСсылки = ПользователиСлужебныйПовтИсп.ПустыеСсылкиТиповОбъектовАвторизации();
			Для Каждого ПустаяСсылка Из ПустыеСсылки Цикл
				НоваяСтрока = Назначение.Добавить();
				НоваяСтрока.ТипПользователей = ПустаяСсылка;
			КонецЦикла;
		Иначе
			НоваяСтрока = Назначение.Добавить();
			НоваяСтрока.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если Назначение.Количество() <> 0 Тогда
		МассивПредставлений = Новый Массив;
		Индекс = Назначение.Количество() - 1;
		Пока Индекс >= 0 Цикл
			ТипПользователей = Назначение.Получить(Индекс).ТипПользователей;
			Если ТипПользователей = Неопределено Тогда
				Назначение.Удалить(Индекс);
			Иначе
				МассивПредставлений.Добавить(ТипПользователей.Метаданные().Синоним);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Форма.Элементы.ВыбратьНазначение.Заголовок = СтрСоединить(МассивПредставлений, ", ");
	КонецЕсли;
	
КонецПроцедуры

// Вызывает событие ПередЗаписьюПользователяИБ, проверяет права с учетом
// режима разделения данных и записывает указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ  - ПользовательИнформационнойБазы - объект, который требуется записать.
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//  Пользователь - Неопределено - найти по уникальному идентификатору пользователя ИБ, если потребуется.
//               - СправочникСсылка.Пользователи
//               - СправочникСсылка.ВнешниеПользователи
//
//  СообщатьВМенеджерСервиса - Булево
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь = Ложь,
			Пользователь = Неопределено, Знач СообщатьВМенеджерСервиса = Истина) Экспорт
	
	ИнтеграцияПодсистемБСП.ПередЗаписьюПользователяИБ(ПользовательИБ);
	
	СообщатьВМенеджерСервиса = СообщатьВМенеджерСервиса
		И ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса");
	
	ЭтоОбновлениеСправочниковПользователей = ПользовательИБ.УникальныйИдентификатор
		= ПараметрыСеанса.ОбновлениеСправочниковПользователей.Получить("ИдентификаторПользователяИБ");
	
	Если СообщатьВМенеджерСервиса И Не ЭтоОбновлениеСправочниковПользователей Тогда
		СтарыйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	ПроверитьПраваПользователя(ПользовательИБ, "ПередЗаписью", ЭтоВнешнийПользователь);
	ОбновлениеИнформационнойБазыСлужебный.УстановитьФлагОтображенияОписанийДляНовогоПользователя(ПользовательИБ.Имя);
	ПользовательИБ.Записать();
	
	Если Не ЭтоОбновлениеСправочниковПользователей Тогда
		
		ОбновленныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ПользовательИБ.УникальныйИдентификатор);
		Если ОбновленныйПользовательИБ <> Неопределено Тогда
			ПользовательИБ = ОбновленныйПользовательИБ;
		КонецЕсли;
		
		Если Пользователь = Неопределено Тогда
			Пользователь = Пользователи.НайтиПоИдентификатору(ПользовательИБ.УникальныйИдентификатор);
		КонецЕсли;
		Если Пользователь <> Неопределено Тогда
			РегистрыСведений.СведенияОПользователях.ОбновитьСведенияОПользователе(Пользователь,
				Неопределено, ПользовательИБ);
			Если СообщатьВМенеджерСервиса Тогда
				МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
				МодульПользователиСлужебныйВМоделиСервиса.СообщитьИзмененЗапускПриложения(Пользователь,
					ПользовательИБ, СтарыйПользовательИБ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения назначения ролей, а также корректность прав в ролях по назначению.
//
// Параметры:
//  НазначениеРолей - Неопределено
//  ПроверитьВсе - Булево
//  СписокОшибок - Неопределено
//               - СписокЗначений - найденные ошибки добавляются в список без вызова исключения, где:
//                   * Значение      - Строка - имя роли.
//                                   - Неопределено - роль, указанная в процедуре, не существует в метаданных.
//                   * Представление - Строка - текст ошибки.
//
Процедура ПроверитьНазначениеРолей(НазначениеРолей = Неопределено, ПроверитьВсе = Ложь, СписокОшибок = Неопределено) Экспорт
	
	Если НазначениеРолей = Неопределено Тогда
		НазначениеРолей = ПользователиСлужебныйПовтИсп.НазначениеРолей();
	КонецЕсли;
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка в процедуре %1 общего модуля %2.'"),
		"ПриОпределенииНазначенияРолей",
		"ПользователиПереопределяемый");
	
	ТекстОшибки = "";
	
	Назначение = НазначениеРолей();
	Для Каждого ОписаниеНазначенияРолей Из НазначениеРолей Цикл
		Роли = Новый Соответствие;
		Для Каждого КлючИЗначение Из ОписаниеНазначенияРолей.Значение Цикл
			Роль = Метаданные.Роли.Найти(КлючИЗначение.Ключ);
			Если Роль = Неопределено Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В метаданных не существует роль ""%1"",
						           |указанная в назначении %2.'"),
						КлючИЗначение.Ключ, ОписаниеНазначенияРолей.Ключ);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Неопределено, ОписаниеОшибки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
			Для Каждого ОписаниеНазначения Из Назначение Цикл
				ТекущиеРоли = ОписаниеНазначения.Значение; // Соответствие
				Если ТекущиеРоли.Получить(Роль) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" указана более чем в одном назначении:
					           |%2, %3.'"),
					Роль.Имя, ОписаниеНазначенияРолей.Ключ, ОписаниеНазначения.Ключ);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Роль, ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Назначение.Вставить(ОписаниеНазначенияРолей.Ключ, Роли);
	КонецЦикла;
	
	// Проверка ролей внешних пользователей.
	НедоступныеПрава = Новый Массив;
	НедоступныеПрава.Добавить("Администрирование");
	НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
	НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
	НедоступныеПрава.Добавить("АдминистрированиеДанных");
	
	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.ТолькоДляВнешнихПользователей, ТекстОшибки,
		НСтр("ru = 'При проверке ролей только для внешних пользователей найдены ошибки:'"), СписокОшибок);
	
	ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.СовместноДляПользователейИВнешнихПользователей, ТекстОшибки,
		НСтр("ru = 'При проверке ролей совместно для пользователей и внешних пользователей найдены ошибки:'"), СписокОшибок);
	
	// Проверка ролей пользователей.
	Если ОбщегоНазначения.РазделениеВключено() Или ПроверитьВсе Тогда
		Роли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			Если Назначение.ТолькоДляАдминистраторовСистемы.Получить(Роль) <> Неопределено
			 Или Назначение.ТолькоДляПользователейСистемы.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
		КонецЦикла;
		НедоступныеПрава = Новый Массив;
		НедоступныеПрава.Добавить("Администрирование");
		НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
		НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
		НедоступныеПрава.Добавить("ТолстыйКлиент");
		НедоступныеПрава.Добавить("ВнешнееСоединение");
		НедоступныеПрава.Добавить("Automation");
		НедоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок");
		НедоступныеПрава.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов");
		НедоступныеПрава.Добавить("РежимВсеФункции");
		
		НеразделенныеДанные = НеразделенныеДанные();
		ПроверитьСоставПравРолей(НедоступныеПрава, Роли, ТекстОшибки,
			НСтр("ru = 'При проверке ролей для пользователей приложения найдены ошибки:'"), СписокОшибок, НеразделенныеДанные);
	КонецЕсли;
	Если Не ОбщегоНазначения.РазделениеВключено() Или ПроверитьВсе Тогда
		Роли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			Если Назначение.ТолькоДляАдминистраторовСистемы.Получить(Роль) <> Неопределено
			 Или Назначение.ТолькоДляВнешнихПользователей.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роли.Вставить(Роль, Истина);
		КонецЦикла;
		НедоступныеПрава = Новый Массив;
		НедоступныеПрава.Добавить("Администрирование");
		НедоступныеПрава.Добавить("АдминистрированиеРасширенийКонфигурации");
		НедоступныеПрава.Добавить("ОбновлениеКонфигурацииБазыДанных");
		
		ПроверитьСоставПравРолей(НедоступныеПрава, Роли, ТекстОшибки,
			НСтр("ru = 'При проверке ролей для пользователей найдены ошибки:'"), СписокОшибок);
		
		ПроверитьСоставПравРолей(НедоступныеПрава, Назначение.СовместноДляПользователейИВнешнихПользователей, ТекстОшибки,
			НСтр("ru = 'При проверке ролей совместно для пользователей и внешних пользователей найдены ошибки:'"), СписокОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Включает пользователя приемника в группы пользователей пользователя источника.
// Вызывается из обработчика формы ПриЗаписиНаСервере.
//
Процедура СкопироватьГруппыПользователя(Источник, Приемник) Экспорт
	
	ВнешнийПользователь = (ТипЗнч(Источник) = Тип("СправочникСсылка.ВнешниеПользователи"));
	
	Запрос = Новый Запрос;
	Блокировка = Новый БлокировкаДанных;
	
	Если ВнешнийПользователь Тогда
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыВнешнихПользователей");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
			|ИЗ
			|	Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыПользователейСостав
			|ГДЕ
			|	ГруппыПользователейСостав.ВнешнийПользователь = &Пользователь";
	Иначе
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыПользователей");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|ГДЕ
			|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	КонецЕсли;
	Запрос.УстановитьПараметр("Пользователь", Источник);
	Запрос.УстановитьПараметр("Приемник", Приемник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ГруппаПользователей");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ГруппаПользователейОбъект = Выборка.ГруппаПользователей.ПолучитьОбъект(); // СправочникОбъект.ГруппыПользователей, СправочникОбъект.ГруппыВнешнихПользователей
			Отбор = Новый Структура;
			Отбор.Вставить(?(ВнешнийПользователь, "ВнешнийПользователь", "Пользователь"), Приемник);
			НайденныеСтроки = ГруппаПользователейОбъект.Состав.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = ГруппаПользователейОбъект.Состав.Добавить();
			Если ВнешнийПользователь Тогда
				Строка.ВнешнийПользователь = Приемник;
			Иначе
				Строка.Пользователь = Приемник;
			КонецЕсли;
			
			ГруппаПользователейОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает описание контактной информации пользователя.
// Например, адрес электронной почты и телефон.
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//   Структура:
//   * Наименование - Строка
//   * ИдентификаторПользователяИБ - Строка
//   * Фотография - ДвоичныеДанные
// 	             - Неопределено
//   * Недействителен - Строка
//   * ПометкаУдаления - Строка
//   * Телефон - Строка
//   * АдресЭлектроннойПочты - Строка
//   * Подразделение - Неопределено
// 	                - ОпределяемыйТип.Подразделение
//
Функция ОписаниеПользователя(Пользователь) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ИдентификаторПользователяИБ", "");
	Результат.Вставить("Фотография");
	Результат.Вставить("Подразделение");
	Результат.Вставить("Недействителен", Истина);
	Результат.Вставить("ПометкаУдаления", Истина);
	Результат.Вставить("Телефон", "");
	Результат.Вставить("АдресЭлектроннойПочты", "");
	
	СвойстваПользователя = ?(ТипЗнч(Пользователь) = Тип("СправочникОбъект.Пользователи"),
		Пользователь,
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь,
			" Наименование,
			| ИдентификаторПользователяИБ,
			| Фотография,
			| ПометкаУдаления,
			| Недействителен,
			| Подразделение"));
	ЗаполнитьЗначенияСвойств(Результат, СвойстваПользователя);
	Результат.Фотография = ?(СвойстваПользователя.Фотография = Неопределено, Неопределено, СвойстваПользователя.Фотография.Получить());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		ЗначениеКонтактнойИнформации = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь,,,Ложь);
		
		ВидТелефон = МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ТелефонПользователя");
		ВидАдресПочты = МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя");
		Для каждого Контакт Из ЗначениеКонтактнойИнформации Цикл
			
			Если Контакт.Вид = ВидТелефон И НЕ ЗначениеЗаполнено(Результат.Телефон) Тогда
				
				Результат.Телефон = Контакт.Представление;
			ИначеЕсли Контакт.Вид = ВидАдресПочты И НЕ ЗначениеЗаполнено(Результат.АдресЭлектроннойПочты) Тогда
				
				Результат.АдресЭлектроннойПочты = Контакт.Представление;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ИдентификаторПользователяИБ) Тогда
		Если ТипЗнч(Пользователь) = Тип("СправочникОбъект.Пользователи") Тогда
			ПользовательСсылка = Пользователь.Ссылка;
		КонецЕсли;
		Если ПользовательСсылка = Пользователи.СсылкаНеуказанногоПользователя() Тогда
			Результат.ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.НайтиПоИмени("").УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращаемое значение:
//  Булево
//
Функция РолиТекущегоПользователяСокращены() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтарыйПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	НовыйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		СтарыйПользовательИБ.УникальныйИдентификатор);
	
	Если НовыйПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат РолиСокращены(СтарыйПользовательИБ, НовыйПользовательИБ);
	
КонецФункции

// Параметры:
//  Список - ДинамическийСписок
//
Процедура НастроитьПолеНомерКартинкиДинамическогоСписка(Список) Экспорт
	
	ОграничитьИспользованиеЗаполняемогоПоляДинамическогоСписка(Список, "НомерКартинки");
	
КонецПроцедуры

// Параметры:
//  ИмяЭлемента - Строка
//  Настройки - НастройкиКомпоновкиДанных
//  Строки - СтрокиДинамическогоСписка
//
Процедура ДинамическийСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Строки Цикл
		Если Не КлючИЗначение.Значение.Данные.Свойство("НомерКартинки")
		 Или ТипЗнч(КлючИЗначение.Ключ) <> Тип("СправочникСсылка.Пользователи")
		   И ТипЗнч(КлючИЗначение.Ключ) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Возврат;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователи", Строки.ПолучитьКлючи());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОПользователях.Пользователь КАК Пользователь,
	|	СведенияОПользователях.НомерКартинкиСостояния - 1 КАК НомерКартинки
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.Пользователь В (&Пользователи)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Строка = Строки.Получить(Выборка.Пользователь);
		Строка.Данные.НомерКартинки = Выборка.НомерКартинки;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Настройки - Массив из ОписаниеИспользованияСобытияДоступЖурналаРегистрации
//
Процедура СвернутьНастройкиДляОдинаковыхТаблиц(Настройки) Экспорт
	
	ДобавленныеНастройки = Новый Соответствие;
	Результат = Новый Массив;
	
	Для Каждого Настройка Из Настройки Цикл
		Описание = ДобавленныеНастройки.Получить(ВРег(Настройка.Объект));
		Если Описание = Неопределено Тогда
			Описание = Новый Структура("Настройка, ДляПоиска", Настройка);
			ДобавленныеНастройки.Вставить(ВРег(Настройка.Объект), Описание);
			Результат.Добавить(Настройка);
			Продолжить;
		КонецЕсли;
		Если Описание.ДляПоиска = Неопределено Тогда
			ОписаниеДляПоиска = Новый Структура;
			ОписаниеДляПоиска.Вставить("ПоляДоступа", Новый Соответствие);
			ОписаниеДляПоиска.Вставить("ПоляРегистрации", Новый Соответствие);
			Для Каждого ПолеДоступа Из Описание.Настройка.ПоляДоступа Цикл
				ОписаниеДляПоиска.ПоляДоступа.Вставить(ВРег(ПолеДоступа), Истина);
			КонецЦикла;
			Для Каждого ПолеРегистрации Из Описание.Настройка.ПоляРегистрации Цикл
				ОписаниеДляПоиска.ПоляРегистрации.Вставить(ВРег(ПолеРегистрации), Истина);
			КонецЦикла;
			Описание.ДляПоиска = ОписаниеДляПоиска;
		Иначе
			ОписаниеДляПоиска = Описание.ДляПоиска;
		КонецЕсли;
		Для Каждого ПолеДоступа Из Настройка.ПоляДоступа Цикл
			Если ОписаниеДляПоиска.ПоляДоступа.Получить(ВРег(ПолеДоступа)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеДляПоиска.ПоляДоступа.Вставить(ВРег(ПолеДоступа), Истина);
			Описание.Настройка.ПоляДоступа.Добавить(ПолеДоступа);
		КонецЦикла;
		Для Каждого ПолеРегистрации Из Настройка.ПоляРегистрации Цикл
			Если ОписаниеДляПоиска.ПоляРегистрации.Получить(ВРег(ПолеРегистрации)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеДляПоиска.ПоляРегистрации.Вставить(ВРег(ПолеРегистрации), Истина);
			Описание.Настройка.ПоляРегистрации.Добавить(ПолеРегистрации);
		КонецЦикла;
	КонецЦикла;
	
	Настройки = Результат;
	
КонецПроцедуры

// Параметры:
//  Настройки - Массив из ОписаниеИспользованияСобытияДоступЖурналаРегистрации
//  НенайденныеПоля - Массив - возвращаемое значение, содержащее ненайденные поля.
//
Процедура УдалитьНесуществующиеПоляИзНастройкиСобытияДоступДоступ(Настройки, НенайденныеПоля) Экспорт
	
	Результат = Новый Массив;
	НенайденныеПоля = Новый Массив;
	ДобавленныеПоля = Новый Соответствие;
	
	Для Каждого Настройка Из Настройки Цикл
		ПоляТаблицы = ПользователиСлужебныйПовтИсп.ПоляТаблицы(Настройка.Объект);
		ДоступныеПоля = ?(ПоляТаблицы = Неопределено, Неопределено, ПоляТаблицы.ВсеПоля);
		
		ПоляДоступа = Новый Массив;
		Для Каждого Поле Из Настройка.ПоляДоступа Цикл
			Если ТипЗнч(Поле) = Тип("Массив") Тогда
				ВложенныеПоля = Новый Массив;
				Для Каждого ВложенноеПоле Из Поле Цикл
					ДобавитьПолеСПроверкой(ВложенныеПоля,
						ВложенноеПоле, ДоступныеПоля, НенайденныеПоля, ДобавленныеПоля, Настройка.Объект);
				КонецЦикла;
				Если ЗначениеЗаполнено(ВложенныеПоля) Тогда
					ПоляДоступа.Добавить(ВложенныеПоля);
				КонецЕсли;
			Иначе
				ДобавитьПолеСПроверкой(ПоляДоступа,
					Поле, ДоступныеПоля, НенайденныеПоля, ДобавленныеПоля, Настройка.Объект);
			КонецЕсли;
		КонецЦикла;
		
		ПоляРегистрации = Новый Массив;
		Для Каждого Поле Из Настройка.ПоляРегистрации Цикл
			ДобавитьПолеСПроверкой(ПоляРегистрации,
				Поле, ДоступныеПоля, НенайденныеПоля, ДобавленныеПоля, Настройка.Объект);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПоляДоступа)
		 Или ЗначениеЗаполнено(ПоляРегистрации) Тогда
			
			НоваяНастройка = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации;
			НоваяНастройка.Объект = Настройка.Объект;
			НоваяНастройка.ПоляДоступа = ПоляДоступа;
			НоваяНастройка.ПоляРегистрации = ПоляРегистрации;
			Результат.Добавить(НоваяНастройка);
		КонецЕсли;
	КонецЦикла;
	
	Настройки = Результат;
	
КонецПроцедуры

// Добавляет имена полей, указанных в настройке в формате функции ПоляТаблицы,
// которых нет в значении, возвращаемом функцией ПоляТаблицы.
// Если добавляется новая коллекция, тогда свойство Имя пустое.
// Представление заполняется значением имени.
// В соответствие ВсеПоля эти поля не добавляются.
// 
// Параметры:
//  НастройкаСобытия - ОписаниеИспользованияСобытияДоступЖурналаРегистрации
//
// Возвращаемое значение:
//   см. ПоляТаблицы
//
Функция ПоляТаблицыСУчетомНастройкиСобытияДоступ(НастройкаСобытия) Экспорт
	
	ПоляТаблицы = ПользователиСлужебныйПовтИсп.ПоляТаблицы(НастройкаСобытия.Объект);
	
	НенайденныеПоля = Новый Массив;
	УдалитьНесуществующиеПоляИзНастройкиСобытияДоступДоступ(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкаСобытия), НенайденныеПоля);
	
	Если Не ЗначениеЗаполнено(НенайденныеПоля) Тогда
		Возврат ПоляТаблицы;
	КонецЕсли;
	
	Если ПоляТаблицы = Неопределено Тогда
		ПоляТаблицы = Новый Структура;
		ПоляТаблицы.Вставить("Коллекции", Новый Массив);
		ПоляТаблицы.Вставить("ВсеПоля", Новый Соответствие);
	Иначе
		ПоляТаблицы = ПоляТаблицы(НастройкаСобытия.Объект);
	КонецЕсли;
	
	Таблицы = Новый Соответствие;
	
	ИндексПервойКоллекцииТаблиц = 0;
	Для Каждого Коллекция Из ПоляТаблицы.Коллекции Цикл
		Если Коллекция.Таблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОписаниеТаблицы Из Коллекция.Таблицы Цикл
			Если Не ЗначениеЗаполнено(Таблицы) Тогда
				ИндексПервойКоллекцииТаблиц = ПоляТаблицы.Коллекции.Найти(Коллекция);
			КонецЕсли;
			Таблицы.Вставить(НРег(ОписаниеТаблицы.Имя),
				Новый Структура("ОписаниеТаблицы, ИндексПоля", ОписаниеТаблицы, 0));
		КонецЦикла;
	КонецЦикла;
	
	КоллекцияПолей = Новый Структура;
	КоллекцияПолей.Вставить("Имя", "");
	КоллекцияПолей.Вставить("Поля", Новый Массив);
	КоллекцияПолей.Вставить("Таблицы");
	
	КоллекцияТаблиц = Новый Структура;
	КоллекцияТаблиц.Вставить("Имя", "");
	КоллекцияТаблиц.Вставить("Поля");
	КоллекцияТаблиц.Вставить("Таблицы", Новый Массив);
	
	НачалоИмениПоля = СтрДлина(НастройкаСобытия.Объект) + 1;
	Для Каждого НенайденноеПоле Из НенайденныеПоля Цикл
		НенайденноеПоле = СтрЗаменить(НенайденноеПоле, "<<?>>", "");
		НенайденноеПоле = Сред(НенайденноеПоле, НачалоИмениПоля);
		ЧастиИмени = СтрРазделить(НенайденноеПоле, ".", Ложь);
		Если ЧастиИмени.Количество() > 1 Тогда
			ИмяТаблицы = ЧастиИмени[0];
			ИмяПоля = ЧастиИмени[1];
			СвойстваТаблицы = Таблицы.Получить(НРег(ИмяТаблицы));
			Если СвойстваТаблицы = Неопределено Тогда
				ОписаниеТаблицы = НовоеОписаниеТаблицы();
				ОписаниеТаблицы.Имя = ИмяТаблицы;
				ОписаниеТаблицы.Представление = ИмяТаблицы;
				КоллекцияТаблиц.Таблицы.Добавить(ОписаниеТаблицы);
				СвойстваТаблицы = Новый Структура("ОписаниеТаблицы, ИндексПоля", ОписаниеТаблицы, 0);
				Таблицы.Вставить(НРег(ИмяТаблицы), СвойстваТаблицы);
			КонецЕсли;
			Поля = СвойстваТаблицы.ОписаниеТаблицы.Поля;
			ИндексПоля = СвойстваТаблицы.ИндексПоля;
		Иначе
			ИмяПоля = ЧастиИмени[0];
			Поля = КоллекцияПолей.Поля;
			ИндексПоля = Поля.Количество();
		КонецЕсли;
		ОписаниеПоля = НовоеОписаниеПоля();
		ОписаниеПоля.Имя = ИмяПоля;
		ОписаниеПоля.Представление = ИмяПоля;
		Поля.Вставить(ИндексПоля, ОписаниеПоля);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоллекцияТаблиц.Таблицы) Тогда
		ПоляТаблицы.Коллекции.Вставить(ИндексПервойКоллекцииТаблиц, КоллекцияТаблиц);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоллекцияПолей.Поля) Тогда
		ПоляТаблицы.Коллекции.Вставить(0, КоллекцияПолей);
	КонецЕсли;
	
	Возврат ПоляТаблицы;
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияИзменениеДополнительноДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Пользователи.Изменение (дополнительно)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияИзменениеУчастниковГруппПользователейДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Пользователи.Изменение участников групп пользователей'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияИзменениеУчастниковГруппВнешнихПользователейДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Пользователи.Изменение участников групп внешних пользователей'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Для записи в журнал регистрации.
//
// Параметры:
//  Ссылка - Null - возвращается Null.
//         - Неопределено - возвращается Неопределено.
//         - ЛюбаяСсылка - возвращается ЗначениеВСтрокуВнутр(Ссылка).
//
// Возвращаемое значение:
//  Строка, Null, Неопределено
//
Функция СериализованнаяСсылка(Ссылка) Экспорт
	
	Если Ссылка = Null Или Ссылка = Неопределено Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Ссылка);
	
КонецФункции

// Для записи в журнал регистрации.
//
// Параметры:
//  Ссылка - Null - возвращается "".
//         - Неопределено - возвращается "".
//         - ЛюбаяСсылка - возвращается Строка(Ссылка).
//
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСсылки(Ссылка) Экспорт
	
	Если Ссылка = Null Или Ссылка = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Строка(Ссылка);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = "<" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пустая ссылка %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ТипЗнч(Ссылка)) + ">";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

// Возвращает ссылку старого объекта или ссылку нового объекта.
//
// Параметры:
//  Объект   - СправочникОбъект.Пользователи
//           - СправочникОбъект.ВнешниеПользователи
//
//  ЭтоНовый - Булево - возвращаемое значение.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
//  СправочникСсылка.ВнешниеПользователи
//
Функция СсылкаОбъекта(Знач Объект, ЭтоНовый = Неопределено) Экспорт
	
	Ссылка = Объект.Ссылка;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Ссылка);
	
	Если ЭтоНовый Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Ссылка = Менеджер.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращаемое значение:
//  Булево
//
Функция ДоступныНастройки8_3_26() Экспорт
	
	Свойства = Новый Структура("ТипАлгоритмаХешированияПароля", Null);
	ЗаполнитьЗначенияСвойств(Свойства, ПользователиИнформационнойБазы.ТекущийПользователь());
	
	Возврат Свойства.ТипАлгоритмаХешированияПароля <> Null;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа компоновщиком настроек

// Установка пользовательской настройки параметра компоновки данных.
// Если пользовательская настройка не предусмотрена, устанавливается значение параметра.
// Например, в обработчике ПередЗагрузкойНастроекВКомпоновщик при контекстном открытии отчета.
//
// Параметры:
//  ИмяПараметра - Строка
//  Значение - ЛюбаяСсылка, СписокЗначений, Строка, Число, Дата
//  НастройкиКД - НастройкиКомпоновкиДанных
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
//
Процедура УстановитьОтборДляПараметра(ИмяПараметра, Значение, НастройкиКД, ПользовательскиеНастройки) Экспорт
	
	ПараметрДанных = НастройкиКД.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрДанных.ИдентификаторПользовательскойНастройки) Тогда
		Для Каждого ТекущийЭлемент Из ПользовательскиеНастройки.Элементы Цикл
			Если ТекущийЭлемент.ИдентификаторПользовательскойНастройки
					= ПараметрДанных.ИдентификаторПользовательскойНастройки Тогда
				ПараметрДанных = ТекущийЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НовоеЗначение = Значение;
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений")
	   И Значение.Количество() = 1 Тогда
		
		НовоеЗначение = Значение[0].Значение;
	КонецЕсли;
	
	ПараметрДанных.Значение = НовоеЗначение;
	ПараметрДанных.Использование = Истина;
	
КонецПроцедуры

// Установка пользовательского отбора для поля компоновки данных.
// Например, в обработчике ПередЗагрузкойНастроекВКомпоновщик при контекстном открытии отчета.
//
// Параметры:
//  ИмяПоля - Строка
//  Значение - ЛюбаяСсылка, СписокЗначений, Строка, Число, Дата
//  НастройкиКД - НастройкиКомпоновкиДанных
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
//  ВИерархии - Булево - если Истина, то сравнение будет ВИерархии или ВСпискеПоИерархии,
//                в противном случае сравнение будет Равно или ВСписке.
//
Процедура УстановитьОтборДляПоля(ИмяПоля, Значение, НастройкиКД, ПользовательскиеНастройки, ВИерархии = Ложь) Экспорт
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ИдентификаторНастройки = Неопределено;
	
	Для Каждого ЭлементОтбора Из НастройкиКД.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Неопределено;
	Для Каждого ТекущийЭлемент Из ПользовательскиеНастройки.Элементы Цикл
		Если ТекущийЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			Элемент = ТекущийЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = Значение;
	НовыйВидСравнения = ?(ВИерархии,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		ВидСравненияКомпоновкиДанных.Равно);
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Если Значение.Количество() = 1 Тогда
			НовоеЗначение = Значение[0].Значение;
		Иначе
			НовыйВидСравнения = ?(ВИерархии,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,
				ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
	КонецЕсли;
	
	Элемент.ВидСравнения = НовыйВидСравнения;
	Элемент.ПравоеЗначение = НовоеЗначение;
	Элемент.Использование = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительная функциональность для обмена данными.

// Регистрирует указанный массив данных тех типов, которые допустимы
// с соответствии с указанным параметром вида ссылок.
//
// Перед вызовом требуется установка привилегированного режима.
//
// При регистрации происходит добавление данных к ранее добавленным без повторений.
// Если количество более 300, то сохраняется одно значение Неопределено,
// обозначающее, что было добавлено более 300 разных ссылок и нужно обновить все.
//
// Параметры:
//  ВидСсылок - Строка - например, "Пользователи", "ИспользоватьГруппыПользователей",
//               которые заполняются в процедурах ПриЗаполненииВидовРегистрируемыхСсылок.
// 
//  ДобавляемыеСсылки - Произвольный - тип данных соответствует указанному виду ссылок.
//                    - Массив из Произвольный
//                    - Null - очистить ранее добавленные данные.
//
Процедура ЗарегистрироватьСсылки(ВидСсылок, Знач ДобавляемыеСсылки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваВидаСсылок = ПользователиСлужебныйПовтИсп.СвойстваВидовСсылок().Получить(ВидСсылок);
	Если СвойстваВидаСсылок = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение ""%1"" параметра %2 процедуры %3.'"),
			ВидСсылок, "ВидСсылок", "ЗарегистрироватьСсылки");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Ссылки = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(
		СвойстваВидаСсылок.ИмяПараметраРаботыРасширений, Истина);
	
	Если ТипЗнч(Ссылки) <> Тип("Массив") Тогда
		Ссылки = Новый Массив;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	Если ДобавляемыеСсылки = Null Тогда
		Если Ссылки.Количество() > 0 Тогда
			Ссылки = Новый Массив;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	ИначеЕсли Ссылки.Количество() = 1
	        И Ссылки[0] = Неопределено Тогда
		
		Возврат; // Ранее было добавлено более 300 ссылок.
	Иначе
		Если ТипЗнч(ДобавляемыеСсылки) <> Тип("Массив") Тогда
			ДобавляемыеСсылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДобавляемыеСсылки);
		КонецЕсли;
		Для Каждого ДобавляемаяСсылка Из ДобавляемыеСсылки Цикл
			Если Ссылки.Найти(ДобавляемаяСсылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Ссылки.Добавить(ДобавляемаяСсылка);
			ЕстьИзменения = Истина;
		КонецЦикла;
		Если Ссылки.Количество() > 300 Тогда
			Ссылки = Новый Массив;
			Ссылки.Добавить(Неопределено);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(
		СвойстваВидаСсылок.ИмяПараметраРаботыРасширений, Ссылки, Истина);
	
КонецПроцедуры

// Возвращает ранее зарегистрированный массив данных тех типов, которые допустимы
// с соответствии с указанным параметром вида ссылок.
//
// Перед вызовом требуется установка привилегированного режима.
//
// Параметры:
//  ВидСсылок - Строка - например, "Пользователи", "ИспользоватьГруппыПользователей",
//               которые заполняются в процедурах ПриЗаполненииВидовРегистрируемыхСсылок.
//
// Возвращаемое значение:
//  Массив из Произвольный - тип данных соответствует указанному виду ссылок.
//                           Если возвращается массив с одним значением Неопределено,
//                           значит было добавлено более 300 ссылок и нужно обновить все.
//
Функция ЗарегистрированныеСсылки(ВидСсылок) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	СвойстваВидаСсылок = ПользователиСлужебныйПовтИсп.СвойстваВидовСсылок().Получить(ВидСсылок);
	Если СвойстваВидаСсылок = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение ""%1"" параметра %2 функции %3.'"),
			ВидСсылок, "ВидСсылок", "ЗарегистрированныеСсылки");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Ссылки = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(
		СвойстваВидаСсылок.ИмяПараметраРаботыРасширений, Истина);
	
	Если ТипЗнч(Ссылки) <> Тип("Массив") Тогда
		Ссылки = Новый Массив;
	КонецЕсли;
	
	Если Ссылки.Количество() = 1
	   И Ссылки[0] = Неопределено Тогда
		
		Возврат Ссылки;
	КонецЕсли;
	
	ПроверенныеСсылки = Новый Массив;
	Для Каждого Ссылка Из Ссылки Цикл
		Если СвойстваВидаСсылок.ДопустимыеТипы.СодержитТип(ТипЗнч(Ссылка)) Тогда
			ПроверенныеСсылки.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверенныеСсылки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры, Отказ, ЭтоВызовПередНачаломРаботыСистемы) Экспорт
	
	Если Не ЭтоВызовПередНачаломРаботыСистемы Тогда
		КлючПредупрежденияБезопасности = КлючПредупрежденияБезопасностиПриЗапуске();
		Если ЗначениеЗаполнено(КлючПредупрежденияБезопасности) Тогда
			Параметры.Вставить("КлючПредупрежденияБезопасности", КлючПредупрежденияБезопасности);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПолученныеПараметрыКлиента.Свойство("АвторизацияВыполнена") Тогда
		РезультатАвторизации = Параметры.ПолученныеПараметрыКлиента.АвторизацияВыполнена;
	Иначе
		РезультатАвторизации = Новый Структура;
		
		Результат = АвторизоватьТекущегоПользователяПриВходе(Истина);
		
		Если ЗначениеЗаполнено(Результат.ОшибкаАвторизации) Тогда
			РезультатАвторизации.Вставить("ОшибкаАвторизации", Результат.ОшибкаАвторизации);
			
		Иначе
			Если Результат.ТребуетсяСменитьПароль Тогда
				РезультатАвторизации.Вставить("ТребуетсяСменитьПароль");
				СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
			
			Если Не ОбщегоНазначения.РазделениеВключено()
			   И Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь)
			   И РегистрыСведений.СведенияОПользователях.ЗадатьВопросПроОтключениеOpenIDConnect() Тогда
			
				РезультатАвторизации.Вставить("ЗадатьВопросПроОтключениеOpenIDConnect");
			КонецЕсли;
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
				ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
				НачалоДня = НачалоДня(ТекущаяДатаСеанса());
				ИдентификаторыПользователейИБ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПользователяИБ);
				УстановитьПривилегированныйРежим(Истина);
				Остатки = ОстаткиСрокаДействияПользователей(ИдентификаторыПользователейИБ, НачалоДня);
				ОстатокСрокаДействия = Остатки.Получить(ИдентификаторПользователяИБ);
				Если ЗначениеЗаполнено(ОстатокСрокаДействия)
				   И ТребуетсяНапоминание(ПользовательИБ.Имя, ОстатокСрокаДействия, НачалоДня) Тогда
				
					Адресаты = Новый Соответствие;
					Адресаты.Вставить(ИдентификаторПользователяИБ, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("*"));
					СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяСерверногоОповещения(),
						ОстатокСрокаДействия, Адресаты);
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Параметры.ПолученныеПараметрыКлиента.Вставить("АвторизацияВыполнена",
			?(ЗначениеЗаполнено(РезультатАвторизации), РезультатАвторизации, Неопределено));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатАвторизации) Тогда
		Для Каждого КлючИЗначение Из РезультатАвторизации Цикл
			Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ОшибкаАвторизации") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.Пользователи.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("АвторизованныйПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбновлениеСправочниковПользователей", "ПользователиСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя                    = "Пользователи";
	ВидДоступа.Представление          = НСтр("ru = 'Пользователи'");
	ВидДоступа.ТипЗначений            = Тип("СправочникСсылка.Пользователи");
	ВидДоступа.ТипГруппЗначений       = Тип("СправочникСсылка.ГруппыПользователей");
	ВидДоступа.НесколькоГруппЗначений = Истина; // Должно быть Истина, особый случай.
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя                    = "ВнешниеПользователи";
	ВидДоступа.Представление          = НСтр("ru = 'Внешние пользователи'");
	ВидДоступа.ТипЗначений            = Тип("СправочникСсылка.ВнешниеПользователи");
	ВидДоступа.ТипГруппЗначений       = Тип("СправочникСсылка.ГруппыВнешнихПользователей");
	ВидДоступа.НесколькоГруппЗначений = Истина; // Должно быть Истина, особый случай.
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ВнешниеПользователи, Истина);
	Списки.Вставить(Метаданные.Справочники.ГруппыВнешнихПользователей, Истина);
	Списки.Вставить(Метаданные.Справочники.Пользователи, Истина);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Если МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Оповещение = СерверныеОповещения.НовоеСерверноеОповещение(ИмяСерверногоОповещения());
	
	Оповещение.ИмяМодуляОтправки  = "ПользователиСлужебный";
	Оповещение.ИмяМодуляПолучения = "ПользователиСлужебныйКлиент";
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Оповещение.Параметры = КлючиРолейПользователяИБ(
			ПользователиИнформационнойБазы.ТекущийПользователь());
	КонецЕсли;
	
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
КонецПроцедуры

// Смотри также СтандартныеПодсистемыСервер.ПриОтправкеСерверногоОповещения
//
// Параметры:
//  ИмяОповещения - см. СтандартныеПодсистемыСервер.ПриОтправкеСерверногоОповещения.ИмяОповещения
//  ПараметрыПроцедуры - Структура:
//   * ВариантыПараметров - см. СтандартныеПодсистемыСервер.ПриОтправкеСерверногоОповещения.ВариантыПараметров
//   * АктивныеСеансыПоКлючам - Соответствие из КлючИЗначение:
//      ** Ключ - см. СерверныеОповещения.КлючСеанса
//      ** Значение - СеансИнформационнойБазы
//
Процедура ПриОтправкеСерверногоОповещения(ИмяОповещения, ПараметрыПроцедуры) Экспорт
	
	ВариантыПараметров     = ПараметрыПроцедуры.ВариантыПараметров;
	АктивныеСеансыПоКлючам = ПараметрыПроцедуры.АктивныеСеансыПоКлючам;
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	ИдентификаторыПользователейИБ = Новый Массив;
	ОбновитьДатуПоследнейАктивностиПользователей(ВариантыПараметров, ИдентификаторыПользователейИБ);
	ОтключитьНеактивныхИПросроченныхПользователей();
	ОстаткиСрокаДействия = ОстаткиСрокаДействияПользователей(ИдентификаторыПользователейИБ, НачалоДня);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульГруппыДоступа = ОбщегоНазначения.ОбщийМодуль("Справочники.ГруппыДоступа");
		МодульГруппыДоступа.ИсключитьПросроченныхУчастников();
	КонецЕсли;
	
	АдресатыБлокировки = Новый Соответствие;
	АдресатыСрокаДействия = Новый Соответствие;
	АдресатыРасширенияРолей = Новый Соответствие;
	АдресатыСокращенияРолей = Новый Соответствие;
	
	Для Каждого ВариантПараметров Из ВариантыПараметров Цикл
		Для Каждого Адресат Из ВариантПараметров.Адресаты Цикл
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Адресат.Ключ);
			Если ПользовательИБ = Неопределено
			 Или ПользовательИБ.АутентификацияСтандартная    = Ложь
			   И ПользовательИБ.АутентификацияOpenID         = Ложь
			   И ПользовательИБ.АутентификацияOpenIDConnect  = Ложь
			   И ПользовательИБ.АутентификацияТокеномДоступа = Ложь
			   И ПользовательИБ.АутентификацияОС             = Ложь Тогда
			
				ДобавитьСеансыАдресата(АдресатыБлокировки, Адресат);
				Продолжить;
			КонецЕсли;
			
			ОстатокСрокаДействия = ОстаткиСрокаДействия.Получить(ПользовательИБ.УникальныйИдентификатор);
			Если ЗначениеЗаполнено(ОстатокСрокаДействия)
			   И ТребуетсяНапоминание(ПользовательИБ.Имя, ОстатокСрокаДействия, НачалоДня) Тогда
				
				АдресатыТекущегоСрока = АдресатыСрокаДействия.Получить(ОстатокСрокаДействия);
				Если АдресатыТекущегоСрока = Неопределено Тогда
					АдресатыТекущегоСрока = Новый Соответствие;
					АдресатыСрокаДействия.Вставить(ОстатокСрокаДействия, АдресатыТекущегоСрока);
				КонецЕсли;
				ДобавитьСеансыАдресата(АдресатыТекущегоСрока, Адресат);
			КонецЕсли;
			
			ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ПользовательИБ);
			ДатаНапомнитьЗавтра = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
				"КонтрольИзмененияРолейПользователяИБ", "ДатаНапомнитьЗавтра",,, ПользовательИБ.Имя);
			НапомнитьЗавтра = ТипЗнч(ДатаНапомнитьЗавтра) = Тип("Дата")
				И ТекущаяДатаСеанса() < ДатаНапомнитьЗавтра;
			
			Если ИнформационнаяБазаФайловая Тогда
				НовыеКлючиРолей = КлючиРолейПользователяИБ(ПользовательИБ);
				Если ВариантПараметров.Параметры <> НовыеКлючиРолей Тогда
					Если Не ЭтоПолноправныйПользователь
					   И КлючиРолейСокращены(ВариантПараметров.Параметры, НовыеКлючиРолей) Тогда
						ДобавитьСеансыАдресата(АдресатыСокращенияРолей, Адресат);
					ИначеЕсли Не НапомнитьЗавтра Тогда
						ДобавитьСеансыАдресата(АдресатыРасширенияРолей, Адресат);
					КонецЕсли;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			РолиСтрокой = ЗначениеВСтрокуВнутр(ПользовательИБ.Роли);
			Для Каждого КлючСеанса Из Адресат.Значение Цикл
				ТекущийСеанс = АктивныеСеансыПоКлючам.Получить(КлючСеанса);
				Если ТекущийСеанс = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтарыйПользовательИБ = ТекущийСеанс.Пользователь;
				Если СтарыйПользовательИБ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если РолиСтрокой = ЗначениеВСтрокуВнутр(СтарыйПользовательИБ.Роли) Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЭтоПолноправныйПользователь
				   И РолиСокращены(СтарыйПользовательИБ, ПользовательИБ) Тогда
					ДобавитьСеансыАдресата(АдресатыСокращенияРолей, Адресат, КлючСеанса);
				ИначеЕсли Не НапомнитьЗавтра Тогда
					ДобавитьСеансыАдресата(АдресатыРасширенияРолей, Адресат, КлючСеанса);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресатыБлокировки) Тогда
		СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, "ВходВПрограммуЗапрещен", АдресатыБлокировки);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресатыСрокаДействия) Тогда
		Для Каждого Описание Из АдресатыСрокаДействия Цикл
			СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, Описание.Ключ, Описание.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресатыСокращенияРолей) Тогда
		СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, "РолиСокращены", АдресатыСокращенияРолей);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресатыРасширенияРолей) Тогда
		СерверныеОповещения.ОтправитьСерверноеОповещение(ИмяОповещения, "РолиРасширены", АдресатыРасширенияРолей);
	КонецЕсли;
	
КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в справочник ВнешниеПользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
	// Загрузка в справочник Пользователи запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Пользователи.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;

	
КонецПроцедуры

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	
	АутентификацияСтандартная = 0;
	АутентификацияOpenID = 0;
	АутентификацияOpenIDConnect = 0;
	АутентификацияТокеномДоступа = 0;
	АутентификацияОС = 0;
	ВходВПрограммуРазрешен = 0;
	Для Каждого ОписаниеПользователя Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		АутентификацияСтандартная = АутентификацияСтандартная
			+ ?(ОписаниеПользователя.АутентификацияСтандартная, 1, 0);
		АутентификацияOpenID = АутентификацияOpenID
			+ ?(ОписаниеПользователя.АутентификацияOpenID, 1, 0);
		АутентификацияOpenIDConnect = АутентификацияOpenIDConnect
			+ ?(ОписаниеПользователя.АутентификацияOpenIDConnect, 1, 0);
		АутентификацияТокеномДоступа = АутентификацияТокеномДоступа
			+ ?(ОписаниеПользователя.АутентификацияТокеномДоступа, 1, 0);
		АутентификацияОС = АутентификацияОС
			+ ?(ОписаниеПользователя.АутентификацияОС, 1, 0);
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешен
			+ ?(ОписаниеПользователя.АутентификацияСтандартная
				Или ОписаниеПользователя.АутентификацияOpenID
				Или ОписаниеПользователя.АутентификацияOpenIDConnect
				Или ОписаниеПользователя.АутентификацияТокеномДоступа
				Или ОписаниеПользователя.АутентификацияОС, 1, 0);
	КонецЦикла;
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.АутентификацияСтандартная", АутентификацияСтандартная);
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.АутентификацияOpenID", АутентификацияOpenID);
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.АутентификацияOpenIDConnect", АутентификацияOpenIDConnect);
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.АутентификацияТокеномДоступа", АутентификацияТокеномДоступа);
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.АутентификацияОС", АутентификацияОС);
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Недействителен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.Недействителен", Выборка.Количество);
	
	Настройки = НастройкиВхода().Пользователи;
	ИспользованиеРасширенныхНастроекВхода = Настройки.ПарольДолженОтвечатьТребованиямСложности
		Или ЗначениеЗаполнено(Настройки.МинимальнаяДлинаПароля)
		Или ЗначениеЗаполнено(Настройки.МаксимальныйСрокДействияПароля)
		Или ЗначениеЗаполнено(Настройки.МинимальныйСрокДействияПароля)
		Или ЗначениеЗаполнено(Настройки.ЗапретитьПовторениеПароляСредиПоследних)
		Или ЗначениеЗаполнено(Настройки.ПредупреждатьОбОкончанииСрокаДействияПароля)
		Или ЗначениеЗаполнено(Настройки.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.ИспользованиеРасширенныхНастроекВхода",
		ИспользованиеРасширенныхНастроекВхода);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.ДатаПоследнейАктивности >= &ДатаСреза";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДатаСеанса() - 30 *60*60*24)); // 30 дней.
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(
		"Справочник.Пользователи.Активный", Выборка.Количество);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СведенияОПользователях.ПоследнийИспользуемыйКлиент КАК ИспользуемыйКлиент,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОПользователях.ПоследнийИспользуемыйКлиент";
	
	СоответствиеИменМетаданных = Новый Соответствие;
	СоответствиеИменМетаданных.Вставить("Справочник.Пользователи", ТекстЗапроса);
	МодульЦентрМониторинга.ЗаписатьСтатистикуКонфигурации(СоответствиеИменМетаданных);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	// Сброс решения, принятого администратором в форме "Предупреждение безопасности".
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
		
		Если ТипЗнч(ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок) <> Тип("Булево")
		 Или ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок Тогда
			
			ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок = Ложь;
			СтандартныеПодсистемыСервер.УстановитьПараметрыАдминистрирования(ПараметрыАдминистрирования);
		КонецЕсли;
	КонецЕсли;
	
	АвторизоватьТекущегоПользователя();
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.16"; 
	Обработчик.Процедура = "ПользователиСлужебный.ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей";
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.4.1.1";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ПользователиСлужебный.ДобавитьАдминистраторамПравоОткрытияВнешнихОтчетовИОбработок";
	Иначе
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.4.1.1";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ПользователиСлужебный.ПереименоватьКлючХраненияРешенияПоОткрытиюВнешнихОтчетовИОбработок";
		Обработчик.ВыполнятьВГруппеОбязательных = Истина;
		Обработчик.Приоритет = 1;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Пользователи
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.Пользователи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
		Обработчик.Версия = "3.1.4.25";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("d553f38f-196b-4fb7-ac8e-34ffb7025ab5");
		Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Пользователи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
		Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		Обработчик.Комментарий = НСтр("ru = 'Заполнение электронной почты для восстановления паролей из контактной информации пользователей.'");
		Обработчик.ЧитаемыеОбъекты    = "Справочник.Пользователи";
		Обработчик.ИзменяемыеОбъекты  = "Справочник.Пользователи";
		Обработчик.БлокируемыеОбъекты = "Справочник.Пользователи";
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
			Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
			
			ПриоритетыВыполнения = Обработчик.ПриоритетыВыполнения; // ТаблицаЗначений
			НоваяСтрока = ПриоритетыВыполнения.Добавить();
			НоваяСтрока.Процедура = "ОбсужденияСлужебный.ЗаблокироватьНедействительныхПользователейВСистемеВзаимодействий"; // АПК:277-выкл - выполнен условный вызов
			НоваяСтрока.Порядок = "После";
		КонецЕсли;
		
		// Внешние пользователи
		ТипыВнешнихПользователей = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы();
		Если ТипыВнешнихПользователей[0] <> Тип("Строка")
			 И ТипыВнешнихПользователей[0] <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")Тогда
			
			Обработчик = Обработчики.Добавить();
			Обработчик.Процедура = "Справочники.ВнешниеПользователи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
			Обработчик.Версия = "3.1.4.25";
			Обработчик.РежимВыполнения = "Отложенно";
			Обработчик.Идентификатор = Новый УникальныйИдентификатор("002f8ac6-dfe6-4d9f-be48-ce3c331aea82");
			Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВнешниеПользователи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
			Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
			Обработчик.Комментарий = НСтр("ru = 'Заполнение электронной почты для восстановления паролей из контактной информации внешних пользователей.'");
			
			Читаемые = Новый Массив;
			Для Каждого ТипВнешнегоПользователя Из ТипыВнешнихПользователей Цикл
				
				Если ТипВнешнегоПользователя = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
					Продолжить;
				КонецЕсли;
				
				Читаемые.Добавить(Метаданные.НайтиПоТипу(ТипВнешнегоПользователя).ПолноеИмя());
			КонецЦикла;
			Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
			
			Обработчик.ИзменяемыеОбъекты  = "Справочник.ВнешниеПользователи";
			Обработчик.БлокируемыеОбъекты = "Справочник.ВнешниеПользователи";
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность") Тогда
				Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
				НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
				НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
				НоваяСтрока.Порядок = "До";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.8";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "Константы.ИспользоватьГруппыВнешнихПользователей.Обновить";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.289";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "РегистрыСведений.СведенияОПользователях.ОбновитьСведенияОПользователяхИОтключитьАутентификацию";
	Обработчик.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '- Перенос значений устаревших реквизитов ""(не используется) Свойства пользователя ИБ"" из справочников ""Пользователи"" и ""Внешние пользователи"" в регистр сведений ""Сведения о пользователях"".
		           |- Обновление значения реквизита ""Номер картинки состояния"" в регистре сведений ""Сведения о пользователях"".
		           |- Удаление из регистра сведения ""Сведения о пользователях"" записей с несуществующими пользователями и внешними пользователями.
		           |- Сброс лишней аутентификации %1 и аутентификации недействительных пользователей.'"),
		"OpenID-Connect");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.198";
	Обработчик.ОбщиеДанные = ОбщегоНазначения.РазделениеВключено();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПользователиСлужебный.ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение и перенос настроек входа пользователей'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.65";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПользователиСлужебный.ЗаполнитьИерархиюГруппПользователей";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Иерархия групп пользователей"".'");
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
//
// Параметры:
//  Объекты - Массив из ОбъектМетаданных
//
Процедура ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.ГруппыВнешнихПользователей);
	Объекты.Добавить(Метаданные.Справочники.ГруппыПользователей);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
			Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриПолученииДанных();
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	// Устарели. Для обратной совместимости. Следует использовать ПользователиКлиент.ЭтоПолноправныйПользователь.
	Параметры.Вставить("ЭтоПолноправныйПользователь", Пользователи.ЭтоПолноправныйПользователь());
	Параметры.Вставить("ЭтоАдминистраторСистемы", Пользователи.ЭтоПолноправныйПользователь(, Истина));
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.ПолноеИмя());
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеДанныхГлавному.
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Ложь, Ложь);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеДанныхПодчиненному.
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Истина, СозданиеНачальногоОбраза);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного.
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Ложь);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтПодчиненного.
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Истина);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПослеПолученияДанных.
Процедура ПослеПолученияДанных(Отправитель, Отказ, ПолучениеИзГлавногоУзла) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриПолученииДанных();
	
КонецПроцедуры

// См. описание в процедуре ЗаполнитьВсеПараметрыРаботыРасширений
// модуля менеджера регистра сведений ПараметрыРаботыВерсийРасширений.
//
Процедура ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	// Если были нештатные ситуации и обновление не завершилось.
	ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриПолученииДанных();
	
КонецПроцедуры


// См. ИнтеграцияПодсистемБСП.ПриЗаполненииСпискаТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	ДобавитьДелоНекорректныеСведенияОПользователях = Не ОбщегоНазначения.РазделениеВключено()
		И Пользователи.ЭтоПолноправныйПользователь(, Истина)
		И Не МодульТекущиеДелаСервер.ДелоОтключено("НекорректныеСведенияОПользователях");
	НекорректныхПользователей = 0;
	Если ДобавитьДелоНекорректныеСведенияОПользователях Тогда
		НекорректныхПользователей = ПользователиДобавленныеСПомощьюКонфигуратора();
	КонецЕсли;
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.Пользователи.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		Если ДобавитьДелоНекорректныеСведенияОПользователях Тогда
			ИдентификаторПользователи = "НекорректныеСведенияОПользователях" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = ИдентификаторПользователи;
			Дело.ЕстьДела       = НекорректныхПользователей > 0;
			Дело.Количество     = НекорректныхПользователей;
			Дело.Представление  = НСтр("ru = 'Некорректные сведения о пользователях'");
			Дело.Форма          = "Справочник.Пользователи.Форма.ПользователиИнформационнойБазы";
			Дело.Владелец       = Раздел;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ВидыИзменяемыхОбъектов - Массив из Строка - полные имена объектов метаданных
//  ВнешниеРеквизиты - Массив из см. НовыйВнешнийРеквизит
//
Процедура ПриЗаполненииВнешнихРеквизитов(ВидыИзменяемыхОбъектов, ВнешниеРеквизиты) Экспорт
	
	Если ВидыИзменяемыхОбъектов.Количество() > 2
	 Или ВидыИзменяемыхОбъектов.Количество() = 1
	   И ВидыИзменяемыхОбъектов[0] <> "Справочник.Пользователи"
	   И ВидыИзменяемыхОбъектов[0] <> "Справочник.ВнешниеПользователи"
	 Или ВидыИзменяемыхОбъектов.Количество() = 2
	   И (ВидыИзменяемыхОбъектов.Найти("Справочник.Пользователи") = Неопределено
	      Или ВидыИзменяемыхОбъектов.Найти("Справочник.ВнешниеПользователи") = Неопределено)
	 Или Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Префикс = ПрефиксВнешнегоРеквизита();
	ТипБулево = Новый ОписаниеТипов("Булево");
	МетаданныеРегистра = Метаданные.РегистрыСведений.СведенияОПользователях;
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ВходВПрограммуРазрешен",
		МетаданныеРегистра.Реквизиты.ВходВПрограммуРазрешен.Представление(), ТипБулево));
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "АутентификацияСтандартная",
		НСтр("ru = 'Аутентификация 1С:Предприятия'"), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "АутентификацияOpenID",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Аутентификация по протоколу %1'"), "OpenID"), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "АутентификацияOpenIDConnect",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Аутентификация по протоколу %1'"), "OpenID-Connect"), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "АутентификацияТокеномДоступа",
		МетаданныеРегистра.Реквизиты.АутентификацияТокеномДоступа.Представление(), ТипБулево));
	
	Если ВидыИзменяемыхОбъектов.Количество() = 1
	   И ВидыИзменяемыхОбъектов[0] = "Справочник.Пользователи" Тогда
		
		ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "АутентификацияОС",
			МетаданныеРегистра.Реквизиты.АутентификацияОС.Представление(), ТипБулево));
		
		ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ПользовательОС",
			МетаданныеРегистра.Реквизиты.ПользовательОС.Представление(),
			МетаданныеРегистра.Реквизиты.ПользовательОС.Тип, Истина));
	КонецЕсли;
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ПоказыватьВСпискеВыбора",
		МетаданныеРегистра.Реквизиты.ПоказыватьВСпискеВыбора.Представление(), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ЗапрещеноИзменятьПароль",
		МетаданныеРегистра.Реквизиты.ЗапрещеноИзменятьПароль.Представление(), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ЗапрещеноВосстанавливатьПароль",
		МетаданныеРегистра.Реквизиты.ЗапрещеноВосстанавливатьПароль.Представление(), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "АдресЭлектроннойПочты",
		МетаданныеРегистра.Реквизиты.АдресЭлектроннойПочты.Представление(),
		МетаданныеРегистра.Реквизиты.АдресЭлектроннойПочты.Тип, Истина));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ПотребоватьСменуПароляПриВходе",
		МетаданныеРегистра.Ресурсы.ПотребоватьСменуПароляПриВходе.Представление(), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "СрокДействияНеОграничен",
		НСтр("ru = 'Без ограничения срока доступа к приложению'"), ТипБулево));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "СрокДействия",
		НСтр("ru = 'Вход в приложение разрешен до даты'"),
		МетаданныеРегистра.Ресурсы.СрокДействия.Тип));
	
	ВнешниеРеквизиты.Добавить(НовыйВнешнийРеквизит(Префикс + "ПросрочкаРаботыВПрограммеДоЗапрещенияВхода",
		НСтр("ru = 'Запретить вход в приложение, если не работает более, дн.'"),
		МетаданныеРегистра.Ресурсы.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода.Тип));
	
КонецПроцедуры

// Параметры:
//  ИзменяемыйОбъект - СправочникОбъект.Пользователи
//                   - СправочникОбъект.ВнешниеПользователи
//
//  ИзменяемыеВнешниеРеквизиты - Соответствие из КлючИЗначение:
//   * Ключ - см. НовыйВнешнийРеквизит.Имя
//   * Значение - Произвольный
//
Процедура ПриИзмененииВнешнихРеквизитов(ИзменяемыйОбъект, ИзменяемыеВнешниеРеквизиты) Экспорт
	
	ОписаниеПользователяИБ = Новый Структура;
	РасширенныеСвойства    = Новый Структура;
	
	ВсеРасширенныеСвойства = Новый Структура(
		"ПотребоватьСменуПароляПриВходе,
		|СрокДействияНеОграничен,
		|СрокДействия,
		|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
	
	Префикс = ПрефиксВнешнегоРеквизита();
	ПозицияПослеПрефикса = СтрДлина(Префикс) + 1;
	
	Для Каждого ИзменяемыйВнешнийРеквизит Из ИзменяемыеВнешниеРеквизиты Цикл
		Если Не СтрНачинаетсяС(ИзменяемыйВнешнийРеквизит.Ключ, Префикс) Тогда
			Продолжить;
		КонецЕсли;
		ИмяСвойства = Сред(ИзменяемыйВнешнийРеквизит.Ключ, ПозицияПослеПрефикса);
		Если ВсеРасширенныеСвойства.Свойство(ИмяСвойства) Тогда
			РасширенныеСвойства.Вставить(ИмяСвойства, ИзменяемыйВнешнийРеквизит.Значение);
		Иначе
			ОписаниеПользователяИБ.Вставить(ИмяСвойства, ИзменяемыйВнешнийРеквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Записать = Ложь;
	Если ЗначениеЗаполнено(ОписаниеПользователяИБ) Тогда
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ТолькоОбновитьПользователяИБ");
		Если Не ОписаниеПользователяИБ.Свойство("ВходВПрограммуРазрешен") Тогда
			// Не изменять ВходВПрограммуРазрешен при изменении аутентификации.
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен");
		КонецЕсли;
		ИзменяемыйОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Записать = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасширенныеСвойства) Тогда
		ИзменяемыйОбъект.ДополнительныеСвойства.Вставить("РасширенныеСвойстваПользователяИБ", РасширенныеСвойства);
		Записать = Истина;
	КонецЕсли;
	
	Если Записать Тогда
		ИзменяемыйОбъект.Наименование = ИзменяемыйОбъект.Наименование; // Установка модифицированности.
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	ДополнениеОписания =
	"
	|Справочник.ВнешниеПользователи.Чтение.ВнешниеПользователи
	|";
	
	Описание = Описание + ДополнениеОписания;
	
КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_ВнешниеПользователи";
	Набор.Идентификатор = Новый УникальныйИдентификатор("d9c30d48-a72a-498a-9faa-c078bf652776");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_Пользователи";
	Набор.Идентификатор = Новый УникальныйИдентификатор("2bf06771-775a-406a-a5dc-45a10e98914f");
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.
// 
// Параметры:
//   СтруктураПоддерживаемыхВерсий - см. ОбщегоНазначенияПереопределяемый.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов.ПоддерживаемыеВерсии
// 
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.0.1");
	
	СтруктураПоддерживаемыхВерсий.Вставить(
		"НастройкиВходаВМоделиСервиса",
		МассивВерсий);
	
КонецПроцедуры

// Обработчики событий подсистемы СтандартныеПодсистемы.ОбменДанными.

// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ.
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	ОчиститьИдентификаторыНесуществующихПользователейИБ();
	
	РегистрыСведений.СведенияОПользователях.ОбновитьДанныеРегистра();
	
КонецПроцедуры

// Обработчики событий подсистемы СтандартныеПодсистемы.ВариантыОтчетов.

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СведенияОПользователях);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.УчастникиГруппПользователей);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПользователиПоПодразделениям);
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.
Процедура ПередДобавлениемКомандОтчетов(КомандыОтчетов, Параметры, СтандартнаяОбработка) Экспорт
	
	Отчеты.УчастникиГруппПользователей.ПередДобавлениемКомандОтчетов(КомандыОтчетов, Параметры, СтандартнаяОбработка);
	Отчеты.ПользователиПоПодразделениям.ПередДобавлениемКомандОтчетов(КомандыОтчетов, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчики событий подсистемы СтандартныеПодсистемы.ПодключаемыеКоманды.

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.Пользователи);
	
КонецПроцедуры

// Обработчики событий подсистемы СтандартныеПодсистемы.Пользователи.

// См. ПользователиПереопределяемый.ИзменитьДействияВФорме
Процедура ПриОпределенииДействийВФорме(Ссылка, ДействияВФорме) Экспорт
	
	ИнтеграцияПодсистемБСП.ПриОпределенииДействийВФорме(Ссылка, ДействияВФорме);
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Ссылка, ДействияВФорме);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ИмяПараметра - Строка
//  УстановленныеПараметры - Массив из Строка
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра <> "ТекущийПользователь"
	   И ИмяПараметра <> "ТекущийВнешнийПользователь"
	   И ИмяПараметра <> "АвторизованныйПользователь"
	   И ИмяПараметра <> "ОбновлениеСправочниковПользователей" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ОбновлениеСправочниковПользователей = Новый ФиксированноеСоответствие(Новый Соответствие);
	Если ИмяПараметра = "ОбновлениеСправочниковПользователей" Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Значения = ЗначенияПараметровСеансаТекущийПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить параметр сеанса %1 по причине:
			           |""%2"".
			           |
			           |Обратитесь к администратору.'"),
			"ТекущийПользователь",
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если ТипЗнч(Значения) = Тип("Строка") Тогда
		ВызватьИсключение Значения;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь        = Значения.ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = Значения.ТекущийВнешнийПользователь;
	
	Если ЗначениеЗаполнено(Значения.ТекущийПользователь) Тогда
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийПользователь;
	Иначе
		ПараметрыСеанса.АвторизованныйПользователь = Значения.ТекущийВнешнийПользователь;
	КонецЕсли;
	
	УстановленныеПараметры.Добавить("ТекущийПользователь");
	УстановленныеПараметры.Добавить("ТекущийВнешнийПользователь");
	УстановленныеПараметры.Добавить("АвторизованныйПользователь");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Вызывает обновление представления внешнего пользователя при изменении
// представления его объекта авторизации, а также помечает, как недействительного,
// если объект авторизации помечен на удаление.
//
Процедура ОбновитьВнешнегоПользователяПриЗаписи(Знач Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВнешнегоПользователя(Объект.Ссылка, Объект.ПометкаУдаления);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с настройками входа пользователей.

// Возвращаемое значение:
//  Структура:
//   * Общие               - см. Пользователи.НовоеОписаниеОбщихНастроекВхода
//   * Пользователи        - см. Пользователи.НовоеОписаниеНастроекВхода
//   * ВнешниеПользователи - см. Пользователи.НовоеОписаниеНастроекВхода
//
Функция НастройкиВхода() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("Общие",               Пользователи.НовоеОписаниеОбщихНастроекВхода());
	Настройки.Вставить("Пользователи",        Пользователи.НовоеОписаниеНастроекВхода());
	Настройки.Вставить("ВнешниеПользователи", Пользователи.НовоеОписаниеНастроекВхода());
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	ОбщиеНастройкиВходаИспользуются = Пользователи.ОбщиеНастройкиВходаИспользуются();
	ОкруглятьПолитикуПаролей = Не РазделениеВключено И ОбщиеНастройкиВходаИспользуются;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СохраненныеНастройки = Константы.НастройкиВходаПользователей.Получить().Получить();
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		Для Каждого Настройка Из Настройки Цикл
			
			Если Не СохраненныеНастройки.Свойство(Настройка.Ключ)
			 Или ТипЗнч(СохраненныеНастройки[Настройка.Ключ]) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			НачальныеНастройки = Настройка.Значение;
			ТекущиеНастройки = СохраненныеНастройки[Настройка.Ключ];
			
			Для Каждого НачальнаяНастройка Из НачальныеНастройки Цикл
				
				Если Не ТекущиеНастройки.Свойство(НачальнаяНастройка.Ключ)
				 Или ТипЗнч(ТекущиеНастройки[НачальнаяНастройка.Ключ]) <> ТипЗнч(НачальнаяНастройка.Значение) Тогда
					Продолжить;
				КонецЕсли;
				НачальныеНастройки[НачальнаяНастройка.Ключ] = ТекущиеНастройки[НачальнаяНастройка.Ключ];
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если РазделениеВключено
	 Или ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		
		Настройки.Общие.ПоказыватьВСпискеВыбора = "СкрытоИВыключеноДляВсехПользователей";
		
	ИначеЕсли Настройки.Общие.ПоказыватьВСпискеВыбора <> "ВключеноДляНовыхПользователей"
	        И Настройки.Общие.ПоказыватьВСпискеВыбора <> "ВыключеноДляНовыхПользователей"
	        И Настройки.Общие.ПоказыватьВСпискеВыбора <> "СкрытоИВключеноДляВсехПользователей"
	        И Настройки.Общие.ПоказыватьВСпискеВыбора <> "СкрытоИВыключеноДляВсехПользователей" Тогда
		
		Настройки.Общие.ПоказыватьВСпискеВыбора =
			Пользователи.НовоеОписаниеОбщихНастроекВхода().ПоказыватьВСпискеВыбора;
	КонецЕсли;
	
	Если Настройки.Общие.ПредупреждатьОЗавершенииСеансаПриБездействии
	   > Настройки.Общие.СрокБездействияДоЗавершенияСеанса Тогда
		
		Настройки.Общие.ПредупреждатьОЗавершенииСеансаПриБездействии =
			Настройки.Общие.СрокБездействияДоЗавершенияСеанса;
	КонецЕсли;
	
	Если Настройки.Общие.ДлительностьБлокировкиВводаПароля <= 0 Тогда
		Настройки.Общие.ДлительностьБлокировкиВводаПароля = 1;
	ИначеЕсли Настройки.Общие.ДлительностьБлокировкиВводаПароля > 16666666 Тогда
		Настройки.Общие.ДлительностьБлокировкиВводаПароля = 16666666;
	КонецЕсли;
	
	Если Настройки.Общие.ВремяСохраненияПароля <= 0 Тогда
		Настройки.Общие.ВремяСохраненияПароля = 1;
	ИначеЕсли Настройки.Общие.ВремяСохраненияПароля > 16666666 Тогда
		Настройки.Общие.ВремяСохраненияПароля = 16666666;
	КонецЕсли;
	
	Если Настройки.Общие.ИспользоватьСервисЗапрещенныхПаролей
	   И Не ЗначениеЗаполнено(Настройки.Общие.АдресСервисаЗапрещенныхПаролей) Тогда
		Настройки.Общие.ИспользоватьСервисЗапрещенныхПаролей = Ложь;
	КонецЕсли;
	
	// Заполнение общих настроек.
	ЗаполнитьОбщиеНастройкиИзОбщейПолитикиПаролей(Настройки.Общие);
	Если ОкруглятьПолитикуПаролей Тогда
		ОбновитьОбщуюПолитикуПаролей(Настройки.Общие);
	КонецЕсли;
	
	// Заполнение настроек обычных пользователей.
	ЗаполнитьНастройкиИзПолитикиПаролейПользователей(Настройки.Пользователи);
	Если ОкруглятьПолитикуПаролей Тогда
		ОбновитьПолитикуПаролейПользователей(Настройки.Пользователи);
	КонецЕсли;
	
	// Заполнение настроек внешних пользователей.
	Если Настройки.Общие.ОтдельныеНастройкиДляВнешнихПользователей Тогда
		ЗаполнитьНастройкиИзПолитикиПаролейВнешнихПользователей(Настройки.ВнешниеПользователи);
	КонецЕсли;
	
	Если Не РазделениеВключено Тогда
		Если Настройки.Общие.ОтдельныеНастройкиДляВнешнихПользователей
		   И ОбщиеНастройкиВходаИспользуются Тогда
			ОбновитьПолитикуПаролейВнешнихПользователей(Настройки.ВнешниеПользователи);
		Иначе
			ОбновитьПолитикуПаролейВнешнихПользователей(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки;
	
КонецФункции

// Параметры:
//  Настройки - см. Пользователи.НовоеОписаниеОбщихНастроекВхода
//
Процедура ЗаполнитьОбщиеНастройкиИзОбщейПолитикиПаролей(Настройки)
	
	НастройкиБлокировки = БлокировкаАутентификации.ПолучитьНастройки();
	
	Настройки.ДлительностьБлокировкиВводаПароля =
		Окр(НастройкиБлокировки.ДлительностьБлокировки / 60);
	
	Настройки.КоличествоПопытокВводаПароляДоБлокировки =
		НастройкиБлокировки.МаксимальноеКоличествоНеуспешныхПопыток;
	
	Если Не ДоступныНастройки8_3_26() Тогда
		Возврат;
	КонецЕсли;
	
	// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	Настройки.СрокБездействияДоЗавершенияСеанса =
		Окр(Вычислить("ПолучитьВремяЗавершенияСеансаПриБездействии()") / 60);
	
	Настройки.ПредупреждатьОЗавершенииСеансаПриБездействии =
		Окр(Вычислить("ПолучитьВремяПредупрежденияОЗавершенииСеансаПриБездействии()") / 60);
	
	НастройкиСохранения =
		Вычислить("ДополнительныеНастройкиАутентификации.ПолучитьНастройкиАвтоматическогоСохраненияАутентификации()");
	
	Настройки.СохранениеПароляПриВходе = ТекущееСохранениеПароляПриВходе(НастройкиСохранения);
	Настройки.ВремяСохраненияПароля =
		Окр(НастройкиСохранения.ВремяЖизниСохраненнойАутентификации / 60);
	
	НастройкиПроверки =
		Вычислить("ДополнительныеНастройкиАутентификации.ПолучитьНастройкиПроверкиРаскрытияПароля()");
	// АПК:488-вкл
	
	Настройки.ИспользоватьСтандартныйСписокЗапрещенныхПаролей =
		НастройкиПроверки.ИспользоватьСтандартныйСписокПроверкиРаскрытияПароля;
	
	Настройки.ИспользоватьДополнительныйСписокЗапрещенныхПаролей =
		НастройкиПроверки.ИспользоватьЗаданныйСписокПроверкиРаскрытияПароля;
	
	Настройки.ИспользоватьСервисЗапрещенныхПаролей =
		НастройкиПроверки.ИспользоватьСервисПроверкиРаскрытияПароля;
	
	Настройки.АдресСервисаЗапрещенныхПаролей =
		НастройкиПроверки.АдресСервисаПроверкиРаскрытияПароля;
	
	Настройки.МаксимальноеВремяОжиданияСервисаЗапрещенныхПаролей =
		НастройкиПроверки.ТаймаутЗапросаСервисаПроверкиРаскрытияПароля;
	
	Настройки.ПропускатьПроверкуЕслиСервисЗапрещенныхПаролейНеГотов =
		НастройкиПроверки.ИгнорироватьОшибкиСервисаПроверкиРаскрытияПароля;
	
КонецПроцедуры

// Параметры:
//  Настройки - см. Пользователи.НовоеОписаниеОбщихНастроекВхода
//
Процедура ОбновитьОбщуюПолитикуПаролей(Настройки) Экспорт
	
	НастройкиБлокировки = БлокировкаАутентификации.ПолучитьНастройки();
	Записать = Ложь;
	
	Если НастройкиБлокировки.ДлительностьБлокировки
	  <> Настройки.ДлительностьБлокировкиВводаПароля * 60 Тогда
		
		Записать = Истина;
		НастройкиБлокировки.ДлительностьБлокировки =
			Настройки.ДлительностьБлокировкиВводаПароля * 60;
	КонецЕсли;
	
	Если НастройкиБлокировки.МаксимальноеКоличествоНеуспешныхПопыток
	  <> Настройки.КоличествоПопытокВводаПароляДоБлокировки Тогда
	
		Записать = Истина;
		НастройкиБлокировки.МаксимальноеКоличествоНеуспешныхПопыток =
			Настройки.КоличествоПопытокВводаПароляДоБлокировки;
	КонецЕсли;
	
	Если Записать Тогда
		БлокировкаАутентификации.УстановитьНастройки(НастройкиБлокировки);
	КонецЕсли;
	
	Если Не ДоступныНастройки8_3_26() Тогда
		Возврат;
	КонецЕсли;
	
	// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	// АПК:487-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	Если Вычислить("ПолучитьВремяЗавершенияСеансаПриБездействии()")
	  <> Настройки.СрокБездействияДоЗавершенияСеанса * 60
	   И Вычислить("ПолучитьВремяПредупрежденияОЗавершенииСеансаПриБездействии()")
	  <> Настройки.ПредупреждатьОЗавершенииСеансаПриБездействии * 60 Тогда
		
		Выполнить("УстановитьВремяПредупрежденияОЗавершенииСеансаПриБездействии(0)");
	КонецЕсли;
	
	Если Вычислить("ПолучитьВремяЗавершенияСеансаПриБездействии()")
	  <> Настройки.СрокБездействияДоЗавершенияСеанса * 60 Тогда
		
		Выполнить("УстановитьВремяЗавершенияСеансаПриБездействии(
			|Настройки.СрокБездействияДоЗавершенияСеанса * 60)");
	КонецЕсли;
	
	Если Вычислить("ПолучитьВремяПредупрежденияОЗавершенииСеансаПриБездействии()")
	  <> Настройки.ПредупреждатьОЗавершенииСеансаПриБездействии * 60 Тогда
		
		Выполнить("УстановитьВремяПредупрежденияОЗавершенииСеансаПриБездействии(
			|Настройки.ПредупреждатьОЗавершенииСеансаПриБездействии * 60)");
	КонецЕсли;
	
	Записать = Ложь;
	НастройкиСохранения =
		Вычислить("ДополнительныеНастройкиАутентификации.ПолучитьНастройкиАвтоматическогоСохраненияАутентификации()");

	Если ТекущееСохранениеПароляПриВходе(НастройкиСохранения)
	  <> Настройки.СохранениеПароляПриВходе Тогда
		
		Записать = Истина;
		НастройкиСохранения.РазрешитьСохранение =
			    Настройки.СохранениеПароляПриВходе = "РазрешеноИОтключено"
			Или Настройки.СохранениеПароляПриВходе = "РазрешеноИВключено";
		НастройкиСохранения.СохранятьПоУмолчанию =
			Настройки.СохранениеПароляПриВходе = "РазрешеноИВключено";
	КонецЕсли;
	
	Если НастройкиСохранения.ВремяЖизниСохраненнойАутентификации
	  <> Настройки.ВремяСохраненияПароля * 60 Тогда
		
		Записать = Истина;
		НастройкиСохранения.ВремяЖизниСохраненнойАутентификации =
			Настройки.ВремяСохраненияПароля * 60;
	КонецЕсли;
	
	Если Записать Тогда
		Выполнить("ДополнительныеНастройкиАутентификации.УстановитьНастройкиАвтоматическогоСохраненияАутентификации(
			|НастройкиСохранения)");
	КонецЕсли;
	
	Записать = Ложь;
	НастройкиПроверки =
		Вычислить("ДополнительныеНастройкиАутентификации.ПолучитьНастройкиПроверкиРаскрытияПароля()");
	
	Если НастройкиПроверки.ИспользоватьСтандартныйСписокПроверкиРаскрытияПароля
	  <> Настройки.ИспользоватьСтандартныйСписокЗапрещенныхПаролей Тогда
		
		Записать = Истина;
		НастройкиПроверки.ИспользоватьСтандартныйСписокПроверкиРаскрытияПароля =
			Настройки.ИспользоватьСтандартныйСписокЗапрещенныхПаролей;
	КонецЕсли;
	
	Если НастройкиПроверки.ИспользоватьЗаданныйСписокПроверкиРаскрытияПароля
	  <> Настройки.ИспользоватьДополнительныйСписокЗапрещенныхПаролей Тогда
		
		Записать = Истина;
		НастройкиПроверки.ИспользоватьЗаданныйСписокПроверкиРаскрытияПароля =
			Настройки.ИспользоватьДополнительныйСписокЗапрещенныхПаролей;
	КонецЕсли;
	
	Если НастройкиПроверки.ИспользоватьСервисПроверкиРаскрытияПароля
	  <> Настройки.ИспользоватьСервисЗапрещенныхПаролей Тогда
		
		Записать = Истина;
		НастройкиПроверки.ИспользоватьСервисПроверкиРаскрытияПароля =
			Настройки.ИспользоватьСервисЗапрещенныхПаролей;
	КонецЕсли;
	
	Если НастройкиПроверки.АдресСервисаПроверкиРаскрытияПароля
	  <> Настройки.АдресСервисаЗапрещенныхПаролей Тогда
		
		Записать = Истина;
		НастройкиПроверки.АдресСервисаПроверкиРаскрытияПароля =
			Настройки.АдресСервисаЗапрещенныхПаролей;
	КонецЕсли;
	
	Если НастройкиПроверки.ТаймаутЗапросаСервисаПроверкиРаскрытияПароля
	  <> Настройки.МаксимальноеВремяОжиданияСервисаЗапрещенныхПаролей Тогда
		
		Записать = Истина;
		НастройкиПроверки.ТаймаутЗапросаСервисаПроверкиРаскрытияПароля =
			Настройки.МаксимальноеВремяОжиданияСервисаЗапрещенныхПаролей;
	КонецЕсли;
	
	Если НастройкиПроверки.ИгнорироватьОшибкиСервисаПроверкиРаскрытияПароля
	  <> Настройки.ПропускатьПроверкуЕслиСервисЗапрещенныхПаролейНеГотов Тогда
		
		Записать = Истина;
		НастройкиПроверки.ИгнорироватьОшибкиСервисаПроверкиРаскрытияПароля =
			Настройки.ПропускатьПроверкуЕслиСервисЗапрещенныхПаролейНеГотов;
	КонецЕсли;
	
	Если Записать Тогда
		Выполнить("ДополнительныеНастройкиАутентификации.УстановитьНастройкиПроверкиРаскрытияПароля(
			|НастройкиПроверки)");
	КонецЕсли;
	// АПК:487-вкл
	// АПК:488-вкл
	
КонецПроцедуры

// Параметры:
//  Настройки - см. Пользователи.НовоеОписаниеНастроекВхода
//
Процедура ЗаполнитьНастройкиИзПолитикиПаролейПользователей(Настройки)
	
	СекундВДне = 24*60*60;
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Настройки.ПарольДолженОтвечатьТребованиямСложности =
		ПолучитьПроверкуСложностиПаролейПользователей();
	
	Настройки.МинимальнаяДлинаПароля =
		ПолучитьМинимальнуюДлинуПаролейПользователей();
	
	// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	Если ДоступныНастройки8_3_26() Тогда
		Настройки.ПарольДолженОтсутствоватьВСпискеЗапрещенных
			= Вычислить("ПолучитьПроверкуРаскрытияПаролейПользователей()");
			
		Настройки.ДействиеПриВходеЕслиТребованиеНеВыполнено =
			ТекущееДействиеПриВходеЕслиТребованиеНеВыполнено();
	КонецЕсли;
	// АПК:488-вкл
	
	Если Не РазделениеВключено Тогда
		Настройки.МаксимальныйСрокДействияПароля =
			Окр(ПолучитьМаксимальныйСрокДействияПаролейПользователей() / СекундВДне);
	КонецЕсли;
	
	Настройки.МинимальныйСрокДействияПароля =
		Окр(ПолучитьМинимальныйСрокДействияПаролейПользователей() / СекундВДне);
	
	Настройки.ЗапретитьПовторениеПароляСредиПоследних =
		ПолучитьОграничениеПовторенияПаролейПользователейСредиПоследних();
	
	Если Не РазделениеВключено Тогда
		Настройки.ПредупреждатьОбОкончанииСрокаДействияПароля =
			Окр(ПолучитьСрокПредупрежденияОбИстеченииСрокаДействияПаролейПользователей() / СекундВДне);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Настройки - см. Пользователи.НовоеОписаниеНастроекВхода
//
Процедура ОбновитьПолитикуПаролейПользователей(Настройки) Экспорт
	
	СекундВДне = 24*60*60;
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если ПолучитьПроверкуСложностиПаролейПользователей()
	  <> Настройки.ПарольДолженОтвечатьТребованиямСложности Тогда
		
		УстановитьПроверкуСложностиПаролейПользователей(
			Настройки.ПарольДолженОтвечатьТребованиямСложности);
	 КонецЕсли;
	
	Если ПолучитьМинимальнуюДлинуПаролейПользователей()
	  <> Настройки.МинимальнаяДлинаПароля Тогда
	
		УстановитьМинимальнуюДлинуПаролейПользователей(
			Настройки.МинимальнаяДлинаПароля);
	КонецЕсли;
	
	// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	// АПК:487-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	Если ДоступныНастройки8_3_26() Тогда
		Если Вычислить("ПолучитьПроверкуРаскрытияПаролейПользователей()")
		  <> Настройки.ПарольДолженОтсутствоватьВСпискеЗапрещенных Тогда
			
			Выполнить("УстановитьПроверкуРаскрытияПаролейПользователей(
				|Настройки.ПарольДолженОтсутствоватьВСпискеЗапрещенных)");
		КонецЕсли;
		
		НовоеДействие = ЗначениеДействияПриВходеЕслиТребованиеНеВыполнено(
			Настройки.ДействиеПриВходеЕслиТребованиеНеВыполнено);
		
		Если Вычислить("ПолучитьДействиеПриНесоответствииПаролейПользователейТребованиямПриАутентификации()")
		  <> НовоеДействие Тогда
			
			Выполнить("УстановитьДействиеПриНесоответствииПаролейПользователейТребованиямПриАутентификации(НовоеДействие)");
		КонецЕсли;
	КонецЕсли;
	// АПК:487-вкл
	// АПК:488-вкл
	
	МаксимальныйСрокДействияПароля = ?(РазделениеВключено,
		0, Настройки.МаксимальныйСрокДействияПароля);
	
	Если ПолучитьМаксимальныйСрокДействияПаролейПользователей()
	  <> МаксимальныйСрокДействияПароля * СекундВДне Тогда
	
		УстановитьМаксимальныйСрокДействияПаролейПользователей(
			МаксимальныйСрокДействияПароля * СекундВДне);
	КонецЕсли;
	
	Если ПолучитьМинимальныйСрокДействияПаролейПользователей()
	  <> Настройки.МинимальныйСрокДействияПароля * СекундВДне Тогда
	
		УстановитьМинимальныйСрокДействияПаролейПользователей(
			Настройки.МинимальныйСрокДействияПароля * СекундВДне);
	КонецЕсли;
	
	Если ПолучитьОграничениеПовторенияПаролейПользователейСредиПоследних()
	  <> Настройки.ЗапретитьПовторениеПароляСредиПоследних Тогда
	
		УстановитьОграничениеПовторенияПаролейПользователейСредиПоследних(
			Настройки.ЗапретитьПовторениеПароляСредиПоследних);
	КонецЕсли;
	
	ПредупреждатьОбОкончанииСрокаДействияПароля = ?(РазделениеВключено,
		0, Настройки.ПредупреждатьОбОкончанииСрокаДействияПароля);
	
	Если ПолучитьСрокПредупрежденияОбИстеченииСрокаДействияПаролейПользователей()
	  <> ПредупреждатьОбОкончанииСрокаДействияПароля * СекундВДне Тогда
	
		УстановитьСрокПредупрежденияОбИстеченииСрокаДействияПаролейПользователей(
			ПредупреждатьОбОкончанииСрокаДействияПароля * СекундВДне);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Настройки - см. Пользователи.НовоеОписаниеНастроекВхода
//
Процедура ЗаполнитьНастройкиИзПолитикиПаролейВнешнихПользователей(Настройки)
	
	ПолитикаПаролей = ПолитикиПаролейПользователей.НайтиПоИмени(
		ИмяПолитикиПаролейВнешнихПользователей());
		
	Если ПолитикаПаролей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СекундВДне = 24*60*60;
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Настройки.ПарольДолженОтвечатьТребованиямСложности =
		ПолитикаПаролей.ПроверкаСложностиПаролей;
	
	Настройки.МинимальнаяДлинаПароля =
		ПолитикаПаролей.МинимальнаяДлинаПаролей;
	
	Если ДоступныНастройки8_3_26() Тогда
		Настройки.ПарольДолженОтсутствоватьВСпискеЗапрещенных
			= ПолитикаПаролей.ПроверкаРаскрытияПаролей;
			
		Настройки.ДействиеПриВходеЕслиТребованиеНеВыполнено =
			ТекущееДействиеПриВходеЕслиТребованиеНеВыполнено(ПолитикаПаролей);
	КонецЕсли;
	
	Если Не РазделениеВключено Тогда
		Настройки.МаксимальныйСрокДействияПароля =
			Окр(ПолитикаПаролей.МаксимальныйСрокДействияПаролей / СекундВДне);
	КонецЕсли;
	
	Настройки.МинимальныйСрокДействияПароля =
		Окр(ПолитикаПаролей.МинимальныйСрокДействияПаролей / СекундВДне);
	
	Настройки.ЗапретитьПовторениеПароляСредиПоследних =
		ПолитикаПаролей.ОграничениеПовторенияПаролейСредиПоследних;
	
	Если Не РазделениеВключено Тогда
		Настройки.ПредупреждатьОбОкончанииСрокаДействияПароля =
			Окр(ПолитикаПаролей.СрокПредупрежденияОбИстеченииСрокаДействияПаролей / СекундВДне);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Настройки - см. Пользователи.НовоеОписаниеНастроекВхода
//
Процедура ОбновитьПолитикуПаролейВнешнихПользователей(Настройки) Экспорт
	
	ИмяПолитики = ИмяПолитикиПаролейВнешнихПользователей();
	
	ПолитикаПаролей = ПолитикиПаролейПользователей.НайтиПоИмени(ИмяПолитики);
	Если Настройки = Неопределено Тогда
		Если ПолитикаПаролей <> Неопределено Тогда
			ПолитикаПаролей.Удалить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Записать = Ложь;
	Если ПолитикаПаролей = Неопределено Тогда
		ПолитикаПаролей = ПолитикиПаролейПользователей.СоздатьПолитику();
		ПолитикаПаролей.Имя = ИмяПолитики;
		Записать = Истина;
	КонецЕсли;
	
	СекундВДне = 24*60*60;
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ОбновитьСвойствоПолитики(ПолитикаПаролей.ПроверкаСложностиПаролей,
		Настройки.ПарольДолженОтвечатьТребованиямСложности, Записать);
	
	ОбновитьСвойствоПолитики(ПолитикаПаролей.МинимальнаяДлинаПаролей,
		Настройки.МинимальнаяДлинаПароля, Записать);
	
	Если ДоступныНастройки8_3_26() Тогда
		ОбновитьСвойствоПолитики(ПолитикаПаролей.ПроверкаРаскрытияПаролей,
			Настройки.ПарольДолженОтсутствоватьВСпискеЗапрещенных, Записать);
	
		НовоеДействие = ЗначениеДействияПриВходеЕслиТребованиеНеВыполнено(
			Настройки.ДействиеПриВходеЕслиТребованиеНеВыполнено);
		
		ОбновитьСвойствоПолитики(ПолитикаПаролей.ДействиеПриНесоответствииПаролейТребованиямПриАутентификации,
			НовоеДействие, Записать);
	КонецЕсли;
	
	ОбновитьСвойствоПолитики(ПолитикаПаролей.МаксимальныйСрокДействияПаролей,
		?(РазделениеВключено, 0, Настройки.МаксимальныйСрокДействияПароля * СекундВДне), Записать);
	
	ОбновитьСвойствоПолитики(ПолитикаПаролей.МинимальныйСрокДействияПаролей,
		Настройки.МинимальныйСрокДействияПароля * СекундВДне, Записать);
	
	ОбновитьСвойствоПолитики(ПолитикаПаролей.ОграничениеПовторенияПаролейСредиПоследних,
		Настройки.ЗапретитьПовторениеПароляСредиПоследних, Записать);
	
	ОбновитьСвойствоПолитики(ПолитикаПаролей.СрокПредупрежденияОбИстеченииСрокаДействияПаролей,
		?(РазделениеВключено, 0, Настройки.ПредупреждатьОбОкончанииСрокаДействияПароля * СекундВДне), Записать);
	
	Если Записать Тогда
		ПолитикаПаролей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСвойствоПолитики(ЗначениеПолитики, ЗначениеНастройки, Записать)
	
	Если ЗначениеПолитики = ЗначениеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПолитики = ЗначениеНастройки;
	Записать = Истина;
	
КонецПроцедуры

// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы
//  ЭтоВнешнийПользователь - Булево
//
Процедура УстановитьПолитикуПаролей(ПользовательИБ, ЭтоВнешнийПользователь) Экспорт
	
	ИмяПолитикиПаролей = ИмяПолитикиПаролей(ЭтоВнешнийПользователь);
	Если ПользовательИБ.ИмяПолитикиПаролей <> ИмяПолитикиПаролей Тогда
		ПользовательИБ.ИмяПолитикиПаролей = ИмяПолитикиПаролей;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЭтоВнешнийПользователь - Булево
//
Функция ИмяПолитикиПаролей(ЭтоВнешнийПользователь) Экспорт
	
	Если ЭтоВнешнийПользователь Тогда
		Возврат ИмяПолитикиПаролейВнешнихПользователей();
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИмяПолитикиПаролейВнешнихПользователей()
	
	Возврат "ExternalUsers";
	
КонецФункции

Функция ТекущееСохранениеПароляПриВходе(НастройкиСохранения)
	
	Если Не НастройкиСохранения.РазрешитьСохранение Тогда
		Возврат "";
	КонецЕсли;
	
	Если НастройкиСохранения.СохранятьПоУмолчанию Тогда
		Возврат "РазрешеноИВключено";
	КонецЕсли;
	
	Возврат "РазрешеноИОтключено";
	
КонецФункции

Функция ТекущееДействиеПриВходеЕслиТребованиеНеВыполнено(ПолитикаПаролей = Неопределено)
	
	// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	ТекущееДействие = ?(ПолитикаПаролей = Неопределено,
		Вычислить("ПолучитьДействиеПриНесоответствииПаролейПользователейТребованиямПриАутентификации()"),
		ПолитикаПаролей.ДействиеПриНесоответствииПаролейТребованиямПриАутентификации);
	
	Если ТекущееДействие = Вычислить("ДействиеПриНесоответствииПароляТребованиямПриАутентификации.ПотребоватьСменуПароля") Тогда
		Возврат "ПотребоватьСменуПароля";
		
	ИначеЕсли ТекущееДействие = Вычислить("ДействиеПриНесоответствииПароляТребованиямПриАутентификации.ПредложитьСменуПароля") Тогда
		Возврат "ПредложитьСменуПароля";
		
	КонецЕсли;
	// АПК:488-вкл
	
	Возврат "";
	
КонецФункции

Функция ЗначениеДействияПриВходеЕслиТребованиеНеВыполнено(ИмяДействия)
	
	// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
	Если ИмяДействия = "ПотребоватьСменуПароля" Тогда
		Возврат Вычислить("ДействиеПриНесоответствииПароляТребованиямПриАутентификации.ПотребоватьСменуПароля");
		
	ИначеЕсли ИмяДействия = "ПредложитьСменуПароля" Тогда
		Возврат Вычислить("ДействиеПриНесоответствииПароляТребованиямПриАутентификации.ПредложитьСменуПароля");
	КонецЕсли;
	
	Возврат Вычислить("ДействиеПриНесоответствииПароляТребованиямПриАутентификации.Нет");
	// АПК:488-вкл
	
КонецФункции

// У всех пользователей ИБ устанавливает реквизит ПоказыватьВСпискеВыбора.
// Параметры:
//  Показывать - Булево
//
Процедура УстановитьРеквизитПоказыватьВСпискеВыбораУВсехПользователейИБ(Показывать) Экспорт
	
	Скрытые = Новый Соответствие;
	
	Если Показывать Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
			ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
		|	И (Пользователи.Служебный
		|			ИЛИ Пользователи.Недействителен)";
		Выборка = Запрос.Выполнить().Выбрать();
		Скрытые.Вставить(Выборка.ИдентификаторПользователяИБ, Истина);
	КонецЕсли;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		Если Не Показывать
		 Или Скрытые.Получить(ПользовательИБ.УникальныйИдентификатор) <> Неопределено Тогда
			ПоказыватьВСпискеВыбора = Ложь;
		Иначе
			ПоказыватьВСпискеВыбора = ПользовательИБ.АутентификацияСтандартная;
		КонецЕсли;
		Если ПользовательИБ.ПоказыватьВСпискеВыбора <> ПоказыватьВСпискеВыбора Тогда
			ПользовательИБ.ПоказыватьВСпискеВыбора = ПоказыватьВСпискеВыбора;
			ПользовательИБ.Записать();
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.СведенияОПользователях.ОбновитьДанныеРегистра();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с паролем.

// Создает новый пароль, соответствующий заданным правилам проверки сложности.
// Для облегчения запоминания, пароль формируется из слогов (согласная-гласная).
//
// Параметры:
//  ПараметрыПароля - Структура - возвращается функций ПараметрыПароля.
//  ГСЧ             - ГенераторСлучайныхЧисел - если уже используется.
//                  - Неопределено - создать новый.
//
// Возвращаемое значение:
//  Строка - новый пароль.
//
Функция СоздатьПароль(ПараметрыПароля, ГСЧ = Неопределено) Экспорт
	
	НовыйПароль = "";
	
	СогласныеСтрочные               = ПараметрыПароля.СогласныеБуквыСтрочные;
	СогласныеЗаглавные              = ПараметрыПароля.СогласныеБуквыЗаглавные;
	КоличествоСогласныхСтрочных     = СтрДлина(СогласныеСтрочные);
	КоличествоСогласныхЗаглавных    = СтрДлина(СогласныеЗаглавные);
	ИспользоватьСогласные           = (КоличествоСогласныхСтрочных > 0)
	                                  ИЛИ (КоличествоСогласныхЗаглавных > 0);
	
	ГласныеСтрочные                 = ПараметрыПароля.ГласныеБуквыСтрочные;
	ГласныеЗаглавные                = ПараметрыПароля.ГласныеБуквыЗаглавные;
	КоличествоГласныхСтрочных       = СтрДлина(ГласныеСтрочные);
	КоличествоГласныхЗаглавных      = СтрДлина(ГласныеЗаглавные);
	ИспользоватьГласные             = (КоличествоГласныхСтрочных > 0) 
	                                  ИЛИ (КоличествоГласныхЗаглавных > 0);
	
	Цифры                   = ПараметрыПароля.Цифры;
	КоличествоЦифр          = СтрДлина(Цифры);
	ИспользоватьЦифры       = (КоличествоЦифр > 0);
	
	СпецСимволы             = ПараметрыПароля.СпецСимволы;
	КоличествоСпецСимволов  = СтрДлина(СпецСимволы);
	ИспользоватьСпецСимволы = (КоличествоСпецСимволов > 0);
	
	// Создание генератора случайных чисел.
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Пользователи.СвойстваПароля().ГСЧ;
	КонецЕсли;
	
	Счетчик = 0;
	
	МаксимальнаяДлина           = ПараметрыПароля.МаксимальнаяДлина;
	МинимальнаяДлина            = ПараметрыПароля.МинимальнаяДлина;
	
	// Определение позиции спец. символов и цифр.
	Если ПараметрыПароля.ПроверятьУсловияСложности Тогда
		УстановитьСтрочную      = ПараметрыПароля.СтрочныеБуквыПроверятьНаличие;
		УстановитьЗаглавную     = ПараметрыПароля.ЗаглавныеБуквыПроверятьНаличие;
		УстановитьЦифру         = ПараметрыПароля.ЦифрыПроверятьНаличие;
		УстановитьСпецСимвол    = ПараметрыПароля.СпецСимволыПроверятьНаличие;
	Иначе
		УстановитьСтрочную      = (КоличествоГласныхСтрочных > 0) 
		                          ИЛИ (КоличествоСогласныхСтрочных > 0);
		УстановитьЗаглавную     = (КоличествоГласныхЗаглавных > 0) 
		                          ИЛИ (КоличествоСогласныхЗаглавных > 0);
		УстановитьЦифру         = ИспользоватьЦифры;
		УстановитьСпецСимвол    = ИспользоватьСпецСимволы;
	КонецЕсли;
	
	Пока Счетчик < МаксимальнаяДлина Цикл
		
		// Начало с согласной буквы.
		Если ИспользоватьСогласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска = СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска = СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхЗаглавных;
			Иначе
				СтрокаПоиска = СогласныеСтрочные;
				ВерхняяГраница = КоличествоСогласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = СогласныеСтрочные + СогласныеЗаглавные;
				ВерхняяГраница = КоличествоСогласныхСтрочных + КоличествоСогласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				Если УстановитьЗаглавную Тогда
					УстановитьЗаглавную = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
				КонецЕсли;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление гласных.
		Если ИспользоватьГласные Тогда
			Если УстановитьЗаглавную И УстановитьСтрочную Тогда
				СтрокаПоиска = ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			ИначеЕсли УстановитьЗаглавную Тогда
				СтрокаПоиска = ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхЗаглавных;
			Иначе
				СтрокаПоиска = ГласныеСтрочные;
				ВерхняяГраница = КоличествоГласныхСтрочных;
			КонецЕсли;
			Если ПустаяСтрока(СтрокаПоиска) Тогда
				СтрокаПоиска = ГласныеСтрочные + ГласныеЗаглавные;
				ВерхняяГраница = КоличествоГласныхСтрочных + КоличествоГласныхЗаглавных;
			КонецЕсли;
			Символ = Сред(СтрокаПоиска, ГСЧ.СлучайноеЧисло(1, ВерхняяГраница), 1);
			Если Символ = ВРЕГ(Символ) Тогда
				УстановитьЗаглавную = Ложь;
			Иначе
				УстановитьСтрочную = Ложь;
			КонецЕсли;
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
		// Добавление цифр.
		Если ИспользоватьЦифры И УстановитьЦифру Тогда
			УстановитьЦифру = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ          = Сред(Цифры, ГСЧ.СлучайноеЧисло(1, КоличествоЦифр), 1);
			НовыйПароль     = НовыйПароль + Символ;
			Счетчик         = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление спец. символов.
		Если ИспользоватьСпецСимволы И УстановитьСпецСимвол Тогда
			УстановитьСпецСимвол = (ГСЧ.СлучайноеЧисло(0, 1) = 1);
			Символ      = Сред(СпецСимволы, ГСЧ.СлучайноеЧисло(1, КоличествоСпецСимволов), 1);
			НовыйПароль = НовыйПароль + Символ;
			Счетчик     = Счетчик + 1;
			Если Счетчик >= МинимальнаяДлина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйПароль;
	
КонецФункции

// Возвращает стандартные параметры с учетом длины и сложности.
//
// Параметры:
//  НаименьшаяДлина - Число - наименьшая длина пароля (по умолчанию - 7).
//  Сложный         - Булево - учитывать требования проверки сложности пароля.
//
// Возвращаемое значение:
//  Структура - параметры создания пароля.
//
Функция ПараметрыПароля(НаименьшаяДлина = 7, Сложный = Ложь) Экспорт
	
	ПараметрыПароля = Новый Структура();
	ПараметрыПароля.Вставить("МинимальнаяДлина",                НаименьшаяДлина);
	ПараметрыПароля.Вставить("МаксимальнаяДлина",               99);
	ПараметрыПароля.Вставить("ГласныеБуквыСтрочные",            "aeiouy"); 
	ПараметрыПароля.Вставить("ГласныеБуквыЗаглавные",           "AEIOUY");
	ПараметрыПароля.Вставить("СогласныеБуквыСтрочные",          "bcdfghjklmnpqrstvwxz");
	ПараметрыПароля.Вставить("СогласныеБуквыЗаглавные",         "BCDFGHJKLMNPQRSTVWXZ");
	ПараметрыПароля.Вставить("Цифры",                           "0123456789");
	ПараметрыПароля.Вставить("СпецСимволы",                     " _.,!?");
	ПараметрыПароля.Вставить("ПроверятьУсловияСложности",       Сложный);
	ПараметрыПароля.Вставить("ЗаглавныеБуквыПроверятьНаличие",  Истина);
	ПараметрыПароля.Вставить("СтрочныеБуквыПроверятьНаличие",   Истина);
	ПараметрыПароля.Вставить("ЦифрыПроверятьНаличие",           Истина);
	ПараметрыПароля.Вставить("СпецСимволыПроверятьНаличие",     Ложь);
	
	Возврат ПараметрыПароля;
	
КонецФункции

// Проверяет наличие учетной записи и прав, необходимых для изменения пароля.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//               - СправочникСсылка.ВнешниеПользователи - пользователь для смены пароля.
//
//  ДополнительныеПараметры - Структура - возвращаемое значение со свойствами:
//   * ТекстОшибки                 - Строка - описание ошибки, если нет возможности изменить пароль.
//   * ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор пользователя ИБ.
//   * ЭтоТекущийПользовательИБ    - Булево - Истина, если пользователь является текущим.
//
// Возвращаемое значение:
//  Булево - Ложь, если нет возможности изменить пароль.
//
Функция ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ЭтоСлужебныйПользователь")
	   И ОбщегоНазначения.РазделениеВключено()
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса")
	   И Пользователь <> Пользователи.АвторизованныйПользователь() Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса(
			Пользователь);
		
		Если Не ДействияСПользователемСервиса.ИзменениеПароля Тогда
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис: Недостаточно прав для изменения пароля пользователя ""%1"".'"), Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Пользователь, "Ссылка, Недействителен, ИдентификаторПользователяИБ, Подготовлен");
	
	Если РеквизитыПользователя.Ссылка <> Пользователь Тогда
		РеквизитыПользователя.Ссылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Пользователь).ПустаяСсылка();
		РеквизитыПользователя.Недействителен = Ложь;
		РеквизитыПользователя.Подготовлен = Ложь;
		РеквизитыПользователя.ИдентификаторПользователяИБ = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПроверятьДействительностьПользователя")
	   И РеквизитыПользователя.Недействителен <> Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователь ""%1"" недействителен.'"), Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторПользователяИБ = РеквизитыПользователя.ИдентификаторПользователяИБ;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДополнительныеПараметры.Свойство("ПроверятьНаличиеПользователяИБ")
	   И ПользовательИБ = Неопределено Тогда
		
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не существует учетная запись пользователя ""%1"".'"), Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	ДополнительныеПараметры.Вставить("ИмяДляВхода", ?(ПользовательИБ = Неопределено, "", ПользовательИБ.Имя));
	
	ИдентификаторТекущегоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ДополнительныеПараметры.Вставить("ЭтоТекущийПользовательИБ", ИдентификаторПользователяИБ = ИдентификаторТекущегоПользователяИБ);
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователя(РеквизитыПользователя);
	
	Если Не ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И Не УровеньДоступа.НастройкиДляВхода Тогда
		
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав для изменения пароля пользователя ""%1"".'"), Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПарольУстановлен",
		ПользовательИБ <> Неопределено И ПользовательИБ.ПарольУстановлен);
	
	Если ПользовательИБ <> Неопределено И ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоЗапрещеноИзменятьПароль") Тогда
				ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен запрет изменения пароля пользователя ""%1"".'"), Пользователь));
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установлен запрет изменения пароля пользователя ""%1"".
				           |Обратитесь к администратору.'"), Пользователь));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("УчитыватьСвойствоАутентификацияСтандартная")
	   И ПользовательИБ <> Неопределено
	   И Не ПользовательИБ.АутентификацияСтандартная Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка минимального срока действия пароля.
	Если ПользовательИБ = Неопределено
	 Или Не ОбщегоНазначения.РазделениеВключено()
	   И УровеньДоступа.НастройкиДляВхода Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	ИмяПолитикиПаролей = ИмяПолитикиПаролей(
		ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
	
	УстановитьПривилегированныйРежим(Истина);
	ПолитикаПаролей = ПолитикиПаролейПользователей.НайтиПоИмени(ИмяПолитикиПаролей);
	Если ПолитикаПаролей = Неопределено Тогда
		МинимальныйСрокДействияПаролей = ПолучитьМинимальныйСрокДействияПаролейПользователей();
	Иначе
		МинимальныйСрокДействияПаролей = ПолитикаПаролей.МинимальныйСрокДействияПаролей;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(МинимальныйСрокДействияПаролей) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОстатокМинимальногоСрокаДействияПароля = МинимальныйСрокДействияПаролей
		- (ТекущаяУниверсальнаяДата() - ПользовательИБ.ДатаУстановкиПароля);
	
	Если ОстатокМинимальногоСрокаДействияПароля <= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	КоличествоДней = Окр(ОстатокМинимальногоСрокаДействияПароля / (24*60*60));
	Если КоличествоДней = 0 Тогда
		КоличествоДней = 1;
	КонецЕсли;
	
	ЧислоИПредмет = Формат(КоличествоДней, "ЧГ=") + " "
		+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоДней,
			"", НСтр("ru = 'день,дня,дней,,,,,,0'"));
	
	ДополнительныеПараметры.Вставить("ТекстОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пароль можно будет сменить только через %1.'"), ЧислоИПредмет));
	
	Возврат Ложь;
	
КонецФункции

// Для формы СменаПароля и перед записью пользователя ИБ.
// Выполняет проверку нового пароля, старого пароля и в случае успеха
// устанавливает его, если вызов выполнен из формы СменаПароля.
// 
// Параметры:
//  Параметры - Структура:
//   * Пользователь - СправочникСсылка.Пользователи
//                  - СправочникСсылка.ВнешниеПользователи - при вызове из формы СменаПароля.
//                  - СправочникОбъект.Пользователи
//                  - СправочникОбъект.ВнешниеПользователи - при записи объекта.
//
//   * НовыйПароль  - Строка - пароль, который планируется установить пользователю ИБ.
//   * СтарыйПароль - Строка - пароль, который установлен пользователю ИБ (для проверки).
//
//   * ПриВходеВПрограмму    - Булево - может быть Истина при вызове из формы СменаПароля.
//   * ТолькоПроверить       - Булево - может быть Истина при вызове из формы СменаПароля.
//   * СтарыйПарольСовпадает - Булево - возвращаемое значение. Если Ложь, значит не совпадает.
//
//   * ПарольПользователяСервиса - Строка - пароль текущего пользователя при вызове
//                                          из формы СменаПароля, сбрасывается при ошибке.
//
// Возвращаемое значение:
//  Строка - текст ошибки, если не пустая строка.
//
Функция ОбработатьНовыйПароль(Параметры) Экспорт
	
	НовыйПароль  = Параметры.НовыйПароль;
	СтарыйПароль = Параметры.СтарыйПароль;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.Пользователи")
	 Или ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		
		СсылкаОбъекта = Параметры.Пользователь.Ссылка;
		Пользователь  = СсылкаОбъекта(Параметры.Пользователь);
		ВызовИзФормыСменаПароля = Ложь;
		
		Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникОбъект.Пользователи")
		   И Параметры.Пользователь.Служебный Тогда
			
			ДополнительныеПараметры.Вставить("ЭтоСлужебныйПользователь");
		КонецЕсли;
	Иначе
		СсылкаОбъекта = Параметры.Пользователь;
		Пользователь  = Параметры.Пользователь;
		ВызовИзФормыСменаПароля = Истина;
	КонецЕсли;
	
	Параметры.Вставить("СтарыйПарольСовпадает", Ложь);
	
	Если Не ВозможноИзменитьПароль(СсылкаОбъекта, ДополнительныеПараметры) Тогда
		Возврат ДополнительныеПараметры.ТекстОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ
	   И ДополнительныеПараметры.ПарольУстановлен
	   И (СтарыйПароль <> Неопределено) Тогда
		
		Параметры.СтарыйПарольСовпадает = СтарыйПарольСовпадаетССохраненным(
			СтарыйПароль, ДополнительныеПараметры.ИдентификаторПользователяИБ);
		
		Если Не Параметры.СтарыйПарольСовпадает Тогда
			Возврат НСтр("ru = 'Старый пароль указан неверно.'");
		КонецЕсли;
	КонецЕсли;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ДополнительныеПараметры.ИдентификаторПользователяИБ);
	Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	УстановитьПолитикуПаролей(ПользовательИБ,
		ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
	ТекстОшибкиПароля = ОшибкаСоответствияПароляТребованиям(НовыйПароль, ПользовательИБ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ТекстОшибкиПароля) Тогда
		Возврат ТекстОшибкиПароля;
	КонецЕсли;
	
	Если ВызовИзФормыСменаПароля И Параметры.ТолькоПроверить Тогда
		Возврат "";
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)).ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Если ВызовИзФормыСменаПароля Тогда
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("Пароль", НовыйПароль);
			
			ТекущийОбъект = Пользователь.ПолучитьОбъект();
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ",
				ОписаниеПользователяИБ);
			
			Если Параметры.ПриВходеВПрограмму Тогда
				ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаПароляПриВходеВПрограмму");
			КонецЕсли;
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				Если ДополнительныеПараметры.ЭтоТекущийПользовательИБ Тогда
					ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса",
						СтарыйПароль);
				Иначе
					ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса",
						Параметры.ПарольПользователяСервиса);
				КонецЕсли;
				ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьССервисом", Истина);
			КонецЕсли;
			Попытка
				ТекущийОбъект.Записать();
			Исключение
				Параметры.ПарольПользователяСервиса = Неопределено;
				ВызватьИсключение;
			КонецПопытки;
		Иначе
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Записать = Ложь;
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе = НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь = Пользователь;
				Записать = Истина;
			Иначе
				СведенияОПользователе = НаборЗаписей[0];
			КонецЕсли;
			Если Параметры.Пользователь.ДополнительныеСвойства.Свойство("СменаПароляПриВходеВПрограмму") Тогда
				СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Ложь;
				Записать = Истина;
			КонецЕсли;
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				НоваяДатаНачала = НачалоДня(ТекущаяДатаСеанса());
				Если СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля <> НоваяДатаНачала Тогда
					СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля = НоваяДатаНачала;
					Записать = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Записать Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ВызовИзФормыСменаПароля Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Ошибка смены пароля'",
				     ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
				Пользователь,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сменить пароль пользователя ""%1"" по причине:
					           |%2'"),
					Пользователь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			Параметры.Вставить("ОшибкаЗаписанаВЖурналРегистрации");
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Для формы СменаПароля и функции НовыйПарольМожноУстановить.
//
// Возвращаемое значение:
//  Строка
//
Функция ПодсказкаДляНовогоПароля() Экспорт
	
	Возврат
		НСтр("ru = 'Надежный пароль:
		           |- имеет не менее 7 символов;
		           |- содержит любые 3 из 4-х типов символов: заглавные
		           |  буквы, строчные буквы, цифры, специальные символы;
		           |- не совпадает с именем (для входа).'");
	
КонецФункции

// Для форм элементов справочников Пользователи и ВнешниеПользователи.

// Возвращает подсказку при смене пароля для полноправного и обычного пользователей.
//
// Параметры:
//  ДляВнешнихПользователей - Булево
//
// Возвращаемое значение:
//  ФорматированнаяСтрока
//
Функция ПодсказкаПотребоватьСменуПароляПриВходе(ДляВнешнихПользователей) Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(, Ложь);
	
	Если Не ЭтоПолноправныйПользователь Тогда
		Подсказка =
			НСтр("ru = 'Требования к длине и сложности пароля задаются отдельно.
			           |За подробностями обратитесь к администратору.'");
		Возврат Новый ФорматированнаяСтрока(Подсказка);
	КонецЕсли;
	
	Если Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		Подсказка =
			НСтр("ru = 'Требования к длине и сложности пароля задаются отдельно.
			           |См. Параметры информационной базы в конфигураторе в меню Администрирование.'");
		Возврат Новый ФорматированнаяСтрока(Подсказка);
	КонецЕсли;
	
	ЕстьРазделАдминистрирование = Метаданные.Подсистемы.Найти("Администрирование") <> Неопределено;
	
	Если ДляВнешнихПользователей Тогда
		Если ЕстьРазделАдминистрирование Тогда
			Подсказка =
				НСтр("ru = 'Требования к длине и сложности пароля задаются отдельно.
				           |См. <a href = ""%1"">Настройки входа</a> на вкладке <b>Для внешних пользователей</b>
				           |в разделе <b>Администрирование</b>, пункт <b>Настройки пользователей и прав</b>.'");
		Иначе
			Подсказка =
				НСтр("ru = 'Требования к длине и сложности пароля задаются отдельно.
				           |См. <a href = ""%1"">Настройки входа</a> на вкладке <b>Для внешних пользователей</b>.'");
		КонецЕсли;
	Иначе
		Если ЕстьРазделАдминистрирование Тогда
			Подсказка =
				НСтр("ru = 'Требования к длине и сложности пароля задаются отдельно.
				           |См. <a href = ""%1"">Настройки входа</a> на вкладке <b>Для пользователей</b>
				           |в разделе <b>Администрирование</b>, пункт <b>Настройки пользователей и прав</b>.'");
		Иначе
			Подсказка =
				НСтр("ru = 'Требования к длине и сложности пароля задаются отдельно.
				           |См. <a href = ""%1"">Настройки входа</a> на вкладке <b>Для пользователей</b>.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(Подсказка,
		"НастройкиВходаПользователей");
	
КонецФункции

// Возвращает соответствие имен свойств пользователя ИБ
// полным именам свойств пользователя ИБ в форме с префиксом.
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - имя свойства без префикса
//   * Значение - полное имя свойства с префиксом
//
Функция ИменаСвойствПользователяИБСПрефиксом() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("АдресЭлектроннойПочты",          "ПользовательИБАдресЭлектроннойПочты");
	Результат.Вставить("АутентификацияOpenID",           "ПользовательИБАутентификацияOpenID");
	Результат.Вставить("АутентификацияOpenIDConnect",    "ПользовательИБАутентификацияOpenIDConnect");
	Результат.Вставить("АутентификацияОС",               "ПользовательИБАутентификацияОС");
	Результат.Вставить("АутентификацияСтандартная",      "ПользовательИБАутентификацияСтандартная");
	Результат.Вставить("АутентификацияТокеномДоступа",   "ПользовательИБАутентификацияТокеномДоступа");
	Результат.Вставить("ЗапрещеноВосстанавливатьПароль", "ПользовательИБЗапрещеноВосстанавливатьПароль");
	Результат.Вставить("ЗапрещеноИзменятьПароль",        "ПользовательИБЗапрещеноИзменятьПароль");
	Результат.Вставить("ЗащитаОтОпасныхДействий",        "ПользовательИБЗащитаОтОпасныхДействий");
	Результат.Вставить("Имя",                            "ПользовательИБИмя");
	Результат.Вставить("ОсновнойИнтерфейс",              "ПользовательИБОсновнойИнтерфейс");
	Результат.Вставить("Пароль",                         "ПользовательИБПароль");
	Результат.Вставить("ПоказыватьВСпискеВыбора",        "ПользовательИБПоказыватьВСпискеВыбора");
	Результат.Вставить("ПолноеИмя",                      "ПользовательИБПолноеИмя");
	Результат.Вставить("ПользовательОС",                 "ПользовательИБПользовательОС");
	Результат.Вставить("РежимЗапуска",                   "ПользовательИБРежимЗапуска");
	Результат.Вставить("Роли",                           "ПользовательИБРоли");
	Результат.Вставить("СтарыйПароль",                   "ПользовательИБСтарыйПароль");
	Результат.Вставить("Язык",                           "ПользовательИБЯзык");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с пользователями.

// Только для внутреннего использования.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
//  СправочникСсылка.ВнешниеПользователи
//
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстОшибки = ТекстСообщенияТекущийПользовательНедоступенВСеансеБезРазделителей();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь),
		ПараметрыСеанса.ТекущийПользователь,
		ПараметрыСеанса.ТекущийВнешнийПользователь);
	
КонецФункции

// Возвращает сохраняемое значение пароля для указанного пароля по алгоритму SHA-1.
//
// Параметры:
//  Пароль    - Строка - пароль для которого нужно получить сохраняемое значение.
//  ДляЗаписи - Булево - если Истина, тогда для пустого пароля будет непустой результат.
//
// Возвращаемое значение:
//  Строка - сохраняемое значение пароля в формате свойства СохраняемоеЗначениеПароля
//           типа ПользовательИнформационнойБазы.
//
Функция СохраняемоеЗначениеСтрокиПароля(Пароль, ДляЗаписи = Ложь) Экспорт
	
	Если Пароль = "" И Не ДляЗаписи Тогда
		СохраняемоеЗначениеПароля = "";
	Иначе
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(Пароль);
		
		СохраняемоеЗначениеПароля = Base64Строка(ХешированиеДанных.ХешСумма);
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешированиеДанных.Добавить(ВРег(Пароль));
		
		СохраняемоеЗначениеПароля = СохраняемоеЗначениеПароля + ","
			+ Base64Строка(ХешированиеДанных.ХешСумма);
	КонецЕсли;
	
	Возврат СохраняемоеЗначениеПароля;
	
КонецФункции

// Сравнивает старый пароль с ранее сохраненным паролем
// для пользователя ИБ без учета контроля сложности пароля.
//
// Параметры:
//  Пароль                      - Строка - старый пароль, который нужно сравнить.
//
//  ИдентификаторПользователяИБ - УникальныйИдентификатор - пользователь ИБ для которого
//                                нужно проверить старый пароль.
//
// Возвращаемое значение:
//  Булево - Истина, если пароль совпадает без учета контроля сложности пароля.
//
Функция СтарыйПарольСовпадаетССохраненным(Пароль, ИдентификаторПользователяИБ) Экспорт
	
	Если ТипЗнч(ИдентификаторПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ИдентификаторПользователяИБ);
	
	Если ТипЗнч(ПользовательИБ) <> Тип("ПользовательИнформационнойБазы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДоступныНастройки8_3_26() Тогда
		// АПК:488-выкл Поддержка новых методов платформы (исполняемый код безопасен)
		Результат = Вычислить("ПроверитьСоответствиеПароляПользователяСохраняемомуЗначению(Пароль, ПользовательИБ)");
		// АПК:488-вкл
	Иначе
		Результат = ХешСуммаПароляСовпадает(СохраняемоеЗначениеСтрокиПароля(Пароль),
			ПользовательИБ.СохраняемоеЗначениеПароля);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет что у первого и второго паролей совпадают первые или вторые хеш-суммы.
//
// Параметры:
//  СохраняемоеЗначениеПервогоПароля - Строка - содержит хеш-суммы сохраняемого пароля в формате
//                                       одноименного свойства типа ПользовательИнформационнойБазы.
//
//  СохраняемоеЗначениеВторогоПароля - Строка - то же, что и СохраняемоеЗначениеВторогоПароля.
//
//
Функция ХешСуммаПароляСовпадает(СохраняемоеЗначениеПервогоПароля, СохраняемоеЗначениеВторогоПароля)
	
	Если СохраняемоеЗначениеПервогоПароля = СохраняемоеЗначениеВторогоПароля Тогда
		Возврат Истина;
	КонецЕсли;
	
	ХешСуммыПервогоПароля = СтрРазделить(СохраняемоеЗначениеПервогоПароля, ",", Ложь);
	Если ХешСуммыПервогоПароля.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ХешСуммыВторогоПароля = СтрРазделить(СохраняемоеЗначениеВторогоПароля, ",", Ложь);
	Если ХешСуммыВторогоПароля.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ХешСуммыПервогоПароля[0] = ХешСуммыВторогоПароля[0]
		Или ХешСуммыПервогоПароля[1] = ХешСуммыВторогоПароля[1];
	
КонецФункции

// Возвращает текущий уровень доступа на изменение свойств пользователя ИБ.
// 
// Параметры:
//  ОписаниеОбъекта - СправочникОбъект.Пользователи
//                  - СправочникОбъект.ВнешниеПользователи
//                  - ДанныеФормыСтруктура - созданная из объектов указанных выше.
//
//  ПараметрыОбработки - Неопределено - получить данные из описания объекта,
//                       иначе взять уже готовые данные из параметров обработки.
//
// Возвращаемое значение:
//  Структура:
//   * АдминистраторСистемы       - Булево - любые действия с любым пользователем и его пользователем ИБ.
//   * ПолныеПрава                - Булево - то же, АдминистраторСистемы, исключая администраторов системы.
//   * УправлениеСписком          - Булево - добавление новых пользователей и изменение существующих:
//                                  а) для пользователей, которым еще не разрешался вход в программу (новых),
//                                     можно настроить любые свойства, кроме включения входа в программу,
//                                  б) для пользователей, которым уже разрешался вход в программу,
//                                     можно настроить любые свойства, кроме включения входа в программу
//                                     и настройки аутентификации (см. ниже).
//   * ИзменениеРазрешенияНаВход  - Булево - изменение флажка "Вход в приложение разрешен".
//   * ОтключениеРазрешенияНаВход - Булево - снятие    флажка "Вход в приложение разрешен".
//   * НастройкиДляВхода          - Булево - изменение свойств пользователя ИБ Имя, ПользовательОС и
//                                    свойств элемента справочника АутентификацияСтандартная, АутентификацияOpenID,
//                                    АутентификацияOpenIDConnect, АутентификацияТокеномДоступа,
//                                    АутентификацияОС и Роли (если нет запрета редактирования при внедрении).
//   * ИзменениеТекущего          - Булево - изменение свойств текущего пользователя Пароль и Язык.
//   * НетДоступа                 - Булево - нет ни одного из указанных выше уровней доступа.
//
Функция УровеньДоступаКСвойствамПользователя(ОписаниеОбъекта, ПараметрыОбработки = Неопределено) Экспорт
	
	УровеньДоступа = Новый Структура;
	
	// Администратор системы (системные данные).
	УровеньДоступа.Вставить("АдминистраторСистемы", Пользователи.ЭтоПолноправныйПользователь(, Истина));
	
	// Полноправный пользователь (пользовательские данные).
	УровеньДоступа.Вставить("ПолныеПрава", Пользователи.ЭтоПолноправныйПользователь());
	
	Если ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Ответственный за список пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.Пользователи)
			И (УровеньДоступа.ПолныеПрава
			   Или Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.Пользователи)
			  И ОписаниеОбъекта.Ссылка = Пользователи.АвторизованныйПользователь());
		
	ИначеЕсли ТипЗнч(ОписаниеОбъекта.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		// Ответственный за список внешних пользователей.
		УровеньДоступа.Вставить("УправлениеСписком",
			ПравоДоступа("Добавление", Метаданные.Справочники.ВнешниеПользователи)
			И (УровеньДоступа.ПолныеПрава
			   Или Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка)));
		// Внешний пользователь текущего пользователя ИБ.
		УровеньДоступа.Вставить("ИзменениеТекущего",
			УровеньДоступа.ПолныеПрава
			Или ПравоДоступа("Изменение", Метаданные.Справочники.ВнешниеПользователи)
			  И ОписаниеОбъекта.Ссылка = Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	Если ПараметрыОбработки = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(ОписаниеОбъекта.ИдентификаторПользователяИБ) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОписаниеОбъекта.ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    ПользовательИБ = Неопределено
			Или ОписаниеОбъекта.Подготовлен
			    И Не Пользователи.ВходВПрограммуРазрешен(ПользовательИБ);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ПользовательБезНастроекДляВходаИлиПодготовлен =
			    Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или ПараметрыОбработки.СтарыйПользователь.Подготовлен
			    И Не Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ);
	КонецЕсли;
	
	УровеньДоступа.Вставить("ИзменениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина));
	
	УровеньДоступа.Вставить("ОтключениеРазрешенияНаВход",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком);
	
	УровеньДоступа.Вставить("НастройкиДляВхода",
		    УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава
		  И Не Пользователи.ЭтоПолноправныйПользователь(ОписаниеОбъекта.Ссылка, Истина)
		Или УровеньДоступа.УправлениеСписком
		  И ПользовательБезНастроекДляВходаИлиПодготовлен);
	
	УровеньДоступа.Вставить("НетДоступа",
		  НЕ УровеньДоступа.АдминистраторСистемы
		И НЕ УровеньДоступа.ПолныеПрава
		И НЕ УровеньДоступа.УправлениеСписком
		И НЕ УровеньДоступа.ИзменениеТекущего
		И НЕ УровеньДоступа.НастройкиДляВхода);
	
	Возврат УровеньДоступа;
	
КонецФункции

// Проверяет, что указанный пользователь имеем более высокий уровень доступа, чем текущий пользователь.
// 
// Параметры:
//  ОписаниеПользователя - СправочникСсылка.Пользователи
//                       - СправочникСсылка.ВнешниеПользователи
// 
// ТекущийУровеньДоступа - см. УровеньДоступаКСвойствамПользователя
// 
// Возвращаемое значение:
//  Булево
//
Функция УровеньДоступаПользователяВыше(ОписаниеПользователя, ТекущийУровеньДоступа) Экспорт
	
	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		Возврат Пользователи.ЭтоПолноправныйПользователь(ОписаниеПользователя, Истина, Ложь)
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или Пользователи.ЭтоПолноправныйПользователь(ОписаниеПользователя, Ложь, Ложь)
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	Иначе
		Возврат ОписаниеПользователя.Роли.Найти("АдминистраторСистемы") <> Неопределено
		      И Не ТекущийУровеньДоступа.АдминистраторСистемы
		    Или ОписаниеПользователя.Роли.Найти("ПолныеПрава") <> Неопределено
		      И Не ТекущийУровеньДоступа.ПолныеПрава;
	КонецЕсли;
	
КонецФункции

// Начинает обработку пользователя ИБ если требуется,
// обновляет сведения о пользователе ИБ если требуется.
//
// Параметры:
//  Объект - СправочникОбъект.Пользователи
//         - СправочникОбъект.ВнешниеПользователи
//  ПараметрыОбработки - Структура - возвращаемое значение.
//
Процедура ПользовательОбъектПередЗаписью(Объект, ПараметрыОбработки) Экспорт
	
	ЭтоВнешнийПользователь = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи");
	Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка,
		"ПометкаУдаления, Недействителен, ИдентификаторПользователяИБ"
		+ ?(ЭтоВнешнийПользователь, "", ", Подразделение, ФизическоеЛицо"));
	
	ЗаписатьИзмененияВЖурнал = Свойства.ПометкаУдаления <> Объект.ПометкаУдаления
		Или Свойства.Недействителен <> Объект.Недействителен
		Или Свойства.ИдентификаторПользователяИБ <> Объект.ИдентификаторПользователяИБ
		Или Не ЭтоВнешнийПользователь
		  И (    Свойства.Подразделение <> Объект.Подразделение
		     Или Свойства.ФизическоеЛицо <> Объект.ФизическоеЛицо);
	
	Если Не Объект.ОбменДанными.Загрузка
	 Или Объект.ДополнительныеСвойства.Свойство("ЗаписьПриОбменеДанными")
	 Или Объект.ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		
		НачатьОбработкуПользователяИБ(Объект, ПараметрыОбработки);
	КонецЕсли;
	
	Если Не Объект.ОбменДанными.Загрузка
	 Или Объект.ДополнительныеСвойства.Свойство("ЗаписьПриОбменеДанными")
	 Или Объект.ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	 Или Объект.ДополнительныеСвойства.Свойство("РасширенныеСвойстваПользователяИБ")
	 Или ЗаписатьИзмененияВЖурнал Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.СведенияОПользователях.ОбновитьСведенияОПользователе(
			СсылкаОбъекта(Объект), Объект,, ЗаписатьИзмененияВЖурнал);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пользователя ИБ если требуется,
// удаляет сведения о пользователе ИБ если требуется.
//
// Параметры:
//  Объект - СправочникОбъект.Пользователи
//         - СправочникОбъект.ВнешниеПользователи
//
Процедура ПользовательОбъектПередУдалением(Объект, УдалениеПриОбмене = Ложь) Экспорт
	
	Если Не Объект.ОбменДанными.Загрузка
	 Или УдалениеПриОбмене
	 Или Объект.ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
	
		// Требуется удалить пользователя ИБ, иначе он попадет в список ошибок в форме ПользователиИБ,
		// кроме того, вход под этим пользователем ИБ приведет к ошибке.
		
		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Удалить");
		Объект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		ПараметрыОбработкиПользователяИБ = Неопределено;
		НачатьОбработкуПользователяИБ(Объект, ПараметрыОбработкиПользователяИБ, Истина);
		ЗавершитьОбработкуПользователяИБ(Объект, ПараметрыОбработкиПользователяИБ);
	КонецЕсли;
	
	РегистрыСведений.СведенияОПользователях.УдалитьСведенияОПользователе(Объект.Ссылка);
	
КонецПроцедуры

// Вызывается ПередЗаписью пользователя или внешнего пользователя.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи
//                     - СправочникОбъект.ВнешниеПользователи
//  ПараметрыОбработки - Структура
//  УдалениеПользователяИзСправочника - Булево
//
Процедура НачатьОбработкуПользователяИБ(ПользовательОбъект,
                                        ПараметрыОбработки,
                                        УдалениеПользователяИзСправочника = Ложь) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	
	ПараметрыОбработки.Вставить("УдалениеПользователяИзСправочника", УдалениеПользователяИзСправочника);
	ПараметрыОбработки.Вставить("ТекстСообщенияНедостаточноПрав",
		НСтр("ru = 'Недостаточно прав для изменения пользователя информационной базы.'"));
	
	Если ДополнительныеСвойства.Свойство("ЗначениеКопирования")
	   И ЗначениеЗаполнено(ДополнительныеСвойства.ЗначениеКопирования)
	   И ТипЗнч(ДополнительныеСвойства.ЗначениеКопирования) = ТипЗнч(ПользовательОбъект.Ссылка) Тогда
		
		ПараметрыОбработки.Вставить("ЗначениеКопирования", ДополнительныеСвойства.ЗначениеКопирования);
	КонецЕсли;
	
	// Реквизиты справочника, которые устанавливаются автоматически (проверка неизменности).
	АвтоРеквизиты = Новый Структура;
	АвтоРеквизиты.Вставить("ИдентификаторПользователяИБ");
	АвтоРеквизиты.Вставить("УдалитьСвойстваПользователяИБ");
	ПараметрыОбработки.Вставить("АвтоРеквизиты", АвтоРеквизиты);
	
	// Реквизиты справочника, которые не допускается изменять в подписках на события (проверка начальных значений).
	БлокируемыеРеквизиты = Новый Структура;
	БлокируемыеРеквизиты.Вставить("Служебный", Ложь); // Значение для внешнего пользователя.
	БлокируемыеРеквизиты.Вставить("ПометкаУдаления");
	БлокируемыеРеквизиты.Вставить("Недействителен");
	БлокируемыеРеквизиты.Вставить("Подготовлен");
	ПараметрыОбработки.Вставить("БлокируемыеРеквизиты", БлокируемыеРеквизиты);
	
	ЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки);
	
	УровеньДоступа = УровеньДоступаКСвойствамПользователя(ПользовательОбъект, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("УровеньДоступа", УровеньДоступа);
	
	// ПередНачаломОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПередНачаломОбработкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	Если ПараметрыОбработки.СтарыйПользователь.Подготовлен <> ПользовательОбъект.Подготовлен
	   И Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
		
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;
	
	// Поддержка интерактивной пометки удаления и группового изменения реквизитов ПометкаУдаления, Недействителен.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ)
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И (  ПараметрыОбработки.СтарыйПользователь.ПометкаУдаления = Ложь
	      И ПользовательОбъект.ПометкаУдаления = Истина
	    Или ПараметрыОбработки.СтарыйПользователь.Недействителен = Ложь
	      И ПользовательОбъект.Недействителен  = Истина) Тогда
		
		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Ложь);
	КонецЕсли;
	
	// Поддержка обновления полного имени пользователя ИБ при изменении наименования.
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует
	   И Не ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ")
	   И ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.ПолноеИмя
	     <> ПользовательОбъект.Наименование Тогда
		
		ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", Новый Структура);
		ДополнительныеСвойства.ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("ОписаниеПользователяИБ") Тогда
		Если УровеньДоступа.УправлениеСписком
		   И Не ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
			// Очистка идентификатора пользователя ИБ.
			ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ =
				ПользовательОбъект.ИдентификаторПользователяИБ;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	
	Если НЕ ОписаниеПользователяИБ.Свойство("Действие") Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |В параметре %2 не указано свойство %3.'"),
			ПользовательОбъект.Ссылка, "ОписаниеПользователяИБ", "Действие");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие <> "Записать"
	   И ОписаниеПользователяИБ.Действие <> "Удалить" Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |В параметре %2 указано
			           |неверное значение ""%3"" свойства %4.'"),
			ПользовательОбъект.Ссылка,
			"ОписаниеПользователяИБ",
			ОписаниеПользователяИБ.Действие,
			"Действие");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	ПараметрыОбработки.Вставить("Действие", ОписаниеПользователяИБ.Действие);
	
	ИнтеграцияПодсистемБСП.ПриНачалеОбработкиПользователяИБ(ПараметрыОбработки, ОписаниеПользователяИБ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОписаниеПользователяИБ.Действие = "Записать"
	   И ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор
	     <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда
		
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
		
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с пользователем в справочнике,
				           |с которым уже сопоставлен другой пользователем ИБ.'"),
				ПользовательОбъект.Наименование);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		НайденныйПользователь = Неопределено;
		
		Если ПользовательПоИдентификаторуСуществует(
			ОписаниеПользователяИБ.УникальныйИдентификатор,
			ПользовательОбъект.Ссылка,
			НайденныйПользователь) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи пользователя ""%1"".
				           |Нельзя сопоставить пользователя ИБ с этим пользователем в справочнике,
				           |так как он уже сопоставлен с другим пользователем в справочнике
				           |""%2"".'"),
				НайденныйПользователь,
				ПользовательОбъект.Наименование);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Не УровеньДоступа.ПолныеПрава Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
		
		Если Не ПараметрыОбработки.Свойство("Действие") Тогда
			ПользовательОбъект.ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
			// Обновление значения реквизита контролируемого при записи.
			ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ =
				ПользовательОбъект.ИдентификаторПользователяИБ;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыОбработки.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;
	
	Если УровеньДоступа.НетДоступа Тогда
		ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Удалить" Тогда
		
		Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
		
	ИначеЕсли Не УровеньДоступа.УправлениеСписком Тогда // Действие = "Записать"
		
		Если Не УровеньДоступа.ИзменениеТекущего
		 Или Не ПараметрыОбработки.СтарыйПользовательИБТекущий Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Действие = "Записать" Тогда
		
		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И УровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ, УровеньДоступа) Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
		
		// Проверка попытки изменения недоступных свойств.
		Если Не УровеньДоступа.ПолныеПрава Тогда
			ДопустимыеСвойства = Новый Структура;
			ДопустимыеСвойства.Вставить("УникальныйИдентификатор"); // Проверено выше.
			
			Если УровеньДоступа.ИзменениеТекущего Тогда
				ДопустимыеСвойства.Вставить("АдресЭлектроннойПочты");
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("Язык");
			КонецЕсли;
			
			Если УровеньДоступа.УправлениеСписком Тогда
				ДопустимыеСвойства.Вставить("ПолноеИмя");
				ДопустимыеСвойства.Вставить("АдресЭлектроннойПочты");
				ДопустимыеСвойства.Вставить("ПоказыватьВСпискеВыбора");
				ДопустимыеСвойства.Вставить("ЗапрещеноИзменятьПароль");
				ДопустимыеСвойства.Вставить("ЗапрещеноВосстанавливатьПароль");
				ДопустимыеСвойства.Вставить("Язык");
				ДопустимыеСвойства.Вставить("РежимЗапуска");
			КонецЕсли;
			
			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДопустимыеСвойства.Вставить("Имя");
				ДопустимыеСвойства.Вставить("АутентификацияСтандартная");
				ДопустимыеСвойства.Вставить("Пароль");
				ДопустимыеСвойства.Вставить("АутентификацияOpenID");
				ДопустимыеСвойства.Вставить("АутентификацияOpenIDConnect");
				ДопустимыеСвойства.Вставить("АутентификацияТокеномДоступа");
				ДопустимыеСвойства.Вставить("АутентификацияОС");
				ДопустимыеСвойства.Вставить("ПользовательОС");
				ДопустимыеСвойства.Вставить("Роли");
			КонецЕсли;
			
			ВсеСвойства = Пользователи.НовоеОписаниеПользователяИБ();
			
			Для Каждого КлючИЗначение Из ОписаниеПользователяИБ Цикл
				
				Если ВсеСвойства.Свойство(КлючИЗначение.Ключ)
				   И КлючИЗначение.Значение <> Неопределено
				   И Не ДопустимыеСвойства.Свойство(КлючИЗначение.Ключ) Тогда
					
					ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	Иначе
		УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	// Обновление значения реквизита контролируемого при записи.
	ПараметрыОбработки.АвтоРеквизиты.ИдентификаторПользователяИБ =
		ПользовательОбъект.ИдентификаторПользователяИБ;
	
	ОписаниеНовогоПользователяИБ = Пользователи.СвойстваПользователяИБ(ПользовательОбъект.ИдентификаторПользователяИБ);
	ПараметрыОбработки.Вставить("НовыйПользовательИБСуществует", ОписаниеНовогоПользователяИБ <> Неопределено);
	ПараметрыОбработки.Вставить("НовыйПользовательИБ",
		ПользовательИБПоИдентификатору(ПользовательОбъект.ИдентификаторПользователяИБ));
	
	Если ОписаниеНовогоПользователяИБ <> Неопределено Тогда
		ПараметрыОбработки.Вставить("ОписаниеНовогоПользователяИБ", ОписаниеНовогоПользователяИБ);
		
		// Проверка прав на изменение пользователей с широким доступом.
		Если ПараметрыОбработки.СтарыйПользовательИБСуществует
		   И УровеньДоступаПользователяВыше(ПараметрыОбработки.ОписаниеНовогоПользователяИБ, УровеньДоступа) Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;
	
	// ПослеНачалаОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПослеНачалаОбработкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("СозданиеАдминистратора")
	   И ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияПодсистемБСП.ПриСозданииАдминистратора(СсылкаОбъекта(ПользовательОбъект),
			ПараметрыОбработки.СозданиеАдминистратора);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АдресЭлектроннойПочты")
	   И ОписаниеПользователяИБ.АдресЭлектроннойПочты <> Неопределено
	   И Не ДополнительныеСвойства.Свойство("ПочтаДляВосстановленияПароляУстанавливаетсяВФорме")
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		
		СтарыйАдресЭлектроннойПочты = ?(ПараметрыОбработки.СтарыйПользовательИБСуществует,
			ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.АдресЭлектроннойПочты, Неопределено);
		
		Если ОписаниеПользователяИБ.АдресЭлектроннойПочты <> СтарыйАдресЭлектроннойПочты Тогда
			ИзменитьПочтуДляВосстановленияПароля(ПользовательОбъект,
				ОписаниеПользователяИБ.АдресЭлектроннойПочты, СтарыйАдресЭлектроннойПочты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается ПриЗаписи Пользователя или Внешнего пользователя.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи
//                     - СправочникОбъект.ВнешниеПользователи
//  ПараметрыОбработки - Структура
//
Процедура ЗавершитьОбработкуПользователяИБ(ПользовательОбъект, ПараметрыОбработки) Экспорт
	
	ПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки);
	
	// ПередЗавершениемОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПередЗавершениемОбработкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	КонецЕсли;
	
	Если Не ПараметрыОбработки.Свойство("Действие") Тогда
		ПараметрыОбработки = Неопределено;
		Возврат;
	КонецЕсли;
	
	ОбновлятьРоли = Истина;
	
	// ПриЗавершенииОбработкиПользователяИБ - поддержка модели сервиса.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ПриЗавершенииОбработкиПользователяИБ(
			ПользовательОбъект, ПараметрыОбработки, ОбновлятьРоли);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("УстановкаПользователяИБ") И ОбновлятьРоли Тогда
		ПарольПользователяСервиса = Неопределено;
		Если ПользовательОбъект.ДополнительныеСвойства.Свойство("ПарольПользователяСервиса") Тогда
			ПарольПользователяСервиса = ПользовательОбъект.ДополнительныеСвойства.ПарольПользователяСервиса;
		КонецЕсли;
		
		ИнтеграцияПодсистемБСП.ПослеУстановкиПользователяИБ(ПользовательОбъект.Ссылка,
			ПарольПользователяСервиса);
	КонецЕсли;
	
	Если ПараметрыОбработки.НовыйПользовательИБСуществует
	   И Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеНовогоПользователяИБ) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьСведенияОПользователеСРазрешеннымВходом(ПользовательОбъект.Ссылка,
			Не ПараметрыОбработки.СтарыйПользовательИБСуществует
			Или Не Пользователи.ВходВПрограммуРазрешен(ПараметрыОбработки.ОписаниеСтарогоПользователяИБ));
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки);
	ПараметрыОбработки = Неопределено;
	
КонецПроцедуры

// Вызывается при обработке свойства СвойстваПользователяИБ пользователя в справочнике.
//
// Параметры:
//  ОписаниеПользователя   - СправочникСсылка.Пользователи
//                         - СправочникСсылка.ВнешниеПользователи
//                         - СтрокаТаблицыЗначений
//                         - Структура
//
//  ВходВПрограммуРазрешен - Булево - если указано Ложь, а сохранено Истина, тогда свойства
//                           аутентификации безусловно Ложь, т.к. были сняты в конфигураторе.
//
// Возвращаемое значение:
//  Структура
//
Функция ХранимыеСвойстваПользователяИБ(ОписаниеПользователя, ВходВПрограммуРазрешен = Ложь) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("ВходВПрограммуРазрешен",       Ложь);
	Свойства.Вставить("АутентификацияСтандартная",    Ложь);
	Свойства.Вставить("АутентификацияOpenID",         Ложь);
	Свойства.Вставить("АутентификацияOpenIDConnect",  Ложь);
	Свойства.Вставить("АутентификацияТокеномДоступа", Ложь);
	Свойства.Вставить("АутентификацияОС",             Ложь);
	
	Если ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ОписаниеПользователя) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", ОписаниеПользователя);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОПользователях.ВходВПрограммуРазрешен КАК ВходВПрограммуРазрешен,
		|	СведенияОПользователях.АутентификацияСтандартная КАК АутентификацияСтандартная,
		|	СведенияОПользователях.АутентификацияOpenID КАК АутентификацияOpenID,
		|	СведенияОПользователях.АутентификацияOpenIDConnect КАК АутентификацияOpenIDConnect,
		|	СведенияОПользователях.АутентификацияТокеномДоступа КАК АутентификацияТокеномДоступа,
		|	СведенияОПользователях.АутентификацияОС КАК АутентификацияОС
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Возврат Свойства;
		КонецЕсли;
	Иначе
		Выборка = ОписаниеПользователя;
	КонецЕсли;
	
	СохраненныеСвойства = Новый Структура(Новый ФиксированнаяСтруктура(Свойства));
	ЗаполнитьЗначенияСвойств(СохраненныеСвойства, Выборка);
	
	Для Каждого КлючИЗначение Из Свойства Цикл
		Если ТипЗнч(СохраненныеСвойства[КлючИЗначение.Ключ]) = Тип("Булево") Тогда
			Свойства[КлючИЗначение.Ключ] = СохраненныеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если Свойства.ВходВПрограммуРазрешен И Не ВходВПрограммуРазрешен Тогда
		Свойства.АутентификацияСтандартная    = Ложь;
		Свойства.АутентификацияOpenID         = Ложь;
		Свойства.АутентификацияOpenIDConnect  = Ложь;
		Свойства.АутентификацияТокеномДоступа = Ложь;
		Свойства.АутентификацияОС             = Ложь;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Процедура УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства)
	
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ХранимыеСвойстваПользователяИБ", ХранимыеСвойства);
	
КонецПроцедуры

// Нельзя вызвать из фоновых заданий с пустым пользователем.
//
// Параметры:
//  ОписаниеПользователяИБ - Структура:
//                            * Роли - Массив из Строка
//                         - ПользовательИнформационнойБазы
//  Текст - Строка - возвращаемое значение текста вопроса.
//  
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяСоздатьПервогоАдминистратора(Знач ОписаниеПользователяИБ,
                                              Текст = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ.Имя)
	   И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если ТипЗнч(ОписаниеПользователяИБ) = Тип("Структура") Тогда
			// Проверка перед записью обычного пользователя или пользователя ИБ.
			
			Если ОписаниеПользователяИБ.Свойство("Роли") Тогда
				Роли = ОписаниеПользователяИБ.Роли;
			Иначе
				Роли = Новый Массив;
			КонецЕсли;
			
			Если ЗапретРедактированияРолей()
				ИЛИ Роли.Найти("ПолныеПрава") = Неопределено
				ИЛИ Роли.Найти("АдминистраторСистемы") = Неопределено Тогда
				
				// Подготовка текста вопроса при записи первого администратора.
				Текст =
					НСтр("ru = 'В список пользователей приложения добавляется первый пользователь, поэтому ему
					           |автоматически будут назначены роли ""Администратор системы"" и ""Полные права"".
					           |Продолжить?'");
				
				Если НЕ ЗапретРедактированияРолей() Тогда
					Возврат Истина;
				КонецЕсли;
				
				ИнтеграцияПодсистемБСП.ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(Текст);
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			// Проверка перед записью внешнего пользователя.
			Текст =
				НСтр("ru = 'Первый пользователь информационной базы должен иметь полные права.
				           |Внешний пользователь не может быть полноправным.
				           |Сначала создайте администратора в справочнике Пользователи.'");
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие ролей администратора с учетом модели сервиса.
// 
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - проверить указанного пользователя ИБ.
//                 - Неопределено - проверить текущего пользователя ИБ.
//  
// Возвращаемое значение:
//  Булево
//
Функция РолиАдминистратораДоступны(ПользовательИБ = Неопределено) Экспорт
	
	Если ПользовательИБ = Неопределено
	 Или ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь() Тогда
	
		// АПК:336-выкл Не заменять на РолиДоступны. Это специальная проверка ролей администратора.
		//@skip-check using-isinrole
		Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)
		     //@skip-check using-isinrole
		     И (РольДоступна(Метаданные.Роли.АдминистраторСистемы)
		        Или ОбщегоНазначения.РазделениеВключено() );
		// АПК:336-вкл
	КонецЕсли;
	
	Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
	     И (ПользовательИБ.Роли.Содержит(Метаданные.Роли.АдминистраторСистемы)
	        Или ОбщегоНазначения.РазделениеВключено() );
	
КонецФункции

// Проверяет корректность заполнения структуры описания пользователя ИБ.
// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
// отправляет сообщения об ошибках.
//
// Параметры:
//  ОписаниеПользователяИБ - Структура - описание пользователя ИБ
//                 заполнение которого требуется проверить.
//
//  Отказ        - Булево - флаг отказа от выполнения операции.
//                 Устанавливается в случае ошибки.
//
//  ЭтоВнешнийПользователь - Булево - Истина если проверяется описание
//                 пользователя ИБ для внешнего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если нет ошибок.
//
Функция ПроверитьОписаниеПользователяИБ(Знач ОписаниеПользователяИБ, Отказ, ЭтоВнешнийПользователь) Экспорт
	
	Если ОписаниеПользователяИБ.Свойство("Имя") Тогда
		Имя = ОписаниеПользователяИБ.Имя;
		
		Если ПустаяСтрока(Имя) Тогда
			// Хранилище настроек использует только первые 64 символа имени пользователя ИБ.
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не заполнено Имя (для входа).'"),, "Имя",,Отказ);
			
		ИначеЕсли СтрДлина(Имя) > 64 Тогда
			// Аутентификация через web использует символ ":",
			// как разделитель имени и пароля пользователя.
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Имя (для входа) превышает 64 символа.'"),,"Имя",,Отказ);
			
		ИначеЕсли СтрНайти(Имя, ":") > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Имя (для входа) содержит запрещенный символ "":"".'"),,"Имя",,Отказ);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ПользовательИБ <> Неопределено
			   И ПользовательИБ.УникальныйИдентификатор
			     <> ОписаниеПользователяИБ.ИдентификаторПользователяИБ Тогда
				
				НайденныйПользователь = Неопределено;
				ПользовательПоИдентификаторуСуществует(
					ПользовательИБ.УникальныйИдентификатор, , НайденныйПользователь);
				
				Если НайденныйПользователь = Неопределено
				 ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
					
					ТекстОшибки = НСтр("ru = 'Имя (для входа) уже занято.'");
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Имя (для входа) уже занято для пользователя ""%1"".'"),
						Строка(НайденныйПользователь));
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки, , "Имя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОписаниеПользователяИБ.Свойство("Пароль")
	 Или Не ЗначениеЗаполнено(ОписаниеПользователяИБ.Пароль) Тогда
		
		ИмяПолитикиПаролей = ИмяПолитикиПаролей(ЭтоВнешнийПользователь);
		УстановитьПривилегированныйРежим(Истина);
		ПолитикаПаролей = ПолитикиПаролейПользователей.НайтиПоИмени(ИмяПолитикиПаролей);
		Если ПолитикаПаролей = Неопределено Тогда
			МинимальнаяДлинаПаролей = ПолучитьМинимальнуюДлинуПаролейПользователей();
		Иначе
			МинимальнаяДлинаПаролей = ПолитикаПаролей.МинимальнаяДлинаПаролей;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначениеЗаполнено(МинимальнаяДлинаПаролей) Тогда
			Если ЗначениеЗаполнено(ОписаниеПользователяИБ.ИдентификаторПользователяИБ) Тогда
				УстановитьПривилегированныйРежим(Истина);
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					ОписаниеПользователяИБ.ИдентификаторПользователяИБ);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				ПользовательИБ = Неопределено;
			КонецЕсли;
			
			ПарольЗадан = ОписаниеПользователяИБ.Свойство("Пароль")
				И ОписаниеПользователяИБ.Пароль <> Неопределено;
			
			АутентификацияСтандартнаяСтарая = ПользовательИБ <> Неопределено
				И ПользовательИБ.АутентификацияСтандартная;
			
			Если ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная") Тогда
				АутентификацияСтандартнаяНовая = ОписаниеПользователяИБ.АутентификацияСтандартная;
			Иначе
				АутентификацияСтандартнаяНовая = АутентификацияСтандартнаяСтарая;
			КонецЕсли;
			ПроверитьПустойПароль =
				Не АутентификацияСтандартнаяСтарая
				И АутентификацияСтандартнаяНовая
				И (    ПользовательИБ = Неопределено
				     И Не ПарольЗадан
				   Или ПользовательИБ <> Неопределено
				     И Не ПользовательИБ.ПарольУстановлен);
			
			Если ПарольЗадан Или ПроверитьПустойПароль Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Установите пароль.'"),, "СменитьПароль",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("ПользовательОС") Тогда
		
		Если Не ПустаяСтрока(ОписаниеПользователяИБ.ПользовательОС)
		   И Не СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС = ОписаниеПользователяИБ.ПользовательОС;
			Исключение
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Пользователь ОС должен быть в формате
					           |""\\Имя домена\Имя пользователя"".'"),,"ПользовательОС",,Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АдресЭлектроннойПочты")
		И ОписаниеПользователяИБ.Свойство("ЗапрещеноВосстанавливатьПароль") Тогда
		
		Если Не ОписаниеПользователяИБ.ЗапрещеноВосстанавливатьПароль
		   И ПустаяСтрока(ОписаниеПользователяИБ.АдресЭлектроннойПочты) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнена электронная почта для восстановления пароля.'"),,
					"КонтактнаяИнформация",,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//   УчастникиИзменений - Соответствие из КлючИЗначение:
//                         * Ключ - СправочникСсылка.Пользователи
//                                - СправочникСсылка.ВнешниеПользователи - заполняет соответствие
//                                  пользователями для которых есть изменения.
//                         * Значение - Неопределено
//
//   ИзмененныеГруппы   - Соответствие из КлючИЗначение:
//                         * Ключ - СправочникСсылка.ГруппыПользователей
//                                - СправочникСсылка.ГруппыВнешнихПользователей - заполняет соответствие
//                                  группами пользователей для которых есть изменения.
//                         * Значение - Неопределено
//
//   ДляРегистрации - см. НовоеИзменениеСоставовГруппДляРегистрации
//                  - Неопределено - регистрация не требуется.
//
Функция НовыеИзмененияСоставовГрупп() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УчастникиИзменений", Новый Соответствие);
	Результат.Вставить("ИзмененныеГруппы", Новый Соответствие);
	Результат.Вставить("ДляРегистрации", Неопределено);
	
	Если ПользователиСлужебныйПовтИсп.РегистрироватьИзмененияПравДоступа() Тогда
		Результат.ДляРегистрации = НовоеИзменениеСоставовГруппДляРегистрации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ГруппаПользователей - СправочникСсылка.ГруппыПользователей
//                         - СправочникСсылка.ГруппыВнешнихПользователей
//   * Пользователь        - СправочникСсылка.Пользователи
//                         - СправочникСсылка.ВнешниеПользователи
//   * Используется        - Булево
//   * ВидИзменения        - Строка - одна из строк "Добавлено", "Удалено", "Изменено".
//
Функция НовоеИзменениеСоставовГруппДляРегистрации() Экспорт
	
	Измерения = Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ГруппаПользователей", Измерения.ГруппаПользователей.Тип);
	Результат.Колонки.Добавить("Пользователь",        Измерения.Пользователь.Тип);
	Результат.Колонки.Добавить("Используется",        Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВидИзменения",        Новый ОписаниеТипов("Строка"));
	
	Результат.Индексы.Добавить("Пользователь, ГруппаПользователей");
	
	Возврат Результат;
	
КонецФункции

// Обновляет родителей группы пользователей с учетом иерархии
// в регистре сведений "Иерархия групп пользователей",
// а также групп пользователей в иерархии указанной группы.
//
// Параметры:
//  Группа - СправочникСсылка.ГруппыПользователей
//         - СправочникСсылка.ГруппыВнешнихПользователей - если указана пустая ссылка,
//             тогда иерархия обновляется для всех групп.
//
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//
//  Проверять - Булево - перед записью набора проверять, что есть изменения.
//
Процедура ОбновитьИерархиюГрупп(Группа, ИзмененияСоставов, Проверять = Истина) Экспорт
	
	// Родители меняются у всей ветки текущей группы.
	// 1. Получить все группы в иерархии указанной группы.
	// 2. Подготовить новый набор родителей - это набор нового родителя плюс сама группа.
	//    Для нижестоящей группы это будет набор родителей текущей группы плюс сама нижестоящая группа.
	// 3. Записать новые наборы родителей групп в рекурсии.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ТекущаяТаблица
	|ГДЕ
	|	ТекущаяТаблица.Ссылка В ИЕРАРХИИ(&Группа)
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Если ТипЗнч(Группа) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Справочник.ГруппыПользователей", "Справочник.ГруппыВнешнихПользователей");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Группа) Тогда
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Группа, "Родитель");
	Иначе
		Родитель = Группа;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	// Блокируется вся ветка (группа и все ее вышестоящие и нижестоящие группы).
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИерархияГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = Запрос.Выполнить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "Ссылка");
	
	Обновлено = Ложь;
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ИерархияГруппПользователей.СоздатьНаборЗаписей();
		Если ЗначениеЗаполнено(Родитель) Тогда
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(Родитель);
			НаборЗаписей.Прочитать();
		КонецЕсли;
		НовыеРодители = НаборЗаписей.Выгрузить();
		НовыеРодители.Сортировать("УровеньРодителя Возр");
		НовыеРодители.Индексы.Добавить("ГруппаПользователей, Родитель, УровеньРодителя, УровеньГруппы");
		Если НовыеРодители.Количество() > 0 Или Не ЗначениеЗаполнено(Родитель) Тогда
			УровеньРодителя = ?(ЗначениеЗаполнено(Родитель),
				НовыеРодители.Получить(НовыеРодители.Количество() - 1).УровеньРодителя, 0);
			Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			СтрокиДерева = Дерево.Строки;
			Если ЗначениеЗаполнено(Группа) Тогда
				Пока Истина Цикл
					Если СтрокиДерева.Количество() <> 1 Тогда
						СтрокиДерева = Неопределено;
						Прервать;
					ИначеЕсли СтрокиДерева[0].Ссылка = Группа Тогда
						Прервать;
					Иначе
						СтрокиДерева = СтрокиДерева[0].Строки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокиДерева <> Неопределено Тогда
				ЗаписатьНовыхРодителейГруппы(СтрокиДерева,
					НовыеРодители, УровеньРодителя, ИзмененияСоставов, Проверять);
				Обновлено = Истина;
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не Обновлено Тогда
		ПустаяГруппа = ?(ТипЗнч(Группа) = Тип("СправочникСсылка.ГруппыВнешнихПользователей"),
			Справочники.ГруппыПользователей.ПустаяСсылка(),
			Справочники.ГруппыВнешнихПользователей.ПустаяСсылка());
		ОбновитьИерархиюГрупп(ПустаяГруппа, ИзмененияСоставов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИерархияГруппПользователей.ГруппаПользователей КАК ГруппаПользователей
	|ИЗ
	|	РегистрСведений.ИерархияГруппПользователей КАК ИерархияГруппПользователей
	|ГДЕ
	|	ИерархияГруппПользователей.ГруппаПользователей = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИерархияГруппПользователей.ГруппаПользователей
	|ИЗ
	|	РегистрСведений.ИерархияГруппПользователей КАК ИерархияГруппПользователей
	|ГДЕ
	|	ИерархияГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИерархияГруппПользователей.ГруппаПользователей
	|ИЗ
	|	РегистрСведений.ИерархияГруппПользователей КАК ИерархияГруппПользователей
	|ГДЕ
	|	ИерархияГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ИерархияГруппПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
		НаборЗаписей.Записать(); // Удаление мусорных записей.
		ИзмененияСоставов.ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет состав пользователей группы ВсеПользователи или ВсеВнешниеПользователи
// в регистре сведений СоставыГруппПользователей.
//
//  Пользователь - СправочникСсылка.Пользователи
//               - СправочникСсылка.ВнешниеПользователи - для указанного пользователя.
//                   Пустая ссылка - для всех пользователей.
//               - Массив Из СправочникСсылка.Пользователи
//               - Массив Из СправочникСсылка.ВнешниеПользователи
//
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//
Процедура ОбновитьСоставГруппыВсеПользователи(Пользователь, ИзмененияСоставов) Экспорт
	
	Если ТипЗнч(Пользователь) = Тип("Массив")
	   И Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ГруппаВсеПользователи КАК ГруппаПользователей,
	|	Пользователи.Ссылка КАК Пользователь,
	|	НЕ Пользователи.ПометкаУдаления
	|		И НЕ Пользователи.Недействителен КАК Используется,
	|	СоставыГруппПользователей.Используется КАК ИспользуетсяБыло
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаВсеПользователи)
	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	&ОтборПользователя
	|	И (СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(СоставыГруппПользователей.Используется, ЛОЖЬ) <> (НЕ Пользователи.ПометкаУдаления
	|				И НЕ Пользователи.Недействителен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Ссылка,
	|	НЕ Пользователи.ПометкаУдаления
	|		И НЕ Пользователи.Недействителен,
	|	СоставыГруппПользователей.Используется
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
	|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	&ОтборПользователя
	|	И (СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(СоставыГруппПользователей.Используется, ЛОЖЬ) <> (НЕ Пользователи.ПометкаУдаления
	|				И НЕ Пользователи.Недействителен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	NULL,
	|	СоставыГруппПользователей.Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	NULL,
	|	СоставыГруппПользователей.Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	NULL,
	|	СоставыГруппПользователей.Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	NULL,
	|	СоставыГруппПользователей.Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	ДляВнешнихПользователей = Тип("СправочникСсылка.ВнешниеПользователи")
		= ТипЗнч(?(ТипЗнч(Пользователь) = Тип("Массив"), Пользователь[0], Пользователь));
	
	Если ДляВнешнихПользователей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Справочник.Пользователи", "Справочник.ВнешниеПользователи");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Справочник.ГруппыПользователей", "Справочник.ГруппыВнешнихПользователей");
		ГруппаВсеПользователи = ВнешниеПользователи.ГруппаВсеВнешниеПользователи();
	Иначе
		ГруппаВсеПользователи = Пользователи.ГруппаВсеПользователи();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГруппаВсеПользователи", ГруппаВсеПользователи);
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборПользователя", "Пользователи.Ссылка В (&Пользователь)");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "ГруппаПользователей");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
	
	УчастникиИзменений = ИзмененияСоставов.УчастникиИзменений;
	ИзмененныеГруппы   = ИзмененияСоставов.ИзмененныеГруппы;
	ДляРегистрации     = ИзмененияСоставов.ДляРегистрации;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
			Запись = НаборЗаписей.Добавить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Используется = Null Тогда
					ПустойНаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
					ПустойНаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
					ПустойНаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
					ПустойНаборЗаписей.Записать(); // Удаление мусорных записей.
				Иначе
					НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
					НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					НаборЗаписей.Записать(); // Добавление или обновление записей о связях.
				КонецЕсли;
				
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				УчастникиИзменений.Вставить(Выборка.Пользователь);
				Если ДляРегистрации <> Неопределено Тогда
					ДобавитьИзменениеСостава(ДляРегистрации, Выборка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет составы пользователей у групп пользователей с учетом иерархии
// в регистре сведений СоставыГруппПользователей.
// Данные регистра используются в форме списка и формы выбора пользователей.
// Данные регистра используются для повышения производительности запросов,
// так как не требуется работать с иерархией.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей
//                      - СправочникСсылка.ГруппыВнешнихПользователей - если указана пустая ссылка,
//                          значит обновить все иерархические группы пользователей.
//                      - Массив из СправочникСсылка.ГруппыПользователей
//                      - Массив из СправочникСсылка.ГруппыВнешнихПользователей
//
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//  УдалениеГруппы    - Булево - если Истина, тогда параметр ГруппаПользователей не массив.
//
Процедура ОбновитьСоставыИерархическихГруппПользователей(ГруппаПользователей, ИзмененияСоставов,
			УдалениеГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ГруппаПользователей) = Тип("Массив")
	   И Не ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалениеГруппы Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
		|	СоставыГруппПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ИерархияГруппПользователей КАК ГруппыДляОбновления1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДляОбновления1.Родитель)
		|			И (ГруппыДляОбновления1.ГруппаПользователей = &ГруппаПользователей)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК ГруппыДляОбновления2
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК НижестоящиеГруппы
		|			ПО (НижестоящиеГруппы.Родитель = ГруппыДляОбновления2.Родитель)
		|				И (ГруппыДляОбновления2.ГруппаПользователей = &ГруппаПользователей)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ПО (ГруппыПользователейСостав.Ссылка = НижестоящиеГруппы.ГруппаПользователей)
		|				И (ГруппыПользователейСостав.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|				И (НЕ ГруппыПользователейСостав.Ссылка В
		|						(ВЫБРАТЬ
		|							ВЫРАЗИТЬ(НижестоящиеГруппы.ГруппаПользователей КАК Справочник.ГруппыПользователей) КАК ГруппаПользователей
		|						ИЗ
		|							РегистрСведений.ИерархияГруппПользователей КАК НижестоящиеГруппы
		|						ГДЕ
		|							НижестоящиеГруппы.Родитель = &ГруппаПользователей))
		|		ПО (ГруппыДляОбновления2.Родитель = СоставыГруппПользователей.ГруппаПользователей)
		|			И (ГруппыПользователейСостав.Пользователь = СоставыГруппПользователей.Пользователь)
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК ГруппаПользователей,
		|	НЕОПРЕДЕЛЕНО КАК Пользователь,
		|	ЛОЖЬ КАК Используется
		|ГДЕ
		|	ЛОЖЬ";
		
	ИначеЕсли ЗначениеЗаполнено(ГруппаПользователей) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
		|	СоставыГруппПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ИерархияГруппПользователей КАК ГруппыДляОбновления1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДляОбновления1.Родитель)
		|			И (ГруппыДляОбновления1.ГруппаПользователей В (&ГруппаПользователей))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК ГруппыДляОбновления2
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК НижестоящиеГруппы
		|			ПО (НижестоящиеГруппы.Родитель = ГруппыДляОбновления2.Родитель)
		|				И (ГруппыДляОбновления2.ГруппаПользователей В (&ГруппаПользователей))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ПО (ГруппыПользователейСостав.Ссылка = НижестоящиеГруппы.ГруппаПользователей)
		|				И (ГруппыПользователейСостав.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|		ПО (ГруппыДляОбновления2.Родитель = СоставыГруппПользователей.ГруппаПользователей)
		|			И (ГруппыПользователейСостав.Пользователь = СоставыГруппПользователей.Пользователь)
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДляОбновления.Родитель КАК ГруппаПользователей,
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь,
		|	НЕ ГруппыДляОбновления.Родитель.ПометкаУдаления
		|		И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
		|		И НЕ ГруппыПользователейСостав.Пользователь.Недействителен КАК Используется,
		|	СоставыГруппПользователей.Используется КАК ИспользуетсяБыло
		|ИЗ
		|	РегистрСведений.ИерархияГруппПользователей КАК ГруппыДляОбновления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК НижестоящиеГруппы
		|		ПО (НижестоящиеГруппы.Родитель = ГруппыДляОбновления.Родитель)
		|			И (ГруппыДляОбновления.ГруппаПользователей В (&ГруппаПользователей))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ПО (ГруппыПользователейСостав.Ссылка = НижестоящиеГруппы.ГруппаПользователей)
		|			И (ГруппыПользователейСостав.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДляОбновления.Родитель)
		|			И (СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
		|ГДЕ
		|	(СоставыГруппПользователей.Пользователь ЕСТЬ NULL
		|			ИЛИ ЕСТЬNULL(СоставыГруппПользователей.Используется, ЛОЖЬ) <> (НЕ ГруппыДляОбновления.Родитель.ПометкаУдаления
		|				И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
		|				И НЕ ГруппыПользователейСостав.Пользователь.Недействителен))";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
		|	СоставыГруппПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыДляОбновления1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДляОбновления1.Ссылка)
		|			И (ГруппыДляОбновления1.Ссылка <> &ГруппаВсеПользователи)
		|			И (&ОтборДляГруппВнешнихПользователей1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыДляОбновления2
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК НижестоящиеГруппы
		|			ПО (НижестоящиеГруппы.Родитель = ГруппыДляОбновления2.Ссылка)
		|				И (ГруппыДляОбновления2.Ссылка <> &ГруппаВсеПользователи)
		|				И (&ОтборДляГруппВнешнихПользователей2)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|			ПО (ГруппыПользователейСостав.Ссылка = НижестоящиеГруппы.ГруппаПользователей)
		|				И (ГруппыПользователейСостав.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|		ПО (ГруппыДляОбновления2.Ссылка = СоставыГруппПользователей.ГруппаПользователей)
		|			И (ГруппыПользователейСостав.Пользователь = СоставыГруппПользователей.Пользователь)
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДляОбновления.Ссылка КАК ГруппаПользователей,
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь,
		|	НЕ ГруппыДляОбновления.ПометкаУдаления
		|		И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
		|		И НЕ ГруппыПользователейСостав.Пользователь.Недействителен КАК Используется,
		|	СоставыГруппПользователей.Используется КАК ИспользуетсяБыло
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыДляОбновления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК НижестоящиеГруппы
		|		ПО (НижестоящиеГруппы.Родитель = ГруппыДляОбновления.Ссылка)
		|			И (ГруппыДляОбновления.Ссылка <> &ГруппаВсеПользователи)
		|			И (&ОтборДляГруппВнешнихПользователей0)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ПО (ГруппыПользователейСостав.Ссылка = НижестоящиеГруппы.ГруппаПользователей)
		|			И (ГруппыПользователейСостав.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДляОбновления.Ссылка)
		|			И (СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
		|ГДЕ
		|	(СоставыГруппПользователей.Пользователь ЕСТЬ NULL
		|			ИЛИ ЕСТЬNULL(СоставыГруппПользователей.Используется, ЛОЖЬ) <> (НЕ ГруппыДляОбновления.ПометкаУдаления
		|				И НЕ ГруппыПользователейСостав.Пользователь.ПометкаУдаления
		|				И НЕ ГруппыПользователейСостав.Пользователь.Недействителен))";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
	
	ДляВнешнихПользователей = Тип("СправочникСсылка.ГруппыВнешнихПользователей")
		= ТипЗнч(?(ТипЗнч(ГруппаПользователей) = Тип("Массив"), ГруппаПользователей[0], ГруппаПользователей));
	
	Если ДляВнешнихПользователей Тогда
		Запрос.УстановитьПараметр("ГруппаВсеПользователи", ВнешниеПользователи.ГруппаВсеВнешниеПользователи());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ГруппыПользователей",
			"Справочник.ГруппыВнешнихПользователей");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Пользователи",
			"Справочник.ВнешниеПользователи");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГруппыПользователейСостав.Пользователь",
			"ГруппыПользователейСостав.ВнешнийПользователь");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Если ДляВнешнихПользователей Тогда
			Запрос.УстановитьПараметр("ГруппаВсеПользователи", ВнешниеПользователи.ГруппаВсеВнешниеПользователи());
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборДляГруппВнешнихПользователей0",
				"НЕ ГруппыДляОбновления.ВсеОбъектыАвторизации");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборДляГруппВнешнихПользователей1",
				"НЕ ГруппыДляОбновления1.ВсеОбъектыАвторизации");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборДляГруппВнешнихПользователей2",
				"НЕ ГруппыДляОбновления2.ВсеОбъектыАвторизации");
		Иначе
			Запрос.УстановитьПараметр("ГруппаВсеПользователи", Пользователи.ГруппаВсеПользователи());
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборДляГруппВнешнихПользователей0", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборДляГруппВнешнихПользователей1", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборДляГруппВнешнихПользователей2", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() И РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[0];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "ГруппаПользователей");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[1];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "ГруппаПользователей");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
	
	УчастникиИзменений = ИзмененияСоставов.УчастникиИзменений;
	ИзмененныеГруппы   = ИзмененияСоставов.ИзмененныеГруппы;
	ДляРегистрации     = ИзмененияСоставов.ДляРегистрации;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если Не РезультатыЗапроса[0].Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
			Выборка = РезультатыЗапроса[0].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Записать(); // Удаление записей о связях.
				
				УчастникиИзменений.Вставить(Выборка.Пользователь);
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				Если ДляРегистрации <> Неопределено Тогда
					ДобавитьИзменениеСостава(ДляРегистрации, Выборка, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не РезультатыЗапроса[1].Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
			Запись = НаборЗаписей.Добавить();
			Выборка = РезультатыЗапроса[1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				НаборЗаписей.Записать(); // Добавление или обновление записей о связях.
				
				УчастникиИзменений.Вставить(Выборка.Пользователь);
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				Если ДляРегистрации <> Неопределено Тогда
					ДобавитьИзменениеСостава(ДляРегистрации, Выборка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновление ресурс Используется в регистре сведений СоставыГруппПользователей
// при изменении реквизитов ПометкаУдаления, Недействителен у пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//               - СправочникСсылка.ВнешниеПользователи - для указанного пользователя.
//                   Пустая ссылка - для всех пользователей.
//               - Массив из СправочникСсылка.Пользователи
//               - Массив из СправочникСсылка.ВнешниеПользователи
//
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//
Процедура ОбновитьИспользуемостьСоставовГруппПользователей(Пользователь, ИзмененияСоставов) Экспорт
	
	Если ТипЗнч(Пользователь) = Тип("Массив")
	   И Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь КАК Пользователь,
	|	НЕ ЕСТЬNULL(ГруппыПользователей.ПометкаУдаления, ИСТИНА)
	|		И НЕ ЕСТЬNULL(Пользователи.ПометкаУдаления, ИСТИНА)
	|		И НЕ ЕСТЬNULL(Пользователи.Недействителен, ИСТИНА) КАК Используется,
	|	СоставыГруппПользователей.Используется КАК ИспользуетсяБыло
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = СоставыГруппПользователей.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
	|		ПО (ГруппыПользователей.Ссылка = СоставыГруппПользователей.ГруппаПользователей)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
	|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
	|	И СоставыГруппПользователей.Используется <> (НЕ ЕСТЬNULL(ГруппыПользователей.ПометкаУдаления, ИСТИНА)
	|			И НЕ ЕСТЬNULL(Пользователи.ПометкаУдаления, ИСТИНА)
	|			И НЕ ЕСТЬNULL(Пользователи.Недействителен, ИСТИНА))
	|	И &ОтборПользователя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь,
	|	НЕ ЕСТЬNULL(Пользователи.ПометкаУдаления, ИСТИНА)
	|		И НЕ ЕСТЬNULL(Пользователи.Недействителен, ИСТИНА),
	|	СоставыГруппПользователей.Используется
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = СоставыГруппПользователей.Пользователь)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
	|	И СоставыГруппПользователей.ГруппаПользователей = СоставыГруппПользователей.Пользователь
	|	И СоставыГруппПользователей.Используется <> (НЕ ЕСТЬNULL(Пользователи.ПометкаУдаления, ИСТИНА)
	|			И НЕ ЕСТЬNULL(Пользователи.Недействителен, ИСТИНА))
	|	И &ОтборПользователя";
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователя",
			"ВЫРАЗИТЬ(СоставыГруппПользователей.Пользователь КАК Справочник.Пользователи) В (&Пользователь)");
	КонецЕсли;
	
	ДляВнешнихПользователей = Тип("СправочникСсылка.ВнешниеПользователи")
		= ТипЗнч(?(ТипЗнч(Пользователь) = Тип("Массив"), Пользователь[0], Пользователь));
	
	Если ДляВнешнихПользователей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Справочник.Пользователи", "Справочник.ВнешниеПользователи");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Справочник.ГруппыПользователей", "Справочник.ГруппыВнешнихПользователей");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "ГруппаПользователей");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
	
	НаборИзОднойЗаписи = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
	НаборИзОднойЗаписи.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
	Запись = НаборИзОднойЗаписи.Добавить();
	
	УчастникиИзменений = ИзмененияСоставов.УчастникиИзменений;
	ИзмененныеГруппы   = ИзмененияСоставов.ИзмененныеГруппы;
	ДляРегистрации     = ИзмененияСоставов.ДляРегистрации;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.ГруппаПользователей)
			 Или Не ЗначениеЗаполнено(Выборка.Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборИзОднойЗаписи.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
			НаборИзОднойЗаписи.Отбор.Пользователь.Установить(Выборка.Пользователь);
			
			Запись.ГруппаПользователей = Выборка.ГруппаПользователей;
			Запись.Пользователь        = Выборка.Пользователь;
			Запись.Используется        = Выборка.Используется;
			
			НаборИзОднойЗаписи.Записать();
			
			ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
			УчастникиИзменений.Вставить(Выборка.Пользователь);
			Если ДляРегистрации <> Неопределено Тогда
				ДобавитьИзменениеСостава(ДляРегистрации, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  Ссылка - СправочникСсылка.Пользователи
//         - СправочникСсылка.ВнешниеПользователи
//         - СправочникСсылка.ГруппыПользователей
//         - СправочникСсылка.ГруппыВнешнихПользователей
//
Процедура ОбновитьСоставыГруппПередУдалениемПользователяИлиГруппы(Ссылка) Экспорт
	
	ИзмененияСоставов = НовыеИзмененияСоставовГрупп();
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи")
	 Или Ссылка = Пользователи.ГруппаВсеПользователи()
	 Или Ссылка = ВнешниеПользователи.ГруппаВсеВнешниеПользователи()
	 Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыВнешнихПользователей")
	   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВсеОбъектыАвторизации") = Истина Тогда
		
		ОбновитьСоставПередУдалениемГруппыБезИерархииИлиПользователя(Ссылка, ИзмененияСоставов);
	Иначе
		ОбновитьСоставыИерархическихГруппПользователей(Ссылка, ИзмененияСоставов, Истина);
	КонецЕсли;
	
	ПослеОбновленияСоставовГруппПользователей(ИзмененияСоставов);
	
КонецПроцедуры

// Параметры:
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//  ЕстьИзменения - Булево - возвращаемое значение
//
Процедура ПослеОбновленияСоставовГруппПользователей(ИзмененияСоставов, ЕстьИзменения = Ложь) Экспорт
	
	Если ИзмененияСоставов.УчастникиИзменений.Количество() = 0
	   И ИзмененияСоставов.ИзмененныеГруппы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Истина;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрироватьИзмененияСоставовГрупп(ИзмененияСоставов.ДляРегистрации);
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	УчастникиИзменений = Новый Массив;
	Для Каждого КлючИЗначение Из ИзмененияСоставов.УчастникиИзменений Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
			УчастникиИзменений.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ИзмененныеГруппы = Новый Массив;
	Для Каждого КлючИЗначение Из ИзмененияСоставов.ИзмененныеГруппы Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
			ИзмененныеГруппы.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(УчастникиИзменений)
	   И ТипЗнч(УчастникиИзменений[0]) = Тип("СправочникСсылка.ВнешниеПользователи")
	 Или ЗначениеЗаполнено(ИзмененныеГруппы)
	   И ТипЗнч(ИзмененныеГруппы[0]) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
		ОбновитьРолиВнешнихПользователей(УчастникиИзменений);
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПослеОбновленияСоставовГруппПользователей(УчастникиИзменений,
		ИзмененныеГруппы);
	
КонецПроцедуры

Процедура ДобавитьИзменениеСостава(ДляРегистрации, Выборка, Удален = Ложь)
	
	Если Не ЗначениеЗаполнено(Выборка.ГруппаПользователей)
	 Или Не ЗначениеЗаполнено(Выборка.Пользователь)
	 Или Выборка.ГруппаПользователей = Выборка.Пользователь Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ГруппаПользователей, Пользователь",
		Выборка.ГруппаПользователей, Выборка.Пользователь);
	
	НайденныеСтроки = ДляРегистрации.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Строка = НайденныеСтроки[0];
	Иначе
		Строка = ДляРегистрации.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Отбор);
	КонецЕсли;
	
	Если Удален Тогда
		Строка.ВидИзменения = "Удалено";
		Строка.Используется = Ложь;
		
	ИначеЕсли Выборка.ИспользуетсяБыло = Null Тогда
		Строка.ВидИзменения = "Добавлено";
		Строка.Используется = Выборка.Используется;
	Иначе
		Строка.ВидИзменения = "Изменено";
		Строка.Используется = Выборка.Используется;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДляРегистрации - см. НовоеИзменениеСоставовГруппДляРегистрации
//
Процедура ЗарегистрироватьИзмененияСоставовГрупп(ДанныеДляРегистрации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДляРегистрации) Тогда
		Возврат;
	КонецЕсли;
	ЭтоВнешниеПользователи = ТипЗнч(ДанныеДляРегистрации[0].Пользователь)
		= Тип("СправочникСсылка.ВнешниеПользователи");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененияСоставов", ДанныеДляРегистрации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмененияСоставов.ГруппаПользователей КАК ГруппаПользователей,
	|	ИзмененияСоставов.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ИзмененияСоставов
	|ИЗ
	|	&ИзмененияСоставов КАК ИзмененияСоставов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияСоставов.ГруппаПользователей КАК ГруппаПользователей,
	|	ИзмененияСоставов.Пользователь КАК Пользователь
	|ИЗ
	|	ИзмененияСоставов КАК ИзмененияСоставов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО (ГруппыПользователейСостав.Ссылка = ИзмененияСоставов.ГруппаПользователей)
	|			И (ГруппыПользователейСостав.Пользователь = ИзмененияСоставов.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыВнешнихПользователейСостав
	|		ПО (ГруппыВнешнихПользователейСостав.Ссылка = ИзмененияСоставов.ГруппаПользователей)
	|			И (ГруппыВнешнихПользователейСостав.ВнешнийПользователь = ИзмененияСоставов.Пользователь)
	|ГДЕ
	|	(НЕ ГруппыПользователейСостав.Пользователь ЕСТЬ NULL
	|			ИЛИ НЕ ГруппыВнешнихПользователейСостав.ВнешнийПользователь ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ИерархияГрупп.Родитель.Родитель, НЕОПРЕДЕЛЕНО) КАК Родитель,
	|	ЕСТЬNULL(ИерархияГрупп.Родитель, ИзмененияСоставов.ГруппаПользователей) КАК ГруппаПользователей,
	|	ЕСТЬNULL(ИерархияГрупп.Родитель.Наименование, ПРЕДСТАВЛЕНИЕ(ИзмененияСоставов.ГруппаПользователей)) КАК ПредставлениеГруппы
	|ИЗ
	|	ИзмененияСоставов КАК ИзмененияСоставов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияГруппПользователей КАК ИерархияГрупп
	|		ПО ИзмененияСоставов.ГруппаПользователей = ИерархияГрупп.ГруппаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененияСоставов.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(Пользователи.Наименование, ЕСТЬNULL(ВнешниеПользователи.Наименование, ПРЕДСТАВЛЕНИЕ(ИзмененияСоставов.Пользователь))) КАК ПредставлениеПользователя
	|ИЗ
	|	ИзмененияСоставов КАК ИзмененияСоставов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ИзмененияСоставов.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ПО (ВнешниеПользователи.Ссылка = ИзмененияСоставов.Пользователь)";
	
	ПодсистемаУправлениеДоступомСуществует = ОбщегоНазначения.ПодсистемаСуществует(
		"СтандартныеПодсистемы.УправлениеДоступом");
	
	Если ПодсистемаУправлениеДоступомСуществует Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		Запрос.УстановитьПараметр("ГруппаВсеПользователи", ?(ЭтоВнешниеПользователи,
			ВнешниеПользователи.ГруппаВсеВнешниеПользователи(), Пользователи.ГруппаВсеПользователи()));
		Запрос.Текст = Запрос.Текст
			+ ОбщегоНазначения.РазделительПакетаЗапросов()
			+ МодульУправлениеДоступомСлужебный.ТекстЗапросаГруппДоступаПриИзмененииУчастниковГруппПользователей();
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Данные = Новый Структура;
	Данные.Вставить("ВерсияСтруктурыДанных", 2);
	Данные.Вставить("ИзмененияСоставов", Новый Массив);
	Данные.Вставить("ПредставлениеГрупп", Новый Массив);
	Данные.Вставить("ПредставлениеПользователей", Новый Массив);
	
	ПользователиВГруппах = РезультатыЗапроса[1].Выгрузить();
	ПользователиВГруппах.Индексы.Добавить("Пользователь, ГруппаПользователей");
	Отбор = Новый Структура("Пользователь, ГруппаПользователей");
	
	Для Каждого Элемент Из ДанныеДляРегистрации Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Элемент);
		ПользовательВГруппе = ЗначениеЗаполнено(ПользователиВГруппах.НайтиСтроки(Отбор));
		Свойства = Новый Структура;
		Свойства.Вставить("ИдентификаторГруппы",
			НРег(Элемент.ГруппаПользователей.УникальныйИдентификатор()));
		Свойства.Вставить("ИдентификаторПользователя",
			НРег(Элемент.Пользователь.УникальныйИдентификатор()));
		Свойства.Вставить("ИзНижестоящейГруппы", Не ПользовательВГруппе);
		Свойства.Вставить("Используется", Элемент.Используется);
		Свойства.Вставить("ВидИзменения", Элемент.ВидИзменения);
		Данные.ИзмененияСоставов.Добавить(Свойства);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Свойства = Новый Структура;
		Свойства.Вставить("ИдентификаторРодителя", ?(ЗначениеЗаполнено(Выборка.Родитель),
			НРег(Выборка.Родитель.УникальныйИдентификатор()), ""));
		Свойства.Вставить("ИдентификаторГруппы",
			НРег(Выборка.ГруппаПользователей.УникальныйИдентификатор()));
		Свойства.Вставить("ПредставлениеГруппы", Выборка.ПредставлениеГруппы);
		Свойства.Вставить("СсылкаГруппы", СериализованнаяСсылка(Выборка.ГруппаПользователей));
		Данные.ПредставлениеГрупп.Добавить(Свойства);
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Свойства = Новый Структура;
		Свойства.Вставить("ИдентификаторПользователя",
			НРег(Выборка.Пользователь.УникальныйИдентификатор()));
		Свойства.Вставить("ПредставлениеПользователя", Выборка.ПредставлениеПользователя);
		Свойства.Вставить("СсылкаПользователя", СериализованнаяСсылка(Выборка.Пользователь));
		Данные.ПредставлениеПользователей.Добавить(Свойства);
	КонецЦикла;
	
	Если ПодсистемаУправлениеДоступомСуществует Тогда
		Данные.Вставить("УчастникиГруппДоступа", Новый Массив);
		Данные.Вставить("ПредставлениеГруппДоступа", Новый Массив);
		
		Выборка = РезультатыЗапроса[5].Выбрать();
		Пока Выборка.Следующий() Цикл
			Свойства = Новый Структура;
			Свойства.Вставить("ГруппаДоступа", СериализованнаяСсылка(Выборка.ГруппаДоступа));
			Свойства.Вставить("Участник", СериализованнаяСсылка(Выборка.Участник));
			Свойства.Вставить("СрокДействия", Выборка.СрокДействия);
			Данные.УчастникиГруппДоступа.Добавить(Свойства);
		КонецЦикла;
		
		Выборка = РезультатыЗапроса[6].Выбрать();
		Пока Выборка.Следующий() Цикл
			Свойства = Новый Структура;
			Свойства.Вставить("ГруппаДоступа", СериализованнаяСсылка(Выборка.ГруппаДоступа));
			Свойства.Вставить("Представление", Выборка.Представление);
			Свойства.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			Свойства.Вставить("Профиль", СериализованнаяСсылка(Выборка.Профиль));
			Свойства.Вставить("ПредставлениеПрофиля", Выборка.ПредставлениеПрофиля);
			Свойства.Вставить("ПометкаУдаленияПрофиля", Выборка.ПометкаУдаленияПрофиля);
			Данные.ПредставлениеГруппДоступа.Добавить(Свойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоВнешниеПользователи Тогда
		ИмяСобытия = ИмяСобытияИзменениеУчастниковГруппВнешнихПользователейДляЖурналаРегистрации();
	Иначе
		ИмяСобытия = ИмяСобытияИзменениеУчастниковГруппПользователейДляЖурналаРегистрации();
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		Метаданные.РегистрыСведений.СоставыГруппПользователей,
		ОбщегоНазначения.ЗначениеВСтрокуXML(Данные),
		,
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульГруппыДоступа = ОбщегоНазначения.ОбщийМодуль("Справочники.ГруппыДоступа");
	
	ОписаниеОбъекта = Новый Структура("ИзменениеСоставовГруппПользователей", ДанныеДляРегистрации);
	МодульГруппыДоступа.ЗарегистрироватьИзменениеРазрешенныхЗначений(ОписаниеОбъекта, Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с внешними пользователями.

// Обновляет состав группы внешних пользователей с признаком ВсеОбъектыАвторизации.
//
// Параметры:
//  ГруппаВнешнихПользователей - СправочникСсылка.ГруппыВнешнихПользователей
//                             - Массив из СправочникСсылка.ГруппыВнешнихПользователей
//                             - Неопределено - значит обновить все группы c признаком ВсеОбъектыАвторизации.
//
//  ВнешнийПользователь - СправочникСсылка.ВнешниеПользователи
//                      - Массив из СправочникСсылка.ВнешниеПользователи
//                      - Неопределено - значит для всех внешних пользователей.
//
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//
Процедура ОбновитьСоставыГруппПоТипамОбъектовАвторизации(ГруппаВнешнихПользователей,
			ВнешнийПользователь, ИзмененияСоставов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|			ПО (ГруппыВнешнихПользователей.ВсеОбъектыАвторизации = ИСТИНА)
	|				И (&ОтборГруппыВнешнихПользователей1)
	|				И (ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ГруппыВнешнихПользователей.Назначение КАК ТипыПользователей
	|					ГДЕ
	|						ТипыПользователей.Ссылка = ГруппыВнешнихПользователей.Ссылка
	|						И ТИПЗНАЧЕНИЯ(ТипыПользователей.ТипПользователей) = ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации)))
	|				И (&ОтборВнешнегоПользователя1)
	|		ПО (ГруппыВнешнихПользователей.Ссылка = СоставыГруппПользователей.ГруппаПользователей)
	|			И (ВнешниеПользователи.Ссылка = СоставыГруппПользователей.Пользователь)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И ЕСТЬNULL(ВЫРАЗИТЬ(СоставыГруппПользователей.ГруппаПользователей КАК Справочник.ГруппыВнешнихПользователей).ВсеОбъектыАвторизации, ЛОЖЬ) = ИСТИНА
	|	И &ОтборГруппыВнешнихПользователей2
	|	И &ОтборВнешнегоПользователя2
	|	И ГруппыВнешнихПользователей.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыВнешнихПользователей.Ссылка КАК ГруппаПользователей,
	|	ВнешниеПользователи.Ссылка КАК Пользователь,
	|	НЕ ГруппыВнешнихПользователей.ПометкаУдаления
	|		И НЕ ВнешниеПользователи.ПометкаУдаления
	|		И НЕ ВнешниеПользователи.Недействителен КАК Используется,
	|	СоставыГруппПользователей.Используется КАК ИспользуетсяБыло
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|		ПО (ГруппыВнешнихПользователей.ВсеОбъектыАвторизации = ИСТИНА)
	|			И (&ОтборГруппыВнешнихПользователей1)
	|			И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Справочник.ГруппыВнешнихПользователей.Назначение КАК ТипыПользователей
	|				ГДЕ
	|					ТипыПользователей.Ссылка = ГруппыВнешнихПользователей.Ссылка
	|					И ТИПЗНАЧЕНИЯ(ТипыПользователей.ТипПользователей) = ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации)))
	|			И (&ОтборВнешнегоПользователя1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыВнешнихПользователей.Ссылка)
	|			И (СоставыГруппПользователей.Пользователь = ВнешниеПользователи.Ссылка)
	|ГДЕ
	|	(СоставыГруппПользователей.Пользователь ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(СоставыГруппПользователей.Используется, ЛОЖЬ) = (НЕ ГруппыВнешнихПользователей.ПометкаУдаления
	|				И НЕ ВнешниеПользователи.ПометкаУдаления
	|				И НЕ ВнешниеПользователи.Недействителен))";
	
	Если ГруппаВнешнихПользователей = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборГруппыВнешнихПользователей2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборГруппыВнешнихПользователей1",
			"ГруппыВнешнихПользователей.Ссылка В (&ГруппаВнешнихПользователей)");
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборГруппыВнешнихПользователей2",
			"СоставыГруппПользователей.ГруппаПользователей В (&ГруппаВнешнихПользователей)");
	КонецЕсли;
	
	Если ВнешнийПользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя1", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнегоПользователя2", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ВнешнийПользователь", ВнешнийПользователь);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборВнешнегоПользователя1",
			"ВнешниеПользователи.Ссылка В (&ВнешнийПользователь)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборВнешнегоПользователя2",
			"СоставыГруппПользователей.Пользователь В (&ВнешнийПользователь)");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() И РезультатыЗапроса[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[0];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "ГруппаПользователей");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.ИсточникДанных = РезультатыЗапроса[1];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГруппаПользователей", "ГруппаПользователей");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
	
	УчастникиИзменений = ИзмененияСоставов.УчастникиИзменений;
	ИзмененныеГруппы   = ИзмененияСоставов.ИзмененныеГруппы;
	ДляРегистрации     = ИзмененияСоставов.ДляРегистрации;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		Если Не РезультатыЗапросов[0].Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
			Выборка = РезультатыЗапросов[0].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Записать(); // Удаление записей о связях.
				
				УчастникиИзменений.Вставить(Выборка.Пользователь);
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				Если ДляРегистрации <> Неопределено Тогда
					ДобавитьИзменениеСостава(ДляРегистрации, Выборка, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не РезультатыЗапросов[1].Пустой() Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
			Запись = НаборЗаписей.Добавить();
			Выборка = РезультатыЗапросов[1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.ГруппаПользователей.Установить(Выборка.ГруппаПользователей);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				НаборЗаписей.Записать(); // Добавление или обновление записей о связях.
				
				УчастникиИзменений.Вставить(Выборка.Пользователь);
				ИзмененныеГруппы.Вставить(Выборка.ГруппаПользователей);
				Если ДляРегистрации <> Неопределено Тогда
					ДобавитьИзменениеСостава(ДляРегистрации, Выборка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет список ролей пользователей информационной базы, которые соответствуют
// внешним пользователям. Состав ролей вычисляется исходя из вхождения внешних
// пользователей в группы внешних пользователей, кроме тех внешних пользователей,
// для которых роли установлены непосредственно.
//  Требуется только при разрешении редактирования ролей, например, если
// встроена подсистема Управление доступом, то эта процедура не требуется.
// 
// Параметры:
//  МассивВнешнихПользователей - Неопределено - все внешние пользователи.
//                             - СправочникСсылка.ГруппыВнешнихПользователей
//                             - Массив из СправочникСсылка.ВнешниеПользователи
//
Процедура ОбновитьРолиВнешнихПользователей(Знач МассивВнешнихПользователей = Неопределено) Экспорт
	
	Если ЗапретРедактированияРолей() Тогда
		// Роли устанавливаются другим механизмом, например, механизмом подсистемы УправлениеДоступом.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(МассивВнешнихПользователей) = Тип("Массив")
	   И МассивВнешнихПользователей.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Если ТипЗнч(МассивВнешнихПользователей) <> Тип("Массив") Тогда
			
			Если МассивВнешнихПользователей = Неопределено Тогда
				ГруппаВнешнихПользователей = ВнешниеПользователи.ГруппаВсеВнешниеПользователи();
			Иначе
				ГруппаВнешнихПользователей = МассивВнешнихПользователей;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", ГруппаВнешнихПользователей);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаВнешнихПользователей";
			
			МассивВнешнихПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
		
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
		
		ИдентификаторыПользователейИБ = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка КАК ВнешнийПользователь,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.Ссылка В(&ВнешниеПользователи)
		|	И (НЕ ВнешниеПользователи.УстановитьРолиНепосредственно)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПользователейИБ.Вставить(
				Выборка.ВнешнийПользователь, Выборка.ИдентификаторПользователяИБ);
		КонецЦикла;
		
		// Подготовка таблицы старых ролей внешних пользователей.
		СтарыеРолиВнешнихПользователей = Новый ТаблицаЗначений;
		
		СтарыеРолиВнешнихПользователей.Колонки.Добавить(
			"ВнешнийПользователь", Новый ОписаниеТипов("СправочникСсылка.ВнешниеПользователи"));
		
		СтарыеРолиВнешнихПользователей.Колонки.Добавить(
			"Роль", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
		
		ТекущийНомер = МассивВнешнихПользователей.Количество() - 1;
		Пока ТекущийНомер >= 0 Цикл
			
			// Проверка необходимости обработки пользователя.
			ПользовательИБ = Неопределено;
			ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[МассивВнешнихПользователей[ТекущийНомер]];
			Если ИдентификаторПользователяИБ <> Неопределено Тогда
				
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					ИдентификаторПользователяИБ);
			КонецЕсли;
			
			Если ПользовательИБ = Неопределено
			 ИЛИ ПустаяСтрока(ПользовательИБ.Имя) Тогда
				
				МассивВнешнихПользователей.Удалить(ТекущийНомер);
			Иначе
				Для каждого Роль Из ПользовательИБ.Роли Цикл
					СтараяРольВнешнегоПользователя = СтарыеРолиВнешнихПользователей.Добавить();
					СтараяРольВнешнегоПользователя.ВнешнийПользователь = МассивВнешнихПользователей[ТекущийНомер];
					СтараяРольВнешнегоПользователя.Роль = Роль.Имя;
				КонецЦикла;
			КонецЕсли;
			ТекущийНомер = ТекущийНомер - 1;
		КонецЦикла;
		
		// Подготовка списка ролей отсутствующих в метаданных и которые нужно переустановить.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВнешниеПользователи", МассивВнешнихПользователей);
		Запрос.УстановитьПараметр("ВсеРоли", ВсеРоли().Таблица.Получить());
		Запрос.УстановитьПараметр("СтарыеРолиВнешнихПользователей", СтарыеРолиВнешнихПользователей);
		Запрос.УстановитьПараметр("ИспользоватьВнешнихПользователей",
			ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
		// АПК:96-выкл - №434 Использование ОБЪЕДИНИТЬ допустимо, так как
		// строки не должны повторятся и объем данных небольшой (от единиц до тысяч).
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	СтарыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ СтарыеРолиВнешнихПользователей
		|ИЗ
		|	&СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРоли.Имя
		|ПОМЕСТИТЬ ВсеРоли
		|ИЗ
		|	&ВсеРоли КАК ВсеРоли
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаВнешнихПользователей,
		|	СоставыГруппПользователей.Пользователь КАК ВнешнийПользователь,
		|	Роли.Роль.Имя КАК Роль
		|ПОМЕСТИТЬ ВсеНовыеРолиВнешнихПользователей
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей.Роли КАК Роли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь В (&ВнешниеПользователи))
		|			И (СоставыГруппПользователей.ГруппаПользователей = Роли.Ссылка)
		|			И (&ИспользоватьВнешнихПользователей = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ПОМЕСТИТЬ НовыеРолиВнешнихПользователей
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|ПОМЕСТИТЬ ИзмененныеВнешниеПользователи
		|ИЗ
		|	СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ПО (НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь)
		|			И (НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль)
		|ГДЕ
		|	НовыеРолиВнешнихПользователей.Роль ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НовыеРолиВнешнихПользователей.ВнешнийПользователь
		|ИЗ
		|	НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеРолиВнешнихПользователей КАК СтарыеРолиВнешнихПользователей
		|		ПО НовыеРолиВнешнихПользователей.ВнешнийПользователь = СтарыеРолиВнешнихПользователей.ВнешнийПользователь
		|			И НовыеРолиВнешнихПользователей.Роль = СтарыеРолиВнешнихПользователей.Роль
		|ГДЕ
		|	СтарыеРолиВнешнихПользователей.Роль ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеНовыеРолиВнешнихПользователей.ГруппаВнешнихПользователей,
		|	ВсеНовыеРолиВнешнихПользователей.ВнешнийПользователь,
		|	ВсеНовыеРолиВнешнихПользователей.Роль
		|ИЗ
		|	ВсеНовыеРолиВнешнихПользователей КАК ВсеНовыеРолиВнешнихПользователей
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					ВсеРоли КАК ВсеРоли
		|				ГДЕ
		|					ВсеРоли.Имя = ВсеНовыеРолиВнешнихПользователей.Роль)";
		// АПК:96-вкл.
		
		// Регистрация ошибок имен ролей в профилях групп доступа.
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВнешнийПользователь = Выборка.ВнешнийПользователь; // СправочникСсылка.ВнешниеПользователи
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обновлении ролей внешнего пользователя
				          |""%1""
				          |не существует роль ""%2""
				          |группы внешних пользователей ""%3"".'"),
				СокрЛП(ВнешнийПользователь),
				Выборка.Роль,
				Строка(Выборка.ГруппаВнешнихПользователей));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Роль не найдена в метаданных'",
				     ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЦикла;
		
		// Обновление ролей пользователей ИБ.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль
		|ИЗ
		|	(ВЫБРАТЬ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь КАК ВнешнийПользователь,
		|		НовыеРолиВнешнихПользователей.Роль КАК Роль
		|	ИЗ
		|		НовыеРолиВнешнихПользователей КАК НовыеРолиВнешнихПользователей
		|	ГДЕ
		|		НовыеРолиВнешнихПользователей.ВнешнийПользователь В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВнешниеПользователи.Ссылка,
		|		""""
		|	ИЗ
		|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|	ГДЕ
		|		ВнешниеПользователи.Ссылка В
		|				(ВЫБРАТЬ
		|					ИзмененныеВнешниеПользователи.ВнешнийПользователь
		|				ИЗ
		|					ИзмененныеВнешниеПользователи КАК ИзмененныеВнешниеПользователи)) КАК ИзмененныеВнешниеПользователиИРоли
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмененныеВнешниеПользователиИРоли.ВнешнийПользователь,
		|	ИзмененныеВнешниеПользователиИРоли.Роль";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПользовательИБ = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Роль) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли[Выборка.Роль]);
				Продолжить;
			КонецЕсли;
			Если ПользовательИБ <> Неопределено Тогда
				ПользовательИБ.Записать();
			КонецЕсли;
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ИдентификаторыПользователейИБ[Выборка.ВнешнийПользователь]);
			
			ПользовательИБ.Роли.Очистить();
		КонецЦикла;
		Если ПользовательИБ <> Неопределено Тогда
			ПользовательИБ.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, что объект информационной базы используется в качестве объекта авторизации
// какого-нибудь внешнего пользователя, кроме заданного внешнего пользователя (если задан).
//
// Параметры:
//  СсылкаНаОбъектАвторизации - ОпределяемыйТип.ВнешнийПользователь
//  СсылкаНаТекущегоВнешнегоПользователя - СправочникСсылка.ВнешниеПользователи
//  НайденныйВнешнийПользователь - Неопределено
//                               - СправочникСсылка.ВнешниеПользователи
//  ЕстьПравоДобавленияВнешнегоПользователя - Булево
//  ТекстОшибки - Строка
//
// Возвращаемое значение:
//  Булево
//
Функция ОбъектАвторизацииИспользуется(Знач СсылкаНаОбъектАвторизации,
                                      Знач СсылкаНаТекущегоВнешнегоПользователя,
                                      НайденныйВнешнийПользователь = Неопределено,
                                      ЕстьПравоДобавленияВнешнегоПользователя = Ложь,
                                      ТекстОшибки = "") Экспорт
	
	ЕстьПравоДобавленияВнешнегоПользователя = ПравоДоступа(
		"Добавление", Метаданные.Справочники.ВнешниеПользователи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		СвойстваОбъектаАвторизации = СвойстваОбъектаАвторизации(СсылкаНаОбъектАвторизации,
			СсылкаНаТекущегоВнешнегоПользователя);
		
		Если СвойстваОбъектаАвторизации.Используется Тогда
			НайденныйВнешнийПользователь = СвойстваОбъектаАвторизации.Ссылка;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если СвойстваОбъектаАвторизации.Используется Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уже существует внешний пользователь, связанный с объектом ""%1"".'"),
			СсылкаНаОбъектАвторизации);
	КонецЕсли;
	
	Возврат СвойстваОбъектаАвторизации.Используется;
	
КонецФункции

// Возвращает ссылку на внешнего пользователя.
//
// Параметры:
//  СсылкаНаОбъектАвторизации - ОпределяемыйТип.ВнешнийПользователь
//  СсылкаНаТекущегоВнешнегоПользователя - СправочникСсылка.ВнешниеПользователи
//
// Возвращаемое значение:
//  Структура:
//    * Используется - Булево
//    * Ссылка - СправочникСсылка.ВнешниеПользователи
//
Функция СвойстваОбъектаАвторизации(СсылкаНаОбъектАвторизации, СсылкаНаТекущегоВнешнегоПользователя)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущегоВнешнегоПользователя");
	
	Запрос.УстановитьПараметр("СсылкаНаТекущегоВнешнегоПользователя", СсылкаНаТекущегоВнешнегоПользователя);
	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации", СсылкаНаОбъектАвторизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СвойстваОбъектаАвторизации = Новый Структура;
	СвойстваОбъектаАвторизации.Вставить("Используется", Выборка.Следующий());
	СвойстваОбъектаАвторизации.Вставить("Ссылка", Выборка.Ссылка);
	
	Возврат СвойстваОбъектаАвторизации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками пользователя информационной базы.

// Копирует настройки от пользователя источника пользователю приемнику. При значении
// параметра Переносить = Истина, настройки у пользователя источника удаляются.
//
// Параметры:
//   ИмяПользователяИсточник - Строка - имя пользователя ИБ от которого будет производиться копирование настроек.
//
// ИмяПользователяПриемник - Строка - Имя пользователя ИБ которому будут записаны настройки.
//
// Переносить              - Булево - Если Истина - настройки переносятся от одного пользователя другому,
//                           если Ложь - копируются новому.
//
Процедура СкопироватьНастройкиПользователя(ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить = Ложь) Экспорт
	
	// Перенос пользовательских настроек отчетов.
	СкопироватьНастройки(ХранилищеПользовательскихНастроекОтчетов, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек внешнего вида.
	СкопироватьНастройки(ХранилищеСистемныхНастроек,ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос произвольных настроек пользователей.
	СкопироватьНастройки(ХранилищеОбщихНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек данных форм.
	СкопироватьНастройки(ХранилищеНастроекДанныхФорм, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить);
	// Перенос настроек быстрого доступа дополнительных отчетов и обработок.
	Если Не Переносить Тогда
		СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительная функциональность для обмена данными.

// Вызывается для заполнения видов ссылок, используемых
// в процедуре ЗарегистрироватьСсылки и функции ЗарегистрированныеСсылки.
//
// Параметры:
//  ВидыСсылок - ТаблицаЗначений:
//   * Имя - Строка - имя вида ссылок, например, "Пользователи", "ИспользоватьГруппыПользователей".
//
//   * ИмяПараметраРаботыРасширений - Строка - например,
//       "СтандартныеПодсистемы.Пользователи.ПользователиИзмененныеПриЗагрузке".
//
//   * ДопустимыеТипы - ОписаниеТипов - обычно ссылочный тип, должен сериализоваться.
//
Процедура ПриЗаполненииВидовРегистрируемыхСсылок(ВидыСсылок) Экспорт
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ИспользоватьВнешнихПользователей";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов("Булево");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ИспользоватьВнешнихПользователейИзменениеПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "Пользователи";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов(
		"СправочникСсылка.Пользователи");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ПользователиИзмененныеПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ГруппыПользователей";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов(
		"СправочникСсылка.ГруппыПользователей");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ГруппыПользователейИзмененныеПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ГруппыПользователейИерархия";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов(
		"СправочникСсылка.ГруппыПользователей");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ГруппыПользователейИерархияИзмененнаяПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ВнешниеПользователи";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов(
		"СправочникСсылка.ВнешниеПользователи");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ВнешниеПользователиИзмененныеПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ВнешниеПользователиОбъектыАвторизации";
	ВидСсылок.ДопустимыеТипы = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип;
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ВнешниеПользователиОбъектыАвторизацииИзмененныеПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ГруппыВнешнихПользователей";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов(
		"СправочникСсылка.ГруппыВнешнихПользователей");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ГруппыВнешнихПользователейИзмененныеПриЗагрузке";
	
	ВидСсылок = ВидыСсылок.Добавить();
	ВидСсылок.Имя = "ГруппыВнешнихПользователейИерархия";
	ВидСсылок.ДопустимыеТипы = Новый ОписаниеТипов(
		"СправочникСсылка.ГруппыВнешнихПользователей");
	ВидСсылок.ИмяПараметраРаботыРасширений =
		"СтандартныеПодсистемы.Пользователи.ГруппыВнешнихПользователейИерархияИзмененнаяПриЗагрузке";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриЗаполненииВидовРегистрируемыхСсылок(ВидыСсылок);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		МодульБизнесПроцессыИЗадачиСервер = ОбщегоНазначения.ОбщийМодуль("БизнесПроцессыИЗадачиСервер");
		МодульБизнесПроцессыИЗадачиСервер.ПриЗаполненииВидовРегистрируемыхСсылок(ВидыСсылок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции перемещения пользователей между группами.

// Перемещает пользователя из одной группы в другую.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//
// Возвращаемое значение:
//  Строка - сообщение о результате переноса.
//
Функция ПеремещениеПользователяВНовуюГруппу(МассивПользователей, ГруппаИсточник,
												ГруппаПриемник, Перемещение) Экспорт
	
	Если ГруппаПриемник = Неопределено
		Или ГруппаПриемник = ГруппаИсточник Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивПеремещенныхПользователей = Новый Массив;
	МассивНеПеремещенныхПользователей = Новый Массив;
	
	Для Каждого ПользовательСсылка Из МассивПользователей Цикл
		
		Если ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.Пользователи")
			И ТипЗнч(ПользовательСсылка) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Тогда
			МассивНеПеремещенныхПользователей.Добавить(ПользовательСсылка);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяКолонкиСостава = "Пользователь";
		Иначе
			ИмяКолонкиСостава = "ВнешнийПользователь";
		КонецЕсли;
		
		// Если переносимый пользователь не входит в новую группу, то переносим.
		Если ГруппаПриемник = Пользователи.ГруппаВсеПользователи()
			Или ГруппаПриемник = ВнешниеПользователи.ГруппаВсеВнешниеПользователи() Тогда
			
			Если Перемещение Тогда
				Удален = Ложь;
				УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава, Удален);
			Иначе
				Удален = Истина;
			КонецЕсли;
			Если Удален Тогда
				МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
			КонецЕсли;
		Иначе
			Добавлен = Ложь;
			ДобавитьПользователяВГруппу(ГруппаПриемник, ПользовательСсылка, ИмяКолонкиСостава, Добавлен);
			Если Добавлен Тогда
				// Удаление пользователя из старой группы.
				Если Перемещение Тогда
					УдалитьПользователяИзГруппы(ГруппаИсточник, ПользовательСсылка, ИмяКолонкиСостава);
				КонецЕсли;
				МассивПеремещенныхПользователей.Добавить(ПользовательСсылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СообщениеПользователю = ФормированиеСообщенияПользователю(
		МассивПеремещенныхПользователей, ГруппаПриемник, Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник);
	
	Если МассивПеремещенныхПользователей.Количество() = 0 И МассивНеПеремещенныхПользователей.Количество() = 0 Тогда
		Если МассивПользователей.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Пользователь ""%1"" уже включен в группу ""%2"".'");
			ИмяПеремещаемогоПользователя = Строка(МассивПользователей[0]);
		Иначе
			ТекстСообщения = НСтр("ru = 'Все выбранные пользователи уже включены в группу ""%2"".'");
			ИмяПеремещаемогоПользователя = "";
		КонецЕсли;
		НаименованиеГруппы = Строка(ГруппаПриемник);
		СообщениеПользователю.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ИмяПеремещаемогоПользователя, НаименованиеГруппы);
		СообщениеПользователю.ЕстьОшибки = Истина;
		Возврат СообщениеПользователю;
	КонецЕсли;
	
	Возврат СообщениеПользователю;
	
КонецФункции

// Проверяет возможность включения внешнего пользователя в группу.
//
// Параметры:
//  ГруппаПриемник     - СправочникСсылка.ГруппыПользователей
//                     - СправочникСсылка.ГруппыВнешнихПользователей - группа,
//                          в которую добавляется пользователь.
//
//  ПользовательСсылка - СправочникСсылка.Пользователи
//                     - СправочникСсылка.ВнешниеПользователи - пользователь,
//                         которого необходимо добавить в группу.
//
// Возвращаемое значение:
//  Булево - Ложь, если добавление пользователя в группу невозможно.
//
Функция ВозможноПеремещениеПользователя(ГруппаПриемник, ПользовательСсылка) Экспорт
	
	Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		СвойстваГруппыПриемника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГруппаПриемник, "Назначение, ВсеОбъектыАвторизации");
		
		Если СвойстваГруппыПриемника.ВсеОбъектыАвторизации Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НазначениеГруппыПриемника = СвойстваГруппыПриемника.Назначение.Выгрузить();
		
		ТипВнешнегоПользователя = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПользовательСсылка, "ОбъектАвторизации"));
		ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
		Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
		
		Отбор = Новый Структура("ТипПользователей", Значение);
		Если НазначениеГруппыПриемника.НайтиСтроки(Отбор).Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПользователяВГруппу(ГруппаВладелец, ПользовательСсылка, ИмяКолонкиСостава, Добавлен) Экспорт
	
	Если ГруппаВладелец = Пользователи.ГруппаВсеПользователи()
	 Или ГруппаВладелец = ВнешниеПользователи.ГруппаВсеВнешниеПользователи() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Если ИмяКолонкиСостава = "ВнешнийПользователь" Тогда
			ИмяТаблицы = "Справочник.ГруппыВнешнихПользователей";
		Иначе
			ИмяТаблицы = "Справочник.ГруппыПользователей";
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаВладелец);
		Блокировка.Заблокировать();
		
		ГруппаВладелецОбъект = ГруппаВладелец.ПолучитьОбъект(); // СправочникОбъект.ГруппыПользователей, СправочникОбъект.ГруппыВнешнихПользователей
		Свойства = Новый Структура("ВсеОбъектыАвторизации", Ложь);
		ЗаполнитьЗначенияСвойств(Свойства, ГруппаВладелецОбъект);
		
		СтрокаСостава = ГруппаВладелецОбъект.Состав.Найти(ПользовательСсылка, ИмяКолонкиСостава);
		
		Если СтрокаСостава = Неопределено И Не Свойства.ВсеОбъектыАвторизации Тогда
			СтрокаСостава = ГруппаВладелецОбъект.Состав.Добавить();
			Если ИмяКолонкиСостава = "ВнешнийПользователь" Тогда
				СтрокаСостава.ВнешнийПользователь = ПользовательСсылка;
			Иначе
				СтрокаСостава.Пользователь = ПользовательСсылка;
			КонецЕсли;
			ГруппаВладелецОбъект.Записать();
			Добавлен = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьПользователяИзГруппы(ГруппаВладелец, ПользовательСсылка, ИмяКолонкиСостава, Удален = Ложь) Экспорт
	
	Если ГруппаВладелец = Пользователи.ГруппаВсеПользователи()
	 Или ГруппаВладелец = ВнешниеПользователи.ГруппаВсеВнешниеПользователи() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Если ИмяКолонкиСостава = "ВнешнийПользователь" Тогда
			ИмяТаблицы = "Справочник.ГруппыВнешнихПользователей";
		Иначе
			ИмяТаблицы = "Справочник.ГруппыПользователей";
		КонецЕсли;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаВладелец);
		Блокировка.Заблокировать();
		
		ГруппаВладелецОбъект = ГруппаВладелец.ПолучитьОбъект();
		
		СтрокаСостава = ГруппаВладелецОбъект.Состав.Найти(ПользовательСсылка, ИмяКолонкиСостава);
		Если СтрокаСостава <> Неопределено Тогда
			ГруппаВладелецОбъект.Состав.Удалить(СтрокаСостава);
			ГруппаВладелецОбъект.Записать();
			Удален = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует сообщение о результатах переноса пользователя.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//  МассивНеПеремещенныхПользователей - Массив - пользователи, которых не удалось переместить в группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ФормированиеСообщенияПользователю(МассивПользователей, ГруппаПриемник,
	                                      Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник = Неопределено) Экспорт
	
	КоличествоПользователей = МассивПользователей.Количество();
	НаименованиеГруппы = Строка(ГруппаПриемник);
	СообщениеПользователю = Неопределено;
	КоличествоНеПеремещенныхПользователей = МассивНеПеремещенныхПользователей.Количество();
	
	УведомлениеПользователя = Новый Структура;
	УведомлениеПользователя.Вставить("Сообщение");
	УведомлениеПользователя.Вставить("ЕстьОшибки");
	УведомлениеПользователя.Вставить("Пользователи");
	
	Если КоличествоНеПеремещенныхПользователей > 0 Тогда
		
		СвойстваГруппыПриемника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГруппаПриемник, "Назначение, Наименование");
		
		НаименованиеГруппы = СвойстваГруппыПриемника.Наименование;
		НазначениеГруппыВнешнихПользователей = СвойстваГруппыПриемника.Назначение.Выгрузить();
		
		МассивПредставлений = Новый Массив;
		Для Каждого СтрокаНазначения Из НазначениеГруппыВнешнихПользователей Цикл
			
			МассивПредставлений.Добавить(НРег(Метаданные.НайтиПоТипу(
				ТипЗнч(СтрокаНазначения.ТипПользователей)).Синоним));
			
		КонецЦикла;
		
		ПредставлениеТипаОбъектаАвторизации = СтрСоединить(МассивПредставлений, ", ");
		
		Если КоличествоНеПеремещенныхПользователей = 1 Тогда
			
			СвойстваНеПеремещенногоПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				МассивНеПеремещенныхПользователей[0], "Наименование, ОбъектАвторизации");
			
			Предмет = СвойстваНеПеремещенногоПользователя.Наименование;
			
			ТипВнешнегоПользователя = ТипЗнч(СвойстваНеПеремещенногоПользователя.ОбъектАвторизации);
			ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
			Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
		
			Отбор = Новый Структура("ТипПользователей", Значение);
			ТипПользователяСовпадаетСГруппой = (НазначениеГруппыВнешнихПользователей.НайтиСтроки(Отбор).Количество() = 1);
			
			УведомлениеПользователя.Пользователи = Неопределено;
			
			Если ТипПользователяСовпадаетСГруппой Тогда
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. у группы стоит признак ""Все пользователи заданного типа"".'"),
					Предмет, НаименованиеГруппы) + Символы.ПС;
			Иначе
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. в состав ее участников входят только %3.'"),
					Предмет, НаименованиеГруппы, ПредставлениеТипаОбъектаАвторизации) + Символы.ПС;
			КонецЕсли;
		Иначе
			УведомлениеПользователя.Пользователи = СтрСоединить(МассивНеПеремещенныхПользователей, Символы.ПС);
			
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не все пользователи могут быть включены в группу ""%1"",
				           |т.к. в состав ее участников входят только %2
				           |или у группы стоит признак ""Все пользователи заданного типа"".'"),
				НаименованиеГруппы,
				ПредставлениеТипаОбъектаАвторизации);
		КонецЕсли;
		
		УведомлениеПользователя.Сообщение = СообщениеПользователю;
		УведомлениеПользователя.ЕстьОшибки = Истина;
		
		Возврат УведомлениеПользователя;
	КонецЕсли;
	
	Если КоличествоПользователей = 1 Тогда
		
		СтрокаОбъект = Строка(МассивПользователей[0]);
		
		Если ГруппаПриемник = Пользователи.ГруппаВсеПользователи()
		 Или ГруппаПриемник = ВнешниеПользователи.ГруппаВсеВнешниеПользователи() Тогда
			
			СообщениеПользователю = НСтр("ru = '""%1"" исключен из группы ""%2""'");
			НаименованиеГруппы = Строка(ГруппаИсточник);
			
		ИначеЕсли Перемещение Тогда
			СообщениеПользователю = НСтр("ru = '""%1"" перемещен в группу ""%2""'");
		Иначе
			СообщениеПользователю = НСтр("ru = '""%1"" включен в группу ""%2""'");
		КонецЕсли;
		
	ИначеЕсли КоличествоПользователей > 1 Тогда
		
		СтрокаОбъект = Формат(КоличествоПользователей, "ЧДЦ=0") + " "
			+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоПользователей,
				"", НСтр("ru = 'пользователь,пользователя,пользователей,,,,,,0'"));
		
		Если ГруппаПриемник = Пользователи.ГруппаВсеПользователи() Тогда
			СообщениеПользователю = НСтр("ru = '%1 исключены из группы ""%2""'");
			НаименованиеГруппы = Строка(ГруппаИсточник);
			
		ИначеЕсли Перемещение Тогда
			СообщениеПользователю = НСтр("ru = '%1 перемещены в группу ""%2""'");
		Иначе
			СообщениеПользователю = НСтр("ru = '%1 включены в группу ""%2""'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СообщениеПользователю <> Неопределено Тогда
		СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю,
			СтрокаОбъект, НаименованиеГруппы);
	КонецЕсли;
	
	УведомлениеПользователя.Сообщение = СообщениеПользователю;
	УведомлениеПользователя.ЕстьОшибки = Ложь;
	
	Возврат УведомлениеПользователя;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Восстановление паролей пользователей

Процедура ЗаполнитьПочтуДляВосстановленияПароляУПользователейВФоне(ДополнительныеПараметры, АдресВоВременномХранилище) Экспорт
	
	СписокПользователей = ПользователиДляВключенияВосстановленияПароля();
	Для каждого ПользовательСсылка Из СписокПользователей Цикл
		ОбновитьПочтуДляВосстановленияПароля(ПользовательСсылка);
	КонецЦикла;
	
	СписокПользователей = ВнешниеПользователиДляВключенияВосстановленияПароля();
	Для каждого ВнешнийПользовательСсылка Из СписокПользователей Цикл
		
		ОбъектАвторизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешнийПользовательСсылка, "ОбъектАвторизации");
		ОбновитьПочтуДляВосстановленияПароля(ВнешнийПользовательСсылка, ОбъектАвторизации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступнаНастройкаВосстановленияПароля(УровеньДоступа) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УровеньДоступа.ИзменениеТекущего
		 И Не УровеньДоступа.УправлениеСписком Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  УровеньДоступа - Структура
//  Объект - СправочникОбъект.Пользователи
//         - СправочникОбъект.ВнешниеПользователи
// 
// Возвращаемое значение:
//  Булево
//
Функция ИнтерактивноЗапрашиватьВводПароля(УровеньДоступа, Объект) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь()
		Или УровеньДоступа.УправлениеСписком
		Или НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) 
		И УровеньДоступа.ИзменениеТекущего Тогда
		
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторПользователяИБ);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ПользовательИБ <> Неопределено Тогда
				Возврат ПользовательИБ.ПарольУстановлен;
			КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  УровеньДоступа - Структура
//  Объект - СправочникОбъект.Пользователи
//         - СправочникОбъект.ВнешниеПользователи
// 
// Возвращаемое значение:
//  Булево
//
Функция ДоступноРедактированиеПочтыДляВосстановленияПароля(УровеньДоступа, Объект) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь()
		Или УровеньДоступа.ИзменениеТекущего
		Или Не ЗначениеЗаполнено(Объект.Ссылка)
		Или (УровеньДоступа.УправлениеСписком И Объект.Подготовлен) Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПользователиДляВключенияВосстановленияПароля() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ПользователиИБСПочтой = ПользователиСЭлектроннойПочтойДляВосстановления();
	
	Если ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		Возврат ПользователиДляВключенияВосстановленияПароляСУчетомВнешнихПользователей(ПользователиИБСПочтой);
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ПользователиКонтактнаяИнформация.Ссылка) КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Представление КАК Представление,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид = &ВидКонтактнойИнформации
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.Служебный = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиКонтактнаяИнформация.Представление,
	|	Пользователи.ИдентификаторПользователяИБ";
	
	Запрос.УстановитьПараметр("ВидКонтактнойИнформации",
	МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат СписокПользователейДляОбновления(ПользователиИБСПочтой, РезультатЗапроса);
	
КонецФункции

Функция ПользователиДляВключенияВосстановленияПароляСУчетомВнешнихПользователей(ПользователиИБСПочтой)
	
	ТипыВнешнихПользователей = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы();
	
	Если ТипыВнешнихПользователей.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ШаблонЗапроса = "ВЫБРАТЬ
		|	КонтактнаяИнформацияВнешнегоПользователя.Представление КАК Почта
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ #КонтактнаяИнформация КАК КонтактнаяИнформацияВнешнегоПользователя
		|		ПО (ВнешниеПользователи.ОбъектАвторизации = КонтактнаяИнформацияВнешнегоПользователя.Ссылка)
		|ГДЕ
		|	ВнешниеПользователи.Недействителен = ЛОЖЬ
		|	И КонтактнаяИнформацияВнешнегоПользователя.Тип = &ТипКонтактнойИнформации";
	
	НаборЗапросов = Новый Массив;
	
	Для каждого ТипВнешнегоПользователя Из ТипыВнешнихПользователей Цикл
		
		Если Не МодульУправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(ТипВнешнегоПользователя) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = Метаданные.НайтиПоТипу(ТипВнешнегоПользователя).ПолноеИмя() + ".КонтактнаяИнформация";
		НаборЗапросов.Добавить(СтрЗаменить(ШаблонЗапроса, "#КонтактнаяИнформация", ИмяТаблицы));
		
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ПОМЕСТИТЬ ВременнаяТаблица", "");
	КонецЦикла;
	
	Если НаборЗапросов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(НаборЗапросов, Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(Пользователи.Ссылка) КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Представление КАК Представление,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО (ПользователиКонтактнаяИнформация.Представление = ВременнаяТаблица.Почта)
	|
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид = &ВидКонтактнойИнформации
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.Служебный = ЛОЖЬ
	|	И ВременнаяТаблица.Почта ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиКонтактнаяИнформация.Представление, Пользователи.ИдентификаторПользователяИБ
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПользователиКонтактнаяИнформация.Ссылка) = 1";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.Параметры.Вставить("ТипКонтактнойИнформации",
		МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты"));
	Запрос.УстановитьПараметр("ВидКонтактнойИнформации",
			МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат СписокПользователейДляОбновления(ПользователиИБСПочтой, РезультатЗапроса);
	
КонецФункции

Функция СписокПользователейДляОбновления(ПользователиИБСПочтой, РезультатЗапроса)

	Если ПользователиИБСПочтой.Количество() = 0 Тогда
		Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	СписокПользователей = Новый Массив;
	
	Для Каждого ПользователяДляОбновления Из РезультатЗапроса Цикл
		СведенияОПользователе = ПользователиИБСПочтой[ПользователяДляОбновления.Представление];
		
		Если СведенияОПользователе = Неопределено Тогда
			СписокПользователей.Добавить(ПользователяДляОбновления.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если СтрСравнить(ПользователяДляОбновления.ИдентификаторПользователяИБ, СведенияОПользователе.УникальныйИдентификатор) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для пользователя ""%1"" не может быть установлена почта %2
			           |для восстановления пароля, т.к. она используется для пользователя
			           |%3 (%4)'"),
			Строка(ПользователяДляОбновления.Ссылка),
			СведенияОПользователе.АдресЭлектроннойПочты,
			СведенияОПользователе.Имя,
			СведенияОПользователе.ПолноеИмя);
			
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.Пользователи,
			ПользователяДляОбновления.Ссылка,
			ТекстСообщения);
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

Функция ВнешниеПользователиДляВключенияВосстановленияПароля() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТипыВнешнихПользователей = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы();
	
	Если ТипыВнешнихПользователей.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	НаборЗапросов = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Представление КАК Представление,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка)
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Вид = &ВидКонтактнойИнформации
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.Служебный = ЛОЖЬ";
	
	НаборЗапросов.Добавить(ТекстЗапроса);
	
	ШаблонЗапроса = "ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка КАК Ссылка,
	|	КонтактнаяИнформацияВнешнегоПользователя.Представление, 
	|	ВнешниеПользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ #КонтактнаяИнформация КАК КонтактнаяИнформацияВнешнегоПользователя
	|		ПО (ВнешниеПользователи.ОбъектАвторизации = КонтактнаяИнформацияВнешнегоПользователя.Ссылка)
	|ГДЕ
	|	ВнешниеПользователи.Недействителен = ЛОЖЬ
	|	И КонтактнаяИнформацияВнешнегоПользователя.Тип = &ТипКонтактнойИнформации";

	Для каждого ТипВнешнегоПользователя Из ТипыВнешнихПользователей Цикл
		
		Если Не МодульУправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(ТипВнешнегоПользователя) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = Метаданные.НайтиПоТипу(ТипВнешнегоПользователя).ПолноеИмя() + ".КонтактнаяИнформация";
		НаборЗапросов.Добавить(СтрЗаменить(ШаблонЗапроса, "#КонтактнаяИнформация", ИмяТаблицы));
		
	КонецЦикла;
	
	Если НаборЗапросов.Количество() < 2 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(НаборЗапросов, Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВременнаяТаблица.Ссылка) КАК Ссылка,
	|	ВременнаяТаблица.Представление КАК Представление,
	|	ВременнаяТаблица.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.Представление, ВременнаяТаблица.ИдентификаторПользователяИБ
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВременнаяТаблица.Ссылка) = 1 
	|	И ТИПЗНАЧЕНИЯ(МАКСИМУМ(ВременнаяТаблица.Ссылка)) <> ТИП(Справочник.Пользователи)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.Параметры.Вставить("ТипКонтактнойИнформации",
		МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты"));
	Запрос.УстановитьПараметр("ВидКонтактнойИнформации",
			МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПользователиИБСПочтой = ПользователиСЭлектроннойПочтойДляВосстановления();
	
	Возврат СписокПользователейДляОбновления(ПользователиИБСПочтой, РезультатЗапроса);
	
КонецФункции

Функция ОбновитьПочтуДляВосстановленияПароля(ПользовательСсылка, ОбъектАвторизации = Неопределено) Экспорт
	
	Результат =  Новый Структура;
	Результат.Вставить("Статус",      "ОбновлениеНеТребуется");
	Результат.Вставить("ТекстОшибки", "");
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательСсылка, "ИдентификаторПользователяИБ");
	
	ПользовательИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
	Если ПользовательИБ = Неопределено Или ЗначениеЗаполнено(ПользовательИБ.АдресЭлектроннойПочты) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ОбъектАвторизации = Неопределено Тогда
		
		ВладелецКИ                 = ПользовательСсылка;
		ТипИлиВидЭлектроннойПочты  = МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя");
		ПолноеИмяОбъектаМетаданных = Метаданные.Справочники.Пользователи.ПолноеИмя();
		
	Иначе
		
		Если Не МодульУправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(ОбъектАвторизации) Тогда
			Возврат Результат;
		КонецЕсли;
		ВладелецКИ                 = ОбъектАвторизации;
		ТипИлиВидЭлектроннойПочты  = МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты");
		ПолноеИмяОбъектаМетаданных = ОбъектАвторизации.Метаданные().ПолноеИмя();
		
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаМетаданных);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ВладелецКИ);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	ПочтаДляВосстановленияПароля = "";
	ПредставлениеСсылки = Строка(ПользовательСсылка);
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		КонтактнаяИнформацияПользователя = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВладелецКИ,
			ТипИлиВидЭлектроннойПочты, ТекущаяДатаСеанса(), Ложь);
		
		Если КонтактнаяИнформацияПользователя.Количество() > 0 Тогда
			
			СтрокаСПочтой = КонтактнаяИнформацияПользователя[0];
			
			Если ЗначениеЗаполнено(СтрокаСПочтой.Значение) Тогда
				ПочтаДляВосстановленияПароля = МодульУправлениеКонтактнойИнформацией.АдресЭлектроннойПочты(СтрокаСПочтой.Значение);
				Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПочтаДляВосстановленияПароля) Тогда
					ПочтаДляВосстановленияПароля = "";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ПочтаДляВосстановленияПароля) И ЗначениеЗаполнено(СтрокаСПочтой.ЗначенияПолей) Тогда
				ПочтаДляВосстановленияПароля = МодульУправлениеКонтактнойИнформацией.АдресЭлектроннойПочты(СтрокаСПочтой.ЗначенияПолей);
				Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПочтаДляВосстановленияПароля) Тогда
					ПочтаДляВосстановленияПароля = "";
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ПочтаДляВосстановленияПароля) И ЗначениеЗаполнено(СтрокаСПочтой.Представление) Тогда
				ПочтаДляВосстановленияПароля = СтрокаСПочтой.Представление;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПочтаДляВосстановленияПароля) Тогда
				
				ПользовательИБ.АдресЭлектроннойПочты          = ПочтаДляВосстановленияПароля;
				ПользовательИБ.ЗапрещеноВосстанавливатьПароль = Ложь;
				Пользователи.УстановитьСвойстваПользователяИБ(ИдентификаторПользователяИБ, ПользовательИБ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Статус = "Обновлен";
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		// Если не удалось обработать пользователя, повторяем попытку снова.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат.Статус = "Ошибка";
		Результат.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОшибкуВЖурналРегистрации(
			ПользовательСсылка,
			ПредставлениеСсылки,
			ИнформацияОбОшибке());
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ЗначениеЗаполнено(ПочтаДляВосстановленияПароля)
			 И СтрНайти(ТекстОшибки, ПочтаДляВосстановленияПароля) > 0 Тогда
				Уточнение = НСтр("ru = 'Адрес электронной почты %1 занят другим пользователем и не может быть использован для восстановления пароля.'");
				Уточнение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Уточнение, ПочтаДляВосстановленияПароля);
				ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ПользовательСсылка, Уточнение);
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПользователиСЭлектроннойПочтойДляВосстановления()
	
	ПользователиИБСПочтой = Новый Соответствие;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		СведенияОПользователе = СведенияОПользователеДляОбновленияПочтыДляВосстановления();
		ЗаполнитьЗначенияСвойств(СведенияОПользователе, ПользовательИБ);
		
		Если ЗначениеЗаполнено(СведенияОПользователе.АдресЭлектроннойПочты) Тогда
			ПользователиИБСПочтой.Вставить(СведенияОПользователе.АдресЭлектроннойПочты, СведенияОПользователе);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПользователиИБСПочтой;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//   * АдресЭлектроннойПочты - Строка
//   * УникальныйИдентификатор - Строка
//   * Имя - Строка
//   * ПолноеИмя - Строка
//
Функция СведенияОПользователеДляОбновленияПочтыДляВосстановления()
	
	Результат = Новый Структура;
	Результат.Вставить("АдресЭлектроннойПочты", "");
	Результат.Вставить("УникальныйИдентификатор", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("ПолноеИмя", "");
	
	Возврат Результат;
	
КонецФункции

// Обновляет адрес электронной почты для восстановления пароля в объекте-владельце контактной информации.
// Для справочника Пользователи в самом объекте (этот объект перед записью).
// Для справочника ВнешниеПользователи в объекте авторизации.
// 
// Вызывается, когда АдресЭлектроннойПочты у пользователя ИБ изменен и ПользовательОбъект
// не содержит признак ПочтаДляВосстановленияПароляУстанавливаетсяВФорме.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - объект перед записью
//                     - СправочникОбъект.ВнешниеПользователи
//  НовыйАдрес  - Строка
//  СтарыйАдрес - Строка
//              - Неопределено - если старый пользователь ИБ не существует
//
Процедура ИзменитьПочтуДляВосстановленияПароля(ПользовательОбъект, НовыйАдрес, СтарыйАдрес)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ИзменитьПочтуДляВосстановленияПароля(ПользовательОбъект, НовыйАдрес, СтарыйАдрес);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПриОтправкеСерверногоОповещения.
Процедура ДобавитьСеансыАдресата(СеансыАдресатов, Адресат, КлючСеанса = Неопределено);
	
	КлючиСеансов = СеансыАдресатов.Получить(Адресат.Ключ);
	Если КлючиСеансов = Неопределено Тогда
		КлючиСеансов = Новый Массив;
		СеансыАдресатов.Вставить(Адресат.Ключ, КлючиСеансов);
	КонецЕсли;
	
	Если КлючСеанса <> Неопределено Тогда
		КлючиСеансов.Добавить(КлючСеанса);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючСеанса Из Адресат.Значение Цикл
		КлючиСеансов.Добавить(КлючСеанса);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ПриОтправкеСерверногоОповещения.
Функция КлючиРолейСокращены(СтарыеКлючиРолейСтрокой, НовыеКлючиРолейСтрокой)
	
	СтарыеКлючи = СтрРазделить(СтарыеКлючиРолейСтрокой, ",", Ложь);
	НовыеКлючи = СтрРазделить(НовыеКлючиРолейСтрокой, ",", Ложь);
	
	Для Каждого КлючРоли Из СтарыеКлючи Цикл
		Если Не СтрЗаканчиваетсяНа(КлючРоли, "/1") // Это не роль расширения.
		   И НовыеКлючи.Найти(КлючРоли) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ПриОтправкеСерверногоОповещения.
Функция РолиСокращены(СтарыйПользовательИБ, НовыйПользовательИБ)
	
	Для Каждого Роль Из СтарыйПользовательИБ.Роли Цикл
		Если Не НовыйПользовательИБ.Роли.Содержит(Роль)
		   И Роль.РасширениеКонфигурации() = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедур ПриДобавленииСерверныхОповещений, ПриОтправкеСерверногоОповещения.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы
//
// Возвращаемое значение:
//  Строка
//
Функция КлючиРолейПользователяИБ(ПользовательИБ)
	
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		Прервать;
	КонецЦикла;
	Если Роль = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	РолиРасширений = ПользователиСлужебныйПовтИсп.РолиРасширений();
	Список = Новый СписокЗначений;
	
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		КлючРоли = Справочники.ИдентификаторыОбъектовМетаданных.КлючОбъектаМетаданныхРоль(Роль);
		Если КлючРоли = Неопределено Тогда
			КлючРоли = "Неопределено";
		КонецЕсли;
		Если РолиРасширений.Получить(Роль.Имя) <> Неопределено Тогда
			КлючРоли = КлючРоли + "/1";
		КонецЕсли;
		Список.Добавить(КлючРоли);
	КонецЦикла;
	
	Список.СортироватьПоЗначению();
	
	Возврат СтрСоединить(Список.ВыгрузитьЗначения(), ",");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

// Возвращает несовпадающие значения в колонке таблиц значений.
//
// Параметры:
//  ИмяКолонки - Строка - имя сравниваемой колонки.
//  Таблица1   - ТаблицаЗначений
//  Таблица2   - ТаблицаЗначений
//
// Возвращаемое значение:
//  Массив - значения, которые есть только в колонке только одной из таблиц.
// 
Функция РазличияЗначенийКолонки(ИмяКолонки, Таблица1, Таблица2) Экспорт
	
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений")
	   И ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(Таблица1) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица2.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;
	
	Если ТипЗнч(Таблица2) <> Тип("ТаблицаЗначений") Тогда
		Возврат Таблица1.ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли;
	
	Таблица11 = Таблица1.Скопировать(, ИмяКолонки);
	Таблица11.Свернуть(ИмяКолонки);
	
	Таблица22 = Таблица2.Скопировать(, ИмяКолонки);
	Таблица22.Свернуть(ИмяКолонки);
	
	Для Каждого СтрокаТаблицы Из Таблица22 Цикл
		НоваяСтрока = Таблица11.Добавить();
		НоваяСтрока[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки];
	КонецЦикла;
	
	Таблица11.Колонки.Добавить("Признак");
	Таблица11.ЗаполнитьЗначения(1, "Признак");
	
	Таблица11.Свернуть(ИмяКолонки, "Признак");
	
	Отбор = Новый Структура("Признак", 1);
	Таблица = Таблица11.Скопировать(Таблица11.НайтиСтроки(Отбор));
	
	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
	
КонецФункции

Процедура ВыбратьПользователейГруппы(ВыбранныеЭлементы, ХранимыеПараметры, ПолеСписка) Экспорт 
	
	Если ВыбранныеЭлементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныйЭлемент = ВыбранныеЭлементы[0].ВыбранныйЭлемент;
	ТипВыбранногоЭлемента = ТипЗнч(ВыбранныйЭлемент);
	
	Если ТипВыбранногоЭлемента = Тип("СправочникСсылка.ГруппыПользователей")
			И ХранимыеПараметры.ВыборГруппПользователей
		Или ТипВыбранногоЭлемента = Тип("СправочникСсылка.ГруппыВнешнихПользователей")
			И ХранимыеПараметры.ВыборГруппВнешнихПользователей
		Или ТипВыбранногоЭлемента <> Тип("СправочникСсылка.ГруппыПользователей")
			И ТипВыбранногоЭлемента <> Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда 
		
		Возврат;
	КонецЕсли;
	
	ПользователиГруппы = ПользователиГруппы(ПолеСписка);
	
	ВыбранныеЭлементы.Очистить();
	
	Для Каждого ПользовательГруппы Из ПользователиГруппы Цикл 
		
		Элемент = Новый Структура;
		Элемент.Вставить("ВыбранныйЭлемент", ПользовательГруппы.Ссылка);
		Элемент.Вставить("НомерКартинки", ПользовательГруппы.НомерКартинки);
		
		ВыбранныеЭлементы.Добавить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПользователиГруппы(ПолеСписка)
	
	Схема = ПолеСписка.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = ПолеСписка.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ДобавитьПоляПользователейГруппы(Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецФункции

Процедура ДобавитьПоляПользователейГруппы(Настройки)
	
	ДобавляемыеПоля = СтрРазделить("Ссылка, НомерКартинки", ", ", Ложь);
	НастройкиСтруктура = Настройки.Структура[0]; // ГруппировкаКомпоновкиДанных
	ВыбранныеПоля = НастройкиСтруктура.Выбор;
	
	Для Каждого ДобавляемоеПоле Из ДобавляемыеПоля Цикл 
		
		ДоступноеПоле = ВыбранныеПоля.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ДобавляемоеПоле));
		
		Если ДоступноеПоле = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолеНайдено = Ложь;
		
		Для Каждого Элемент Из ВыбранныеПоля.Элементы Цикл 
			
			Если Элемент.Поле = ДоступноеПоле.Поле Тогда 
				ПолеНайдено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеНайдено Тогда 
			Продолжить;
		КонецЕсли;
		
		ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ВыбранноеПоле, ДоступноеПоле);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Список - ДинамическийСписок
//  ИмяПоля - Строка
//
Процедура ОграничитьИспользованиеЗаполняемогоПоляДинамическогоСписка(Список, ИмяПоля) Экспорт
	
	Поля = Список.ПолучитьОграниченияИспользованияВГруппировке();
	Если Поля.Найти(ИмяПоля) = Неопределено Тогда
		Поля.Добавить(ИмяПоля);
		Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
	КонецЕсли;
	
	Поля = Список.ПолучитьОграниченияИспользованияВОтборе();
	Если Поля.Найти(ИмяПоля) = Неопределено Тогда
		Поля.Добавить(ИмяПоля);
		Список.УстановитьОграниченияИспользованияВОтборе(Поля);
	КонецЕсли;
	
	Поля = Список.ПолучитьОграниченияИспользованияВПорядке();
	Если Поля.Найти(ИмяПоля) = Неопределено Тогда
		Поля.Добавить(ИмяПоля);
		Список.УстановитьОграниченияИспользованияВПорядке(Поля);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры УдалитьНесуществующиеПоляИзНастройкиСобытияДоступДоступ.
Процедура ДобавитьПолеСПроверкой(Поля, Поле, ДоступныеПоля, НенайденныеПоля, ДобавленныеПоля, ИмяОбъекта)

	Если ДоступныеПоля <> Неопределено
	   И ДоступныеПоля.Получить(НРег(Поле)) <> Неопределено Тогда
		Поля.Добавить(Поле);
	Иначе
		ПолноеИмяПоля = ?(ДоступныеПоля = Неопределено, "<<?>>", "") + ИмяОбъекта + "."
			+ ?(ДоступныеПоля = Неопределено, "", "<<?>>") + Поле;
		Если ДобавленныеПоля.Получить(НРег(ПолноеИмяПоля)) = Неопределено Тогда
			НенайденныеПоля.Добавить(ПолноеИмяПоля);
			ДобавленныеПоля.Вставить(НРег(ПолноеИмяПоля), Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имена и представления полей основной таблицы, а также вложенные таблицы и их поля.
//
// Параметры:
//  ПолноеИмяТаблицы - Строка
//
// Возвращаемое значение:
//  Структура:
//   * Коллекции - Массив из Структура:
//      ** Имя - Строка  - "Реквизиты", "СтандартныеРеквизиты", "Измерения", "Ресурсы", "Поля",
//                         "ТабличныеЧасти", "СтандартныеТабличныеЧасти".
//      ** Поля          - Массив из см. НовоеОписаниеПоля
//                       - Неопределено - если это коллекция таблиц.
//      ** Таблицы       - Массив из см. НовоеОписаниеТаблицы
//                       - Неопределено - если это коллекция полей.
//   * ВсеПоля - Соответствие из КлючИЗначение:
//      ** Ключ - Строка - имя поля через точку в нижнем регистре, например, "организация", "товары.товар".
//      ** Значение - Строка - имя поля через точку, например, "Организация", "Товары.Товар".
//
//  Неопределено - объект метаданных не найден по полному имени или у него нет таблиц.
//
Функция ПоляТаблицы(Знач ПолноеИмяТаблицы) Экспорт
	
	МетаданныеОбъекта = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ПолноеИмяТаблицы);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(МетаданныеОбъекта.ПолноеИмя(), ".", Ложь);
	ВидОбъекта = ЧастиИмени[0];
	
	Если ЧастиИмени.Количество() = 4 И ВидОбъекта = "ВнешнийИсточникДанных" Тогда
		ВидОбъекта = "ВнешнийИсточникДанныхТаблица";
	КонецЕсли;
	
	КоллекцииОбъекта = КоллекцииОбъектаПоВиду(ВидОбъекта);
	Если КоллекцииОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Коллекции", Новый Массив);
	Результат.Вставить("ВсеПоля", Новый Соответствие);
	
	Для Каждого КоллекцияОбъекта Из КоллекцииОбъекта Цикл
		ОписаниеКоллекции = Новый Структура;
		ОписаниеКоллекции.Вставить("Имя", КоллекцияОбъекта.Имя);
		ОписаниеКоллекции.Вставить("Поля");
		ОписаниеКоллекции.Вставить("Таблицы");
		Результат.Коллекции.Добавить(ОписаниеКоллекции);
		
		Если ЗначениеЗаполнено(КоллекцияОбъекта.Поля) Тогда
			ОписаниеКоллекции.Поля = КоллекцияОбъекта.Поля;
			ДополнитьВсеПоля(Результат.ВсеПоля, ОписаниеКоллекции.Поля);
			Продолжить;
		КонецЕсли;
		
		ЭлементыКоллекции = МетаданныеОбъекта[КоллекцияОбъекта.Имя];
		Если ЗначениеЗаполнено(КоллекцияОбъекта.ИмяКоллекцииПолей) Тогда
			ОписаниеКоллекции.Таблицы = Новый Массив;
			Для Каждого ЭлементКоллекции Из ЭлементыКоллекции Цикл
				ОписаниеТаблицы = НовоеОписаниеТаблицы();
				ОписаниеТаблицы.Имя = ЭлементКоллекции.Имя;
				ОписаниеТаблицы.Представление = ЭлементКоллекции.Представление();
				ОписаниеКоллекции.Таблицы.Добавить(ОписаниеТаблицы);
				ДобавитьПоля(ОписаниеТаблицы.Поля, ЭлементКоллекции[КоллекцияОбъекта.ИмяКоллекцииПолей]);
				ДополнитьВсеПоля(Результат.ВсеПоля, ОписаниеТаблицы.Поля, ОписаниеТаблицы.Имя + ".");
			КонецЦикла;
		Иначе
			ОписаниеКоллекции.Поля = Новый Массив;
			ДобавитьПоля(ОписаниеКоллекции.Поля, ЭлементыКоллекции);
			ДополнитьВсеПоля(Результат.ВсеПоля, ОписаниеКоллекции.Поля);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для функции ПоляТаблицы.
Процедура ДобавитьПоля(ПоляТаблицы, МетаданныеПолейТаблицы)
	
	Для Каждого МетаданныеПоля Из МетаданныеПолейТаблицы Цикл
		ОписаниеПоля = НовоеОписаниеПоля();
		ОписаниеПоля.Имя = МетаданныеПоля.Имя;
		ОписаниеПоля.Представление = МетаданныеПоля.Представление();
		ПоляТаблицы.Добавить(ОписаниеПоля);
	КонецЦикла;
	
КонецПроцедуры

// Для функции ПоляТаблицы.
Процедура ДополнитьВсеПоля(ВсеПоля, Поля, ИмяТаблицы = "")
	
	Для Каждого Поле Из Поля Цикл
		ПолноеИмяПоля = ИмяТаблицы + Поле.Имя;
		ВсеПоля.Вставить(НРег(ПолноеИмяПоля), ПолноеИмяПоля);
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Массив из Структура:
//   * Имя - Строка - имя коллекции.
//   * ИмяКоллекцииПолей - Строка - пустая строка, если Имя - это коллекция полей.
//   * Поля - Неопределено - взять поля из метаданных
//          - Массив из см. ОписаниеПоляТаблицы
//
//  Неопределено - у вида объекта него нет таблиц.
//
Функция КоллекцииОбъектаПоВиду(ВидОбъекта)
	
	Результат = Новый Массив;
	
	Если ВидОбъекта = "ПланОбмена"
	 Или ВидОбъекта = "Справочник"
	 Или ВидОбъекта = "Документ"
	 Или ВидОбъекта = "ПланВидовХарактеристик"
	 Или ВидОбъекта = "ПланВидовХарактеристик"
	 Или ВидОбъекта = "БизнесПроцесс" Тогда
		
		ДобавитьКоллекцию(Результат, "СтандартныеРеквизиты");
		ДобавитьКоллекцию(Результат, "Реквизиты");
		ДобавитьКоллекцию(Результат, "ТабличныеЧасти", "Реквизиты");
		
	ИначеЕсли ВидОбъекта = "Константа" Тогда
		Поля = Новый Массив;
		Поля.Добавить(НовоеОписаниеПоля("Значение", НСтр("ru = 'Значение'")));
		ДобавитьКоллекцию(Результат, "СтандартныеРеквизиты",, Поля);
		
	ИначеЕсли ВидОбъекта = "Последовательность" Тогда
		Поля = Новый Массив;
		Поля.Добавить(НовоеОписаниеПоля("Регистратор",   НСтр("ru = 'Регистратор'")));
		Поля.Добавить(НовоеОписаниеПоля("Период",        НСтр("ru = 'Период'")));
		Поля.Добавить(НовоеОписаниеПоля("МоментВремени", НСтр("ru = 'Момент времени'")));
		ДобавитьКоллекцию(Результат, "СтандартныеРеквизиты",, Поля);
		ДобавитьКоллекцию(Результат, "Измерения");
		
	ИначеЕсли ВидОбъекта = "ЖурналДокументов" Тогда
		ДобавитьКоллекцию(Результат, "СтандартныеРеквизиты");
		ДобавитьКоллекцию(Результат, "Графы");
		
	ИначеЕсли ВидОбъекта = "ПланСчетов"
	      Или ВидОбъекта = "ПланВидовРасчета" Тогда
		
		ДобавитьКоллекцию(Результат, "СтандартныеРеквизиты");
		ДобавитьКоллекцию(Результат, "Реквизиты");
		ДобавитьКоллекцию(Результат, "СтандартныеТабличныеЧасти", "СтандартныеРеквизиты");
		ДобавитьКоллекцию(Результат, "ТабличныеЧасти", "Реквизиты");
		
	ИначеЕсли ВидОбъекта = "РегистрСведений"
	      Или ВидОбъекта = "РегистрНакопления"
	      Или ВидОбъекта = "РегистрБухгалтерии"
	      Или ВидОбъекта = "РегистрРасчета" Тогда
		
		ДобавитьКоллекцию(Результат, "СтандартныеРеквизиты");
		ДобавитьКоллекцию(Результат, "Измерения");
		ДобавитьКоллекцию(Результат, "Ресурсы");
		ДобавитьКоллекцию(Результат, "Реквизиты");
		
	ИначеЕсли ВидОбъекта = "Задача" Тогда
		ДобавитьКоллекцию(Результат, "РеквизитыАдресации");
		ДобавитьКоллекцию(Результат, "Реквизиты");
		ДобавитьКоллекцию(Результат, "ТабличныеЧасти", "Реквизиты");
		
	ИначеЕсли ВидОбъекта = "ВнешнийИсточникДанных" Тогда
		ДобавитьКоллекцию(Результат, "Таблицы", "Поля");
		
	ИначеЕсли ВидОбъекта = "ВнешнийИсточникДанныхТаблица" Тогда
		ДобавитьКоллекцию(Результат, "Поля");
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для функции КоллекцииОбъектаПоВиду.
Процедура ДобавитьКоллекцию(Коллекции, Имя, ИмяКоллекцииПолей = "", Поля = Неопределено)
	
	Коллекция = Новый Структура;
	Коллекция.Вставить("Имя", Имя);
	Коллекция.Вставить("ИмяКоллекцииПолей", ИмяКоллекцииПолей);
	Коллекция.Вставить("Поля", Поля);
	
	Коллекции.Добавить(Коллекция);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//   * Имя - Строка
//   * Представление - Строка
//
Функция НовоеОписаниеПоля(Имя = "", Представление = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Представление", Представление);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//   * Имя - Строка
//   * Представление - Строка
//   * Поля - Массив из см. НовоеОписаниеПоля
//
Функция НовоеОписаниеТаблицы()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", "");
	Результат.Вставить("Представление", "");
	Результат.Вставить("Поля", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Вызывается при переходе на версию конфигурации 2.1.3.16.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииПользователей() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailПользователя";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 1;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонПользователя";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ПеренестиНастройкиДлиныИСложностиПаролейКонфигуратора() Экспорт
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.НастройкиВходаПользователей");
	Если Не РазделениеВключено Тогда
		Блокировка.Добавить("Константа.УдалитьНастройкиВходаПользователей");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		СтарыеНастройки = Неопределено;
		Если Не РазделениеВключено Тогда
			СтарыеНастройки = Константы.УдалитьНастройкиВходаПользователей.Получить().Получить();
			Константы.УдалитьНастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(Неопределено));
		КонецЕсли;
		Если СтарыеНастройки = Неопределено Тогда
			СтарыеНастройки = Константы.НастройкиВходаПользователей.Получить().Получить();
		КонецЕсли;
		
		НовыеНастройки = НастройкиВхода();
		
		Если Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
			НовыеНастройки.Общие.Вставить("ОбновитьТолькоКонстанту");
			НовыеНастройки.Пользователи.Вставить("ОбновитьТолькоКонстанту");
			НовыеНастройки.ВнешниеПользователи.Вставить("ОбновитьТолькоКонстанту");
		КонецЕсли;
		
		Если ТипЗнч(СтарыеНастройки) <> Тип("Структура")
		 Или Не СтарыеНастройки.Свойство("Пользователи") Тогда
			ОписаниеОбщихНастроек = Пользователи.НовоеОписаниеОбщихНастроекВхода();
			НовыеНастройки.Общие.КоличествоПопытокВводаПароляДоБлокировки =
				ОписаниеОбщихНастроек.КоличествоПопытокВводаПароляДоБлокировки;
			НовыеНастройки.Общие.ДлительностьБлокировкиВводаПароля =
				ОписаниеОбщихНастроек.ДлительностьБлокировкиВводаПароля;
		КонецЕсли;
		
		Если ТипЗнч(СтарыеНастройки) = Тип("Структура") Тогда
			Если СтарыеНастройки.Свойство("Пользователи")
			   И ТипЗнч(СтарыеНастройки.Пользователи) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(НовыеНастройки.Пользователи, СтарыеНастройки.Пользователи);
				Пользователи.УстановитьНастройкиВхода(НовыеНастройки.Пользователи);
			КонецЕсли;
			Если СтарыеНастройки.Свойство("ВнешниеПользователи")
			   И ТипЗнч(СтарыеНастройки.ВнешниеПользователи) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(НовыеНастройки.ВнешниеПользователи, СтарыеНастройки.ВнешниеПользователи);
				Пользователи.УстановитьНастройкиВхода(НовыеНастройки.ВнешниеПользователи, Истина);
			КонецЕсли;
			Совпадают = Истина;
			Для Каждого КлючИЗначение Из НовыеНастройки.Пользователи Цикл
				Если КлючИЗначение.Значение <> НовыеНастройки.ВнешниеПользователи[КлючИЗначение.Ключ] Тогда
					Совпадают = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Совпадают Тогда
				НовыеНастройки.Общие.ОтдельныеНастройкиДляВнешнихПользователей = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Пользователи.УстановитьОбщиеНастройкиВхода(НовыеНастройки.Общие);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.4.1.1.
Процедура ДобавитьАдминистраторамПравоОткрытияВнешнихОтчетовИОбработок() Экспорт
	
	ДобавляемаяРоль = Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок;
	РольАдминистратора = Метаданные.Роли.АдминистраторСистемы;
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Если ПользовательИБ.Роли.Содержит(РольАдминистратора)
		   И Не ПользовательИБ.Роли.Содержит(ДобавляемаяРоль) Тогда
			
			ПользовательИБ.Роли.Добавить(ДобавляемаяРоль);
			ПользовательИБ.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при переходе на новую версию конфигурации 2.4.1.1.
Процедура ПереименоватьКлючХраненияРешенияПоОткрытиюВнешнихОтчетовИОбработок() Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.ПараметрыАдминистрированияИБ");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ПараметрыАдминистрированияИБ = Константы.ПараметрыАдминистрированияИБ.Получить().Получить();
		
		Если ТипЗнч(ПараметрыАдминистрированияИБ) = Тип("Структура")
		   И ПараметрыАдминистрированияИБ.Свойство("РазрешеноОткрытиеВнешнихОтчетовИОбработок") Тогда
			
			Если Не ПараметрыАдминистрированияИБ.Свойство("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок")
			   И ТипЗнч(ПараметрыАдминистрированияИБ.РазрешеноОткрытиеВнешнихОтчетовИОбработок) = Тип("Булево")
			   И ПараметрыАдминистрированияИБ.РазрешеноОткрытиеВнешнихОтчетовИОбработок Тогда
				
				ПараметрыАдминистрированияИБ.Вставить("ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок", Истина);
			КонецЕсли;
			ПараметрыАдминистрированияИБ.Удалить("РазрешеноОткрытиеВнешнихОтчетовИОбработок");
			Константы.ПараметрыАдминистрированияИБ.Установить(Новый ХранилищеЗначения(ПараметрыАдминистрированияИБ));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьИерархиюГруппПользователей() Экспорт
	РегистрыСведений.ИерархияГруппПользователей.ОбновитьДанныеРегистра();
	РегистрыСведений.СоставыГруппПользователей.ОбновитьДанныеРегистра();
	РегистрыСведений.СведенияОПользователях.ОбновитьДанныеРегистра();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками пользователей.

// Вызывается из обработки НастройкиПользователей и формирует
// список настроек пользователей.
//
Процедура ЗаполнитьСпискиНастроек(Параметры, АдресХранилища) Экспорт
	
	Если Параметры.ПользовательИнформационнойБазы <> ИмяПользователя()
	   И Не ПравоДоступа("АдминистрированиеДанных", Метаданные) Тогда
		
		ТекстОшибки = НСтр("ru = 'Недостаточно прав для получения настроек пользователя.'");
		ВызватьИсключение(ТекстОшибки, КатегорияОшибки.НарушениеПравДоступа);
	КонецЕсли;
	
	Обработки.НастройкиПользователей.ЗаполнитьСпискиНастроек(Параметры);
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиВнешнегоВида");
	Результат.Вставить("НастройкиОтчетовДерево");
	Результат.Вставить("ПрочиеНастройкиДерево");
	Результат.Вставить("ПользовательскиеВариантыОтчетов");
	
	ЗаполнитьЗначенияСвойств(Результат, Параметры);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие пользовательские настройки.

// См. ПользователиПереопределяемый.ПриПолученииПрочихНастроек
Процедура ПриПолученииПрочихНастроекПользователя(СведенияОПользователе, Настройки) Экспорт
	
	ИнтеграцияПодсистемБСП.ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки);
	ПользователиПереопределяемый.ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки);
	
КонецПроцедуры

Процедура ПриСохраненииПрочихНастроекПользователя(СведенияОПользователе, Настройки) Экспорт
	
	ИнтеграцияПодсистемБСП.ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки);
	ПользователиПереопределяемый.ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки);
	
КонецПроцедуры

Процедура ПриУдаленииПрочихНастроекПользователя(СведенияОПользователе, Настройки) Экспорт
	
	ИнтеграцияПодсистемБСП.ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки);
	ПользователиПереопределяемый.ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки);
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Объект - Строка
//   * Идентификатор - Строка
//
Функция НовоеОписаниеНастройки() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// При первом запуске подчиненного узла очищает идентификаторы
// пользователей ИБ, скопированные при создании начального образа.
//
Процедура ОчиститьИдентификаторыНесуществующихПользователейИБ()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ПустойУникальныйИдентификатор = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ПустойУникальныйИдентификатор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВнешниеПользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Выборка.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ИдентификаторПользователяИБ = ПустойУникальныйИдентификатор;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представление внешнего пользователя при изменении представления его объекта авторизации,
// а также помечает, как недействительного, если объект авторизации помечен на удаление.
//
Процедура ОбновитьВнешнегоПользователя(СсылкаНаОбъектАвторизации, ПометкаУдаленияОбъектаАвторизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка КАК Ссылка,
	|	ВнешниеПользователи.Наименование КАК Наименование,
	|	ВнешниеПользователи.Недействителен КАК Недействителен,
	|	ВнешниеПользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ОбъектАвторизации = &СсылкаНаОбъектАвторизации
	|	И (ВнешниеПользователи.Недействителен = ЛОЖЬ
	|			ИЛИ &ПометкаУдаленияОбъектаАвторизации)");
	
	Запрос.УстановитьПараметр("СсылкаНаОбъектАвторизации",            СсылкаНаОбъектАвторизации);
	Запрос.УстановитьПараметр("ПометкаУдаленияОбъектаАвторизации",    ПометкаУдаленияОбъектаАвторизации);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
					
					ПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
					Если ПользователяИБ <> Неопределено Тогда
						
						МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
						
						АдресЭлектроннойПочты = МодульУправлениеКонтактнойИнформацией.НовыйАдресПочтыДляВосстановленияПароля(
							СсылкаНаОбъектАвторизации, ПользователяИБ.АдресЭлектроннойПочты);
						Если АдресЭлектроннойПочты <> Неопределено Тогда
							ПользователяИБ.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
							Пользователи.УстановитьСвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ, ПользователяИБ);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Строка(СсылкаНаОбъектАвторизации) <> Выборка.Наименование Тогда
			
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнешниеПользователи");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
				
				ВнешнийПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВнешнийПользовательОбъект.Наименование = Строка(СсылкаНаОбъектАвторизации);
				Если ПометкаУдаленияОбъектаАвторизации И ВнешнийПользовательОбъект.Недействителен = Ложь Тогда
					ВнешнийПользовательОбъект.Недействителен = Истина;
					Если Пользователи.ВходВПрограммуРазрешен(ВнешнийПользовательОбъект.ИдентификаторПользователяИБ) Тогда
						ВнешнийПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ",
							Новый Структура("Действие, ВходВПрограммуРазрешен", "Записать", Ложь));
					КонецЕсли;
				КонецЕсли;
				ВнешнийПользовательОбъект.Записать();
			КонецЕсли;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ШаблонТекстаОшибкиЗаписиСведенийОТекущемПользователе()
	
	Возврат
		НСтр("ru = 'Не удалось записать сведения о текущем пользователе по причине:
		           |%1
		           |
		           |Обратитесь к администратору.'");
	
КонецФункции

Функция ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
	
	Возврат НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.'")
		+ Символы.ПС + Символы.ПС;
	
КонецФункции

Функция ЗначенияПараметровСеансаТекущийПользователь()
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат ТекстСообщенияТекущийПользовательНедоступенВСеансеБезРазделителей();
	КонецЕсли;
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить параметр сеанса %1.'"),
		"ТекущийПользователь") + Символы.ПС;
	
	НачатьТранзакцию();
	Попытка
		СведенияОПользователе = НайтиТекущегоПользователяВСправочнике();
		
		Если СведенияОПользователе.СоздатьПользователя Тогда
			СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не СведенияОПользователе.СоздатьПользователя
	   И Не СведенияОПользователе.ПользовательНайден Тогда
		
		Возврат ЗаголовокОшибки + ТекстСообщенияПользовательНеНайденВСправочнике(
			СведенияОПользователе.ИмяПользователя);
	КонецЕсли;
	
	Если СведенияОПользователе.ТекущийПользователь        = Неопределено
	 Или СведенияОПользователе.ТекущийВнешнийПользователь = Неопределено Тогда
		
		Возврат ЗаголовокОшибки + ТекстСообщенияПользовательНеНайденВСправочнике(
				СведенияОПользователе.ИмяПользователя) + Символы.ПС
			+ НСтр("ru = 'Возникла внутренняя ошибка при поиске пользователя.'");
	КонецЕсли;
	
	Значения = Новый Структура;
	Значения.Вставить("ТекущийПользователь",        СведенияОПользователе.ТекущийПользователь);
	Значения.Вставить("ТекущийВнешнийПользователь", СведенияОПользователе.ТекущийВнешнийПользователь);
	
	Возврат Значения;
	
КонецФункции

Функция ТекстСообщенияТекущийПользовательНедоступенВСеансеБезРазделителей()
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Недопустимое получение параметра сеанса %1
		           |в сеансе без указания всех разделителей.'"),
		"ТекущийПользователь");
	
КонецФункции

Функция НайтиТекущегоПользователяВСправочнике()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяПользователя",             Неопределено);
	Результат.Вставить("ПолноеИмяПользователя",       Неопределено);
	Результат.Вставить("ИдентификаторПользователяИБ", Неопределено);
	Результат.Вставить("ПользовательНайден",          Ложь);
	Результат.Вставить("СоздатьПользователя",         Ложь);
	Результат.Вставить("СсылкаНового",                Неопределено);
	Результат.Вставить("Служебный",                   Ложь);
	Результат.Вставить("ТекущийПользователь",         Неопределено);
	Результат.Вставить("ТекущийВнешнийПользователь",  Справочники.ВнешниеПользователи.ПустаяСсылка());
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
		
		Результат.ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
		Результат.СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
		
		Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
			Результат.СоздатьПользователя = Истина;
			Результат.Служебный = Истина;
			Результат.ИдентификаторПользователяИБ = "";
		Иначе
			Результат.ПользовательНайден = Истина;
			Результат.ТекущийПользователь = СвойстваНеуказанногоПользователя.Ссылка;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;

	Результат.ИмяПользователя             = ТекущийПользовательИБ.Имя;
	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	
	Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено, Результат.ИдентификаторПользователяИБ);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", Результат.ИдентификаторПользователяИБ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнешниеПользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Не ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
			ВызватьИсключение НСтр("ru = 'Внешние пользователи отключены.'");
		КонецЕсли;
		
		Результат.ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
		Результат.ТекущийВнешнийПользователь = Выборка.Ссылка;
		
		Результат.ПользовательНайден = Истина;
		Возврат Результат;
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.ТекущийПользователь = Выборка.Ссылка;
		Результат.ПользовательНайден = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриОтсутствииТекущегоПользователяВСправочнике(
		Результат.СоздатьПользователя);
	
	Если Не Результат.СоздатьПользователя
	   И Не РолиАдминистратораДоступны() Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	Результат.ПолноеИмяПользователя       = ТекущийПользовательИБ.ПолноеИмя;
	
	Если Результат.СоздатьПользователя Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПользовательПоНаименованию = СсылкаПользователяПоПолномуНаименованию(
		Результат.ПолноеИмяПользователя);
	
	Если ПользовательПоНаименованию <> Неопределено Тогда
		Результат.ПользовательНайден  = Истина;
		Результат.ТекущийПользователь = ПользовательПоНаименованию;
	Иначе
		Результат.СоздатьПользователя = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьТекущегоПользователяВСправочнике(СведенияОПользователе)
	
	НачатьТранзакцию();
	Попытка
		Если СведенияОПользователе.СсылкаНового = Неопределено Тогда
			СведенияОПользователе.СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		КонецЕсли;
		
		СведенияОПользователе.ТекущийПользователь = СведенияОПользователе.СсылкаНового;
		
		ПараметрыСеанса.ТекущийПользователь        = СведенияОПользователе.ТекущийПользователь;
		ПараметрыСеанса.ТекущийВнешнийПользователь = СведенияОПользователе.ТекущийВнешнийПользователь;
		ПараметрыСеанса.АвторизованныйПользователь = СведенияОПользователе.ТекущийПользователь;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Служебный    = СведенияОПользователе.Служебный;
		НовыйПользователь.Наименование = СведенияОПользователе.ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СведенияОПользователе.СсылкаНового);
		
		Если ЗначениеЗаполнено(СведенияОПользователе.ИдентификаторПользователяИБ) Тогда
			
			ОписаниеПользователяИБ = Новый Структура;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",
				СведенияОПользователе.ИдентификаторПользователяИБ);
			
			НовыйПользователь.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		КонецЕсли;
		
		ИнтеграцияПодсистемБСП.ПриАвтоматическомСозданииТекущегоПользователяВСправочнике(
			НовыйПользователь);
		
		НовыйПользователь.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОчищаемыеПараметры = Новый Массив;
		ОчищаемыеПараметры.Добавить("ТекущийПользователь");
		ОчищаемыеПараметры.Добавить("ТекущийВнешнийПользователь");
		ОчищаемыеПараметры.Добавить("АвторизованныйПользователь");
		ПараметрыСеанса.Очистить(ОчищаемыеПараметры);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	Если ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		ШаблонСообщенияОбОшибке =
			НСтр("ru = 'Пользователь ""%1"" не существует в справочниках
			           |""Пользователи"" и ""Внешние пользователи"".
			           |
			           |Обратитесь к администратору.'");
	Иначе
		ШаблонСообщенияОбОшибке =
			НСтр("ru = 'Пользователь ""%1"" не существует в справочнике ""Пользователи"".
			           |
			           |Обратитесь к администратору.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, ИмяПользователя);
	
КонецФункции

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	Результат = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если НЕ Пользователи.ПользовательИБЗанят(Выборка.ИдентификаторПользователяИБ) Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатУстановкиПараметровСеанса(РегистрироватьВЖурнале)
	
	Попытка
		Пользователи.АвторизованныйПользователь();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке,
			, РегистрироватьВЖурнале);
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция КраткоеПредставлениеОшибкиАвторизацииПослеРегистрацииВЖурнале(ИнформацияОбОшибке, ШаблонОшибки = "", РегистрироватьВЖурнале = Истина)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		КраткоеПредставление   = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		КраткоеПредставление   = ИнформацияОбОшибке;
		ПодробноеПредставление = ИнформацияОбОшибке;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонОшибки) Тогда
		КраткоеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПодробноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;
	
	КраткоеПредставление   = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки() + КраткоеПредставление;
	ПодробноеПредставление = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки() + ПодробноеПредставление;
	
	Если РегистрироватьВЖурнале Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкаВходаВПрограммуДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ИмяСобытияОшибкаВходаВПрограммуДляЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Пользователи.Ошибка входа в приложение'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Для процедуры ОбновитьИерархиюГрупп.
Процедура ЗаписатьНовыхРодителейГруппы(СтрокиДерева, НовыеРодители, Знач УровеньРодителя,
			ИзмененияСоставов, Проверять, ВышестоящаяГруппа = Неопределено)
	
	УровеньРодителя = УровеньРодителя + 1;
	НоваяСтрока = НовыеРодители.Добавить();
	
	// АПК:1327-выкл Блокировка уже установлена в вызывающей процедуре ОбновитьИерархиюГрупп.
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Ссылка = ВышестоящаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока.Родитель = СтрокаДерева.Ссылка;
		НоваяСтрока.УровеньРодителя = УровеньРодителя;
		НовыеРодители.ЗаполнитьЗначения(СтрокаДерева.Ссылка, "ГруппаПользователей");
		НовыеРодители.ЗаполнитьЗначения(УровеньРодителя, "УровеньГруппы");
		
		ЕстьИзменения = Не Проверять;
		Если Проверять Тогда
			НаборЗаписей = РегистрыСведений.ИерархияГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(СтрокаДерева.Ссылка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = НовыеРодители.Количество() Тогда
				Отбор = Новый Структура("ГруппаПользователей, Родитель, УровеньРодителя, УровеньГруппы");
				Для Каждого Запись Из НаборЗаписей Цикл
					ЗаполнитьЗначенияСвойств(Отбор, Запись);
					Если НовыеРодители.НайтиСтроки(Отбор).Количество() <> 1 Тогда
						ЕстьИзменения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			НаборЗаписей = РегистрыСведений.ИерархияГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГруппаПользователей.Установить(СтрокаДерева.Ссылка);
			НаборЗаписей.Загрузить(НовыеРодители);
			НаборЗаписей.Записать();
			ИзмененияСоставов.ИзмененныеГруппы.Вставить(СтрокаДерева.Ссылка);
		КонецЕсли;
		ЗаписатьНовыхРодителейГруппы(СтрокаДерева.Строки,
			НовыеРодители, УровеньРодителя, ИзмененияСоставов, Проверять, СтрокаДерева.Ссылка);
	КонецЦикла;
	// АПК:1327-вкл
	
	НовыеРодители.Удалить(НоваяСтрока);
	
КонецПроцедуры

// Параметры:
//  ПользовательИлиГруппа - СправочникСсылка.ГруппыПользователей
//                        - СправочникСсылка.ГруппыВнешнихПользователей
//                        - СправочникСсылка.Пользователи
//                        - СправочникСсылка.ВнешниеПользователи
//
//  ИзмененияСоставов - см. НовыеИзмененияСоставовГрупп
//
Процедура ОбновитьСоставПередУдалениемГруппыБезИерархииИлиПользователя(ПользовательИлиГруппа, ИзмененияСоставов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		ИмяПоля = "Пользователь";
	Иначе
		ИмяПоля = "ГруппаПользователей";
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	ЭлементБлокировки.УстановитьЗначение(ИмяПоля, ПользовательИлиГруппа);
	
	УчастникиИзменений = ИзмененияСоставов.УчастникиИзменений;
	ИзмененныеГруппы   = ИзмененияСоставов.ИзмененныеГруппы;
	ДляРегистрации     = ИзмененияСоставов.ДляРегистрации;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоСтандартноеОбновлениеРегистра");
		НаборЗаписей.Отбор[ИмяПоля].Установить(ПользовательИлиГруппа);
		НаборЗаписей.Прочитать();
		Индекс = НаборЗаписей.Количество();
		ЕстьИзменения = Индекс > 0;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Запись = НаборЗаписей.Получить(Индекс);
			УчастникиИзменений.Вставить(Запись.Пользователь);
			ИзмененныеГруппы.Вставить(Запись.ГруппаПользователей);
			Если ДляРегистрации <> Неопределено Тогда
				ДобавитьИзменениеСостава(ДляРегистрации, Запись, Истина);
			КонецЕсли;
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет права указанного пользователя ИБ.
//
// Параметры:
//  ПользовательИБ         - ПользовательИнформационнойБазы - проверяемый пользователь.
//  РежимПроверки          - Строка - ПриЗаписи или ПриЗапуске.
//  ЭтоВнешнийПользователь - Булево - проверять права для внешнего пользователя.
//  ВызыватьИсключение     - Булево - вызвать исключение вместо возврата текста ошибки.
//  РегистрироватьВЖурнале - Булево - записать ошибку в журнал регистрации,
//                                    когда ВызыватьИсключение указано Ложь.
//
// Возвращаемое значение:
//  Строка - текст ошибки, когда ВызыватьИсключение указано Ложь.
//
Функция ПроверитьПраваПользователя(ПользовательИБ, РежимПроверки, ЭтоВнешнийПользователь,
			ВызыватьИсключение = Истина, РегистрироватьВЖурнале = Истина)
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено И ПользовательИБ.РазделениеДанных.Количество() = 0 Тогда
		Возврат ""; // Не нужно проверять неразделенных пользователей в модели сервиса.
	КонецЕсли;
	
	Если Не РазделениеВключено И РежимПроверки = "ПриЗапуске" И Не ЭтоВнешнийПользователь Тогда
		Возврат ""; // Не нужно проверять права пользователей при запуске в локальном режиме.
	КонецЕсли;
	
	
	НедоступныеРоли = НедоступныеРолиПоТипуПользователя(ЭтоВнешнийПользователь);
	
	РолиДляПроверки = Новый ТаблицаЗначений;
	РолиДляПроверки.Колонки.Добавить("Роль", Новый ОписаниеТипов("ОбъектМетаданных"));
	Для Каждого Роль Из ПользовательИБ.Роли Цикл
		РолиДляПроверки.Добавить().Роль = Роль;
	КонецЦикла;
	РолиДляПроверки.Индексы.Добавить("Роль");
	
	Если Не РазделениеВключено И РежимПроверки = "ПередЗаписью" Тогда
		
		ПрежнийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ПользовательИБ.УникальныйИдентификатор);
		
		Если ПрежнийПользовательИБ <> Неопределено Тогда
			Для Каждого Роль Из ПрежнийПользовательИБ.Роли Цикл
				Строка = РолиДляПроверки.Найти(Роль, "Роль");
				Если Строка <> Неопределено Тогда
					РолиДляПроверки.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДобавляемыеНедоступныеРоли = "";
	НазначениеРолей = Неопределено;
	
	Для Каждого ОписаниеРоли Из РолиДляПроверки Цикл
		Роль = ОписаниеРоли.Роль;
		ИмяРоли = Роль.Имя;
		
		Если НедоступныеРоли.Получить(ИмяРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НазначениеРолей = Неопределено Тогда
			НазначениеРолей = ПользователиСлужебныйПовтИсп.НазначениеРолей();
		КонецЕсли;
		
		Если НазначениеРолей.ТолькоДляАдминистраторовСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для администраторов системы)'");
		
		ИначеЕсли РазделениеВключено
		        И НазначениеРолей.ТолькоДляПользователейСистемы.Получить(ИмяРоли) <> Неопределено Тогда
			
			ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для пользователей системы)'");
			
		ИначеЕсли НазначениеРолей.ТолькоДляВнешнихПользователей.Получить(ИмяРоли) <> Неопределено Тогда
			ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для внешних пользователей)'");
			
		Иначе // Это внешний пользователь.
			ТекстШаблона = НСтр("ru = '""%1"" (предназначена только для пользователей)'");
		КонецЕсли;
		
		ДобавляемыеНедоступныеРоли = ДобавляемыеНедоступныеРоли
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, Роль.Представление()) + Символы.ПС;
	КонецЦикла;
	
	ДобавляемыеНедоступныеРоли = СокрЛП(ДобавляемыеНедоступныеРоли);
	
	Если Не ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		Возврат "";
	КонецЕсли;
	
	Если РежимПроверки = "ПриЗапуске" Тогда
		Если ВызыватьИсключение Или РегистрироватьВЖурнале Тогда
			Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 Тогда
				ТекстРегистрацииВхода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Попытка входа пользователя %1 с недоступной ролью:
					           |%2.'"),
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
			Иначе
				ТекстРегистрацииВхода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Попытка входа пользователя %1 с недоступными ролями:
					           |%2.'"),
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
			КонецЕсли;
			ЗаписьЖурналаРегистрации(ИмяСобытияОшибкаВходаВПрограммуДляЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ, ТекстРегистрацииВхода);
		КонецЕсли;
		
		ТекстСообщенияВхода =
			НСтр("ru = 'Невозможно выполнить вход из-за наличия недоступных ролей.
			           |Обратитесь к администратору.'");
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщенияВхода;
		Иначе
			Возврат ТекстСообщенияВхода;
		КонецЕсли;
	КонецЕсли;
	
	Если ВызыватьИсключение Или РегистрироватьВЖурнале Тогда
		Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
			ТекстРегистрацииДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка назначить пользователю %1 недоступную роль:
				           |%2.'"),
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
				
		ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
			ТекстРегистрацииДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка назначить пользователю %1 недоступные роли:
				           |%2.'"),
				ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		Иначе
			ТекстРегистрацииДобавления = "";
		КонецЕсли;
		ИмяСобытия = НСтр("ru = 'Пользователи.Ошибка при установке ролей пользователю ИБ'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПользовательИБ,
			ТекстРегистрацииДобавления);
	КонецЕсли;
	
	Если СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) = 1 И ЗначениеЗаполнено(ДобавляемыеНедоступныеРоли) Тогда
		ТекстСообщенияДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю ""%1"" невозможно назначить недоступную роль:
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
		
	ИначеЕсли СтрЧислоСтрок(ДобавляемыеНедоступныеРоли) > 1 Тогда
		ТекстСообщенияДобавления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователю ""%1"" невозможно назначить недоступные роли:
			           |%2.'"),
			ПользовательИБ.ПолноеИмя, ДобавляемыеНедоступныеРоли);
	Иначе
		ТекстСообщенияДобавления = "";
	КонецЕсли;
	
	Если ВызыватьИсключение Тогда
		ВызватьИсключение ТекстСообщенияДобавления;
	Иначе
		Возврат ТекстСообщенияДобавления;
	КонецЕсли;
	
КонецФункции

Функция СписокНастроек(ИмяПользователяИБ, МенеджерНастроек)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("КлючОбъекта");
	ТаблицаНастроек.Колонки.Добавить("КлючНастроек");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ИмяПользователяИБ);
	
	ВыборкаНастроек = МенеджерНастроек.Выбрать(Отбор);
	Пропустить = Ложь;
	Пока СледующаяНастройка(ВыборкаНастроек, Пропустить) Цикл
		
		Если Пропустить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.КлючОбъекта = ВыборкаНастроек.КлючОбъекта;
		НоваяСтрока.КлючНастроек = ВыборкаНастроек.КлючНастроек;
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СледующаяНастройка(ВыборкаНастроек, Пропустить) 
	
	Попытка 
		Пропустить = Ложь;
		Возврат ВыборкаНастроек.Следующий();
	Исключение
		Пропустить = Истина;
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура СкопироватьНастройки(МенеджерНастроек, ИмяПользователяИсточник, ИмяПользователяПриемник, Переносить)
	
	ТаблицаНастроек = СписокНастроек(ИмяПользователяИсточник, МенеджерНастроек);
	
	Для Каждого Настройка Из ТаблицаНастроек Цикл
		КлючОбъекта = Настройка.КлючОбъекта;
		КлючНастроек = Настройка.КлючНастроек;
		Попытка
			Значение = МенеджерНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователяИсточник);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При копировании настройки от пользователя ""%1""
				           |пользователю ""%2""
				           |с ключом объекта ""%3"" и
				           |ключом настроек ""%4""
				           |не удалось загрузить значение настройки по причине:
				           |%5'"),
				ИмяПользователяИсточник,
				ИмяПользователяПриемник,
				КлючОбъекта,
				КлючНастроек,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Копирование настроек'",
				     ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				Комментарий);
			ВозможноПродолжить = Истина;
			Попытка
				Справочники.Пользователи.НайтиПоНаименованию(Строка(Новый УникальныйИдентификатор()), Истина);
			Исключение
				ВозможноПродолжить = Ложь;
			КонецПопытки;
			Если ВозможноПродолжить Тогда
				Продолжить;
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось скопировать настройку пользователю по причине:
				           |%1
				           |
				           |Подробности записаны в журнал регистрации.'"),
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		ОписаниеНастроек = МенеджерНастроек.ПолучитьОписание(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		МенеджерНастроек.Сохранить(КлючОбъекта, КлючНастроек, Значение,
			ОписаниеНастроек, ИмяПользователяПриемник);
		Если Переносить Тогда
			МенеджерНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователяИсточник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПрочиеПользовательскиеНастройки(ИмяПользователяИсточник, ИмяПользователяПриемник)
	
	ПользовательИсточникСсылка = Пользователи.НайтиПоИмени(ИмяПользователяИсточник);
	ПользовательПриемникСсылка = Пользователи.НайтиПоИмени(ИмяПользователяПриемник);
	СведенияОПользователеИсточнике = Новый Структура;
	СведенияОПользователеИсточнике.Вставить("ПользовательСсылка", ПользовательИсточникСсылка);
	СведенияОПользователеИсточнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИсточник);
	
	СведенияОПользователеПриемнике = Новый Структура;
	СведенияОПользователеПриемнике.Вставить("ПользовательСсылка", ПользовательПриемникСсылка);
	СведенияОПользователеПриемнике.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяПриемник);
	
	// Получение прочих настроек.
	ПрочиеНастройкиПользователей = Новый Структура; // см. ПриПолученииПрочихНастроекПользователя.Настройки
	ПриПолученииПрочихНастроекПользователя(СведенияОПользователеИсточнике, ПрочиеНастройкиПользователей);
	Ключи = Новый СписокЗначений;
	
	Если ПрочиеНастройкиПользователей.Количество() <> 0 Тогда
		
		Для Каждого ПрочаяНастройка Из ПрочиеНастройкиПользователей Цикл
			ПрочиеНастройкиСтруктура = Новый Структура;
			Если ПрочаяНастройка.Ключ = "НастройкаБыстрогоДоступа" Тогда
				СписокНастроек = ПрочаяНастройка.Значение.СписокНастроек; // См. НовоеОписаниеНастройки
				Для Каждого Элемент Из СписокНастроек Цикл
					Ключи.Добавить(Элемент.Объект, Элемент.Идентификатор);
				КонецЦикла;
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", "НастройкаБыстрогоДоступа");
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", Ключи);
			Иначе
				ПрочиеНастройкиСтруктура.Вставить("ИдентификаторНастройки", ПрочаяНастройка.Ключ);
				ПрочиеНастройкиСтруктура.Вставить("ЗначениеНастройки", ПрочаяНастройка.Значение.СписокНастроек);
			КонецЕсли;
			ПриСохраненииПрочихНастроекПользователя(СведенияОПользователеПриемнике, ПрочиеНастройкиСтруктура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует настройки пользователя.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи
//                     - СправочникОбъект.ВнешниеПользователи
//  ПараметрыОбработки - Структура:
//    * ОписаниеНовогоПользователяИБ - см. Пользователи.НовоеОписаниеПользователяИБ
//
Процедура СкопироватьНастройкиПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	Если НЕ ПараметрыОбработки.Свойство("ЗначениеКопирования")
	 ИЛИ НЕ ПараметрыОбработки.НовыйПользовательИБСуществует Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяНовогоПользователяИБ = ПараметрыОбработки.ОписаниеНовогоПользователяИБ.Имя;
	
	ИдентификаторКопируемогоПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыОбработки.ЗначениеКопирования, "ИдентификаторПользователяИБ");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКопируемогоПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОписаниеКопируемогоПользователяИБ = Пользователи.СвойстваПользователяИБ(ИдентификаторКопируемогоПользователяИБ);
	Если ОписаниеКопируемогоПользователяИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяКопируемогоПользователяИБ = ОписаниеКопируемогоПользователяИБ.Имя;
	
	// Копирование настроек.
	СкопироватьНастройкиПользователя(ИмяКопируемогоПользователяИБ, ИмяНовогоПользователяИБ, Ложь);
	
КонецПроцедуры

Процедура ПроверитьСоставПравРолей(НедоступныеПрава, ОписаниеРолей, ОбщийТекстОшибки, ЗаголовокОшибки, СписокОшибок, НеразделенныеДанные = Неопределено)
	
	ТекстОшибки = "";
	
	Для Каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Роль = ОписаниеРоли.Ключ;
		Для Каждого НедоступноеПраво Из НедоступныеПрава Цикл
			Если ПравоДоступа(НедоступноеПраво, Метаданные, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит недоступное право %2.'"),
					Роль, НедоступноеПраво);
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(Роль, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НеразделенныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СвойстваДанных Из НеразделенныеДанные Цикл
			ОбъектМетаданных = СвойстваДанных.Значение;
			Если Не ПравоДоступа("Чтение", ОбъектМетаданных, Роль) Тогда
				Продолжить;
			КонецЕсли;
			Если ПравоДоступа("Изменение", ОбъектМетаданных, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит право Изменение неразделенного объекта %2.'"),
					Роль, ОбъектМетаданных.ПолноеИмя());
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(ОбъектМетаданных, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Если СвойстваДанных.Представление = "" Тогда
				Продолжить; // Не ссылочный объект метаданных.
			КонецЕсли;
			Если ПравоДоступа("Добавление", ОбъектМетаданных, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит право Добавление неразделенного объекта %2.'"),
					Роль, ОбъектМетаданных.ПолноеИмя());
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(ОбъектМетаданных, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Если ПравоДоступа("Удаление", ОбъектМетаданных, Роль) Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" содержит право Удаление неразделенного объекта %2.'"),
					Роль, ОбъектМетаданных.ПолноеИмя());
				Если СписокОшибок = Неопределено Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОписаниеОшибки;
				Иначе
					СписокОшибок.Добавить(ОбъектМетаданных, ЗаголовокОшибки + Символы.ПС + ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + Символы.ПС
			+ ЗаголовокОшибки + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция НеразделенныеДанные()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	
	ВидыМетаданных = Новый Массив;
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыОбмена,             Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Константы,               Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Справочники,             Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Последовательности,      Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Документы,               Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыВидовХарактеристик, Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыСчетов,             Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.ПланыВидовРасчета,       Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.БизнесПроцессы,          Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.Задачи,                  Истина));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыСведений,        Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыНакопления,      Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыБухгалтерии,     Ложь));
	ВидыМетаданных.Добавить(Новый Структура("Вид, Ссылочный" , Метаданные.РегистрыРасчета,         Ложь));
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	МодельДанных = МодульРаботаВМоделиСервиса.ПолучитьМодельДанныхОбласти();
	
	РазделенныеОбъектыМетаданных = Новый Соответствие;
	Для Каждого ЭлементМоделиДанных Из МодельДанных Цикл
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ЭлементМоделиДанных.Ключ);
		РазделенныеОбъектыМетаданных.Вставить(ОбъектМетаданных, Истина);
	КонецЦикла;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	Для Каждого ОписаниеВида Из ВидыМетаданных Цикл // По видам метаданных.
		Для Каждого ОбъектМетаданных Из ОписаниеВида.Вид Цикл // По объектам вида.
			Если РазделенныеОбъектыМетаданных.Получить(ОбъектМетаданных) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДоступноИспользованиеРазделенныхДанных Тогда
				РасширениеКонфигурации = ОбъектМетаданных.РасширениеКонфигурации();
				Если РасширениеКонфигурации <> Неопределено
				   И (Не РазделениеВключено
				      Или РасширениеКонфигурации.ОбластьДействия = ОбластьДействияРасширенияКонфигурации.РазделениеДанных) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Список.Добавить(ОбъектМетаданных, ?(ОписаниеВида.Ссылочный, "Ссылочный", ""));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция КлючПредупрежденияБезопасностиПриЗапуске()
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		Возврат Неопределено; // В базе без пользователей предупреждение не требуется.
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Неопределено; // В модели сервиса предупреждение не требуется.
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		Возврат Неопределено; // С ключом запуска "/UsePrivilegedMode" предупреждение не требуется.
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Возврат Неопределено; // В подчиненных узлах предупреждение не требуется.
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПривилегированныйРежим() Тогда
		Возврат Неопределено; // В безопасном режиме предупреждение не требуется.
	КонецЕсли;
	
	ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
	РешениеПринято = ПараметрыАдминистрирования.ПринятоРешениеПоОткрытиюВнешнихОтчетовИОбработок;
	Если ТипЗнч(РешениеПринято) <> Тип("Булево") Тогда
		РешениеПринято = Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтоАдминистраторСистемы = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	Если ЭтоАдминистраторСистемы И Не РешениеПринято Тогда
		Возврат ПользователиСлужебныйКлиентСервер.ВидыПредупрежденийБезопасности().ПослеОбновления;
	КонецЕсли;
	
	Если РешениеПринято Тогда
		Если ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОбработок", Метаданные)
		 Или ПравоДоступа("ИнтерактивноеОткрытиеВнешнихОтчетов", Метаданные) Тогда
			
			ПользовательОзнакомлен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ПредупреждениеБезопасности", "ПользовательОзнакомлен", Ложь);
			
			Если Не ПользовательОзнакомлен Тогда
				Возврат ПользователиСлужебныйКлиентСервер.ВидыПредупрежденийБезопасности().ПослеПоявленияПрава;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//   * ТолькоДляАдминистраторовСистемы - Соответствие из КлючИЗначение:
//      ** Ключ     - ОбъектМетаданных - роль.
//      ** Значение - Булево - Истина.
//   * ТолькоДляПользователейСистемы - Соответствие из КлючИЗначение:
//      ** Ключ     - ОбъектМетаданных - роль.
//      ** Значение - Булево - Истина.
//   * ТолькоДляВнешнихПользователей - Соответствие из КлючИЗначение:
//      ** Ключ     - ОбъектМетаданных - роль.
//      ** Значение - Булево - Истина.
//   * СовместноДляПользователейИВнешнихПользователей - Соответствие из КлючИЗначение:
//      ** Ключ     - ОбъектМетаданных - роль.
//      ** Значение - Булево - Истина.
//
Функция НазначениеРолей()
	Возврат Новый Структура;
КонецФункции

// Параметры:
//   * Имя - Строка - имя внешнего реквизита
//   * Представление - Строка - представление внешнего реквизита
//   * ТипЗначения - ОписаниеТипов
//   * Служебный - Булево
//
// Возвращаемое значение:
//  Структура:
//   * Имя - Строка - имя внешнего реквизита
//   * Представление - Строка - представление внешнего реквизита
//   * ТипЗначения - ОписаниеТипов
//   * Служебный - Булево
//
Функция НовыйВнешнийРеквизит(Имя, Представление, ТипЗначения, Служебный = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("ТипЗначения", ТипЗначения);
	Результат.Вставить("Служебный", Служебный);
	
	Возврат Результат;
	
КонецФункции

Функция ПрефиксВнешнегоРеквизита()
	Возврат "Пользователи" + "_";
КонецФункции

Функция ИмяСобытияИзменениеНастроекВходаДополнительноДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Пользователи.Изменение настроек входа (дополнительно)'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными РИБ.

// Для процедур ПриОтправкеДанныхГлавному, ПриОтправкеДанныхПодчиненному,
// ПриПолученииДанныхОтГлавного, ПриПолученииДанныхОтПодчиненного.
//
Функция ОбъектПодсистемыПользователиТолькоДляСозданияНачальногоОбраза(ЭлементДанных)
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ИерархияГруппПользователей")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.СоставыГруппПользователей");
	
КонецФункции

// Переопределяет стандартное поведение при выгрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится.
//
Процедура ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Подчиненному, СозданиеНачальногоОбраза)
	
	Если СозданиеНачальногоОбраза Тогда
		// Частичное изменение объектов при создании начального образа не поддерживается,
		// обработку смотри в процедуре ПриНастройкеПодчиненногоУзлаРИБ.
		Возврат;
	КонецЕсли;
	
	// Стандартная обработка не переопределяется.
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
	 Или ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектПодсистемыПользователиТолькоДляСозданияНачальногоОбраза(ЭлементДанных) Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		Возврат;
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	
	Если ТипЭлемента = Тип("СправочникОбъект.Пользователи")
	 Или ТипЭлемента = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		
		ЭлементДанных.ИдентификаторПользователяИБ = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		
		ЭлементДанных.Подготовлен = Ложь;
		ЭлементДанных.УдалитьСвойстваПользователяИБ = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет стандартное поведение при загрузке данных.
// Реквизит ИдентификаторПользователяИБ не переносится, т.к. всегда
// относится к пользователю текущей информационной базы или не заполнен.
//
Процедура ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, ОтПодчиненного)
	
	// Стандартная обработка не переопределяется.
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектПодсистемыПользователиТолькоДляСозданияНачальногоОбраза(ЭлементДанных) Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		Возврат;
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	
	Если ОтПодчиненного И ОбщегоНазначения.РазделениеВключено() Тогда
		Если ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьВнешнихПользователей")
		 Или ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыПользователей")
		 Или ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыВнешнихПользователей")
		 Или ТипЭлемента = Тип("СправочникОбъект.Пользователи")
		 Или ТипЭлемента = Тип("СправочникОбъект.ГруппыПользователей")
		 Или ТипЭлемента = Тип("СправочникОбъект.ВнешниеПользователи")
		 Или ТипЭлемента = Тип("СправочникОбъект.ГруппыВнешнихПользователей") Тогда
			// Получение данных из автономного рабочего места пропускается, а для соответствия
			// данных в узлах, текущие данные отправляются обратно в автономное рабочее место.
			ОтправкаНазад = Истина;
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ОтПодчиненного Тогда
		Если ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьВнешнихПользователей")
		 Или ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыПользователей")
		 Или ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьГруппыВнешнихПользователей") Тогда
			// Получение данных из подчиненного узла пропускается, а для соответствия
			// данных в узлах, текущие данные отправляются обратно в подчиненный узел.
			ОтправкаНазад = Истина;
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЭлемента = Тип("КонстантаМенеджерЗначения.ИспользоватьВнешнихПользователей") Тогда
		Константы.ИспользоватьВнешнихПользователей.СоздатьМенеджерЗначения().ЗарегистрироватьИзменениеПриПолученииДанных(ЭлементДанных);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ГруппыПользователей")
	      Или ТипЭлемента = Тип("СправочникОбъект.ГруппыВнешнихПользователей") Тогда
		
		ЗарегистрироватьИзменениеГруппПриПолученииДанных(ЭлементДанных);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Пользователи")
	      Или ТипЭлемента = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		
		ЗарегистрироватьИзменениеПользователейПриПолученииДанных(ЭлементДанных);
	КонецЕсли;
	
	Если ТипЭлемента <> Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДанных = ЭлементДанных; // УдалениеОбъекта
	ТипСсылки = ТипЗнч(ЭлементДанных.Ссылка);
	
	Если ТипСсылки = Тип("СправочникСсылка.ГруппыПользователей")
	 Или ТипСсылки = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
		ЗарегистрироватьИзменениеГруппПриПолученииДанных(ЭлементДанных);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Пользователи")
	      Или ТипСсылки = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		
		ЗарегистрироватьИзменениеПользователейПриПолученииДанных(ЭлементДанных);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПриПолученииДанных.
Процедура ЗарегистрироватьИзменениеГруппПриПолученииДанных(ЭлементДанных)
	
	СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка,
		"Ссылка, Родитель");
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Если СтарыеЗначения.Ссылка <> Неопределено Тогда
			ОбновитьСоставыГруппПередУдалениемПользователяИлиГруппы(ЭлементДанных.Ссылка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаОбъекта = СсылкаОбъекта(ЭлементДанных);
	Значения = Новый Массив;
	Значения.Добавить(СсылкаОбъекта);
	
	Если СтарыеЗначения.Родитель <> ЭлементДанных.Родитель Тогда
		Если ЗначениеЗаполнено(СтарыеЗначения.Родитель) Тогда
			Значения.Добавить(СтарыеЗначения.Родитель);
		КонецЕсли;
		Если ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			ЗарегистрироватьСсылки("ГруппыВнешнихПользователейИерархия", СсылкаОбъекта);
		Иначе
			ЗарегистрироватьСсылки("ГруппыПользователейИерархия", СсылкаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаОбъекта) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		ЗарегистрироватьСсылки("ГруппыВнешнихПользователей", Значения);
	Иначе
		ЗарегистрироватьСсылки("ГруппыПользователей", Значения);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПриПолученииДанных.
Процедура ЗарегистрироватьИзменениеПользователейПриПолученииДанных(ЭлементДанных)
	
	ЭтоВнешнийПользователь = ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи");
	СписокСвойствДляВосстановления = "ИдентификаторПользователяИБ, Подготовлен, УдалитьСвойстваПользователяИБ";
	
	СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка,
		"Ссылка, ПометкаУдаления, Недействителен, " + СписокСвойствДляВосстановления
		+ ?(ЭтоВнешнийПользователь, ", " + "ОбъектАвторизации", ""));
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Попытка
			Объект = ЭлементДанных.Ссылка.ПолучитьОбъект();
		Исключение
			Объект = Истина;
		КонецПопытки;
		Если Объект <> Неопределено Тогда
			ПользовательОбъектПередУдалением(Объект, Истина);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.СведенияОПользователях.УдалитьСведенияОПользователе(ЭлементДанных.Ссылка);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		Если СтарыеЗначения.Ссылка <> Неопределено Тогда
			ОбновитьСоставыГруппПередУдалениемПользователяИлиГруппы(ЭлементДанных.Ссылка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементДанных, СтарыеЗначения, СписокСвойствДляВосстановления);
	ЭлементДанных.ДополнительныеСвойства.Вставить("ЗаписьПриОбменеДанными");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоВнешнийПользователь
	   И СтарыеЗначения.ОбъектАвторизации <> ЭлементДанных.ОбъектАвторизации Тогда
		
		Значения = Новый Массив;
		Если ЗначениеЗаполнено(СтарыеЗначения.ОбъектАвторизации) Тогда
			Значения.Добавить(СтарыеЗначения.ОбъектАвторизации);
		КонецЕсли;
		Значения.Добавить(ЭлементДанных.ОбъектАвторизации);
		ЗарегистрироватьСсылки("ВнешниеПользователиОбъектыАвторизации", Значения);
	КонецЕсли;
	
	Если СтарыеЗначения.Ссылка          = ЭлементДанных.Ссылка
	   И СтарыеЗначения.Недействителен  = ЭлементДанных.Недействителен
	   И СтарыеЗначения.ПометкаУдаления = ЭлементДанных.ПометкаУдаления Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		ЗарегистрироватьСсылки("ГруппыВнешнихПользователей",
			ВнешниеПользователи.ГруппаВсеВнешниеПользователи());
		ЗарегистрироватьСсылки("ВнешниеПользователи",
			СсылкаОбъекта(ЭлементДанных));
	Иначе
		ЗарегистрироватьСсылки("ГруппыПользователей",
			Пользователи.ГруппаВсеПользователи());
		ЗарегистрироватьСсылки("Пользователи",
			СсылкаОбъекта(ЭлементДанных));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПослеПолученияДанных.
Процедура ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриПолученииДанных()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Изменения пользователей и групп пользователей в АРМ заблокированы и не загружаются в область данных.
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьВнешнихПользователей.СоздатьМенеджерЗначения().ОбработатьИзменениеЗарегистрированноеПриПолученииДанных();
	
	ОчисткаРегистрации = Новый Массив;
	
	// Обработка пользователей и групп.
	ИзмененияСоставов = НовыеИзмененияСоставовГрупп();
	
	НачатьТранзакцию();
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ОбработатьЗарегистрированноеИзменениеИерархии("ГруппыПользователейИерархия",
			Справочники.ГруппыПользователей.ПустаяСсылка(), ИзмененияСоставов, ОчисткаРегистрации);
		
		ОбработатьЗарегистрированноеИзменениеГрупп("ГруппыПользователей",
			Справочники.ГруппыПользователей.ПустаяСсылка(), ИзмененияСоставов, ОчисткаРегистрации);
		
		ОбработатьЗарегистрированноеИзменениеПользователей("Пользователи",
			Справочники.Пользователи.ПустаяСсылка(), ИзмененияСоставов, ОчисткаРегистрации);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПослеОбновленияСоставовГруппПользователей(ИзмененияСоставов);
		
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого ИмяВидаСсылок Из ОчисткаРегистрации Цикл
			ЗарегистрироватьСсылки(ИмяВидаСсылок, Null);
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Обработка внешних пользователей и групп.
	ИзмененияСоставов = НовыеИзмененияСоставовГрупп();
	
	НачатьТранзакцию();
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ОбработатьЗарегистрированноеИзменениеИерархии("ГруппыВнешнихПользователейИерархия",
			Справочники.ГруппыВнешнихПользователей.ПустаяСсылка(), ИзмененияСоставов, ОчисткаРегистрации);
		
		ОбработатьЗарегистрированноеИзменениеГрупп("ГруппыВнешнихПользователей",
			Справочники.ГруппыВнешнихПользователей.ПустаяСсылка(), ИзмененияСоставов, ОчисткаРегистрации);
		
		ОбработатьЗарегистрированноеИзменениеПользователей("ВнешниеПользователи",
			Справочники.ВнешниеПользователи.ПустаяСсылка(), ИзмененияСоставов, ОчисткаРегистрации);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПослеОбновленияСоставовГруппПользователей(ИзмененияСоставов);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбработатьЗарегистрированноеИзменениеОбъектовАвторизации("ВнешниеПользователиОбъектыАвторизации",
			ОчисткаРегистрации);
		Для Каждого ИмяВидаСсылок Из ОчисткаРегистрации Цикл
			ЗарегистрироватьСсылки(ИмяВидаСсылок, Null);
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для процедуры ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке.
Процедура ОбработатьЗарегистрированноеИзменениеИерархии(ИмяВидаСсылок, СсылкаВсеГруппы,
			ИзмененияСоставов, ОчисткаРегистрации)
	
	ГруппыИерархии = ЗарегистрированныеСсылки(ИмяВидаСсылок);
	
	Если ГруппыИерархии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ГруппыИерархии.Количество() = 1 И ГруппыИерархии[0] = Неопределено
	 Или ГруппыИерархии.Количество() > 30 Тогда
		
		ОбновитьИерархиюГрупп(СсылкаВсеГруппы, ИзмененияСоставов);
	Иначе
		Для Каждого Группа Из ГруппыИерархии Цикл
			// @skip-check query-in-loop - Обход иерархии элементов с обновлением порциями
			ОбновитьИерархиюГрупп(Группа, ИзмененияСоставов);
		КонецЦикла;
	КонецЕсли;
	
	ОчисткаРегистрации.Добавить(ИмяВидаСсылок);
	
КонецПроцедуры

// Для процедуры ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке.
Процедура ОбработатьЗарегистрированноеИзменениеГрупп(ИмяВидаСсылок, СсылкаВсеГруппы,
			ИзмененияСоставов, ОчисткаРегистрации)
	
	Группы = ЗарегистрированныеСсылки(ИмяВидаСсылок);
	
	Если Группы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаВсеГруппы) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		СсылкаВсеПользователи = Справочники.ВнешниеПользователи.ПустаяСсылка();
		ГруппаВсеПользователи = ВнешниеПользователи.ГруппаВсеВнешниеПользователи();
	Иначе
		СсылкаВсеПользователи = Справочники.Пользователи.ПустаяСсылка();
		ГруппаВсеПользователи = Пользователи.ГруппаВсеПользователи();
	КонецЕсли;
	
	Если Группы.Количество() = 1 И Группы[0] = Неопределено Тогда
		ОбновитьСоставГруппыВсеПользователи(СсылкаВсеПользователи, ИзмененияСоставов);
		
		Если ТипЗнч(СсылкаВсеГруппы) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			ОбновитьСоставыГруппПоТипамОбъектовАвторизации(Неопределено,
				Неопределено, ИзмененияСоставов);
		КонецЕсли;
		
		ОбновитьСоставыИерархическихГруппПользователей(СсылкаВсеГруппы, ИзмененияСоставов);
	Иначе
		Индекс = Группы.Найти(ГруппаВсеПользователи);
		Если Индекс <> Неопределено Тогда
			Группы.Удалить(Индекс);
			ОбновитьСоставГруппыВсеПользователи(СсылкаВсеПользователи, ИзмененияСоставов);
		КонецЕсли;
		Если ТипЗнч(СсылкаВсеПользователи) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
			ОписаниеГрупп = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Группы, "ВсеОбъектыАвторизации");
			АвтоГруппы = Новый Массив;
			Для Каждого ОписаниеГруппы Из ОписаниеГрупп Цикл
				Если ОписаниеГруппы.Значение = Истина Тогда
					Индекс = Группы.Найти(ОписаниеГруппы.Ключ);
					Если Индекс <> Неопределено Тогда
						Группы.Удалить(Индекс);
						АвтоГруппы.Добавить(ОписаниеГруппы.Ключ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(АвтоГруппы) Тогда
				ОбновитьСоставыГруппПоТипамОбъектовАвторизации(АвтоГруппы,
					Неопределено, ИзмененияСоставов);
			КонецЕсли;
		КонецЕсли;
		ОбновитьСоставыИерархическихГруппПользователей(Группы, ИзмененияСоставов);
	КонецЕсли;
	
	ОчисткаРегистрации.Добавить(ИмяВидаСсылок);
	
КонецПроцедуры

// Для процедуры ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке.
Процедура ОбработатьЗарегистрированноеИзменениеПользователей(ИмяВидаСсылок, СсылкаВсеПользователи,
			ИзмененияСоставов, ОчисткаРегистрации)
	
	Ссылки = ЗарегистрированныеСсылки(ИмяВидаСсылок);
	Если Ссылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылки.Количество() = 1 И Ссылки[0] = Неопределено Тогда
		ОбновитьСоставГруппыВсеПользователи(СсылкаВсеПользователи, ИзмененияСоставов);
		
		Если ТипЗнч(СсылкаВсеПользователи) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			ОбновитьСоставыГруппПоТипамОбъектовАвторизации(Неопределено, Неопределено, ИзмененияСоставов);
		КонецЕсли;
		
		ОбновитьИспользуемостьСоставовГруппПользователей(СсылкаВсеПользователи, ИзмененияСоставов);
	Иначе
		ОбновитьСоставГруппыВсеПользователи(Ссылки, ИзмененияСоставов);
		
		Если ТипЗнч(СсылкаВсеПользователи) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			ОбновитьСоставыГруппПоТипамОбъектовАвторизации(Неопределено, Ссылки, ИзмененияСоставов);
		КонецЕсли;
		
		ОбновитьИспользуемостьСоставовГруппПользователей(Ссылки, ИзмененияСоставов);
	КонецЕсли;
	
	ОчисткаРегистрации.Добавить(ИмяВидаСсылок);
	
КонецПроцедуры

// Для процедуры ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке.
Процедура ОбработатьЗарегистрированноеИзменениеОбъектовАвторизации(ИмяВидаСсылок, ОчисткаРегистрации)
	
	ОбъектыАвторизации = ЗарегистрированныеСсылки(ИмяВидаСсылок);
	Если ОбъектыАвторизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Если ОбъектыАвторизации.Количество() = 1 И ОбъектыАвторизации[0] = Неопределено Тогда
			ОбъектыАвторизации = Неопределено;
		КонецЕсли;
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПослеИзмененияОбъектаАвторизацииВнешнегоПользователя(ОбъектыАвторизации);
	КонецЕсли;
	
	ОчисткаРегистрации.Добавить(ИмяВидаСсылок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки настроек входа.

// Для функции АвторизоватьТекущегоПользователяПриВходе.
// Обновляет дату последней активности и проверяет необходимость смены пароля.
//
Функция ТребуетсяСменитьПароль(ОписаниеОшибки = "", ПриЗапуске = Ложь, РегистрироватьВЖурнале = Истина)
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Обновление даты последнего входа пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОПользователях.Пользователь КАК Пользователь,
	|	СведенияОПользователях.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности,
	|	СведенияОПользователях.ПоследнийИспользуемыйКлиент КАК ПоследнийИспользуемыйКлиент,
	|	СведенияОПользователях.УдалитьДатаНачалаИспользованияПароля КАК УдалитьДатаНачалаИспользованияПароля,
	|	СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода КАК ДатаАвтоматическогоЗапрещенияВхода,
	|	СведенияОПользователях.ПотребоватьСменуПароляПриВходе КАК ПотребоватьСменуПароляПриВходе
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.Пользователь = &ТекущийПользователь";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	НачалоДняТекущейДатыСеанса = НачалоДня(ТекущаяДатаСеанса());
	ИспользуемыйКлиент = ОбщегоНазначения.ИспользуемыйКлиент();
	
	Если Выгрузка.Количество() = 1 Тогда
		ЕстьИзменения = Ложь;
		УстарелаТолькоДатаПоследнейАктивности = Истина;
		СведенияОПользователе = Выгрузка[0];
		ОбновитьСведенияОПользователе(СведенияОПользователе, НачалоДняТекущейДатыСеанса,
			ИспользуемыйКлиент, ЕстьИзменения, УстарелаТолькоДатаПоследнейАктивности, Истина);
	Иначе
		ЕстьИзменения = Истина;
		УстарелаТолькоДатаПоследнейАктивности = Ложь;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", ТекущийПользователь);
		НачатьТранзакцию();
		Попытка
			БлокировкаВыполняется = Истина;
			Блокировка.Заблокировать();
			БлокировкаВыполняется = Ложь;
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе = НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь = ТекущийПользователь;
			Иначе
				СведенияОПользователе = НаборЗаписей[0];
			КонецЕсли;
			
			Записать = Ложь;
			ОбновитьСведенияОПользователе(СведенияОПользователе,
				НачалоДняТекущейДатыСеанса, ИспользуемыйКлиент, Записать);
			
			Если Записать Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПродолжитьЗапуск = БлокировкаВыполняется И УстарелаТолькоДатаПоследнейАктивности;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонТекстаОшибки = ШаблонТекстаОшибкиЗаписиСведенийОТекущемПользователе();
			Если ПриЗапуске И Не ПродолжитьЗапуск Тогда
				ОписаниеОшибки = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
						ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				
				Если РегистрироватьВЖурнале Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Пользователи.Ошибка входа в приложение'",
						     ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
						ТекущийПользователь,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
				КонецЕсли;
			Иначе
				Если РегистрироватьВЖурнале Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Пользователи.Ошибка обновления даты последней активности'",
						     ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
						ТекущийПользователь,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
				КонецЕсли;
			КонецЕсли;
			Если Не ПриЗапуске Или Не ПродолжитьЗапуск Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СтандартныеПодсистемыСервер.ЭтоРазделенныйРежимСеансаБезРазделителей() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоЗапрещеноИзменятьПароль");
	ДополнительныеПараметры.Вставить("УчитыватьСвойствоАутентификацияСтандартная");
	Если Не ВозможноИзменитьПароль(ТекущийПользователь, ДополнительныеПараметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СведенияОПользователе.ПотребоватьСменуПароляПриВходе Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено()
	 Или Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		НастройкиВхода = НастройкиВхода().ВнешниеПользователи;
	Иначе
		НастройкиВхода = НастройкиВхода().Пользователи;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиВхода.МаксимальныйСрокДействияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОстатокМаксимальногоСрокаДействияПароля = НастройкиВхода.МаксимальныйСрокДействияПароля
		- (НачалоДняТекущейДатыСеанса - СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля) / (24*60*60);
	
	Возврат ОстатокМаксимальногоСрокаДействияПароля <= 0;
	
КонецФункции

// Для функции ТребуетсяСменитьПароль.
Процедура ОбновитьСведенияОПользователе(СведенияОПользователе, НачалоДняТекущейДатыСеанса,
			ИспользуемыйКлиент, ЕстьИзменения, УстарелаТолькоДатаПоследнейАктивности = Истина, ЭтоПроверка = Ложь)
	
	Если СведенияОПользователе.ДатаПоследнейАктивности <> НачалоДняТекущейДатыСеанса Тогда
		
		СведенияОПользователе.ДатаПоследнейАктивности = НачалоДняТекущейДатыСеанса;
		ЕстьИзменения = Истина;
		
		Если Не ЭтоПроверка
		   И ОбщегоНазначения.РазделениеВключено()
		   И ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПользователиСервиса") Тогда
			
			МодульПользователиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСервиса");
			МодульПользователиСервиса.ОбновитьАктивностьПользователяСервиса(
				СведенияОПользователе.Пользователь,
				НачалоДняТекущейДатыСеанса);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуемыйКлиент <> Неопределено
	   И СведенияОПользователе.ПоследнийИспользуемыйКлиент <> ИспользуемыйКлиент Тогда
		
		СведенияОПользователе.ПоследнийИспользуемыйКлиент = ИспользуемыйКлиент;
		ЕстьИзменения = Истина;
		УстарелаТолькоДатаПоследнейАктивности = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Если ЗначениеЗаполнено(СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля) Тогда
			СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля = Неопределено;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля)
	      Или СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля > НачалоДняТекущейДатыСеанса Тогда
		
		СведенияОПользователе.УдалитьДатаНачалаИспользованияПароля = НачалоДняТекущейДатыСеанса;
		ЕстьИзменения = Истина;
		УстарелаТолькоДатаПоследнейАктивности = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода) Тогда
		СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = Неопределено;
		ЕстьИзменения = Истина;
		УстарелаТолькоДатаПоследнейАктивности = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСерверногоОповещения()
	Возврат "СтандартныеПодсистемы.Пользователи.ИзменениеРолейПользователяИлиБлокировкаИлиСрокДействия";
КонецФункции

// Для процедуры ПриОтправкеСерверногоОповещения.
Процедура ОбновитьДатуПоследнейАктивностиПользователей(Параметры, ИдентификаторыПользователейИБ)
	
	ИдентификаторыПользователейИБ = Новый Массив;
	Для Каждого ПараметрПроверки Из Параметры Цикл
		Для Каждого Адресат Из ПараметрПроверки.Адресаты Цикл
			ИдентификаторыПользователейИБ.Добавить(Адресат.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	НачалоДняТекущейДатыСеанса = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса",    НачалоДняТекущейДатыСеанса);
	Запрос.УстановитьПараметр("ИдентификаторыПользователейИБ", ИдентификаторыПользователейИБ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОПользователях.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|ГДЕ
	|	СведенияОПользователях.ДатаПоследнейАктивности < &НачалоДняТекущейДатыСеанса
	|	И СведенияОПользователях.Пользователь.ИдентификаторПользователяИБ В(&ИдентификаторыПользователейИБ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийПользователь = Выборка.Пользователь;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", ТекущийПользователь);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				СведенияОПользователе = НаборЗаписей[0];
				Если СведенияОПользователе.ДатаПоследнейАктивности < НачалоДняТекущейДатыСеанса Тогда
					СведенияОПользователе.ДатаПоследнейАктивности = НачалоДняТекущейДатыСеанса;
					
					Если ОбщегоНазначения.РазделениеВключено()
						И ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПользователиСервиса") Тогда
						
						МодульПользователиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСервиса");
						МодульПользователиСервиса.ОбновитьАктивностьПользователяСервиса(
							ТекущийПользователь,
							НачалоДняТекущейДатыСеанса);
					КонецЕсли;
					
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонТекстаОшибки = ШаблонТекстаОшибкиЗаписиСведенийОТекущемПользователе();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пользователи.Ошибка обновления даты последней активности'",
				     ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.НайтиПоТипу(ТипЗнч(ТекущийПользователь)),
				ТекущийПользователь,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ПриОтправкеСерверногоОповещения.
Функция ОстаткиСрокаДействияПользователей(ИдентификаторыПользователейИБ, НачалоДня)
	
	Результат = Новый Соответствие;
	
	КоличествоДней = НастройкиВхода().Общие.ПредупреждатьОбОкончанииСрокаРаботыВПрограмме;
	Если Не ЗначениеЗаполнено(КоличествоДней) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Сутки = 24*60*60;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса", НачалоДня);
	Запрос.УстановитьПараметр("НачалоДняПредупреждения", НачалоДня + КоличествоДней * Сутки);
	Запрос.УстановитьПараметр("ИдентификаторыПользователейИБ", ИдентификаторыПользователейИБ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	СведенияОПользователях.СрокДействия КАК СрокДействия
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователейИБ)
	|	И СведенияОПользователях.СрокДействияНеОграничен = ЛОЖЬ
	|	И СведенияОПользователях.СрокДействия > &НачалоДняТекущейДатыСеанса
	|	И СведенияОПользователях.СрокДействия <= &НачалоДняПредупреждения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ,
	|	СведенияОПользователях.СрокДействия
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = ВнешниеПользователи.Ссылка)
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователейИБ)
	|	И СведенияОПользователях.СрокДействияНеОграничен = ЛОЖЬ
	|	И СведенияОПользователях.СрокДействия > &НачалоДняТекущейДатыСеанса
	|	И СведенияОПользователях.СрокДействия <= &НачалоДняПредупреждения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ИдентификаторПользователяИБ, (Выборка.СрокДействия - НачалоДня) / Сутки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для процедуры ПриОтправкеСерверногоОповещения.
Функция ТребуетсяНапоминание(ИмяПользователяИБ, ОстатокСрокаДействия, НачалоДня)
	
	ПоследнееНапоминание = Новый Структура("ОсталосьДней, Дата", 0, '00010101');
	
	ЗагруженноеЗначение = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		"ПоследнееНапоминаниеОбОкончанииСрокаДействия",,,, ИмяПользователяИБ);
	
	Если ТипЗнч(ЗагруженноеЗначение) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ПоследнееНапоминание Цикл
			Если ЗагруженноеЗначение.Свойство(КлючИЗначение.Ключ)
			   И ТипЗнч(ЗагруженноеЗначение[КлючИЗначение.Ключ]) = ТипЗнч(КлючИЗначение.Значение) Тогда
				
				ПоследнееНапоминание[КлючИЗначение.Ключ] = ЗагруженноеЗначение[КлючИЗначение.Ключ];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоследнееНапоминание.ОсталосьДней = ОстатокСрокаДействия
	   И ПоследнееНапоминание.Дата = НачалоДня Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоследнееНапоминание.ОсталосьДней = ОстатокСрокаДействия;
	ПоследнееНапоминание.Дата = НачалоДня;
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
		"ПоследнееНапоминаниеОбОкончанииСрокаДействия",, ПоследнееНапоминание,, ИмяПользователяИБ);
	
	Возврат Истина;
	
КонецФункции

// Для функции ОбработатьНовыйПароль и
// процедуры Пользователи.УстановитьСвойстваПользователяИБ.
//
// Параметры:
//  Пароль - Строка
//  ПользовательИБ - ПользовательИнформационнойБазы
//
// Возвращаемое значение:
//  Строка
//
Функция ОшибкаСоответствияПароляТребованиям(Пароль, ПользовательИБ) Экспорт
	
	ПолитикаПаролей = ПолитикиПаролейПользователей.НайтиПоИмени(ПользовательИБ.ИмяПолитикиПаролей);
	
	Ошибки = ПолитикиПаролейПользователей.ПроверитьСоответствиеПароляПолитике(Пароль,
		ПолитикаПаролей, ПользовательИБ);
	
	Если Ошибки.Найти(РезультатПроверкиСоответствияПароляПолитике.НеСоответствуетТребованиямМинимальнойДлины) <> Неопределено Тогда
		Если ПолитикаПаролей = Неопределено Тогда
			МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
		Иначе
			МинимальнаяДлинаПароля = ПолитикаПаролей.МинимальнаяДлинаПаролей;
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Количество символов нового пароля должно быть не менее %1.'"),
			Формат(МинимальнаяДлинаПароля, "ЧГ="));
	КонецЕсли;
	
	Если Ошибки.Найти(РезультатПроверкиСоответствияПароляПолитике.НеСоответствуетТребованиямСложности) <> Неопределено Тогда
		Возврат НСтр("ru = 'Пароль не отвечает требованиям сложности.'")
			+ Символы.ПС + Символы.ПС
			+ ПодсказкаДляНовогоПароля();
	КонецЕсли;
	
	Если Ошибки.Найти(РезультатПроверкиСоответствияПароляПолитике.НеСоответствуетТребованиямОграниченияПовторенияСредиПоследних) <> Неопределено Тогда
		Возврат НСтр("ru = 'Новый пароль использовался ранее.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для процедуры НачатьОбработкуПользователяИБ.

Процедура ЗапомнитьСвойстваПользователя(ПользовательОбъект, ПараметрыОбработки)
	
	Поля =
	"Ссылка,
	|ИдентификаторПользователяИБ,
	|ИдентификаторПользователяСервиса,
	|УдалитьСвойстваПользователяИБ,
	|Подготовлен,
	|ПометкаУдаления,
	|Недействителен";
	
	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи") Тогда
		Поля = Поля + ",
		|Служебный";
	КонецЕсли;
	
	СтарыйПользователь = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательОбъект.Ссылка, Поля);
	
	Если ТипЗнч(ПользовательОбъект) <> Тип("СправочникОбъект.Пользователи") Тогда
		СтарыйПользователь.Вставить("Служебный", Ложь);
	КонецЕсли;
	
	Если ПользовательОбъект.ЭтоНовый() Или ПользовательОбъект.Ссылка <> СтарыйПользователь.Ссылка Тогда
		СтарыйПользователь.ИдентификаторПользователяИБ = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		СтарыйПользователь.ИдентификаторПользователяСервиса = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		СтарыйПользователь.УдалитьСвойстваПользователяИБ    = Новый ХранилищеЗначения(Неопределено);
		СтарыйПользователь.Подготовлен               = Ложь;
		СтарыйПользователь.ПометкаУдаления           = Ложь;
		СтарыйПользователь.Недействителен            = Ложь;
	КонецЕсли;
	ПараметрыОбработки.Вставить("СтарыйПользователь", СтарыйПользователь);
	
	// Свойства старого пользователя ИБ (если существует).
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеСтарогоПользователяИБ = Пользователи.СвойстваПользователяИБ(СтарыйПользователь.ИдентификаторПользователяИБ);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБСуществует", ОписаниеСтарогоПользователяИБ <> Неопределено);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Ложь);
	ПараметрыОбработки.Вставить("СтарыйПользовательИБ",
		ПользовательИБПоИдентификатору(СтарыйПользователь.ИдентификаторПользователяИБ));
	
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		ПараметрыОбработки.Вставить("ОписаниеСтарогоПользователяИБ", ОписаниеСтарогоПользователяИБ);
		
		Если ОписаниеСтарогоПользователяИБ.УникальныйИдентификатор =
				ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
			ПараметрыОбработки.Вставить("СтарыйПользовательИБТекущий", Истина);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Начальное заполнение значений полей авто реквизитов значениями старого пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.АвтоРеквизиты, СтарыйПользователь);
	
	// Начальное заполнение значений полей блокируемых реквизитов значениями нового пользователя.
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки.БлокируемыеРеквизиты, ПользовательОбъект);
	
КонецПроцедуры

Процедура ЗаписатьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ДополнительныеСвойства = ПользовательОбъект.ДополнительныеСвойства;
	ОписаниеПользователяИБ = ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;
	
	Если ОписаниеПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("ПотребоватьСменуПароляПриВходе") Тогда
		ЗаписатьСвойствоПотребоватьСменуПароляПриВходе(СсылкаОбъекта(ПользовательОбъект),
			ОписаниеПользователяИБ.ПотребоватьСменуПароляПриВходе);
		
		Если ОписаниеПользователяИБ.Количество() = 2 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьНовогоПользователяИБ = Ложь;
	
	Если ОписаниеПользователяИБ.Свойство("УникальныйИдентификатор")
	   И ЗначениеЗаполнено(ОписаниеПользователяИБ.УникальныйИдентификатор)
	   И ОписаниеПользователяИБ.УникальныйИдентификатор
	     <> ПараметрыОбработки.СтарыйПользователь.ИдентификаторПользователяИБ Тогда
		
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		
	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		ИдентификаторПользователяИБ = СтарыйПользователь.ИдентификаторПользователяИБ;
		СоздатьНовогоПользователяИБ = НЕ ПараметрыОбработки.СтарыйПользовательИБСуществует;
	Иначе
		ИдентификаторПользователяИБ = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		СоздатьНовогоПользователяИБ = Истина;
	КонецЕсли;
	
	// Заполнение автоматических свойств пользователя ИБ.
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", ПользовательОбъект.Наименование);
	
	ХранимыеСвойства = ХранимыеСвойстваПользователяИБ(СсылкаОбъекта(ПользовательОбъект));
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		СтараяАутентификация = ПараметрыОбработки.ОписаниеСтарогоПользователяИБ;
		Если Пользователи.ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
			ХранимыеСвойства.АутентификацияСтандартная    = СтараяАутентификация.АутентификацияСтандартная;
			ХранимыеСвойства.АутентификацияOpenID         = СтараяАутентификация.АутентификацияOpenID;
			ХранимыеСвойства.АутентификацияOpenIDConnect  = СтараяАутентификация.АутентификацияOpenIDConnect;
			ХранимыеСвойства.АутентификацияТокеномДоступа = СтараяАутентификация.АутентификацияТокеномДоступа;
			ХранимыеСвойства.АутентификацияОС             = СтараяАутентификация.АутентификацияОС;
			УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
		КонецЕсли;
	Иначе
		СтараяАутентификация = Новый Структура;
		СтараяАутентификация.Вставить("АутентификацияСтандартная",    Ложь);
		СтараяАутентификация.Вставить("АутентификацияOpenID",         Ложь);
		СтараяАутентификация.Вставить("АутентификацияOpenIDConnect",  Ложь);
		СтараяАутентификация.Вставить("АутентификацияТокеномДоступа", Ложь);
		СтараяАутентификация.Вставить("АутентификацияОС",             Ложь);
		ХранимыеСвойства.АутентификацияСтандартная    = Ложь;
		ХранимыеСвойства.АутентификацияOpenID         = Ложь;
		ХранимыеСвойства.АутентификацияOpenIDConnect  = Ложь;
		ХранимыеСвойства.АутентификацияТокеномДоступа = Ложь;
		ХранимыеСвойства.АутентификацияОС             = Ложь;
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная") Тогда
		ХранимыеСвойства.АутентификацияСтандартная = ОписаниеПользователяИБ.АутентификацияСтандартная;
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияOpenID") Тогда
		ХранимыеСвойства.АутентификацияOpenID = ОписаниеПользователяИБ.АутентификацияOpenID;
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияOpenIDConnect") Тогда
		ХранимыеСвойства.АутентификацияOpenIDConnect = ОписаниеПользователяИБ.АутентификацияOpenIDConnect;
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияТокеномДоступа") Тогда
		ХранимыеСвойства.АутентификацияТокеномДоступа = ОписаниеПользователяИБ.АутентификацияТокеномДоступа;
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	Если ОписаниеПользователяИБ.Свойство("АутентификацияОС") Тогда
		ХранимыеСвойства.АутентификацияОС = ОписаниеПользователяИБ.АутентификацияОС;
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	Если СоздатьНовогоПользователяИБ
	   И ОписаниеПользователяИБ.Свойство("ТолькоОбновитьПользователяИБ") Тогда
		
		Если ХранимыеСвойства.ВходВПрограммуРазрешен <> Ложь Тогда
			ХранимыеСвойства.ВходВПрограммуРазрешен = Ложь;
			УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
		КонецЕсли;
		
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ПропущеноДобавлениеПользователяИБ");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор",
			ПользовательОбъект.ИдентификаторПользователяИБ);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьХранимуюАутентификацию = Неопределено;
	Если ОписаниеПользователяИБ.Свойство("ВходВПрограммуРазрешен") Тогда
		УстановитьХранимуюАутентификацию = ОписаниеПользователяИБ.ВходВПрограммуРазрешен = Истина
			Или ОписаниеПользователяИБ.ВходВПрограммуРазрешен <> Ложь
			  И Пользователи.ВходВПрограммуРазрешен(СтараяАутентификация);
	
	ИначеЕсли ОписаниеПользователяИБ.Свойство("АутентификацияСтандартная")
	        И ОписаниеПользователяИБ.АутентификацияСтандартная = Истина
	      Или ОписаниеПользователяИБ.Свойство("АутентификацияOpenID")
	        И ОписаниеПользователяИБ.АутентификацияOpenID = Истина
	      Или ОписаниеПользователяИБ.Свойство("АутентификацияOpenIDConnect")
	        И ОписаниеПользователяИБ.АутентификацияOpenIDConnect = Истина
	      Или ОписаниеПользователяИБ.Свойство("АутентификацияТокеномДоступа")
	        И ОписаниеПользователяИБ.АутентификацияТокеномДоступа = Истина
	      Или ОписаниеПользователяИБ.Свойство("АутентификацияОС")
	        И ОписаниеПользователяИБ.АутентификацияОС = Истина Тогда
		
		УстановитьХранимуюАутентификацию = Истина;
	КонецЕсли;
	
	Если УстановитьХранимуюАутентификацию = Неопределено Тогда
		НоваяАутентификация = СтараяАутентификация;
	Иначе
		Если УстановитьХранимуюАутентификацию Тогда
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная",    ХранимыеСвойства.АутентификацияСтандартная);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",         ХранимыеСвойства.АутентификацияOpenID);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenIDConnect",  ХранимыеСвойства.АутентификацияOpenIDConnect);
			ОписаниеПользователяИБ.Вставить("АутентификацияТокеномДоступа", ХранимыеСвойства.АутентификацияТокеномДоступа);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",             ХранимыеСвойства.АутентификацияОС);
		Иначе
			ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная",    Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenID",         Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияOpenIDConnect",  Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияТокеномДоступа", Ложь);
			ОписаниеПользователяИБ.Вставить("АутентификацияОС",             Ложь);
		КонецЕсли;
		НоваяАутентификация = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Если ХранимыеСвойства.ВходВПрограммуРазрешен <> Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация) Тогда
		ХранимыеСвойства.ВходВПрограммуРазрешен = Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация);
		УстановитьХранимыеСвойстваПользователяИБ(ПользовательОбъект, ХранимыеСвойства);
	КонецЕсли;
	
	// Проверка прав на изменение разрешения входа в программу.
	Если Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация)
	  <> Пользователи.ВходВПрограммуРазрешен(СтараяАутентификация) Тогда
	
		Если Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		 Или Не Пользователи.ВходВПрограммуРазрешен(НоваяАутентификация)
		   И Не ПараметрыОбработки.УровеньДоступа.ОтключениеРазрешенияНаВход Тогда
			
			ВызватьИсключение ПараметрыОбработки.ТекстСообщенияНедостаточноПрав;
		КонецЕсли;
	КонецЕсли;
	
	ПарольЗадан = ОписаниеПользователяИБ.Свойство("Пароль")
		И ОписаниеПользователяИБ.Пароль <> Неопределено;
	
	ХешПароляЗадан = ОписаниеПользователяИБ.Свойство("СохраняемоеЗначениеПароля")
		И ОписаниеПользователяИБ.СохраняемоеЗначениеПароля <> Неопределено;
	
	ПроверитьПустойПароль =
		Не СтараяАутентификация.АутентификацияСтандартная
		И ХранимыеСвойства.АутентификацияСтандартная
		И (    СоздатьНовогоПользователяИБ
		     И Не ПарольЗадан
		   Или ПараметрыОбработки.СтарыйПользовательИБСуществует
		     И Не ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.ПарольУстановлен);
	
	Если ПарольЗадан Или Не ХешПароляЗадан И ПроверитьПустойПароль Тогда
		ИмяДляВхода = ?(ОписаниеПользователяИБ.Свойство("Имя"),
			ОписаниеПользователяИБ.Имя, ?(ПараметрыОбработки.СтарыйПользовательИБСуществует,
				ПараметрыОбработки.ОписаниеСтарогоПользователяИБ.Имя, ""));
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Пользователь", ПользовательОбъект);
		ПараметрыВыполнения.Вставить("ИмяДляВхода",  ИмяДляВхода);
		ПараметрыВыполнения.Вставить("НовыйПароль", ?(ПарольЗадан, ОписаниеПользователяИБ.Пароль, ""));
		ПараметрыВыполнения.Вставить("СтарыйПароль", Неопределено);
		
		ОписаниеПользователяИБ.Свойство("СтарыйПароль", ПараметрыВыполнения.СтарыйПароль);
		
		ТекстОшибки = ОбработатьНовыйПароль(ПараметрыВыполнения);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи пользователя ИБ.
	ПараметрыОбновления = Новый Соответствие(ПараметрыСеанса.ОбновлениеСправочниковПользователей);
	ПараметрыОбновления.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	ПараметрыСеанса.ОбновлениеСправочниковПользователей = Новый ФиксированноеСоответствие(ПараметрыОбновления);
	ПараметрыОбновления.Удалить("ИдентификаторПользователяИБ");
	Попытка
		Пользователи.УстановитьСвойстваПользователяИБ(ИдентификаторПользователяИБ, ОписаниеПользователяИБ, 
			СоздатьНовогоПользователяИБ, ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.ВнешниеПользователи"));
		ПользовательИБ = ОписаниеПользователяИБ.ПользовательИБ;
	Исключение
		ПараметрыСеанса.ОбновлениеСправочниковПользователей = Новый ФиксированноеСоответствие(ПараметрыОбновления);
		ВызватьИсключение;
	КонецПопытки;
	ПараметрыСеанса.ОбновлениеСправочниковПользователей = Новый ФиксированноеСоответствие(ПараметрыОбновления);
	
	Если ПользовательОбъект.ДополнительныеСвойства.Свойство("СозданиеАдминистратора")
	   И ЗначениеЗаполнено(ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора)
	   И Не ПользовательОбъект.ОбменДанными.Загрузка
	   И РолиАдминистратораДоступны(ПользовательИБ) Тогда
		
		ПараметрыОбработки.Вставить("СозданиеАдминистратора",
			ПользовательОбъект.ДополнительныеСвойства.СозданиеАдминистратора);
	КонецЕсли;
	
	Если СоздатьНовогоПользователяИБ Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ДобавленПользовательИБ");
		ИдентификаторПользователяИБ = ОписаниеПользователяИБ.УникальныйИдентификатор;
		ПараметрыОбработки.Вставить("УстановкаПользователяИБ");
		
		Если Не ПараметрыОбработки.УровеньДоступа.ИзменениеРазрешенияНаВход
		   И ПараметрыОбработки.УровеньДоступа.УправлениеСписком
		   И Не Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			
			ПользовательОбъект.Подготовлен = Истина;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Истина;
		КонецЕсли;
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ИзмененПользовательИБ");
		
		Если Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			ПользовательОбъект.Подготовлен = Ложь;
			ПараметрыОбработки.БлокируемыеРеквизиты.Подготовлен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПользовательОбъект.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
	
	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ИдентификаторПользователяИБ);
	
КонецПроцедуры

Процедура УдалитьПользователяИБ(ПользовательОбъект, ПараметрыОбработки)
	
	ОписаниеПользователяИБ = ПользовательОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ;
	СтарыйПользователь     = ПараметрыОбработки.СтарыйПользователь;
	
	// Очистка идентификатора пользователя ИБ.
	ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
	
	Если ПараметрыОбработки.СтарыйПользовательИБСуществует Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Пользователи.УдалитьПользователяИБ(СтарыйПользователь.ИдентификаторПользователяИБ);
			
		// Установка идентификатора удаляемого пользователя ИБ, как результата действия Удалить.
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", СтарыйПользователь.ИдентификаторПользователяИБ);
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "УдаленПользовательИБ");
		
	ИначеЕсли ЗначениеЗаполнено(СтарыйПользователь.ИдентификаторПользователяИБ) Тогда
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "ОчищеноСопоставлениеСНесуществующимПользователемИБ");
	Иначе
		ОписаниеПользователяИБ.Вставить("РезультатДействия", "НеТребуетсяУдалениеПользовательИБ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСвойствоПотребоватьСменуПароляПриВходе(Пользователь, Значение)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			СведенияОПользователе = НаборЗаписей.Добавить();
			СведенияОПользователе.Пользователь = Пользователь;
		Иначе
			СведенияОПользователе = НаборЗаписей[0];
		КонецЕсли;
		СведенияОПользователе.ПотребоватьСменуПароляПриВходе = Значение;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для процедуры ЗавершитьОбработкуПользователяИБ.

Процедура ПроверитьИзмененияРеквизитовПользователя(ПользовательОбъект, ПараметрыОбработки)
	
	СтарыйПользователь   = ПараметрыОбработки.СтарыйПользователь;
	АвтоРеквизиты        = ПараметрыОбработки.АвтоРеквизиты;
	БлокируемыеРеквизиты = ПараметрыОбработки.БлокируемыеРеквизиты;
	
	Если ТипЗнч(ПользовательОбъект) = Тип("СправочникОбъект.Пользователи")
	   И БлокируемыеРеквизиты.Служебный <> ПользовательОбъект.Служебный Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит Служебный не допускается изменять в подписках на события.'"),
			ПользовательОбъект.Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если БлокируемыеРеквизиты.Подготовлен <> ПользовательОбъект.Подготовлен Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит Подготовлен не допускается изменять в подписках на события.'"),
			ПользовательОбъект.Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если АвтоРеквизиты.ИдентификаторПользователяИБ <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит %2 не допускается изменять.
			           |Обновление реквизита выполняется автоматически.'"),
			ПользовательОбъект.Ссылка,
			"ИдентификаторПользователяИБ");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(АвтоРеквизиты.УдалитьСвойстваПользователяИБ,
				ПользовательОбъект.УдалитьСвойстваПользователяИБ) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Реквизит %2 не допускается изменять.
			           |Обновление реквизита выполняется автоматически.'"),
			ПользовательОбъект.Ссылка,
			"УдалитьСвойстваПользователяИБ");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтарыйПользователь.ПометкаУдаления = Ложь
	   И ПользовательОбъект.ПометкаУдаления = Истина
	   И Пользователи.ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Нельзя помечать на удаление пользователя, которому разрешен вход в приложение.'"),
			ПользовательОбъект.Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если СтарыйПользователь.Недействителен = Ложь
	   И ПользовательОбъект.Недействителен = Истина
	   И Пользователи.ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить недействительным пользователя, которому разрешен вход в приложение.'"),
			ПользовательОбъект.Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если СтарыйПользователь.Подготовлен = Ложь
	   И ПользовательОбъект.Подготовлен = Истина
	   И Пользователи.ВходВПрограммуРазрешен(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи пользователя ""%1"".
			           |Нельзя пометить подготовленным пользователя, которому разрешен вход в приложение.'"),
			ПользовательОбъект.Ссылка);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСведенияОПользователеСРазрешеннымВходом(Пользователь, ВходВПрограммуВключен)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
	ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
	
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НаборЗаписей.Добавить();
			НаборЗаписей[0].Пользователь = Пользователь;
		КонецЕсли;
		Записать = Ложь;
		Если ЗначениеЗаполнено(НаборЗаписей[0].ДатаАвтоматическогоЗапрещенияВхода) Тогда
			Записать = Истина;
			НаборЗаписей[0].ДатаАвтоматическогоЗапрещенияВхода = Неопределено;
		КонецЕсли;
		Если ВходВПрограммуВключен
		   И НаборЗаписей[0].ДатаРазрешенияВходаВПрограмму <> НачалоДня(ТекущаяДатаСеанса()) Тогда
			Записать = Истина;
			НаборЗаписей[0].ДатаРазрешенияВходаВПрограмму = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		Если Записать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтключитьНеактивныхИПросроченныхПользователей(ТолькоДляАвторизованногоПользователя = Ложь,
			ОписаниеОшибки = "", РегистрироватьВЖурнале = Истина)
	
	Если ОбщегоНазначения.РазделениеВключено()
	 Или Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = НастройкиВхода();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата",                                 '00010101');
	Запрос.УстановитьПараметр("НачалоДняТекущейДатыСеанса",                 НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиПользователей",        Настройки.Пользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыПользователей",               Настройки.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	Запрос.УстановитьПараметр("ДатаВключенияПросрочкиВнешнихПользователей", Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДатаВключения);
	Запрос.УстановитьПараметр("ПросрочкаРаботыВнешнихПользователей",        Настройки.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СрокДействияИстек
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	&ОтборПользователей
	|	И ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|										ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|									ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|								КОНЕЦ
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|									ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиПользователей, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|								ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, &ПросрочкаРаботыПользователей)
	|							КОНЕЦ
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|			ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = ВнешниеПользователи.Ссылка)
	|ГДЕ
	|	&ОтборВнешнихПользователей
	|	И ЕСТЬNULL(СведенияОПользователях.СрокДействияНеОграничен, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(СведенияОПользователях.ДатаАвтоматическогоЗапрещенияВхода, &ПустаяДата) = &ПустаяДата
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <> &ПустаяДата
	|				ТОГДА ЕСТЬNULL(СведенияОПользователях.СрокДействия, &ПустаяДата) <= &НачалоДняТекущейДатыСеанса
	|			КОГДА ЕСТЬNULL(СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, 0) <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|										ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|									ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|								КОНЕЦ
	|						КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, СведенияОПользователях.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПросрочкаРаботыВнешнихПользователей = 0
	|						ТОГДА ЛОЖЬ
	|					КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата) <= ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата)
	|						ТОГДА ВЫБОР
	|								КОГДА ЕСТЬNULL(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, &ПустаяДата) = &ПустаяДата
	|									ТОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(&ДатаВключенияПросрочкиВнешнихПользователей, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|								ИНАЧЕ &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(СведенияОПользователях.ДатаРазрешенияВходаВПрограмму, ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|							КОНЕЦ
	|					КОГДА &НачалоДняТекущейДатыСеанса > ДОБАВИТЬКДАТЕ(ЕСТЬNULL(СведенияОПользователях.ДатаПоследнейАктивности, &ПустаяДата), ДЕНЬ, &ПросрочкаРаботыВнешнихПользователей)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	Если ТолькоДляАвторизованногоПользователя Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
		ОтборПользователей        = "Пользователи.Ссылка = &Пользователь";
		ОтборВнешнихПользователей = "ВнешниеПользователи.Ссылка = &Пользователь";
	Иначе
		ОтборПользователей        = "ИСТИНА";
		ОтборВнешнихПользователей = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПользователей",        ОтборПользователей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборВнешнихПользователей", ОтборВнешнихПользователей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИнформацияОбОшибке = Неопределено;
	Пока Выборка.Следующий() Цикл
		Пользователь = Выборка.Пользователь;
		Если НЕ Выборка.СрокДействияИстек
		   И Пользователи.ЭтоПолноправныйПользователь(Пользователь,, Ложь) Тогда
			Продолжить;
		КонецЕсли;
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОПользователях");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь,
				"ИдентификаторПользователяИБ");
			ПользовательИБ = Неопределено;
			Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
					ИдентификаторПользователяИБ);
			КонецЕсли;
			Если ПользовательИБ <> Неопределено
			   И (    ПользовательИБ.АутентификацияСтандартная
			      Или ПользовательИБ.АутентификацияOpenID
			      Или ПользовательИБ.АутентификацияOpenIDConnect
			      Или ПользовательИБ.АутентификацияТокеномДоступа
			      Или ПользовательИБ.АутентификацияОС) Тогда
				
				ОбновляемыеСвойства = Новый Структура;
				ОбновляемыеСвойства.Вставить("АутентификацияСтандартная",    Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияOpenID",         Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияOpenIDConnect",  Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияТокеномДоступа", Ложь);
				ОбновляемыеСвойства.Вставить("АутентификацияОС",             Ложь);
				
				Пользователи.УстановитьСвойстваПользователяИБ(ПользовательИБ.УникальныйИдентификатор,
					ОбновляемыеСвойства, Ложь, ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СведенияОПользователе = НаборЗаписей.Добавить();
				СведенияОПользователе.Пользователь = Пользователь;
			Иначе
				СведенияОПользователе = НаборЗаписей[0];
			КонецЕсли;
			СведенияОПользователе.ДатаАвтоматическогоЗапрещенияВхода = НачалоДня(ТекущаяДатаСеанса());
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонТекстаОшибки = ШаблонТекстаОшибкиЗаписиСведенийОТекущемПользователе();
			ОписаниеОшибки = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			
			Если РегистрироватьВЖурнале Тогда
				Если Выборка.СрокДействияИстек Тогда
					ШаблонКомментария =
						НСтр("ru = 'Не удалось снять пользователю ""%1"" признак
						           |""Вход в приложение разрешен"" в связи с окончанием срока действия по причине:
						           |%2'");
				Иначе
					ШаблонКомментария =
						НСтр("ru = 'Не удалось снять пользователю ""%1"" признак
						           |""Вход в приложение разрешен"" в связи с отсутствием работы
						           |в приложении более установленного срока по причине:
						           |%2'");
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Пользователи.Ошибка автоматического запрещения входа в приложение'",
					     ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(Пользователь)),
					Пользователь,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
						Пользователь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВходВПрограммуРазрешен(ОшибкаАвторизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Идентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	Недействителен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АвторизованныйПользователь, "Недействителен");
	
	Если ПользовательИБ = Неопределено
	 Или Не ЗначениеЗаполнено(ПользовательИБ.Имя)
	 Или Пользователи.ВходВПрограммуРазрешен(ПользовательИБ)
	   И (РолиАдминистратораДоступны(ПользовательИБ)
	      Или Недействителен <> Истина) Тогда
			Возврат;
	КонецЕсли;
	
	ОшибкаАвторизации = ЗаголовокСообщенияАвторизацияНеВыполненаСПереводомСтроки()
		+ НСтр("ru = 'Ваша учетная запись отключена. Обратитесь к администратору.'");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для процедуры ОбработатьИнтерфейсРолей.

// Заполняет коллекцию ролей.
//
// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура ЗаполнитьРоли(Параметры)
	
	ПрочитанныеРоли = Параметры.ОсновнойПараметр;
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	
	КоллекцияРолей.Очистить();
	ДобавленныеРоли = Новый Соответствие;
	
	Если ТипЗнч(ПрочитанныеРоли) = Тип("Массив") Тогда
		Для Каждого Роль Из ПрочитанныеРоли Цикл
			Если ДобавленныеРоли.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавленныеРоли.Вставить(Роль, Истина);
			КоллекцияРолей.Добавить().Роль = Роль;
		КонецЦикла;
	Иначе
		ИдентификаторыРолей = Новый Массив;
		Для Каждого ОписаниеРоли Из ПрочитанныеРоли Цикл
			Если ТипЗнч(ОписаниеРоли.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			 Или ТипЗнч(ОписаниеРоли.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
				ИдентификаторыРолей.Добавить(ОписаниеРоли.Роль);
			КонецЕсли;
		КонецЦикла;
		ПрочитанныеРоли = ОбщегоНазначения.ОбъектыМетаданныхПоИдентификаторам(ИдентификаторыРолей, Ложь);
		
		Для Каждого ОписаниеРоли Из ПрочитанныеРоли Цикл
			Если ТипЗнч(ОписаниеРоли.Значение) <> Тип("ОбъектМетаданных") Тогда
				Роль = ОписаниеРоли.Ключ;
				ИмяРоли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Роль, "Имя");
				ИмяРоли = ?(ИмяРоли = Неопределено, "(" + Роль.УникальныйИдентификатор() + ")", ИмяРоли);
				ИмяРоли = ?(Лев(ИмяРоли, 1) = "?", ИмяРоли, "? " + СокрЛ(ИмяРоли));
				КоллекцияРолей.Добавить().Роль = СокрЛП(ИмяРоли);
			Иначе
				КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Значение.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура НастроитьИнтерфейсРолейПриСозданииФормы(Параметры)
	
	Форма = Параметры.Форма;
	
	// Условное оформление недоступных ролей.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Роли.ЭтоНедоступнаяРоль");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Роли");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Условное оформление несуществующих ролей.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Роли.ЭтоНесуществующаяРоль");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Роли");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры)
	
	Форма    = Параметры.Форма;
	Элементы = Форма.Элементы;
	
	// Установка начальных значений перед загрузкой данных из настроек на сервере
	// для случая, когда данные еще не были записаны и не загружаются.
	Форма.ПоказатьПодсистемыРолей = Ложь;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	
	// Для нового элемента показать все роли, для существующего - только выбранные роли.
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Параметры.ОсновнойПараметр;
	КонецЕсли;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры)
	
	Настройки = Параметры.ОсновнойПараметр;
	Форма     = Параметры.Форма;
	Элементы  = Форма.Элементы;
	
	ПоказатьПодсистемыРолей = Форма.ПоказатьПодсистемыРолей;
	
	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		Форма.ПоказатьПодсистемыРолей = Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	Иначе
		Форма.ПоказатьПодсистемыРолей = Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	КонецЕсли;
	
	Если ПоказатьПодсистемыРолей <> Форма.ПоказатьПодсистемыРолей Тогда
		ОбновитьДеревоРолей(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура УстановитьТолькоПросмотрРолей(Параметры)
	
	Форма = Параметры.Форма;
	Элементы               = Форма.Элементы;
	ТолькоПросмотрРолей    = Параметры.ОсновнойПараметр;
	
	Если ТолькоПросмотрРолей <> Неопределено Тогда
		
		Элементы.Роли.ТолькоПросмотр = ТолькоПросмотрРолей;
		
		НайденныйЭлемент = Элементы.Найти("РолиУстановитьФлажки"); // КнопкаФормы
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти("РолиСнятьФлажки"); // КнопкаФормы
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Доступность = НЕ ТолькоПросмотрРолей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура ТолькоВыбранныеРоли(Параметры)
	
	Форма = Параметры.Форма;
	
	Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка =
		НЕ Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура ГруппировкаПоПодсистемам(Параметры)
	
	Форма = Параметры.Форма;
	
	Форма.ПоказатьПодсистемыРолей = НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
	Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура ОбновитьДеревоРолей(Параметры)
	
	Форма           = Параметры.Форма;
	Элементы        = Форма.Элементы;
	Роли            = Форма.Роли;
	НазначениеРолей = Параметры.НазначениеРолей;
	
	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава")
	                      И Параметры.СкрытьРольПолныеПрава = Истина;
	
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		КонецЕсли;
		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	Иначе
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;
	
	ПоказатьПодсистемыРолей = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	// Запоминание текущей строки.
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.Роли.ТекущаяСтрока = Неопределено;
			
		ИначеЕсли ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяРоль       = ТекущиеДанные.Имя;
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "",
				ТекущиеДанные.ПолучитьРодителя().Имя);
		Иначе
			ТекущаяРоль       = "";
			ТекущаяПодсистема = ТекущиеДанные.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеДереваРолей = ПользователиСлужебныйПовтИсп.ДеревоРолей(ПоказатьПодсистемыРолей, НазначениеРолей);
	ДеревоРолей = ХранилищеДереваРолей.Получить(); // см. ПользователиСлужебныйПовтИсп.ДеревоРолей
	
	ДеревоРолей.Колонки.Добавить("ЭтоНедоступнаяРоль",    Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("ЭтоНесуществующаяРоль", Новый ОписаниеТипов("Булево"));
	ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей);
	
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли,
		Параметры.КоллекцияРолей, ?(Параметры.Свойство("СтандартныеРолиРасширений"),
			Параметры.СтандартныеРолиРасширений, Неопределено));
	
	Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено,
		ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки.
	Отбор = Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема);
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено,
			ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли,
			ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(
					ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено,
				ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//  ДеревоРолей - ДеревоЗначений:
//    * ЭтоРоль - Булево
//    * Имя     - Строка - имя роли или подсистемы.
//    * Синоним - Строка - синоним роли или подсистемы.
//    * ЭтоНедоступнаяРоль    - Булево
//    * ЭтоНесуществующаяРоль - Булево
//    * Пометка               - Булево
//    * НомерКартинки         - Число
//
Процедура ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей)
	
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	ВсеРоли = ВсеРоли().Соответствие;
	
	НедоступныеРоли    = Новый СписокЗначений;
	НесуществующиеРоли = Новый СписокЗначений;
	
	// Добавление несуществующих ролей.
	Для каждого ОписаниеРоли Из КоллекцияРолей Цикл
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ОписаниеРоли.Роль);
		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Синоним = ВсеРоли.Получить(ОписаниеРоли.Роль);
		Если Синоним = Неопределено Тогда
			НесуществующиеРоли.Добавить(ОписаниеРоли.Роль,
				?(Лев(ОписаниеРоли.Роль, 1) = "?", ОписаниеРоли.Роль, "? " + ОписаниеРоли.Роль));
		Иначе
			НедоступныеРоли.Добавить(ОписаниеРоли.Роль, Синоним);
		КонецЕсли;
	КонецЦикла;
	
	НедоступныеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НедоступныеРоли Цикл
		Индекс = НедоступныеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева = ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     = ОписаниеРоли.Значение;
		СтрокаДерева.Синоним = ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль = Истина;
		СтрокаДерева.ЭтоНедоступнаяРоль = Истина;
	КонецЦикла;
	
	НесуществующиеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НесуществующиеРоли Цикл
		Индекс = НесуществующиеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева = ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     = ОписаниеРоли.Значение;
		СтрокаДерева.Синоним = ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль = Истина;
		СтрокаДерева.ЭтоНесуществующаяРоль = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли,
			КоллекцияРолей, СтандартныеРолиРасширений)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли,
			КоллекцияРолей, СтандартныеРолиРасширений);
		
		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава
			   И (    ВРег(Строка.Имя) = ВРег("ПолныеПрава")
			      ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")
			      ИЛИ СтандартныеРолиРасширений <> Неопределено
			        И (    СтандартныеРолиРасширений.ПолныеПрава.Найти(Строка.Имя) <> Неопределено
			           Или СтандартныеРолиРасширений.АдминистраторСистемы.Найти(Строка.Имя) <> Неопределено)) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 7;
				Строка.Пометка = КоллекцияРолей.НайтиСтроки(
					Новый Структура("Роль", Строка.Имя)).Количество() > 0;
				
				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 6;
				Строка.Пометка = Строка.Строки.НайтиСтроки(
					Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает иерархическую коллекцию.
// 
// Параметры:
//  ДанныеФормыДерево - ДанныеФормыДерево
//  СтрокаДереваЗначений - СтрокаДереваЗначений
//
// Возвращаемое значение:
//  ДанныеФормыКоллекцияЭлементовДерева
// 
Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено,
			СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(
				СтрокаДереваЗначений.Родитель);
			
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево,
			СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//
Процедура ОбновитьСоставРолей(Параметры)
	
	Форма = Параметры.Форма;
	
	Роли                        = Форма.Роли;
	ПоказатьТолькоВыбранныеРоли = Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	НазначениеРолей             = Параметры.НазначениеРолей;
	
	ВсеРоли         = ВсеРоли().Массив;
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеРолей);
	
	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Истина;
		
	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Ложь;
	Иначе
		ИдентификаторСтроки = Форма.Элементы.Роли.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		БылУстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
			Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
		
		// Обработка всех.
		КоллекцияРолей = Параметры.КоллекцияРолей;
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			Для Каждого ИмяРоли Из ВсеРоли Цикл
				
				Если ИмяРоли = "ПолныеПрава"
				 Или ИмяРоли = "АдминистраторСистемы"
				 Или НедоступныеРоли.Получить(ИмяРоли) <> Неопределено
				 Или ВРег(Лев(ИмяРоли, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
					
					Продолжить;
				КонецЕсли;
				КоллекцияРолей.Добавить().Роль = ИмяРоли;
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗапретИзмененияАдминистративногоДоступа")
			И Параметры.ЗапретИзмененияАдминистративногоДоступа Тогда
			
			УстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
				Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
			
			Если УстановленАдминистративныйДоступ И НЕ БылУстановленАдминистративныйДоступ Тогда
				Отбор = Новый Структура("Роль", "ПолныеПрава");
				Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Удалить(0);
				
			ИначеЕсли БылУстановленАдминистративныйДоступ И НЕ УстановленАдминистративныйДоступ Тогда
				КоллекцияРолей.Добавить().Роль = "ПолныеПрава";
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьСтандартныеРолиРасширений(Параметры);
		
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей(Параметры);
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
		КонецЕсли;
		ЗаполнитьСтандартныеРолиРасширений(Параметры);
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());
	
КонецПроцедуры

Процедура ЗаполнитьСтандартныеРолиРасширений(Параметры)
	
	Если Не Параметры.Свойство("СтандартныеРолиРасширений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульПрофилиГруппДоступа = ОбщегоНазначения.ОбщийМодуль("Справочники.ПрофилиГруппДоступа");
		МодульПрофилиГруппДоступа.ЗаполнитьСтандартныеРолиРасширений(Параметры.КоллекцияРолей,
			Параметры.СтандартныеРолиРасширений);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//  Роль      - Строка
//  Добавить  - Булево
//
Процедура ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
	
	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет состав ролей.
//
// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//  Коллекция - см. ОбработатьИнтерфейсРолей.Параметры.Форма.Элементы.Роли
//  Добавить  - Булево
//
Процедура ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
	
	Для каждого ОписаниеРоли Из Коллекция Цикл
		Если ОписаниеРоли.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, ОписаниеРоли.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, ОписаниеРоли.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбработатьИнтерфейсРолей.Параметры
//  Коллекция - см. ОбработатьИнтерфейсРолей.Параметры.Форма.Элементы.Роли
//
Процедура ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
	
	Форма = Параметры.Форма;
	
	ПоказатьТолькоВыбранныеРоли = Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Отбор = Новый Структура("Роль", Строка.Имя);
			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПользователиДобавленныеСПомощьюКонфигуратора()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК ПолноеИмя,
	|	Пользователи.ИдентификаторПользователяИБ,
	|	ЛОЖЬ КАК ЭтоВнешнийПользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВнешниеПользователи.Наименование,
	|	ВнешниеПользователи.ИдентификаторПользователяИБ,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор";
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", 
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Индексы.Добавить("ИдентификаторПользователяИБ");
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	ПользователейДобавленоВКонфигураторе = 0;
	
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Строка = Выгрузка.Найти(ПользовательИБ.УникальныйИдентификатор, "ИдентификаторПользователяИБ");
		Если Строка = Неопределено Тогда
			ПользователейДобавленоВКонфигураторе = ПользователейДобавленоВКонфигураторе + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПользователейДобавленоВКонфигураторе;
	
КонецФункции

#КонецОбласти