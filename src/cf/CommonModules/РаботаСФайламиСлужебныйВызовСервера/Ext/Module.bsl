///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

// См. функцию ДобавитьПрисоединенныйФайл в модуле РаботаСФайлами.
Функция ДобавитьФайл(ПараметрыФайла,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "") Экспорт
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		АдресФайлаВоВременномХранилище,
		АдресВременногоХранилищаТекста,
		Описание);
	
КонецФункции

// Получает данные файла и его двоичные данные.
//
// Параметры:
//  ФайлИлиВерсияСсылка - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  АдресПодписи - Строка - навигационная ссылка, содержащая адрес файла подписи во временном хранилище.
//  ИдентификаторФормы  - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - ДанныеФайла и сам файл как ДвоичныеДанные и подпись файла как ДвоичныеДанные.
//
Функция ДанныеФайлаИДвоичныеДанные(ФайлИлиВерсияСсылка, АдресПодписи = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ФайлИлиВерсияСсылка));
	ЭтоСправочникФайлов = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВладелецФайла", МетаданныеОбъекта);
	ВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеОбъекта);
	Если ВозможностьХранитьВерсии И ЗначениеЗаполнено(ФайлИлиВерсияСсылка.ТекущаяВерсия) Тогда
		ВерсияСсылка = ФайлИлиВерсияСсылка.ТекущаяВерсия;
		ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка, ВерсияСсылка);
	ИначеЕсли ЭтоСправочникФайлов Тогда
		ВерсияСсылка = ФайлИлиВерсияСсылка;
		ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка);
	Иначе
		ВерсияСсылка = ФайлИлиВерсияСсылка;
		ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка.Владелец, ВерсияСсылка);
	КонецЕсли;
	
	ДвоичныеДанные = Неопределено;
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = РаботаСФайламиСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
			Исключение
				// Запись в журнал регистрации.
				СообщениеОбОшибке = РаботаСФайламиСлужебный.СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение РаботаСФайламиСлужебный.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = РаботаСФайлами.ХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
	КонецЕсли;

	ДвоичныеДанныеПодписи = Неопределено;
	Если АдресПодписи <> Неопределено Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		ДвоичныеДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи",
		ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
КонецФункции

// Создать папку файлов.
//
// Параметры:
//   Имя - Строка - имя папки
//   Родитель - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - родительская папка.
//   Пользователь - СправочникСсылка.Пользователи - ответственный за папку.
//   ГруппаФайлов - ОпределяемыйТип.ПрисоединенныйФайл - группа (для иерархических справочников файлов).
//   РабочийКаталог - Строка - Рабочий каталог папки в файловой системе.
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов.
//
Функция СоздатьПапкуФайлов(Имя, Родитель, Пользователь = Неопределено, ГруппаФайлов = Неопределено, РабочийКаталог = Неопределено) Экспорт
	
	Если ЭтоСправочникФайлы(Родитель) Тогда
		Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
		Папка.Ответственный = ?(Пользователь <> Неопределено, Пользователь, Пользователи.АвторизованныйПользователь());
		Папка.Родитель = Родитель;
	Иначе
		
		Папка = Справочники[РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Родитель)].СоздатьГруппу();
		Если ТипЗнч(Папка.Ссылка) = ТипЗнч(Родитель) Тогда
			Папка.Родитель = ?(ГруппаФайлов = Неопределено, Родитель, ГруппаФайлов);
			Папка.ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ВладелецФайла");
		Иначе
			Папка.Родитель = ГруппаФайлов;
			Папка.ВладелецФайла = Родитель;
		КонецЕсли;
		
		Папка.Автор = ?(Пользователь <> Неопределено, Пользователь, Пользователи.АвторизованныйПользователь());
		
	КонецЕсли;
	Папка.Наименование = Имя;
	Папка.ДатаСоздания = ТекущаяДатаСеанса();
	Папка.Заполнить(Неопределено);
	Папка.Записать();
	
	Если ЗначениеЗаполнено(РабочийКаталог) Тогда
		СохранитьРабочийКаталогПапки(Папка.Ссылка, РабочийКаталог);
	КонецЕсли;
	
	Возврат Папка.Ссылка;
	
КонецФункции

// Создает файл в ИБ вместе с версией.
//
// Параметры:
//   Владелец       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//                    созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		// Создадим карточку Файла в БД.
		ФайлСсылка = СоздатьФайл(ВладелецФайла, СведенияОФайле);
		Версия = Справочники.ВерсииФайлов.ПустаяСсылка();
		Если СведенияОФайле.ХранитьВерсии Тогда
			// Создадим версию сохраняемого файла для сохранения в карточке Файла.
			Версия = РаботаСФайламиСлужебный.СоздатьВерсию(ФайлСсылка, СведенияОФайле);
			// Подставим ссылку на версию в карточку Файла.
		КонецЕсли;
		РаботаСФайламиСлужебный.ОбновитьВерсиюВФайле(ФайлСсылка, Версия, СведенияОФайле.АдресВременногоХранилищаТекста);
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			ЗаписатьКодировкуВерсииФайла(
				?(Версия = Справочники.ВерсииФайлов.ПустаяСсылка(), ФайлСсылка, Версия), СведенияОФайле.Кодировка);
		КонецЕсли;
		
		ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
		Если СведенияОФайле.ЗаписатьВИсторию И ЕстьПравоСохранения Тогда
			НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
			ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	РаботаСФайламиПереопределяемый.ПриСозданииФайла(ФайлСсылка);
	
	Возврат ФайлСсылка;
	
КонецФункции

// Освобождает файл.
//
// Параметры:
//   ДанныеФайла - Структура - см. ДанныеФайла.
//   УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ДанныеФайла.Ссылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ДанныеФайла.Ссылка);
		БлокировкаДанных.Заблокировать();
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
		ФайлОбъект.ДатаЗаема = Дата("00010101000000");
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		РаботаСФайламиПереопределяемый.ПриОсвобожденииФайла(ДанныеФайла, УникальныйИдентификатор);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОсвободитьФайлы(Знач Файлы) Экспорт
	
	Для Каждого ПрисоединенныйФайл Из Файлы Цикл
		РаботаСФайламиСлужебный.ОсвободитьФайл(ПрисоединенныйФайл);
	КонецЦикла;
	Возврат РаботаСФайламиСлужебный.КоличествоЗанятыхФайлов();
	
КонецФункции

// Занимает файл на редактирование (checkout).
//
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим
//                 пользователем").
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция ЗанятьФайл(ДанныеФайла, СтрокаОшибки = "", УникальныйИдентификатор = Неопределено, Пользователь = Неопределено) Экспорт
	
	СтрокаОшибки = "";
	РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл(ДанныеФайла, СтрокаОшибки);
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ДанныеФайла.Ссылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ДанныеФайла.Ссылка);
		БлокировкаДанных.Заблокировать();
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		Если Пользователь = Неопределено Тогда
			ФайлОбъект.Редактирует = Пользователи.АвторизованныйПользователь();
		Иначе
			ФайлОбъект.Редактирует = Пользователь;
		КонецЕсли;
		ФайлОбъект.ДатаЗаема = ТекущаяДатаСеанса();
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		НавигационнаяСсылкаТекущейВерсии = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
		
		ДанныеФайла = ДанныеФайла(ДанныеФайла.Ссылка, ?(ДанныеФайла.Версия = ДанныеФайла.Ссылка, Неопределено, ДанныеФайла.Версия));
		ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = НавигационнаяСсылкаТекущейВерсии;
		ДанныеФайла.РабочийКаталогВладельца = РабочийКаталогВладельца;
		
		РаботаСФайламиПереопределяемый.ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о файле и версии.
//
// Параметры:
//  ФайлИлиВерсияСсылка  - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайла(ФайлСсылка, ВерсияСсылка = Неопределено, ИдентификаторФормы = Неопределено, Знач ВызыватьИсключение = Истина) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ФайлСсылка);
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Ссылка", ФайлОбъект.Ссылка);
	ДанныеФайла.Вставить("Редактирует", ФайлОбъект.Редактирует);
	ДанныеФайла.Вставить("Владелец", ФайлОбъект.ВладелецФайла);
	
	МетаданныеОбъектаФайла = Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка));
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеОбъектаФайла) И ЗначениеЗаполнено(ФайлСсылка.ТекущаяВерсия) Тогда
		ТекущаяВерсияФайла = ФайлОбъект.ТекущаяВерсия;
		// Без возможности хранить версии.
	Иначе
		ТекущаяВерсияФайла = ФайлСсылка;
	КонецЕсли;
	
	Если ВерсияСсылка <> Неопределено Тогда
		ДанныеФайла.Вставить("Версия", ВерсияСсылка);
	Иначе
		ДанныеФайла.Вставить("Версия", ТекущаяВерсияФайла);
	КонецЕсли;
	
	ДанныеФайла.Вставить("ТекущаяВерсия", ТекущаяВерсияФайла);
	ДанныеФайла.Вставить("ХранитьВерсии", ФайлОбъект.ХранитьВерсии);
	ДанныеФайла.Вставить("ПометкаУдаления", ФайлОбъект.ПометкаУдаления);
	ДанныеФайла.Вставить("Зашифрован", ФайлОбъект.Зашифрован);
	ДанныеФайла.Вставить("ПодписанЭП", ФайлОбъект.ПодписанЭП);
	ДанныеФайла.Вставить("ДатаЗаема", ФайлОбъект.ДатаЗаема);
	
	Если ВерсияСсылка = Неопределено Тогда
		ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",
			ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка, ВызыватьИсключение), ИдентификаторФормы));
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ФайлСсылка));
		ДанныеФайла.Вставить("АвторТекущейВерсии", ФайлСсылка.Изменил);
		ДанныеФайла.Вставить("Кодировка", РаботаСФайлами.КодировкаФайла(ФайлСсылка, ФайлОбъект.Расширение));
	Иначе
		ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",
			ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ВерсияСсылка, ВызыватьИсключение), ИдентификаторФормы));
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ФайлОбъект.Ссылка));
		ДанныеФайла.Вставить("АвторТекущейВерсии", ВерсияСсылка.Автор);
		ДанныеФайла.Вставить("Кодировка", РаботаСФайлами.КодировкаФайла(ВерсияСсылка, ФайлОбъект.Расширение));
	КонецЕсли;
	
	Если ДанныеФайла.Зашифрован Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			МассивСертификатовШифрования = МодульЭлектроннаяПодпись.СертификатыШифрования(ДанныеФайла.Ссылка);
		Иначе
			МассивСертификатовШифрования = Неопределено;
		КонецЕсли;
		
		ДанныеФайла.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
		
	КонецЕсли;
	
	ДанныеФайла.Вставить("Служебный", Ложь);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФайлОбъект, "Служебный") Тогда
		ДанныеФайла.Служебный = ФайлОбъект.Служебный;
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ЗаполнитьДополнительныеДанныеФайла(ДанныеФайла, ФайлОбъект, ВерсияСсылка);
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
                            Знач ДляРедактирования = Ложь) Экспорт
	
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, 
                    ИдентификаторФормы,
                    ПолучатьСсылкуНаДвоичныеДанные,
                    ДляРедактирования);
КонецФункции

Функция ДанныеФайлаДляПечати(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы);
	Расширение = НРег(ДанныеФайла.Расширение);
	Если Расширение = "mxl" Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
		УстановленБезопасныйРежим = БезопасныйРежим() <> Ложь;
		
		Если ТипЗнч(УстановленБезопасныйРежим) = Тип("Строка") Тогда
			УстановленБезопасныйРежим = Истина;
		КонецЕсли;
	
		Если Не УстановленБезопасныйРежим Тогда
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;
		ДанныеФайла.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о Файле и версии.
Функция ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы = Неопределено,
	РабочийКаталогВладельца = Неопределено, ПредыдущийАдресФайла = Неопределено) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредыдущийАдресФайла <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
			УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	ФайлСсылка = ФайлСсылка;
	ВерсияСсылка = ВерсияСсылка;
	Если Не ЗначениеЗаполнено(ВерсияСсылка) 
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка)))
		И ЗначениеЗаполнено(ФайлСсылка.ТекущаяВерсия) Тогда
		
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
		
	КонецЕсли;
	ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ПолноеИмяФайлаВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = "";
		ДанныеФайлаТом = ДанныеФайла.Версия.Том;
		ДанныеФайлаПутьКФайлу = ДанныеФайла.Версия.ПутьКФайлу;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = РаботаСФайламиСлужебный.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				// Работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия.
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// Запись в журнал регистрации.
				СсылкаНаФайл = ?(ФайлСсылка <> Неопределено, ФайлСсылка, ВерсияСсылка);
				СообщениеОбОшибке = РаботаСФайламиСлужебный.СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), СсылкаНаФайл);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ФайлСсылка,
					СообщениеОбОшибке);
				
				Если ЭтоСправочникФайлы(ДанныеФайла.Владелец) Тогда
					ПредставлениеВладельца = ПолныйПутьПапки(ДанныеФайла.Владелец);
				Иначе
					ПредставлениеВладельца = ДанныеФайла.Владелец;
				КонецЕсли;
				ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипЗнч(ДанныеФайла.Владелец)),
					ПредставлениеВладельца);
				
				ВызватьИсключение РаботаСФайламиСлужебный.ОшибкаФайлНеНайденВХранилищеФайлов(
					ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение,
					,
					ПредставлениеВладельцаФайла);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	Возврат ДанныеФайла;
	
КонецФункции

Функция ДанныеОбновленияПоляИзображения(ФайлСсылка, ПараметрыПолученияДанных) Экспорт
	
	ДанныеФайла = ?(ЗначениеЗаполнено(ФайлСсылка), ПолучитьДанныеФайла(ФайлСсылка, ПараметрыПолученияДанных), Неопределено);
	
	ДанныеОбновления = Новый Структура;
	ДанныеОбновления.Вставить("ДанныеФайла",   ДанныеФайла);
	ДанныеОбновления.Вставить("ЦветТекста",    ЦветаСтиля.ЦветТекстаНевыбраннойКартинки);
	ДанныеОбновления.Вставить("ФайлПоврежден", Ложь);
	
	Если ДанныеФайла <> Неопределено
		И ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) = Неопределено Тогда
		
		ДанныеОбновления.ФайлПоврежден = Истина;
		ДанныеОбновления.ЦветТекста    = ЦветаСтиля.ПоясняющийОшибкуТекст;
		
	КонецЕсли;
	
	Возврат ДанныеОбновления;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РаботаСФайлами.ОпределитьФормуПрисоединенногоФайла.
Процедура ОпределитьФормуПрисоединенногоФайла(Источник,
                                                      ВидФормы,
                                                      Параметры,
                                                      ВыбраннаяФорма,
                                                      ДополнительнаяИнформация,
                                                      СтандартнаяОбработка) Экспорт
	
	РаботаСФайлами.ОпределитьФормуПрисоединенногоФайла(Источник,
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сохраняет путь к рабочему каталогу пользователя в настройках.
//
// Параметры:
//  ИмяКаталога - Строка - имя каталога.
//
Процедура УстановитьРабочийКаталогПользователя(ИмяКаталога) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяКаталога,,, Истина);
	
КонецПроцедуры

Функция ЭтоСправочникФайлы(ВладелецФайлов) Экспорт
	
	Возврат РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов) = "Файлы";
	
КонецФункции

Функция ИмяСправочникаХраненияФайлов(ВладелецФайлов) Экспорт
	
	Возврат РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов);
	
КонецФункции

// Создает файл в ИБ.
//
// Параметры:
//   Владелец       - СправочникСсылка.ПапкиФайлов, ЛюбаяСсылка - будет установлен в реквизит ВладелецФайла у
//                    созданного файла.
//   СведенияОФайле - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "Файл".
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл.
//
Функция СоздатьФайл(Знач Владелец, Знач СведенияОФайле)
	
	Файл = Справочники[СведенияОФайле.ИмяСправочникаХранилищаФайлов].СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = СведенияОФайле.ИмяБезРасширения;
	Файл.Автор = ?(СведенияОФайле.Автор <> Неопределено, СведенияОФайле.Автор, Пользователи.АвторизованныйПользователь());
	Файл.ДатаСоздания = ТекущаяДатаСеанса();
	Файл.Описание = СведенияОФайле.Комментарий;
	Файл.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = СведенияОФайле.ХранитьВерсии;
	
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	Если Метаданные.Справочники[СведенияОФайле.ИмяСправочникаХранилищаФайлов].ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
	
		Если ТипЗнч(СведенияОФайле.АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
			// При создании Файла из шаблона хранилище значения копируется напрямую.
			Файл.ТекстХранилище = СведенияОФайле.АдресВременногоХранилищаТекста;
		ИначеЕсли Не ПустаяСтрока(СведенияОФайле.АдресВременногоХранилищаТекста) Тогда
			РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(СведенияОФайле.АдресВременногоХранилищаТекста); 
			Файл.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
			Файл.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
		КонецЕсли;
		
	Иначе
		Файл.ТекстХранилище = Новый ХранилищеЗначения("");
		Файл.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	Файл.Заполнить(Неопределено);
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции

// Обновляет или создает версию Файла и возвращает ссылку на обновленную версию (или Ложь, если файл бинарно не
// изменен).
//
// Параметры:
//   ФайлСсылка     - СправочникСсылка.Файлы        - файл, для которого создается новая версия.
//   СведенияОФайле - Структура                     - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме
//                                                    "ФайлСВерсией".
//   ВерсияСсылка   - СправочникСсылка.ВерсииФайлов - версия файла, которую надо обновить.
//   УникальныйИдентификаторФормы                   - УникальныйИдентификатор - уникальный идентификатор формы, 
//                                                    в контексте которой выполняется операция.
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная или измененная версия; Неопределено, если файл бинарно не был изменен.
//
Функция ОбновитьОбъектФайла(ФайлСсылка,
	СведенияОФайле,
	ВерсияСсылка = Неопределено,
	УникальныйИдентификаторФормы = Неопределено,
	Пользователь = Неопределено)
	
	ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяИзмененияУниверсальное = СведенияОФайле.ВремяИзмененияУниверсальное;
	Если НЕ ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ВремяИзменения = СведенияОФайле.ВремяИзменения;
	Если НЕ ЗначениеЗаполнено(ВремяИзменения)
		ИЛИ УниверсальноеВремя(ВремяИзменения) > ВремяИзмененияУниверсальное Тогда
		ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ПроверитьРасширениеФайлаДляЗагрузки(СведенияОФайле.РасширениеБезТочки);
	
	ТекущаяВерсияРазмер = 0;
	ДвоичныеДанные = Неопределено;
	ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ТекущаяВерсияТом = Неопределено;
	ТекущаяВерсияПутьКФайлу = Неопределено;
	
	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка));
	СправочникПоддерживаетВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеСправочника);
	
	ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	Если ВерсияСсылка <> Неопределено Тогда
		ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	ИначеЕсли СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(ФайлСсылка.ТекущаяВерсия) Тогда
		ВерсияСсылкаДляСравненияРазмера = ФайлСсылка.ТекущаяВерсия;
	Иначе
		ВерсияСсылкаДляСравненияРазмера = ФайлСсылка;
	КонецЕсли;
	
	КодировкаПредВерсии = РаботаСФайламиСлужебный.ПолучитьКодировкуВерсииФайла(ВерсияСсылкаДляСравненияРазмера);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылкаДляСравненияРазмера, 
		"Размер, ТипХраненияФайла, Том, ПутьКФайлу");
	ТекущаяВерсияРазмер = СтруктураРеквизитов.Размер;
	ТекущаяВерсияТипХраненияФайла = СтруктураРеквизитов.ТипХраненияФайла;
	ТекущаяВерсияТом = СтруктураРеквизитов.Том;
	ТекущаяВерсияПутьКФайлу = СтруктураРеквизитов.ПутьКФайлу;
	
	ХранилищеФайла = Неопределено;
	Если СведенияОФайле.Размер = ТекущаяВерсияРазмер Тогда
		ДвоичныеДанныеПредыдущейВерсии = Неопределено;
		
		Если ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ ТекущаяВерсияТом.Пустая() Тогда
				ПолныйПуть = РаботаСФайламиСлужебный.ПолныйПутьТома(ТекущаяВерсияТом) + ТекущаяВерсияПутьКФайлу; 
				ДвоичныеДанныеПредыдущейВерсии = Новый ДвоичныеДанные(ПолныйПуть);
			КонецЕсли;
		Иначе
			ХранилищеФайла = РаботаСФайлами.ХранилищеФайлаИзИнформационнойБазы(ВерсияСсылкаДляСравненияРазмера);
			ДвоичныеДанныеПредыдущейВерсии = ХранилищеФайла.Получить();
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
		
		Если ДвоичныеДанныеПредыдущейВерсии = ДвоичныеДанные Тогда
			Возврат Неопределено; // Файл бинарно не изменен - вернем Ложь.
		КонецЕсли;
	КонецЕсли;
	
	ВерсияЗаблокирована = Ложь;
	Версия = Неопределено;
	
	Если ВерсияСсылка = Неопределено Тогда
		Версия = ФайлСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(Версия.Ссылка, , УникальныйИдентификаторФормы);
	ВерсияЗаблокирована = Истина;
	
	// Удалим файл с диска - мы заместим его новым.
	Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ Версия.Том.Пустая() Тогда
			ПолныйПуть = РаботаСФайламиСлужебный.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
			ФайлНаДиске = Новый Файл(ПолныйПуть);
			Если ФайлНаДиске.Существует() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
			КонецЕсли;
			ПутьСПодкаталогом = ФайлНаДиске.Путь;
			МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, ПолучитьМаскуВсеФайлы());
			Если МассивФайловВКаталоге.Количество() = 0 Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Версия.Изменил = Пользователи.АвторизованныйПользователь();
	Иначе
		Версия.Изменил = Пользователь;
	КонецЕсли;
	Версия.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	Версия.Размер                       = СведенияОФайле.Размер;
	Версия.Наименование                 = СведенияОФайле.ИмяБезРасширения;
	Версия.Описание                     = СведенияОФайле.Комментарий;
	Версия.Расширение                   = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СведенияОФайле.РасширениеБезТочки);
	
	ТипХраненияФайлов = РаботаСФайламиСлужебный.ТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СведенияОФайле.АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Если Версия.Размер = 0 Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			РаботаСФайламиСлужебный.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
		
		// очистим поля
		Версия.ПутьКФайлу = "";
		Версия.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	Иначе // хранение на диске
		
		Если Версия.Размер = 0 Тогда
			Версия.Размер = ДвоичныеДанные.Размер();
			РаботаСФайламиСлужебный.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
		
		ФайлЗашифрован = Ложь;
		Если СведенияОФайле.Зашифрован <> Неопределено Тогда
			ФайлЗашифрован = СведенияОФайле.Зашифрован;
		КонецЕсли;
		
		Сведения = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные,
			ВремяИзмененияУниверсальное, СведенияОФайле.ИмяБезРасширения, Версия.Расширение,
			"", ФайлЗашифрован); 
		Версия.Том = Сведения.Том;
		Версия.ПутьКФайлу = Сведения.ПутьКФайлу;
		ХранилищеФайла = Новый ХранилищеЗначения(Неопределено); // очистим ХранилищеЗначения
		
	КонецЕсли;
	
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	Если МетаданныеСправочника.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
		
		Если СведенияОФайле.АдресВременногоХранилищаТекста <> Неопределено Тогда
			Если РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			Иначе
				РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(СведенияОФайле.АдресВременногоХранилищаТекста); 
				Версия.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
				Версия.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
			КонецЕсли;
		Иначе
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		КонецЕсли;
		
		Если СведенияОФайле.НовыйСтатусИзвлеченияТекста <> Неопределено Тогда
			Версия.СтатусИзвлеченияТекста = СведенияОФайле.НовыйСтатусИзвлеченияТекста;
		КонецЕсли;
		
	Иначе
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	Если Версия.Размер = 0 Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;
	
	Версия.Заполнить(Неопределено);
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	КонецЕсли;
	
	Если ВерсияЗаблокирована Тогда
		РазблокироватьДанныеДляРедактирования(Версия.Ссылка, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ЗаписатьКодировкуВерсииФайла(Версия.Ссылка, КодировкаПредВерсии);

	Если ЕстьПравоСохранения Тогда
		НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(ФайлСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Обновляет или создает версию файла и снимает блокировку. 
//
// Параметры:
//   ДанныеФайла                  - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   НеМенятьЗаписьВРабочемКаталоге - Булево  - не менять запись в регистре сведений ФайлыВРабочемКаталоге.
//   ПолныйПутьКФайлу             - Строка    - указывается, если НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   РабочийКаталогПользователя   - Строка    - указывается, если НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево - Истина, если создание версии выполнено (и файл бинарно изменен).
//
Функция СохранитьИзмененияИОсвободитьФайл(ДанныеФайла, СведенияОФайле,
	НеМенятьЗаписьВРабочемКаталоге, ПолныйПутьКФайлу, РабочийКаталогПользователя, 
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ДанныеФайла(ДанныеФайла.Ссылка);
	Если Не ДанныеФайлаТекущие.ФайлРедактируетТекущийПользователь И НЕ ФайлСинхронизируетсяОблачнымСервисом(ДанныеФайла.Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		СведенияОФайле.Зашифрован = ДанныеФайла.Зашифрован;
		СведенияОФайле.Кодировка  = ДанныеФайла.Кодировка;
		
		Если ТипЗнч(ДанныеФайла.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			НоваяВерсия = РаботаСФайламиСлужебный.ОбновитьВерсиюФайла(ДанныеФайла.Ссылка, СведенияОФайле,, УникальныйИдентификаторФормы);
		Иначе
			НоваяВерсия = ОбновитьОбъектФайла(ДанныеФайла.Ссылка, СведенияОФайле,, УникальныйИдентификаторФормы);
		КонецЕсли;
		
		Если НоваяВерсия <> Неопределено Тогда
			Если СведенияОФайле.ХранитьВерсии Тогда
				РаботаСФайламиСлужебный.ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			Иначе
				ОбновитьТекстВФайле(ДанныеФайла.Ссылка, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			КонецЕсли;
			ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
		КонецЕсли;
			
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификаторФормы);
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(РаботаСФайламиСлужебный.ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия)) Тогда
				ЗаписатьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия, СведенияОФайле.Кодировка);
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяВерсия <> Неопределено И НЕ ОбщегоНазначения.ЭтоВебКлиент() И Не НеМенятьЗаписьВРабочемКаталоге Тогда
			УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(ПредыдущаяВерсия, НоваяВерсия,
				ПолныйПутьКФайлу, РабочийКаталогПользователя, ДанныеФайла.РабочийКаталогВладельца <> "");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НоваяВерсия <> Неопределено;
	
КонецФункции

// Получает данные файла, затем обновляет или создает версию Файла и снимает блокировку.
// Нужно для случаев, когда на клиенте нет ДанныеФайла (из соображений экономии вызовов клиент-сервер).
//
// Параметры:
//   ФайлСсылка       - СправочникСсылка.Файлы - файл, в котором обновляется версия.
//   СведенияОФайле   - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   ПолныйПутьКФайлу             - Строка
//   РабочийКаталогПользователя   - Строка
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * Успешно     - Булево    - Истина, если создание версии выполнено (и файл бинарно изменен).
//     * ДанныеФайла - Структура - структура с данными файла.
//
Функция СохранитьИзмененияИОсвободитьФайлПоСсылке(ФайлСсылка, СведенияОФайле, 
	ПолныйПутьКФайлу, РабочийКаталогПользователя, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	ВерсияСоздана = СохранитьИзмененияИОсвободитьФайл(ДанныеФайла, СведенияОФайле, Ложь, ПолныйПутьКФайлу, РабочийКаталогПользователя,
		УникальныйИдентификаторФормы);
	Возврат Новый Структура("Успешно,ДанныеФайла", ВерсияСоздана, ДанныеФайла);
	
КонецФункции

// Предназначена для записи изменений файла без его освобождения.
//
// Параметры:
//   ДанныеФайла                  - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   НеМенятьЗаписьВРабочемКаталоге - Булево  - не менять запись в регистре сведений ФайлыВРабочемКаталоге.
//   ОтносительныйПутьКФайлу      - Строка    - относительный путь без пути рабочего каталога, например
//                                              "А1/Приказ.doc"; указывается, если НеМенятьЗаписьВРабочемКаталоге =
//                                              Ложь.
//   ПолныйПутьКФайлу             - Строка    - путь на клиенте в рабочем каталоге; указывается, если
//                                              НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   ВРабочемКаталогеВладельца    - Булево    - файл находится в рабочем каталоге владельца.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - Истина, если создание версии выполнено (и файл бинарно изменен).
//
Функция СохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
	НеМенятьЗаписьВРабочемКаталоге, ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ДанныеФайла(ФайлСсылка);
	Если Не ДанныеФайлаТекущие.ФайлРедактируетТекущийПользователь И НЕ ФайлСинхронизируетсяОблачнымСервисом(ФайлСсылка) Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ТекущаяВерсия = ДанныеФайлаТекущие.ТекущаяВерсия;
	
	НачатьТранзакцию();
	Попытка
		
		СтараяВерсия = ?(СведенияОФайле.ХранитьВерсии, ФайлСсылка.ТекущаяВерсия, ФайлСсылка);
		СведенияОФайле.Зашифрован = ДанныеФайлаТекущие.Зашифрован;
		
		Если ТипЗнч(ФайлСсылка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			НоваяВерсия = РаботаСФайламиСлужебный.ОбновитьВерсиюФайла(ФайлСсылка.Ссылка, СведенияОФайле,, УникальныйИдентификаторФормы, СведенияОФайле.НоваяВерсияАвтор);
		Иначе
			НоваяВерсия = ОбновитьОбъектФайла(ФайлСсылка.Ссылка, СведенияОФайле,, УникальныйИдентификаторФормы);
		КонецЕсли;
		
		Если НоваяВерсия <> Неопределено Тогда
			ТекущаяВерсия = НоваяВерсия;
			Если СведенияОФайле.ХранитьВерсии Тогда
				РаботаСФайламиСлужебный.ОбновитьВерсиюВФайле(ФайлСсылка, НоваяВерсия, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
				
				Если НЕ ОбщегоНазначения.ЭтоВебКлиент() И Не НеМенятьЗаписьВРабочемКаталоге Тогда
					УдалитьИзРегистра(СтараяВерсия);
					ЗаписатьПолноеИмяФайлаВРегистр(НоваяВерсия, ОтносительныйПутьКФайлу, Ложь, ВРабочемКаталогеВладельца);
				КонецЕсли;
				
			Иначе
				ОбновитьТекстВФайле(ФайлСсылка, СведенияОФайле.АдресВременногоХранилищаТекста, УникальныйИдентификаторФормы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СведенияОФайле.Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(РаботаСФайламиСлужебный.ПолучитьКодировкуВерсииФайла(ТекущаяВерсия)) Тогда
				ЗаписатьКодировкуВерсииФайла(ТекущаяВерсия, СведенияОФайле.Кодировка);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НоваяВерсия <> Неопределено;
	
КонецФункции

// Обновляет текстовую порцию из файла в карточке файла.
//
// Параметры:
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия.
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с
//                                           файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные
//                                           данные с файлом текста.
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ОбновитьТекстВФайле(ФайлСсылка,
                              Знач АдресВременногоХранилищаТекста,
                              УникальныйИдентификатор = Неопределено)
	
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	
	НачатьТранзакцию();
	Попытка
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка));
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(МетаданныеСправочника.ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлСсылка);
		БлокировкаДанных.Заблокировать(); 
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		
		Если МетаданныеСправочника.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
			РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста);
			ФайлОбъект.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
			ФайлОбъект.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
		Иначе
			ФайлОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения("");
		КонецЕсли;
		
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Создает новый файл по аналогии с указанным и возвращает ссылку на него.
// Параметры:
//  ИсходныйФайл  - СправочникСсылка.Файлы - существующий файл.
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - новый файл.
//
Функция СкопироватьФайл(ИсходныйФайл, ВладелецНовогоФайла)
	
	Если ИсходныйФайл = Неопределено Или ИсходныйФайл.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ИсходныйФайл);
	НовыйФайл = ИсходныйФайл.Скопировать();
	КопияФайлаСсылка = МенеджерОбъекта.ПолучитьСсылку();
	НовыйФайл.УстановитьСсылкуНового(КопияФайлаСсылка);
	НовыйФайл.ВладелецФайла = ВладелецНовогоФайла.Ссылка;
	НовыйФайл.Редактирует = Справочники.Пользователи.ПустаяСсылка();
	
	НовыйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИсходныйФайл.ТекстХранилище.Получить());
	НовыйФайл.ФайлХранилище  = Новый ХранилищеЗначения(ИсходныйФайл.ФайлХранилище.Получить());
	
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ИсходныйФайл);
	ДвоичныеДанныеВХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
	НовыйФайл.ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов();
	
	Если РаботаСФайламиСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанныеВХранилищеЗначения);
		
	Иначе
		// Добавить в один из томов (где есть свободное место).
		СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, НовыйФайл.ДатаМодификацииУниверсальная,
		НовыйФайл.Наименование, НовыйФайл.Расширение);
		НовыйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		НовыйФайл.Том = СведенияОФайле.Том;
	КонецЕсли;
	НовыйФайл.Записать();
	
	Если НовыйФайл.ХранитьВерсии Тогда
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.ИмяБезРасширения = НовыйФайл.Наименование;
		СведенияОФайле.Размер = НовыйФайл.ТекущаяВерсия.Размер;
		СведенияОФайле.РасширениеБезТочки = НовыйФайл.ТекущаяВерсия.Расширение;
		СведенияОФайле.АдресВременногоХранилищаФайла = ДвоичныеДанныеВХранилищеЗначения;
		СведенияОФайле.АдресВременногоХранилищаТекста = НовыйФайл.ТекущаяВерсия.ТекстХранилище;
		СведенияОФайле.СсылкаНаВерсиюИсточник = НовыйФайл.ТекущаяВерсия;
		СведенияОФайле.Зашифрован = НовыйФайл.Зашифрован;
		Версия = РаботаСФайламиСлужебный.СоздатьВерсию(НовыйФайл.Ссылка, СведенияОФайле);
		РаботаСФайламиСлужебный.ОбновитьВерсиюВФайле(НовыйФайл.Ссылка, Версия, НовыйФайл.ТекущаяВерсия.ТекстХранилище);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		ДоступнаЭлектроннаяПодпись = МодульЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(ИсходныйФайл));
		Если ДоступнаЭлектроннаяПодпись Тогда
			
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			
			Если ИсходныйФайл.ПодписанЭП Тогда
				
				ФайлОбъект = НовыйФайл.ПолучитьОбъект();
				ФайлОбъект.ПодписанЭП = Истина;
				ФайлОбъект.Записать();

				ЭлектронныеПодписиИсходногоФайла = МодульЭлектроннаяПодпись.УстановленныеПодписи(ИсходныйФайл);
				Для Каждого ЭП Из ЭлектронныеПодписиИсходногоФайла Цикл
					МенеджерЗаписи = РегистрыСведений["ЭлектронныеПодписи"].СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ПодписанныйОбъект = НовыйФайл;
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЭП);
					МенеджерЗаписи.Записать(Истина);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИсходныйФайл.Зашифрован Тогда
				
				ФайлОбъект = НовыйФайл.ПолучитьОбъект();
				ФайлОбъект.Зашифрован = Истина;
				
				ЭлектронныеПодписиИсходногоФайла = МодульЭлектроннаяПодпись.СертификатыШифрования(ИсходныйФайл);
				Для Каждого Сертификат Из ЭлектронныеПодписиИсходногоФайла Цикл
					МенеджерЗаписи = РегистрыСведений["СертификатыШифрования"].СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ЗашифрованныйОбъект = НовыйФайл;
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Сертификат);
					МенеджерЗаписи.Записать(Истина);
				КонецЦикла;
				// Чтобы прошла запись ранее подписанного объекта.
				ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
				ФайлОбъект.Записать();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСФайламиПереопределяемый.ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл);
	
	Возврат НовыйФайл;
	
КонецФункции

// Переносит Файл в другую папку.
//
// Параметры:
//  ДанныеФайла  - структура с данными файла.
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файл.
//
Процедура ПеренестиФайл(ДанныеФайла, Папка) 
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ДанныеФайла.Ссылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ДанныеФайла.Ссылка);
		БлокировкаДанных.Заблокировать();	
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.ВладелецФайла = Папка;
		ФайлОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Переносит Файлы в другую папку.
//
// Параметры:
//  ОбъектыСсылка - Массив - массив ссылок на файлы.
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файлы.
//
Функция ПеренестиФайлы(ОбъектыСсылка, Папка) Экспорт 
	
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ФайлСсылка Из ОбъектыСсылка Цикл
		ПеренестиФайл(ФайлСсылка, Папка);
		ДанныеФайла = ДанныеФайла(ФайлСсылка);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Получает РедактируетТекущийПользователь - в привилегированном режиме.
// Параметры:
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла.
//
// Возвращаемое значение:
//   Булево - Истина, если файл редактирует текущий пользователь.
//
Функция ПолучитьРедактируетТекущийПользователь(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВерсииФайлов.Ссылка = &Версия
	|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
	
	Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РедактируетТекущийПользователь = (Выборка.Редактирует = Пользователи.АвторизованныйПользователь());
		Возврат РедактируетТекущийПользователь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает данные файла и делает заем (checkout) - для экономии вызовов 
// клиент сервер поместили ПолучитьДанныеФайла и ЗанятьФайл в одну функцию.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ДанныеФайла  - Структура - структура с данными файла.
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим
//                 пользователем").
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция ПолучитьДанныеФайлаИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор = Неопределено) Экспорт

	ДанныеФайла = ДанныеФайла(ФайлСсылка);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает ДанныеФайла для файлов и помещает в МассивДанныхФайла.
//  МассивФайлов - массив ссылок на файлы.
//  МассивДанныхФайла - массив структур с данными файлов.
//
Процедура ПолучитьДанныеДляМассиваФайлов(Знач МассивФайлов, МассивДанныхФайла) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ДанныеФайла(Файл);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// Получает данные файла для открытия и делает заем (checkout) - для экономии вызовов 
// клиент сервер поместили ДанныеФайлаДляОткрытия и ЗанятьФайл в одну функцию.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ДанныеФайла  - Структура - структура с данными файла.
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим
//                 пользователем").
//  УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ФайлСсылка,
	ДанныеФайла,
	СтрокаОшибки,
	УникальныйИдентификатор = Неопределено,
	РабочийКаталогВладельца = Неопределено,
	ВерсияСсылка = Неопределено) Экспорт

	ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, УникальныйИдентификатор, РабочийКаталогВладельца);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Выполняет ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку.
// Параметры:
// ВерсияСсылка - версия файла.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Строка  - навигационная ссылка во временном хранилище.
//
Функция ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылка, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ВерсияСсылка));
	
КонецФункции

// Выполняет ДанныеФайла и вычисляет РабочийКаталогВладельца.
//
// Параметры:
//  ФайлИлиВерсияСсылка     - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайлаИРабочийКаталог(ФайлИлиВерсияСсылка, РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлИлиВерсияСсылка);
	МетаданныеФайла = Метаданные.НайтиПоТипу(ТипЗнч(ФайлИлиВерсияСсылка));
	ВозможностьХранитьВерсии = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВладелецФайла", МетаданныеФайла) Тогда 
		ФайлСсылка = ФайлИлиВерсияСсылка;
		ВерсияСсылка = Неопределено;
		ВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеФайла);
	Иначе
		ФайлСсылка = Неопределено;
		ВерсияСсылка = ФайлИлиВерсияСсылка;
	КонецЕсли;
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		
		ПолноеИмяФайлаВРабочемКаталоге = "";
		ИмяКаталога = ""; // Путь к локальному кэш здесь не используется.
		ВРабочемКаталогеНаЧтение = Истина; // не используется 
		ВРабочемКаталогеВладельца = Истина;
		
		Если ВерсияСсылка <> Неопределено Тогда
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		ИначеЕсли ВозможностьХранитьВерсии И ЗначениеЗаполнено(ФайлСсылка.ТекущаяВерсия) Тогда
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ФайлСсылка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ПолноеИмяФайлаВРабочемКаталоге = ПолучитьПолноеИмяФайлаИзРегистра(ФайлСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ДанныеФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", ПолноеИмяФайлаВРабочемКаталоге);
	КонецЕсли;
	
	Возврат ДанныеФайла;
КонецФункции

// Делает ПолучитьДанныеФайла и вычисляет количество версий файла.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ПолучитьДанныеФайлаИКоличествоВерсий(ФайлСсылка) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	КоличествоВерсий = ПолучитьКоличествоВерсий(ФайлСсылка);
	ДанныеФайла.Вставить("КоличествоВерсий", КоличествоВерсий);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Освобождение Файла с получением данных.
// Параметры:
//  ФайлСсылка  - СправочникСсылка.Файлы - файл.
//  ДанныеФайла  - структура с данными файла.
//  УникальныйИдентификатор - уникальный идентификатор формы.
//
Процедура ПолучитьДанныеФайлаИОсвободитьФайл(ФайлСсылка, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Для записи изменений файла без его освобождения.
//
// Параметры:
//   ФайлСсылка                   - Структура - структура с данными файла.
//   СведенияОФайле               - Структура - см. РаботаСФайламиКлиентСервер.СведенияОФайле, в режиме "ФайлСВерсией".
//   ОтносительныйПутьКФайлу      - Строка    - относительный путь без пути рабочего каталога, например
//                                              "А1/Приказ.doc"; указывается, если НеМенятьЗаписьВРабочемКаталоге =
//                                              Ложь.
//   ПолныйПутьКФайлу             - Строка    - путь на клиенте в рабочем каталоге; указывается, если
//                                              НеМенятьЗаписьВРабочемКаталоге = Ложь.
//   ВРабочемКаталогеВладельца    - Булево    - файл находится в рабочем каталоге владельца.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     * Успешно     - Булево    - Истина, если создание версии выполнено (и файл бинарно изменен).
//     * ДанныеФайла - Структура - структура с данными файла.
//
Функция ПолучитьДанныеФайлаИСохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
	ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайла = ДанныеФайла(ФайлСсылка);
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияСоздана = СохранитьИзмененияФайла(ФайлСсылка, СведенияОФайле, 
		Ложь, ОтносительныйПутьКФайлу, ПолныйПутьКФайлу, ВРабочемКаталогеВладельца,
		УникальныйИдентификаторФормы);
	Возврат Новый Структура("Успешно,ДанныеФайла", ВерсияСоздана, ДанныеФайла);	
	
КонецФункции

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки).
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//
// Возвращаемое значение:
//   Строка  - рабочий каталог.
//
Функция РабочийКаталогПапки(СсылкаПапки) Экспорт
	
	Если Не ЭтоСправочникФайлы(СсылкаПапки) Тогда
		Возврат ""
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям.
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.АвторизованныйПользователь());
	
	// Получить структуру с данными ресурсов записи.
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет.
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

// Сохраняет в регистре сведений рабочий каталог папки.
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//  РабочийКаталогВладельца - Строка - рабочий каталог папки.
//
Процедура СохранитьРабочийКаталогПапки(СсылкаПапки, РабочийКаталогПапки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Папка = СсылкаПапки;
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
	НоваяЗапись.Путь = РабочийКаталогПапки;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Сохраняет в регистре сведений рабочий каталог папки и
// заменяет пути в регистре сведений ФайлыВРабочемКаталоге.
//
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//  РабочийКаталогПапки - Строка - рабочий каталог папки.
//  ИмяКаталогаПрежнееЗначение - Строка - прежнее значение рабочего каталога.
//
Процедура СохранитьРабочийКаталогПапкиИЗаменитьПутиВРегистре(СсылкаПапки,
                                                        РабочийКаталогПапки,
                                                        ИмяКаталогаПрежнееЗначение) Экспорт
	
	СохранитьРабочийКаталогПапки(СсылкаПапки, РабочийКаталогПапки);
	
	// Ниже заменяем пути в регистре сведений ФайлыВРабочемКаталоге.
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДляЗамены = Новый Массив;
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.УстановитьПараметр("Путь", ИмяКаталогаПрежнееЗначение + "%");
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Файл КАК Файл,
	|	ФайлыВРабочемКаталоге.Путь КАК Путь,
	|	ФайлыВРабочемКаталоге.Размер КАК Размер,
	|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ИСТИНА
	|	И ФайлыВРабочемКаталоге.Путь ПОДОБНО &Путь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПуть = Выборка.Путь;
		НовыйПуть = СтрЗаменить(НовыйПуть, ИмяКаталогаПрежнееЗначение, РабочийКаталогПапки);
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Файл",                         Выборка.Файл);
		СтруктураЗаписи.Вставить("Путь",                         НовыйПуть);
		СтруктураЗаписи.Вставить("Размер",                       Выборка.Размер);
		СтруктураЗаписи.Вставить("ДатаПомещенияВРабочийКаталог", Выборка.ДатаПомещенияВРабочийКаталог);
		СтруктураЗаписи.Вставить("НаЧтение",                     Выборка.НаЧтение);
		
		СписокДляЗамены.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Для Каждого СтруктураЗаписи Из СписокДляЗамены Цикл
		
		ВРабочемКаталогеВладельца = Истина;
		ЗаписатьСтруктуруЗаписиВРегистр(
			СтруктураЗаписи.Файл,
			СтруктураЗаписи.Путь,
			СтруктураЗаписи.Размер,
			СтруктураЗаписи.ДатаПомещенияВРабочийКаталог,
			СтруктураЗаписи.НаЧтение,
			ВРабочемКаталогеВладельца);
		
	КонецЦикла;
	
КонецПроцедуры

// После смены пути запишем заново - с теми же значениями остальных полей.
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  Путь - Строка - относительный путь внутри рабочего каталога.
//  Размер  - размер файла в байтах.
//  ДатаПомещенияВРабочийКаталог - Дата - дата помещения файла в рабочий каталог.
//  НаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура ЗаписатьСтруктуруЗаписиВРегистр(Файл,
                                          Путь,
                                          Размер,
                                          ДатаПомещенияВРабочийКаталог,
                                          НаЧтение,
                                          ВРабочемКаталогеВладельца)
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Файл = Файл;
	НоваяЗапись.Путь = Путь;
	НоваяЗапись.Размер = Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ДатаПомещенияВРабочийКаталог;
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Очищает в регистре сведений рабочий каталог папки.
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла.
//
Процедура ОчиститьРабочийКаталог(СсылкаПапки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	
	// Не добавляем записи в набор - чтобы все стереть.
	НаборЗаписей.Записать();
	
	// Для дочерних папок очищаем рабочие каталоги.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПапкиФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьРабочийКаталог(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Находит запись в регистре сведений ФайлыВРабочемКаталоге по пути файла на диске (относительному).
//
// Параметры:
//  ИмяФайла - Строка - имя файла с относительным путем (без пути к рабочему каталогу).
//
// Возвращаемое значение:
//  Структура со свойствами:
//    Версия            - СправочникСсылка.ВерсииФайлов - найденная версия.
//    ДатаПомещения     - Дата помещения файла в рабочий каталог.
//    Владелец          - Ссылка - владелец файла.
//    НомерВерсии       - Число - номер версии.
//    ВРегистреНаЧтение - Булево - значение ресурса НаЧтение.
//    ВРегистреКодФайла - Число сюда помещается код файла.
//    ВРегистреПапка    - СправочникСсылка.ПапкиФайлов - папка файла.
//
Функция НайтиВРегистреПоПути(ИмяФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеСвойства = Новый Структура;
	НайденныеСвойства.Вставить("ФайлЕстьВРегистре", Ложь);
	НайденныеСвойства.Вставить("Файл", Справочники.ВерсииФайлов.ПустаяСсылка());
	НайденныеСвойства.Вставить("ДатаПомещения");
	НайденныеСвойства.Вставить("Владелец");
	НайденныеСвойства.Вставить("НомерВерсии");
	НайденныеСвойства.Вставить("ВРегистреНаЧтение");
	НайденныеСвойства.Вставить("ВРегистреКодФайла");
	НайденныеСвойства.Вставить("ВРегистреПапка");
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле.
	// Версия и Размер и ДатаПомещенияВРабочийКаталог.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("ИмяФайла", ИмяФайла);
	ЗапросВРегистр.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Файл КАК Файл,
	|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещения,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК ВРегистреНаЧтение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ФайлыВРабочемКаталоге.Файл) = ТИП(Справочник.ВерсииФайлов)
	|			ТОГДА ФайлыВРабочемКаталоге.Файл.Владелец
	|		ИНАЧЕ ФайлыВРабочемКаталоге.Файл
	|	КОНЕЦ КАК Владелец,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ФайлыВРабочемКаталоге.Файл) = ТИП(Справочник.ВерсииФайлов)
	|			ТОГДА ФайлыВРабочемКаталоге.Файл.НомерВерсии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерВерсии,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ФайлыВРабочемКаталоге.Файл) = ТИП(Справочник.ВерсииФайлов)
	|			ТОГДА ФайлыВРабочемКаталоге.Файл.Владелец.ВладелецФайла
	|		ИНАЧЕ ФайлыВРабочемКаталоге.Файл.ВладелецФайла
	|	КОНЕЦ КАК ВРегистреПапка
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Путь = &ИмяФайла
	|	И ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НайденныеСвойства.ФайлЕстьВРегистре = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НайденныеСвойства, Выборка);
	КонецЕсли;
	
	Возврат НайденныеСвойства;
	
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталоге информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге,
// и статус - на чтение или на редактирование).
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  ИмяКаталога - путь рабочего каталога.
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Функция ПолучитьПолноеИмяФайлаИзРегистра(Версия,
                                         ИмяКаталога,
                                         ВРабочемКаталогеНаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолноеИмяФайла = "";
	
	// Подготовить структуру отбора по измерениям.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Файл", Версия.Ссылка);

	СтруктураОтбора.Вставить("Пользователь", Пользователи.АвторизованныйПользователь());
	
	// Получить структуру с данными ресурсов записи.
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	ПолноеИмяФайла = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	ВРабочемКаталогеВладельца = СтруктураРесурсов.ВРабочемКаталогеВладельца;
	Если ПолноеИмяФайла <> "" И ВРабочемКаталогеВладельца = Ложь Тогда
		ПолноеИмяФайла = ИмяКаталога + ПолноеИмяФайла;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла.
// Параметры:
//  ТекущаяВерсия - СправочникСсылка.ВерсииФайлов - версия.
//  ПолноеИмяФайла - имя с путем в рабочем каталоге.
//  НаЧтение - Булево - файл помещен на чтение.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура ЗаписатьПолноеИмяФайлаВРегистр(ТекущаяВерсия,
                                         ПолноеИмяФайла,
                                         НаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(ТекущаяВерсия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Файл = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ПолноеИмяФайла;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге запись о данной версии файла.
// Параметры:
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//
Процедура УдалитьИзРегистра(Файл) Экспорт
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Ссылка", Истина);
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге все записи,
// кроме записей о файлах занятых текущим пользователем.
//
Процедура ОчиститьВсеСвоиКромеЗанятых() Экспорт
	
	// Отбираем все в регистре сведений. Перебираем - находим те, что не заняты текущим пользователем -
	//  и все удаляем - считаем, что на диске они уже удалены.
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокУдалить = Новый Массив;
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует.
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Файл КАК Файл,
	|	СведенияОФайлах.Редактирует КАК Редактирует
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|		ПО ФайлыВРабочемКаталоге.Файл = СведенияОФайлах.Файл
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
				
			Если Выборка.Редактирует <> ТекущийПользователь Тогда
				СписокУдалить.Добавить(Выборка.Файл);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Файл Из СписокУдалить Цикл
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Файл.Установить(Файл);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге запись о старой версии и внести запись о новой.
// Параметры:
//  СтараяВерсия - СправочникСсылка.ВерсииФайлов - старая версия.
//  НоваяВерсия - СправочникСсылка.ВерсииФайлов - новая версия.
//  ПолноеИмяФайла - имя с путем в рабочем каталоге.
//  ИмяКаталога - путь рабочего каталога.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(СтараяВерсия,
                                                       НоваяВерсия,
                                                       ПолноеИмяФайла,
                                                       ИмяКаталога,
                                                       ВРабочемКаталогеВладельца)
	
	УдалитьИзРегистра(СтараяВерсия);
	НаЧтение = Истина;
	ЗанестиИнформациюФайлаВРегистр(НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	
КонецПроцедуры

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла.
//  Версия - СправочникСсылка.ВерсииФайлов - версия.
//  ПолныйПуть - Строка - полный путь файла.
//  ИмяКаталога - путь рабочего каталога.
//  НаЧтение - Булево - файл помещен на чтение.
//  РазмерФайла  - размер файла в байтах.
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге).
//
Процедура ЗанестиИнформациюФайлаВРегистр(Версия,
                                         ПолныйПуть,
                                         ИмяКаталога,
                                         НаЧтение,
                                         РазмерФайла,
                                         ВРабочемКаталогеВладельца) Экспорт
	ПолноеИмяФайла = ПолныйПуть;
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		Если СтрНайти(ПолныйПуть, ИмяКаталога) = 1 Тогда
			ПолноеИмяФайла = Сред(ПолныйПуть, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПраваНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Ссылка", Истина);
	
	Если ЕстьПраваНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Файл.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Файл = Версия.Ссылка;
	НоваяЗапись.Путь = ПолноеИмяФайла;

	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;

	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.АвторизованныйПользователь();
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Сортирует массив структур по полю Дата - на сервере, т.к. на тонком клиенте нет ТаблицаЗначений.
//
// Параметры:
// МассивСтруктур - массив структур описаний файлов.
//
Процедура СортироватьМассивСтруктур(МассивСтруктур) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Версия");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	
	ТаблицаФайлов.Колонки.Добавить("ДатаПомещенияВРабочийКаталог", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из МассивСтруктур Цикл
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Путь, Размер, Версия, ДатаПомещенияВРабочийКаталог");
	КонецЦикла;
	
	// Сортировка по дате - в начале будут самые давно помещенные в рабочий каталог.
	ТаблицаФайлов.Сортировать("ДатаПомещенияВРабочийКаталог Возр");  
	
	МассивСтруктурВозврат = Новый Массив;
	
	Для Каждого Строка Из ТаблицаФайлов Цикл
		Запись = Новый Структура;
		Запись.Вставить("Путь", Строка.Путь);
		Запись.Вставить("Размер", Строка.Размер);
		Запись.Вставить("Версия", Строка.Версия);
		Запись.Вставить("ДатаПомещенияВРабочийКаталог", Строка.ДатаПомещенияВРабочийКаталог);
		МассивСтруктурВозврат.Добавить(Запись);
	КонецЦикла;
	
	МассивСтруктур = МассивСтруктурВозврат;
	
КонецПроцедуры

// Функция меняет ВладелецФайла объектам типа Справочник.Файл, вернет Истина при успехе.
// Параметры:
//  МассивСсылокНаФайлы - Массив - массив файлов.
//  НовыйВладелецФайла  - ЛюбаяСсылка - новый владелец файла.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция УстановитьВладельцаФайла(МассивСсылокНаФайлы, НовыйВладелецФайла) Экспорт
	Если МассивСсылокНаФайлы.Количество() = 0 Или Не ЗначениеЗаполнено(НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Тот же родитель - ничего делать не надо.
	Если МассивСсылокНаФайлы.Количество() > 0 И (МассивСсылокНаФайлы[0].ВладелецФайла = НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ФайлПринятый)).ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка",ФайлПринятый);
		КонецЦикла;
		Блокировка.Заблокировать();
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.ВладелецФайла = НовыйВладелецФайла;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция меняет свойство Родитель объектам типа Справочник.ПапкиФайла, вернет Истина при успехе, 
// в переменной НайденоЗацикливание вернет Истина, если одну из папок переносим в ее же дочернюю папку.
//
// Параметры:
//  МассивСсылокНаФайлы - Массив - массив файлов.
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла.
//  НайденоЗацикливание - Булево - возвращает Истина, если найдено зацикливание.
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция.
//
Функция СменитьРодителяПапок(МассивСсылокНаФайлы, НовыйРодитель, НайденоЗацикливание) Экспорт
	НайденоЗацикливание = Ложь;
	
	Если МассивСсылокНаФайлы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Тот же родитель - ничего делать не надо.
	Если МассивСсылокНаФайлы.Количество() = 1 И (МассивСсылокНаФайлы[0].Родитель = НовыйРодитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, НовыйРодитель) Тогда
		НайденоЗацикливание = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ФайлПринятый)).ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка",ФайлПринятый);
		КонецЦикла;
		Блокировка.Заблокировать();
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.Родитель = НовыйРодитель;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Получает данные файла для открытия и читает из общих настроек ПапкаДляСохранитьКак.
//
// Параметры:
//  ФайлИлиВерсияСсылка     - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - файл или версия файла.
//  ИдентификаторФормы      - УникальныйИдентификатор - уникальный идентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла.
//
// Возвращаемое значение:
//   Структура - структура с данными файла.
//
Функция ДанныеФайлаДляСохранения(ФайлСсылка, ВерсияСсылка = Неопределено, ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы, РабочийКаталогВладельца);
	
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);

	Возврат ДанныеФайла;
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии всех подчиненных файлов.
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл.
//  ИдентификаторФормы - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Массив - массив структур с данными файлов.
Функция ДанныеФайлаИНавигационнаяСсылкаВсехВерсийФайла(ФайлСсылка, ИдентификаторФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ДанныеФайла = ДанныеФайла(ФайлСсылка, ВерсияСсылка);
		НавигационнаяСсылкаВерсии = РаботаСФайламиСлужебный.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка", 
			ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	// Если не хранятся версии, то зашифровываем файл.
	Если Не ФайлСсылка.ХранитьВерсии Или Не ЗначениеЗаполнено(ФайлСсылка.ТекущаяВерсия) Тогда
		ДанныеФайла = ДанныеФайла(ФайлСсылка);
		НавигационнаяСсылкаВерсии = РаботаСФайламиСлужебный.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ФайлСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка", 
			ДанныеФайла, НавигационнаяСсылкаВерсии, ФайлСсылка);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЕсли;
	
	Возврат МассивВозврата;
КонецФункции

// Добавляет подпись к версии файла и отмечает файл, как подписанный.
Процедура ДобавитьПодписьКФайлу(ФайлСсылка, СвойстваПодписи, ИдентификаторФормы) Экспорт
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "Редактирует, Зашифрован");
	
	Редактирует = СтруктураРеквизитов.Редактирует;
	Если ЗначениеЗаполнено(Редактирует) Тогда
		ВызватьИсключение РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлСсылка);
	КонецЕсли;
	
	Зашифрован = СтруктураРеквизитов.Зашифрован;
	Если Зашифрован Тогда
		СтрокаИсключения = РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	МодульЭлектроннаяПодпись.ДобавитьПодпись(ФайлСсылка, СвойстваПодписи, ИдентификаторФормы);
	
КонецПроцедуры

Процедура ПоказыватьПодсказкиПриРедактированииФайлов(Значение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Значение <> Неопределено Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", Значение,,, Истина);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Информационные

// Функция возвращает количество Файлов, занятых текущим пользователем
// в разрезе владельца.
// Параметры:
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//
// Возвращаемое значение:
//   Число  - количество занятых файлов.
//
Функция КоличествоФайловЗанятыхТекущимПользователем(ВладелецФайла) Экспорт
	
	Возврат РаботаСФайламиСлужебный.КоличествоЗанятыхФайлов(ВладелецФайла);
	
КонецФункции

// Получает количество версий файла.
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл.
//
// Возвращаемое значение:
//   Число - число версий
Функция ПолучитьКоличествоВерсий(ФайлСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Число(Выборка.Количество);
	
КонецФункции

// Вернет Истина если есть зацикливание (если одну из папок переносим в ее же дочернюю папку).
// Параметры:
//  МассивСсылокНаФайлы - Массив - массив файлов.
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла.
//
// Возвращаемое значение:
//   Булево  - есть зацикливание.
//
Функция ЕстьЗацикливание(Знач МассивСсылокНаФайлы, НовыйРодитель)
	
	Если МассивСсылокНаФайлы.Найти(НовыйРодитель) <> Неопределено Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Родитель = НовыйРодитель.Родитель;
	Если Родитель.Пустая() Тогда // дошли до корня
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, Родитель) Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если в указанном элементе справочника ПапкиФайлов есть дочерний элемент с таким именем.
//
// Параметры:
//  ИмяПапки					 - Строка					     - имя папки
//  Родитель					 - ОпределяемыйТип.ВладелецПрисоединенныхФайлов	 - родитель папки.
//  ПерваяПапкаСТакимЖеИменем	 - ОпределяемыйТип.ВладелецПрисоединенныхФайлов	 - первая же найденная папка с указанным именем.
// 
// Возвращаемое значение:
//  Булево - есть дочерний элемент с таким именем.
//
Функция ЕстьПапкаСТакимИменем(ИмяПапки, Родитель, ПерваяПапкаСТакимЖеИменем) Экспорт
	
	ПерваяПапкаСТакимЖеИменем = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", ИмяПапки);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПапкиФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.Наименование = &Наименование
	|	И ПапкиФайлов.Родитель = &Родитель";
	
	Если ТипЗнч(Родитель) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Родитель);
		ЗапросВПапки.Текст = СтрЗаменить(ЗапросВПапки.Текст, ".ПапкиФайлов", "." + ИмяСправочникаХранилищаФайлов);
	КонецЕсли;
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить();
		ПерваяПапкаСТакимЖеИменем = ВыборкаЗапроса[0].Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолныйПутьПапки(Папка)
	
	ПолныйПуть = "";
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка.Ссылка, "Родитель");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
	
		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
			
			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);
		
		Если Не ПустаяСтрока(ПолныйПуть) Тогда
			ПолныйПуть = """" + ПолныйПуть + """";
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

Функция ФайлСинхронизируетсяОблачнымСервисом(Файл)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(СтатусыСинхронизацииФайловСОблачнымСервисом.Файл) КАК Файл
		|ИЗ
		|	РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
		|ГДЕ
		|	СтатусыСинхронизацииФайловСОблачнымСервисом.Файл = &Файл";
	
	Запрос.УстановитьПараметр("Файл", Файл);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КоличествоПрисоединенныхФайлов(ВладелецФайлов, ВозвращатьДанныеФайлов = Ложь) Экспорт
	
	ФайлыВладельца = Новый Структура;
	ФайлыВладельца.Вставить("КоличествоФайлов", 0);
	ФайлыВладельца.Вставить("ДанныеФайла", Неопределено);
	
	ИмяСправочникаХранения = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов);
	Если ЗначениеЗаполнено(ИмяСправочникаХранения) Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СправочникХраненияФайлов.Ссылка КАК Файл
		|ИЗ
		|	&ИмяСправочника КАК СправочникХраненияФайлов
		|ГДЕ
		|	СправочникХраненияФайлов.ВладелецФайла = &ВладелецФайла
		|	И &ЭтоГруппа = ЛОЖЬ
		|	И &Служебный = ЛОЖЬ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочникаХранения);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Служебный",
			?(РаботаСФайламиСлужебный.ЕстьРеквизитСлужебный(ИмяСправочникаХранения),
			"СправочникХраненияФайлов.Служебный", "ЛОЖЬ"));
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоГруппа", 
			?(Метаданные.Справочники[ИмяСправочникаХранения].Иерархический,
			"СправочникХраненияФайлов.ЭтоГруппа", "ЛОЖЬ"));
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
		ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
		КоличествоФайлов = ТаблицаФайлов.Количество();
		
		ФайлыВладельца.КоличествоФайлов = КоличествоФайлов;
		Если КоличествоФайлов > 0 Тогда
			ФайлыВладельца.ДанныеФайла = ДанныеФайла(ТаблицаФайлов[0].Файл, , , Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(ВозвращатьДанныеФайлов, ФайлыВладельца, ФайлыВладельца.КоличествоФайлов);
	
КонецФункции

Функция ЕстьПравоДоступа(Право, Ссылка) Экспорт
	
	Возврат ПравоДоступа(Право, Ссылка.Метаданные());
	
КонецФункции

Функция ПараметрыДобавленияИзображения(ВладелецФайлов) Экспорт
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ПравоДобавления", ЕстьПравоДоступа("Добавление", ВладелецФайлов));
	ПараметрыДобавления.Вставить("ФайлыВладельца" , КоличествоПрисоединенныхФайлов(ВладелецФайлов, Истина));
	
	Возврат ПараметрыДобавления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Создает новые файлы по аналогии с указанными.
// Параметры:
//  МассивФайлов  - Массив - массив объектов СправочникСсылка.Файлы - существующие файлы.
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла.
//
Процедура СкопироватьФайлы(МассивФайлов, ВладелецНовогоФайла) Экспорт
	
	Для каждого Файл Из МассивФайлов Цикл
		СкопироватьФайл(Файл, ВладелецНовогоФайла);
	КонецЦикла;
	
КонецПроцедуры

// Записывает ХранилищеФайла в информационную базу.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
// ХранилищеФайла - ХранилищеЗначения, с двоичными данными файла, которые требуется записать.
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ВерсияСсылка, ХранилищеФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.ДвоичныеДанныеФайла = ХранилищеФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Ставит файлу признак Зашифрован.
Процедура УстановитьПризнакЗашифрован(ФайлСсылка, Зашифрован, УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ФайлСсылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлСсылка);
		БлокировкаДанных.Заблокировать();
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
		
		ФайлОбъект.Зашифрован = Зашифрован;
		// Чтобы прошла запись ранее подписанного объекта.
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет размер файла и текущей версии. Нужно при загрузке шифрованного файла в почте.
Процедура ОбновитьРазмерФайлаИВерсии(ДанныеФайла, РазмерФайла, УникальныйИдентификатор) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВерсияОбъект = ДанныеФайла.Версия.ПолучитьОбъект();
		ВерсияОбъект.Заблокировать();
		ВерсияОбъект.Размер = РазмерФайла;
		// Чтобы прошла запись ранее подписанного объекта.
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		// Чтобы прошла запись ранее подписанного объекта.
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла.
// Кодировка - Строка - новая кодировка версии файла.
//
Процедура ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = ВерсияСсылка;
	МенеджерЗаписи.Кодировка = Кодировка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Записывает кодировку версии файла.
//
// Параметры:
// ВерсияСсылка - ссылка на версию файла.
// Кодировка - Строка кодировки.
// ИзвлеченныйТекст - текст, извлеченный из файла.
//
Процедура ЗаписатьКодировкуВерсииФайлаИИзвлеченныйТекст(ВерсияСсылка, Кодировка, ИзвлеченныйТекст) Экспорт
	
	ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка);
	ЗаписатьРезультатИзвлеченияТекстаПриРедактировании(ВерсияСсылка, Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен, 
		ИзвлеченныйТекст);
	
КонецПроцедуры

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста.
Процедура ЗаписатьРезультатИзвлеченияТекстаПриРедактировании(ВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста)
	
	ФайлЗаблокирован = Ложь;
	
	МетаданныеВерсии = Метаданные.НайтиПоТипу(ТипЗнч(ВерсияСсылка));
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("РодительскаяВерсия", МетаданныеВерсии) Тогда
		Файл = ВерсияСсылка.Владелец;
		
		Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Файл);
				ФайлЗаблокирован = Истина;
			Исключение
				// Исключение, если объект уже заблокирован, в том числе и методом Заблокировать.
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
	Иначе
		Файл = ВерсияСсылка;
	КонецЕсли;
	
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаВерсии = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаВерсии.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ВерсияСсылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ВерсияСсылка);
		БлокировкаВерсии.Заблокировать();
		
		ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
		
		Если МетаданныеВерсии.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
			Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
				
				Если Не ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
					ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(АдресВременногоХранилищаТекста, Новый СжатиеДанных(9));
					ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				Иначе
					РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста);
					ВерсияОбъект.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
					ВерсияОбъект.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения("");
			ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		КонецЕсли;
		
		Если РезультатИзвлечения = "НеИзвлечен" Тогда
			ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
			ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
			ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		КонецЕсли;
	
		// Чтобы прошла запись ранее подписанного объекта.
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		
		Если ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
			ФайлДляСравнения = Файл.ТекущаяВерсия;
		Иначе
			ФайлДляСравнения = ВерсияСсылка;
		КонецЕсли;
		
		Если ФайлДляСравнения = ВерсияСсылка Тогда
			БлокировкаФайла = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаФайла.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Файл)).ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Файл);
			БлокировкаФайла.Заблокировать();
			
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ТекстХранилище = ВерсияОбъект.ТекстХранилище;
			// Чтобы прошла запись ранее подписанного объекта.
			ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ФайлЗаблокирован Тогда
		РазблокироватьДанныеДляРедактирования(Файл);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////
///// Общие файловые функции
// См. эту процедуру в модуле РаботаСФайламиСлужебный.
Процедура ЗаписатьРезультатИзвлеченияТекста(ФайлИлиВерсияСсылка,
                                            РезультатИзвлечения,
                                            АдресВременногоХранилищаТекста) Экспорт
	
	РаботаСФайламиСлужебный.ЗаписатьРезультатИзвлеченияТекста(
		ФайлИлиВерсияСсылка,
		РезультатИзвлечения,
		АдресВременногоХранилищаТекста);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПроверитьПодписи(ИсходныеДанные, ДанныеСтрок) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	МенеджерКриптографии = МодульЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи");
	
	Для каждого СтрокаПодписи Из ДанныеСтрок Цикл
		ОписаниеОшибки = "";
		ПодписьВерна = МодульЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
			ИсходныеДанные, СтрокаПодписи.АдресПодписи, ОписаниеОшибки, СтрокаПодписи.ДатаПодписи);
		
		СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаПодписи.ПодписьВерна   = ПодписьВерна;
		СтрокаПодписи.ОписаниеОшибки = ОписаниеОшибки;
		
		РаботаСФайламиСлужебныйКлиентСервер.ЗаполнитьСтатусПодписи(СтрокаПодписи);
	КонецЦикла;
	
КонецПроцедуры

// Заносит номер в регистр сведений НомераОтсканированныхФайлов.
//
// Параметры:
// Владелец - ЛюбаяСсылка - владелец файла.
// НовыйНомер -  Число  - максимальный номер для сканирования.
//
Процедура ЗанестиМаксимальныйНомерДляСканирования(Владелец, НовыйНомер) Экспорт
	
	// Подготовить структуру отбора по измерениям.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Владелец);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераОтсканированныхФайлов");
		ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
		Блокировка.Заблокировать();   		
		
		// Получить структуру с данными ресурсов записи.
		СтруктураРесурсов = РегистрыСведений.НомераОтсканированныхФайлов.Получить(СтруктураОтбора);
		   
		// Получить максимальный номер из регистра.
		Номер = СтруктураРесурсов.Номер;
		Если НовыйНомер <= Номер Тогда // Кто-то другой уже записал бОльший номер.
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Номер = НовыйНомер;
		УстановитьПривилегированныйРежим(Истина);
		
		// Запишем новый номер в регистр.
		НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Владелец = Владелец;
		НоваяЗапись.Номер = Номер;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПоместитьФайлыВоВременноеХранилище(Параметры) Экспорт
	
	Результат = Новый Массив;
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	Для Каждого ФайлВложение Из Параметры.МассивФайлов Цикл
		РаботаСФайламиСлужебный.СформироватьСписокФайловДляОтправкиПоПочте(Результат, ФайлВложение, Параметры.ИдентификаторФормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Печать табличного документа со штампом электронной подписи.

Функция ТабличныйДокументСоШтампом(СсылкаНаФайл, Ссылка) Экспорт
	
	ДанныеФайла    = РаботаСФайлами.ДанныеФайла(СсылкаНаФайл);
	ВременныйФайл = ПолучитьИмяВременногоФайла(".mxl");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанные.Записать(ВременныйФайл);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ВременныйФайл);
	
	УдалитьФайлы(ВременныйФайл);
	
	МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	
	ПараметрыШтампа = Новый Структура;
	ПараметрыШтампа.Вставить("ТекстОтметки", "");
	ПараметрыШтампа.Вставить("Логотип");
	
	ЭлектронныеПодписи = МодульЭлектроннаяПодпись.УстановленныеПодписи(Ссылка);
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВладелецФайла");
	
	СведенияОФайле = Новый Структура;
	СведенияОФайле.Вставить("ВладелецФайла", ВладелецФайла);
	
	Штампы = Новый Массив;
	Для Каждого Подпись Из ЭлектронныеПодписи Цикл
		Сертификат = Подпись.Сертификат;
		СертификатКриптографии = Новый СертификатКриптографии(Сертификат.Получить());
		РаботаСФайламиПереопределяемый.ПриПечатиФайлаСоШтампом(ПараметрыШтампа, СертификатКриптографии);
		
		Штамп = МодульЭлектроннаяПодпись.ШтампВизуализацииЭлектроннойПодписи(СертификатКриптографии,
			Подпись.ДатаПодписи, ПараметрыШтампа.ТекстОтметки, ПараметрыШтампа.Логотип);
		Штампы.Добавить(Штамп);
	КонецЦикла;
	
	МодульЭлектроннаяПодпись.ДобавитьШтампыВТабличныйДокумент(ТабличныйДокумент, Штампы);
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти
