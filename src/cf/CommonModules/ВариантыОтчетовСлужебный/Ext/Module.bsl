///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Свойства результата отчета (табличного документа и настроек) для контекстной настройки.
//
// Возвращаемое значение:
//   Структура:
//     * Заголовки - Соответствие
//     * ГраницыРазделов - см. ГраницыРазделовОтчета
//     * РолиПолей - см. РолиПолейОтчета
//     * ИндексПолей - см. ИндексПолейСтруктурыОтчета
//     * ОсновныеПоля - Массив из см. ОсновныеПоляОтчета
//     * ИтоговыеНастройки - НастройкиКомпоновкиДанных - см. синтакс-помощник КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
//     * КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
//     * ВремяФормирования - Число
//
Функция СвойстваРезультатаОтчета() Экспорт 
	
	СвойстваРезультата = Новый Структура;
	СвойстваРезультата.Вставить("АдресИндексаСтруктурыОтчета", Неопределено);
	СвойстваРезультата.Вставить("Заголовки", Новый Соответствие);
	СвойстваРезультата.Вставить("ГраницыРазделов", Новый СписокЗначений);
	СвойстваРезультата.Вставить("РолиПолей", Новый Структура);
	СвойстваРезультата.Вставить("ИндексПолей", Новый Соответствие);
	СвойстваРезультата.Вставить("ОсновныеПоля", Новый Массив);
	СвойстваРезультата.Вставить("ИтоговыеНастройки", Неопределено);
	СвойстваРезультата.Вставить("КомпоновщикНастроек", Неопределено);
	СвойстваРезультата.Вставить("ВремяФормирования", 0);
	
	Возврат СвойстваРезультата;
	
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//        - РасширениеУправляемойФормыДляОтчета
//
Процедура ИнициализироватьЗаголовкиОтчета(Форма) Экспорт 
	
	НастройкиОтчета = Форма.НастройкиОтчета; // см. ВариантыОтчетов.НастройкиФормыОтчета
	
	Если Не РежимВариантаОтчета(Форма.КлючТекущегоВарианта)
		Или Не НастройкиОтчета.РазрешеноИзменятьВарианты Тогда 
		
		Возврат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	
	Элементы = Форма.Элементы;
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата; // см. ВариантыОтчетовСлужебный.СвойстваРезультатаОтчета
	РезультатОтчета = Форма.ОтчетТабличныйДокумент;
	
	РазрезСвойствЗаголовков = СтандартныйРазрезСвойствЗаголовковОтчета();
	
	Для НомерСтроки = 1 По РезультатОтчета.ВысотаТаблицы Цикл 
		
		Для НомерКолонки = 1 По РезультатОтчета.ШиринаТаблицы Цикл 
			
			Ячейка = РезультатОтчета.Область(НомерСтроки, НомерКолонки);
			
			Если Ячейка.РежимИзмененияРазмераКолонки <> РежимИзмененияРазмера.БыстроеИзменение Тогда 
				Продолжить;
			КонецЕсли;
			
			Ячейка.ГиперСсылка = Истина;
			
			ЗаполнитьЗначенияСвойств(РазрезСвойствЗаголовков.Добавить(), Ячейка);
			
			СвойстваЗаголовка = СтандартныеСвойстваЗаголовкаОтчета();
			ЗаполнитьЗначенияСвойств(СвойстваЗаголовка, Ячейка);
			
			Заголовки.Вставить(Ячейка.Имя, СвойстваЗаголовка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОпределитьИерархиюЗаголовковОтчета(РазрезСвойствЗаголовков, Заголовки);
	ГраницыРазделов = ГраницыРазделовОтчета(РезультатОтчета, РазрезСвойствЗаголовков);
	
	ИндексСтруктурыОтчета = ИндексСтруктурыОтчета(Форма);
	ДополнитьСвойстваЗаголовковОтчета(Форма, РезультатОтчета, Заголовки, РазрезСвойствЗаголовков, ИндексСтруктурыОтчета, ГраницыРазделов);
	
	Ячейка = Элементы.ОтчетТабличныйДокумент.ТекущаяОбласть;
	
	Если Ячейка <> Неопределено Тогда 
		ВариантыОтчетовСлужебныйКлиентСервер.ОпределитьДоступностьДействийКонтекстногоМеню(Форма, Заголовки[Ячейка.Имя]);
	КонецЕсли;
	
	СвойстваРезультата.Заголовки = Заголовки;
	СвойстваРезультата.ГраницыРазделов = ГраницыРазделов;
	
КонецПроцедуры

Функция РежимВариантаОтчета(КлючВарианта) Экспорт 
	
	Возврат ТипЗнч(КлючВарианта) = Тип("Строка")
		И Не ПустаяСтрока(КлючВарианта);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИндексацияРазделовОтчета

Функция ИндексСтруктурыОтчета(Форма)
	
	НастройкиОтчета = Форма.НастройкиОтчета;
	СвойстваРезультата = НастройкиОтчета.СвойстваРезультата;
	
	ИтоговыеНастройки = Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ОтчетыСервер.ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, НастройкиОтчета.АдресСхемы);
	КомпоновщикНастроек.ЗагрузитьНастройки(ИтоговыеНастройки);
	
	СкопироватьДополнительныеСвойстваНастроек(КомпоновщикНастроек, Форма.Отчет.КомпоновщикНастроек);
	
	СвойстваРезультата.ИтоговыеНастройки = ИтоговыеНастройки;
	СвойстваРезультата.КомпоновщикНастроек = КомпоновщикНастроек;
	СвойстваРезультата.РолиПолей = РолиПолейОтчета(НастройкиОтчета.АдресСхемы);
	
	ИндексСтруктурыОтчета = НовыйИндексСтруктурыОтчета();
	ИндексироватьРазделыОтчета(СвойстваРезультата, СвойстваРезультата.ИтоговыеНастройки, ИндексСтруктурыОтчета);
	ИндексироватьГруппировкиОтчета(СвойстваРезультата, ИндексСтруктурыОтчета);
	
	УдалитьНеидентифицированныеПоля(ИндексСтруктурыОтчета);
	УточнитьПорядокРазделов(ИндексСтруктурыОтчета);
	ОпределитьРолиПолей(ИндексСтруктурыОтчета, СвойстваРезультата.РолиПолей);
	УстановитьИдентификаторыИндексаСтруктурыОтчета(ИндексСтруктурыОтчета);
	ОпределитьДоступныеДействияПолейОтчета(ИндексСтруктурыОтчета);
	
	СвойстваРезультата.АдресИндексаСтруктурыОтчета = ПоместитьВоВременноеХранилище(
		ИндексСтруктурыОтчета, Форма.УникальныйИдентификатор);
	
	СвойстваРезультата.ИндексПолей = ИндексПолейСтруктурыОтчета(ИндексСтруктурыОтчета);
	СвойстваРезультата.ОсновныеПоля = ОсновныеПоляОтчета(Форма);
	
	Возврат ИндексСтруктурыОтчета;
	
КонецФункции

Процедура СкопироватьДополнительныеСвойстваНастроек(Приемник, Источник)
	
	ВидыНастроек = СтрРазделить("Настройки, ПользовательскиеНастройки", ", ", Ложь);
	
	Для Каждого ВидНастроек Из ВидыНастроек Цикл 
		
		СвойстваИсточника = Источник[ВидНастроек].ДополнительныеСвойства;
		
		СвойстваПриемника = Приемник[ВидНастроек].ДополнительныеСвойства;
		СвойстваПриемника.Очистить();
		
		Для Каждого Свойство Из СвойстваИсточника Цикл 
			СвойстваПриемника.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИндексироватьРазделыОтчета(СвойстваРезультата, Настройки, ИндексСтруктурыОтчета, ПорядокРаздела = 0)
	
	Для Каждого Раздел Из Настройки.Структура Цикл 
		
		Если Не Раздел.Использование
			Или ТипЗнч(Раздел) = Тип("ДиаграммаКомпоновкиДанных") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Раздел) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда 
			
			ИндексироватьРазделыОтчета(СвойстваРезультата, Раздел.Настройки, ИндексСтруктурыОтчета, ПорядокРаздела);
		
		Иначе
			
			ПорядокРаздела = ПорядокРаздела + 1;
			
			ИндексРаздела = ИндексСтруктурыОтчета.Добавить();
			ИндексРаздела.ПорядокРаздела = ПорядокРаздела;
			ИндексРаздела.ИдентификаторНастроек = СвойстваРезультата.ИтоговыеНастройки.ПолучитьИдентификаторПоОбъекту(Настройки);
			ИндексРаздела.ИдентификаторРаздела = Настройки.ПолучитьИдентификаторПоОбъекту(Раздел);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИндексироватьГруппировкиОтчета(СвойстваРезультата, ИндексСтруктурыОтчета)
	
	ИндексРазделовОтчетов = ИндексСтруктурыОтчета.Скопировать();
	
	Для Каждого ИндексРаздела Из ИндексРазделовОтчетов Цикл 
		
		Настройки = СвойстваРезультата.ИтоговыеНастройки.ПолучитьОбъектПоИдентификатору(ИндексРаздела.ИдентификаторНастроек);
		Раздел = Настройки.ПолучитьОбъектПоИдентификатору(ИндексРаздела.ИдентификаторРаздела); // ГруппировкаКомпоновкиДанных, ТаблицаКомпоновкиДанных
		
		Если ТипЗнч(Раздел) = Тип("ДиаграммаКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		ПорядокГруппировки = 0;
		ПорядокПоля = 0;
		
		Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
			
			ПоляСортировки = Новый Соответствие;
			
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел.Строки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел.Колонки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
		Иначе
			
			ИндексГруппировки = ИндексГруппировкиОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел, ПорядокГруппировки);
			
			ПоляСортировки(Раздел, Настройки, ПоляСортировки);
			
			ИндексироватьПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Раздел, ПорядокПоля, ПоляСортировки);
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Раздел.Структура, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИндексироватьГруппировкиРазделаОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки,
	Группировки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки = Неопределено)
	
	Для Каждого Элемент Из Группировки Цикл 
		
		Если Не Элемент.Использование Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда 
			
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Элемент.Настройки, Элемент.Настройки.Структура, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда 
			
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент.Строки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент.Колонки, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
		ИначеЕсли ТипЭлемента <> Тип("ДиаграммаКомпоновкиДанных") Тогда 
			
			ПоляСортировки(Элемент, Настройки, ПоляСортировки);
			
			ИндексГруппировки = ИндексГруппировкиОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент, ПорядокГруппировки);
			
			ИндексироватьПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки, Элемент, ПорядокПоля, ПоляСортировки);
			ИндексироватьГруппировкиРазделаОтчета(
				ИндексСтруктурыОтчета, ИндексРаздела, Настройки, Элемент.Структура, ПорядокГруппировки, ПорядокПоля, ПоляСортировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Группировка - НастройкиКомпоновкиДанных
//              - ГруппировкаКомпоновкиДанных
//              - ГруппировкаТаблицыКомпоновкиДанных
//  Настройки - НастройкиКомпоновкиДанных
//  ПоляСортировки - Соответствие
//                 - Неопределено
//  Замещать - Булево
//
// Возвращаемое значение:
//  Соответствие
//
Функция ПоляСортировки(Группировка, Настройки, ПоляСортировки = Неопределено, Замещать = Истина)
	
	Если ПоляСортировки = Неопределено Тогда 
		ПоляСортировки = Новый Соответствие;
	КонецЕсли;
	
	ТипГруппировки = ТипЗнч(Группировка);
	
	Если ТипГруппировки <> Тип("НастройкиКомпоновкиДанных")
		И ТипГруппировки <> Тип("ГруппировкаКомпоновкиДанных")
		И ТипГруппировки <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 
		
		Возврат ПоляСортировки;
	КонецЕсли;
	
	ЭлементыСортировки = Группировка.Порядок.Элементы;
	
	Для Каждого Элемент Из ЭлементыСортировки Цикл 
		
		Если Не Элемент.Использование Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных")
			И ТипГруппировки <> Тип("НастройкиКомпоновкиДанных") Тогда 
			
			ПоляСортировки(Настройки, Настройки, ПоляСортировки, Ложь);
			
		ИначеЕсли ТипЗнч(Элемент) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных")
			И (Замещать Или ПоляСортировки[Элемент.Поле] = Неопределено) Тогда 
			
			ПоляСортировки.Вставить(Элемент.Поле, Элемент.ТипУпорядочивания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоляСортировки;
	
КонецФункции

Функция ИндексГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексРаздела, Настройки,
	Группировка, ПорядокГруппировки)
	
	ПорядокГруппировки = ПорядокГруппировки + 1;
	
	ИндексГруппировки = ИндексСтруктурыОтчета.Добавить();
	ЗаполнитьЗначенияСвойств(ИндексГруппировки, ИндексРаздела);
	
	ИндексГруппировки.ПорядокГруппировки = ПорядокГруппировки;
	ИндексГруппировки.ИдентификаторГруппировки = Настройки.ПолучитьИдентификаторПоОбъекту(Группировка);
	ИндексГруппировки.ПредставлениеГруппировки = Строка(Группировка.ПоляГруппировки);
	ИндексГруппировки.СодержитРодительскиеГруппировки = СодержитРодительскиеГруппировки(Группировка);
	ИндексГруппировки.СодержитДочерниеГруппировки = СодержитДочерниеГруппировки(Группировка);
	
	Возврат ИндексГруппировки;
	
КонецФункции

Функция СодержитРодительскиеГруппировки(Группировка)
	
	ТипРодителя = ТипЗнч(Группировка.Родитель);
	
	Возврат ТипРодителя = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипРодителя = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	
КонецФункции

Функция СодержитДочерниеГруппировки(Группировка)
	
	Для Каждого Элемент Из Группировка.Структура Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента <> Тип("ГруппировкаКомпоновкиДанных")
			И ТипЭлемента <> Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Использование Тогда 
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ИндексироватьПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки,
	Группировка, ПорядокПоля, ПоляСортировки)
	
	ИспользуемыеПоляГруппировки = Новый Соответствие;
	
	ИспользуетсяАвтоПоле = ИспользуетсяАвтоПоле(Группировка.Выбор);
	ИспользуемыеНастройки = ИспользуемыеНастройкиГруппировкиОтчета(Настройки, Группировка);
	
	ПоляГруппировки = Группировка.ПоляГруппировки;
	
	Для Каждого Элемент Из ПоляГруппировки.Элементы Цикл 
		
		Если ТипЗнч(Элемент) <> Тип("ПолеГруппировкиКомпоновкиДанных")
			Или Не Элемент.Использование Тогда 
			
			Продолжить;
		КонецЕсли;
		
		ИспользуемыеПоляГруппировки.Вставить(Элемент.Поле, Элемент);
		
		Если ИспользуетсяАвтоПоле
			И Не ВариантыОтчетовСлужебныйКлиентСервер.ПолеСодержитсяВГруппировкеОтчета(Группировка.Выбор, Элемент.Поле)
			И Не ВариантыОтчетовСлужебныйКлиентСервер.ПолеСодержитсяВГруппировкеОтчета(ИспользуемыеНастройки.Выбор, Элемент.Поле) Тогда 
			
			ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, ПоляГруппировки,
				Элемент, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИндексироватьВыбранныеПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки,
		Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
	
КонецПроцедуры

Функция ИспользуетсяАвтоПоле(Поля)
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			Или ТипЗнч(Элемент) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда 
			
			Возврат Элемент.Использование;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ИндексироватьВыбранныеПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки,
	Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Поля = Неопределено, Родитель = Неопределено)
	
	Если Поля = Неопределено Тогда 
		Поля = Группировка.Выбор;
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда 
		Родитель = Группировка.Выбор;
	КонецЕсли;
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда 
			
			ИндексироватьВыбранныеПоляНастроекОтчета(
				ИндексСтруктурыОтчета,
				ИндексГруппировки,
				Настройки,
				Группировка,
				ПорядокПоля,
				ПоляСортировки,
				ИспользуемыеПоляГруппировки);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			ИндексироватьВыбранныеПоляГруппировкиОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки,
				Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Элемент, Родитель);
			
		ИначеЕсли РазрешеноИспользоватьПолеВГруппировке(Группировка, Элемент.Поле) Тогда 
			
			ДобавитьПолеОтчетаВИндекс(
				ИндексСтруктурыОтчета,
				ИндексГруппировки,
				Родитель,
				Элемент,
				ПорядокПоля,
				ПоляСортировки,
				ИспользуемыеПоляГруппировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИндексироватьВыбранныеПоляНастроекОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки,
	Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Поля = Неопределено, Родитель = Неопределено)
	
	ИспользуемыеНастройки = ИспользуемыеНастройкиГруппировкиОтчета(Настройки, Группировка);
	
	Если Поля = Неопределено Тогда 
		Поля = ИспользуемыеНастройки.Выбор;
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда 
		Родитель = ИспользуемыеНастройки.Выбор;
	КонецЕсли;
	
	ПоляСортировки(Группировка, Настройки, ПоляСортировки);
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			ИндексироватьВыбранныеПоляНастроекОтчета(ИндексСтруктурыОтчета, ИндексГруппировки, Настройки,
				Группировка, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки, Элемент, Родитель);
			
		ИначеЕсли ТипЭлемента <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			И РазрешеноИспользоватьПолеВГруппировке(Группировка, Элемент.Поле)
			И Не ВариантыОтчетовСлужебныйКлиентСервер.ПолеСодержитсяВГруппировкеОтчета(Группировка.Выбор, Элемент.Поле, Ложь) Тогда 
			
			ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, Родитель, Элемент, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазрешеноИспользоватьПолеВГруппировке(Группировка, Поле)
	
	Элементы = Группировка.ПоляГруппировки.Элементы;
	ЭтоГруппировкаДетальныхЗаписей = (Элементы.Количество() = 0);
	
	Если ЭтоГруппировкаДетальныхЗаписей
		И (ВариантыОтчетовСлужебныйКлиентСервер.ПолеСодержитсяВГруппировкеОтчета(Группировка.Выбор, Поле)
		Или Не ВариантыОтчетовСлужебныйКлиентСервер.ПолеИспользуетсяВРодительскихГруппировкахОтчета(Группировка.Родитель, Поле)) Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	ДоступноеПоле = Группировка.Выбор.ДоступныеПоляВыбора.НайтиПоле(Поле);
	
	Если ДоступноеПоле = Неопределено Тогда 
		ДоступноеПоле = Группировка.ПоляГруппировки.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле);
	КонецЕсли;
	
	Если ДоступноеПоле <> Неопределено
		И ДоступноеПоле.Ресурс Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных")
			И Элемент.Использование
			И (Элемент.Поле = Поле
				Или СтрНайти(Строка(Элемент.Поле), Строка(Поле)) > 0
				Или СтрНайти(Строка(Поле), Строка(Элемент.Поле)) > 0) Тогда 
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользуемыеНастройкиГруппировкиОтчета(Настройки, Группировка)
	
	Если ТипЗнч(Группировка.Родитель) = Тип("НастройкиКомпоновкиДанных") Тогда 
		Возврат Группировка.Родитель;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура ДобавитьПолеОтчетаВИндекс(ИндексСтруктурыОтчета, ИндексГруппировки, Родитель, Поле, ПорядокПоля, ПоляСортировки, ИспользуемыеПоляГруппировки)
	
	Если Не Поле.Использование Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоляОтчета(Родитель, Поле, ИспользуемыеПоляГруппировки);
	
	Если ОписаниеПоля.Ресурс
		И СтрНайти(ИндексГруппировки.ИдентификаторГруппировки, "/row/") > 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	Поиск = Новый Структура("ПорядокРаздела, ПорядокГруппировки, Поле");
	ЗаполнитьЗначенияСвойств(Поиск, ИндексГруппировки);
	Поиск.Поле = Поле.Поле;
	
	НайденныеИндексыПоля = ИндексСтруктурыОтчета.НайтиСтроки(Поиск);
	
	Если НайденныеИндексыПоля.Количество() > 0 Тогда 
		
		ИндексПоля = НайденныеИндексыПоля[0];
		
	Иначе
		
		ПорядокПоля = ПорядокПоля + 1;
		
		ИндексПоля = ИндексСтруктурыОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(ИндексПоля, ИндексГруппировки);
		ИндексПоля.ПорядокПоля = ПорядокПоля;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ИндексПоля, ОписаниеПоля);
	
	ИндексПоля.ПредставлениеПоля = ВРег(ИндексПоля.ПредставлениеПоля);
	ИндексПоля.НаправлениеСортировки = ПоляСортировки[Поле.Поле];
	ИндексПоля.ПолеСортируется = (ИндексПоля.НаправлениеСортировки <> Неопределено);
	
КонецПроцедуры

Функция ОписаниеПоляОтчета(Родитель, Поле, ИспользуемыеПоляГруппировки)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Поле", Поле.Поле);
	ОписаниеПоля.Вставить("ИдентификаторПоля", Родитель.ПолучитьИдентификаторПоОбъекту(Поле));
	ОписаниеПоля.Вставить("ПредставлениеПоля", Строка(Поле.Поле));
	ОписаниеПоля.Вставить("ТипПоля", ТипЗнч(Поле));
	ОписаниеПоля.Вставить("ИспользуетсяВПоляхГруппировки", ИспользуемыеПоляГруппировки[Поле.Поле] <> Неопределено);
	ОписаниеПоля.Вставить("ТипЗначения", Новый ОписаниеТипов("Неопределено"));
	ОписаниеПоля.Вставить("Ресурс", Ложь);
	
	ДоступноеПоле = Неопределено;
	
	Если ОписаниеПоля.ТипПоля = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда 
		
		ДоступноеПоле = Родитель.ДоступныеПоляПолейГруппировок.НайтиПоле(Поле.Поле);
		
	ИначеЕсли ОписаниеПоля.ТипПоля = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда 
		
		ДоступноеПоле = Родитель.ДоступныеПоляВыбора.НайтиПоле(Поле.Поле);
		
	КонецЕсли;
	
	Если ДоступноеПоле <> Неопределено Тогда 
		
		ОписаниеПоля.ПредставлениеПоля = ДоступноеПоле.Заголовок;
		ОписаниеПоля.Ресурс = ДоступноеПоле.Ресурс;
		ОписаниеПоля.ТипЗначения = ДоступноеПоле.ТипЗначения;
		
	КонецЕсли;
	
	Если ОписаниеПоля.ТипПоля = Тип("ВыбранноеПолеКомпоновкиДанных")
		И ЗначениеЗаполнено(Поле.Заголовок) Тогда 
		
		ОписаниеПоля.ПредставлениеПоля = Поле.Заголовок;
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

Процедура УдалитьНеидентифицированныеПоля(ИндексСтруктурыОтчета)
	
	НайденныеЗаписи = ИндексСтруктурыОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля", Неопределено));
	Для Каждого Запись Из НайденныеЗаписи Цикл 
		ИндексСтруктурыОтчета.Удалить(Запись);
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьПорядокРазделов(ИндексСтруктурыОтчета)
	
	ИндексСтруктурыОтчета.Сортировать("ПорядокРаздела, ПорядокГруппировки, ПорядокПоля");
	
	Разделы = ИндексСтруктурыОтчета.Скопировать();
	Разделы.Свернуть("ПорядокРаздела");
	
	Поиск = Новый Структура("ПорядокРаздела");
	
	Для ПорядокРаздела = 1 По Разделы.Количество() Цикл 
		
		Поиск.ПорядокРаздела = Разделы[ПорядокРаздела - 1].ПорядокРаздела;
		НайденныеЗаписи = ИндексСтруктурыОтчета.НайтиСтроки(Поиск);
		
		Для Каждого Запись Из НайденныеЗаписи Цикл 
			Запись.ПорядокРаздела = ПорядокРаздела;
		КонецЦикла;
		
	КонецЦикла;
	
	ИндексСтруктурыОтчета.ЗаполнитьЗначения(Разделы.Количество(), "КоличествоРазделов");
	
КонецПроцедуры

Процедура ОпределитьРолиПолей(ИндексСтруктурыОтчета, РолиПолей)
	
	Для Каждого Запись Из ИндексСтруктурыОтчета Цикл 
		
		Запись.Период = (РолиПолей.Периоды[Запись.Поле] <> Неопределено);
		Запись.Измерение = (РолиПолей.Измерения[Запись.Поле] <> Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РолиПолейОтчета(АдресСхемы)
	
	РолиПолей = Новый Структура;
	РолиПолей.Вставить("Периоды", Новый Соответствие);
	РолиПолей.Вставить("Измерения", Новый Соответствие);
	РолиПолей.Вставить("Остатки", Новый Соответствие);
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	Для Каждого НаборДанных Из Схема.НаборыДанных Цикл 
		
		Для Каждого Поле Из НаборДанных.Поля Цикл 
			
			Если ТипЗнч(Поле) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Поле.Роль.НомерПериода > 0 Тогда 
				
				РолиПолей.Периоды.Вставить(Новый ПолеКомпоновкиДанных(Поле.Поле), ОписаниеРолиПоляОтчета(Поле.Роль));
				
			ИначеЕсли Поле.Роль.Измерение Тогда 
				
				РолиПолей.Измерения.Вставить(Новый ПолеКомпоновкиДанных(Поле.Поле), ОписаниеРолиПоляОтчета(Поле.Роль));
				
			ИначеЕсли Поле.Роль.Остаток Тогда 
				
				РолиПолей.Остатки.Вставить(Новый ПолеКомпоновкиДанных(Поле.Поле), ОписаниеРолиПоляОтчета(Поле.Роль));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РолиПолей;
	
КонецФункции

Функция ОписаниеРолиПоляОтчета(Роль)
	
	ОписаниеРоли = Новый Структура("ВыражениеВидаСчета, ГруппаОстатка, ИгнорироватьЗначенияNULL, Измерение,
		|НомерПериода, Обязательное, Остаток, ПолеСчета, РеквизитИзмерения, РодительскоеИзмерение, Счет");
	
	ЗаполнитьЗначенияСвойств(ОписаниеРоли, Роль);
	
	ОписаниеРоли.Вставить("ТипБухгалтерскогоОстатка", Строка(Роль.ТипБухгалтерскогоОстатка));
	ОписаниеРоли.Вставить("РодительскоеИзмерение", Строка(Роль.РодительскоеИзмерение));
	ОписаниеРоли.Вставить("ТипПериода", Строка(Роль.ТипПериода));
	
	Возврат ОписаниеРоли;
	
КонецФункции

Процедура УстановитьИдентификаторыИндексаСтруктурыОтчета(ИндексСтруктурыОтчета)
	
	Для Каждого Индекс Из ИндексСтруктурыОтчета Цикл 
		Индекс.ИдентификаторИндекса = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	ИндексСтруктурыОтчета.Индексы.Добавить("ИдентификаторИндекса");
	
КонецПроцедуры

Процедура ОпределитьДоступныеДействияПолейОтчета(ИндексСтруктурыОтчета)
	
	Разделы = ИндексСтруктурыОтчета.Скопировать();
	Разделы.Свернуть("ПорядокРаздела");
	ПорядокРазделов = Разделы.ВыгрузитьКолонку("ПорядокРаздела");
	
	Для Каждого ПорядокРаздела Из ПорядокРазделов Цикл 
		
		ОпределитьДоступныеДействияПолейРазделаОтчета(ИндексСтруктурыОтчета, ПорядокРаздела);
		ОпределитьДоступныеДействияПолейРазделаОтчета(ИндексСтруктурыОтчета, ПорядокРаздела, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьДоступныеДействияПолейРазделаОтчета(ИндексСтруктурыОтчета, ПорядокРаздела, ЭтоРесурс = Ложь)
	
	ПоискПолейРаздела = Новый Структура("ПорядокРаздела, Ресурс", ПорядокРаздела, ЭтоРесурс);
	ПоляГруппировок = ИндексСтруктурыОтчета.Скопировать(ПоискПолейРаздела);
	
	ПоискПолейГруппировки = Новый Структура("ПорядокГруппировки");
	
	Группировки = ПоляГруппировок.Скопировать();
	Группировки.Свернуть("ПорядокГруппировки");
	ПорядокГруппировок = Группировки.ВыгрузитьКолонку("ПорядокГруппировки");
	
	Для Каждого ПорядокГруппировки Из ПорядокГруппировок Цикл 
		
		ПоискПолейГруппировки.ПорядокГруппировки = ПорядокГруппировки;
		ПоляГруппировки = ПоляГруппировок.Скопировать(ПоискПолейГруппировки);
		ПоляГруппировки.Сортировать("ПорядокПоля");
		
		ПоискПолейГруппировки.ПорядокГруппировки = ПорядокГруппировки - 1;
		ПоляГруппировкиВыше = ПоляГруппировок.Скопировать(ПоискПолейГруппировки);
		
		ПоискПолейГруппировки.ПорядокГруппировки = ПорядокГруппировки + 1;
		ПоляГруппировкиНиже = ПоляГруппировок.Скопировать(ПоискПолейГруппировки);
		
		Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл 
			
			ЭтоПолеГруппировкиКолонки = СтрНайти(ПолеГруппировки.ИдентификаторГруппировки, "/column/") > 0
				И ПолеГруппировки.ИспользуетсяВПоляхГруппировки;
			
			Индекс = ИндексСтруктурыОтчета.Найти(ПолеГруппировки.ИдентификаторИндекса, "ИдентификаторИндекса");
			Индекс.ВставитьПолеСлева = Не ЭтоПолеГруппировкиКолонки;
			Индекс.ВставитьПолеСправа = Не ЭтоПолеГруппировкиКолонки;
			Индекс.ВставитьГруппировкуВыше = Не ЭтоПолеГруппировкиКолонки И Не ЭтоРесурс;
			Индекс.ВставитьГруппировкуНиже = Не ЭтоПолеГруппировкиКолонки И Не ЭтоРесурс;
			
			Индекс.ПереместитьПолеВыше = Не ЭтоПолеГруппировкиКолонки
				И Не ЭтоРесурс
				И Индекс.СодержитРодительскиеГруппировки
				И ПоляГруппировкиВыше.Найти(Не ПолеГруппировки.Период, "Период") = Неопределено;
			
			Индекс.ПереместитьПолеНиже = Не ЭтоПолеГруппировкиКолонки
				И Не ЭтоРесурс
				И Индекс.СодержитДочерниеГруппировки
				И ПоляГруппировкиНиже.Найти(Не ПолеГруппировки.Период, "Период") = Неопределено;
			
			Если Не ЭтоПолеГруппировкиКолонки
				И ПоляГруппировки.Индекс(ПолеГруппировки) > 0 Тогда 
				
				Индекс.ПереместитьПолеВлево = Истина;
			КонецЕсли;
			
			Если Не ЭтоПолеГруппировкиКолонки
				И ПоляГруппировки.Индекс(ПолеГруппировки) < ПоляГруппировки.Количество() - 1 Тогда 
				
				Индекс.ПереместитьПолеВправо = Истина;
			КонецЕсли;
			
			Индекс.СкрытьПоле = Не ЭтоПолеГруппировкиКолонки;
			Индекс.ПереименоватьПоле = Не ЭтоПолеГруппировкиКолонки;
			Индекс.ОформитьЕще = Не ЭтоПолеГруппировкиКолонки;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Функция ИндексПолейСтруктурыОтчета(ИндексСтруктурыОтчета)
	
	ИндексПолей = Новый Соответствие;
	
	Разделы = ИндексСтруктурыОтчета.Скопировать();
	Разделы.Свернуть("ПорядокРаздела");
	
	ПорядокРазделов = Разделы.ВыгрузитьКолонку("ПорядокРаздела");
	
	ПоискГруппировок = Новый Структура("ПорядокРаздела");
	ПоискПоля = Новый Структура("ПорядокРаздела, ПорядокГруппировки");
	
	Для Каждого ПорядокРаздела Из ПорядокРазделов Цикл 
		
		ПоискГруппировок.ПорядокРаздела = ПорядокРаздела;
		Группировки = ИндексСтруктурыОтчета.Скопировать(ПоискГруппировок);
		Группировки.Свернуть("ПорядокГруппировки");
		
		ПорядокГруппировок = Группировки.ВыгрузитьКолонку("ПорядокГруппировки");
		
		ИндексПолейРаздела = ИндексПолей[ПорядокРаздела];
		Если ИндексПолейРаздела = Неопределено Тогда 
			ИндексПолейРаздела = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого ПорядокГруппировки Из ПорядокГруппировок Цикл 
			
			ПоискПоля.ПорядокРаздела = ПорядокРаздела;
			ПоискПоля.ПорядокГруппировки = ПорядокГруппировки;
			ПоляГруппировки = ИндексСтруктурыОтчета.НайтиСтроки(ПоискПоля);
			
			ИндексПолейГруппировки = ИндексПолейРаздела[ПорядокГруппировки];
			Если ИндексПолейГруппировки = Неопределено Тогда 
				ИндексПолейГруппировки = Новый Соответствие;
			КонецЕсли;
			
			Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл 
				
				СвойстваПоля = СтандартныеСвойстваПоляОтчета();
				ЗаполнитьЗначенияСвойств(СвойстваПоля, ПолеГруппировки);
				
				ИндексПолейГруппировки.Вставить(ПолеГруппировки.Поле, СвойстваПоля);
				
			КонецЦикла;
			
			ИндексПолейРаздела.Вставить(ПорядокГруппировки, ИндексПолейГруппировки);
			
		КонецЦикла;
		
		ИндексПолей.Вставить(ПорядокРаздела, ИндексПолейРаздела);
		
	КонецЦикла;
	
	Возврат ИндексПолей;
	
КонецФункции

Функция ОсновныеПоляОтчета(Форма)
	
	ОсновныеПоля = Новый Массив;
	
	ОтчетыПереопределяемый.ПриОпределенииОсновныхПолей(Форма, ОсновныеПоля);
	
	// Локальное переопределение для отчета.
	Если Форма.НастройкиОтчета.События.ПриОпределенииОсновныхПолей Тогда 
		
		Отчет = ОтчетыСервер.ОтчетОбъект(Форма.НастройкиОтчета.ПолноеИмя);
		Отчет.ПриОпределенииОсновныхПолей(Форма, ОсновныеПоля);
		
	КонецЕсли;
	
	Возврат ОсновныеПоля;
	
КонецФункции

#Область Конструкторы

Функция НовыйИндексСтруктурыОтчета()
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	ОписаниеПризнака = Новый ОписаниеТипов("Булево");
	ОписаниеПоля = Новый ОписаниеТипов("ПолеКомпоновкиДанных");
	ОписаниеТипов = Новый ОписаниеТипов("ОписаниеТипов");
	ОписаниеТипа = Новый ОписаниеТипов("Тип");
	ОписаниеИдентификатора = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	Индекс = Новый ТаблицаЗначений;
	Индекс.Колонки.Добавить("ПорядокРаздела", ОписаниеЧисла);
	Индекс.Колонки.Добавить("КоличествоРазделов", ОписаниеЧисла);
	Индекс.Колонки.Добавить("ПорядокГруппировки", ОписаниеЧисла);
	Индекс.Колонки.Добавить("ПорядокПоля", ОписаниеЧисла);
	
	Индекс.Колонки.Добавить("ИдентификаторНастроек");
	Индекс.Колонки.Добавить("ИдентификаторРаздела");
	Индекс.Колонки.Добавить("ИдентификаторГруппировки");
	Индекс.Колонки.Добавить("ИдентификаторПоля");
	
	Индекс.Колонки.Добавить("Поле", ОписаниеПоля);
	Индекс.Колонки.Добавить("ТипПоля", ОписаниеТипа);
	Индекс.Колонки.Добавить("ИспользуетсяВПоляхГруппировки", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("ПредставлениеГруппировки", ОписаниеСтроки);
	Индекс.Колонки.Добавить("ПредставлениеПоля", ОписаниеСтроки);
	
	Индекс.Колонки.Добавить("Период", ОписаниеПризнака);
	Индекс.Колонки.Добавить("Измерение", ОписаниеПризнака);
	Индекс.Колонки.Добавить("Ресурс", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("ТипЗначения", ОписаниеТипов);
	Индекс.Колонки.Добавить("ПолеСортируется", ОписаниеПризнака);
	Индекс.Колонки.Добавить("НаправлениеСортировки");
	
	Индекс.Колонки.Добавить("ВставитьПолеСлева", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ВставитьПолеСправа", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ВставитьГруппировкуВыше", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ВставитьГруппировкуНиже", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("ПереместитьПолеВлево", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереместитьПолеВправо", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереместитьПолеВыше", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереместитьПолеНиже", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("СкрытьПоле", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ПереименоватьПоле", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("ОформитьОтрицательные", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ОформитьПоложительные", ОписаниеПризнака);
	Индекс.Колонки.Добавить("ОформитьЕще", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("СодержитРодительскиеГруппировки", ОписаниеПризнака);
	Индекс.Колонки.Добавить("СодержитДочерниеГруппировки", ОписаниеПризнака);
	
	Индекс.Колонки.Добавить("ИдентификаторИндекса", ОписаниеИдентификатора);
	
	Возврат Индекс;
	
КонецФункции

Функция СтандартныеСвойстваПоляОтчета()
	
	Индекс = Новый Структура;
	Индекс.Вставить("ПорядокПоля", 0);
	Индекс.Вставить("ИдентификаторПоля", Неопределено);
	Индекс.Вставить("ПредставлениеПоля", "");
	
	Индекс.Вставить("ПолеСортируется", Ложь);
	Индекс.Вставить("НаправлениеСортировки", Неопределено);
	
	Индекс.Вставить("Ресурс", Ложь);
	Индекс.Вставить("ТипЗначения", Неопределено);
	Индекс.Вставить("ТипПоля", Неопределено);
	
	Индекс.Вставить("ИдентификаторНастроек", Неопределено);
	Индекс.Вставить("ИдентификаторРаздела", Неопределено);
	Индекс.Вставить("ИдентификаторГруппировки", Неопределено);
	
	Индекс.Вставить("ИдентификаторИндекса", Неопределено);
	
	Возврат Индекс;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнициализацияСвойствЗаголовковТаблиц

Процедура ОпределитьИерархиюЗаголовковОтчета(РазрезСвойствЗаголовков, Заголовки)
	
	РазрезСвойствЗаголовков.Свернуть("Верх, Лево, Низ, Право, Имя, Расшифровка");
	РазрезСвойствЗаголовков.Сортировать("Верх, Лево");
	РазрезСвойствЗаголовков.Индексы.Добавить("Верх, Низ, Лево");
	
	Для Каждого Запись Из РазрезСвойствЗаголовков Цикл 
		
		Если Запись.Расшифровка <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Верх = Запись.Низ + 1;
		НайденныеОбласти = РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Верх, Лево", Верх, Запись.Лево));
		
		Пока НайденныеОбласти.Количество() > 0 Цикл 
			
			СвойстваОбласти = Заголовки[Запись.Имя];
			СвойстваОбласти.КоличествоДочернихЗаголовков = СвойстваОбласти.КоличествоДочернихЗаголовков + 1;
			
			Верх = Верх + 1;
			НайденныеОбласти = РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Верх, Лево", Верх, Запись.Лево));
			
		КонецЦикла;
		
		Низ = Запись.Верх - 1;
		НайденныеОбласти = РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Низ, Лево", Низ, Запись.Лево));
		
		Пока НайденныеОбласти.Количество() > 0 Цикл 
			
			СвойстваОбласти = Заголовки[Запись.Имя];
			СвойстваОбласти.КоличествоРодительскихЗаголовков = СвойстваОбласти.КоличествоРодительскихЗаголовков + 1;
			
			Низ = Низ - 1;
			НайденныеОбласти = РазрезСвойствЗаголовков.НайтиСтроки(Новый Структура("Низ, Лево", Низ, Запись.Лево));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГраницыРазделовОтчета(РезультатОтчета, РазрезСвойствЗаголовков)
	
	Границы = Новый СписокЗначений;
	
	ВерхниеГраницы = РазрезСвойствЗаголовков.Скопировать();
	ВерхниеГраницы.Свернуть("Верх");
	ВерхниеГраницы.Сортировать("Верх");
	
	Для Каждого Запись Из ВерхниеГраницы Цикл 
		
		Индекс = ВерхниеГраницы.Индекс(Запись);
		
		Если Индекс = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если (Запись.Верх - ВерхниеГраницы[Индекс - 1].Верх) > 1 Тогда 
			Границы.Добавить(Макс(0, Запись.Верх - 1));
		КонецЕсли;
		
	КонецЦикла;
	
	Границы.Добавить(РезультатОтчета.ВысотаТаблицы);
	
	Возврат Границы;
	
КонецФункции

Процедура ДополнитьСвойстваЗаголовковОтчета(Форма, РезультатОтчета, Заголовки, РазрезСвойствЗаголовков, ИндексСтруктурыОтчета, ГраницыРазделов)
	
	ИндексСтруктурыОтчета.Индексы.Добавить("ПорядокРаздела, ПредставлениеПоля");
	
	ПорядокРаздела = 1;
	ГраницаТекущегоРаздела = 0;
	ОбработанныеПоля = Новый Соответствие;
	
	Для Каждого Граница Из ГраницыРазделов Цикл 
		
		Для Каждого Запись Из РазрезСвойствЗаголовков Цикл 
			
			СвойстваЗаголовка = Заголовки[Запись.Имя];
			
			Если СвойстваЗаголовка.Верх >= ГраницаТекущегоРаздела
				И СвойстваЗаголовка.Верх <= Граница.Значение Тогда 
				
				ИндексПоля = ИндексПоляПоСвойствамЗаголовка(
					Форма, СвойстваЗаголовка, ИндексСтруктурыОтчета, ПорядокРаздела, ОбработанныеПоля);
				
				Если ИндексПоля = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СвойстваЗаголовка, ИндексПоля);
				
				ЭтоЧисло = СвойстваЗаголовка.ТипЗначения.СодержитТип(Тип("Число"));
				СвойстваЗаголовка.ОформитьОтрицательные = ЭтоЧисло;
				СвойстваЗаголовка.ОформитьПоложительные = ЭтоЧисло;
				
				ВставитьИндикаторСортировки(ИндексПоля, СвойстваЗаголовка, РезультатОтчета.Область(Запись.Имя));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПорядокРаздела = ПорядокРаздела + 1;
		ГраницаТекущегоРаздела = Граница.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИндексПоляПоСвойствамЗаголовка(Форма, СвойстваЗаголовка, ИндексСтруктурыОтчета, ПорядокРаздела, ОбработанныеПоля)
	
	Поиск = Новый Структура("ПорядокРаздела, ПредставлениеПоля", ПорядокРаздела, ВРег(СвойстваЗаголовка.Текст));
	
	ИндексПоля = ИндексПоляПоПредставлению(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
	
	Если ИндексПоля = Неопределено Тогда 
		ИндексПоля = ИндексПоляПоРасшифровке(Форма, СвойстваЗаголовка.Расшифровка, ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
	КонецЕсли;
	
	Возврат ИндексПоля;
	
КонецФункции

Функция ИндексПоляПоРасшифровке(Форма, Расшифровка, ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля)
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = ДанныеЭлементаРасшифровки(Форма, Расшифровка);
	
	Если Данные = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПоискПоПолю = Новый Структура;
	ПоискПоПолю.Вставить("ПорядокРаздела", Поиск.ПорядокРаздела);
	ПоискПоПолю.Вставить("Поле", Новый ПолеКомпоновкиДанных(Данные.Поле));
	
	НайденныеПоля = ИндексСтруктурыОтчета.НайтиСтроки(ПоискПоПолю);
	
	Если НайденныеПоля.Количество() > 0 Тогда 
		Возврат НайденныеПоля[0];
	КонецЕсли;
	
	Поиск.ПредставлениеПоля = ВРег(Данные.Поле);
	
	Возврат ИндексПоляПоПредставлению(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
	
КонецФункции

Функция ИндексПоляПоПредставлению(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля)
	
	ПодходящееПоле = ПодходящееПоле(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
	
	Если ПодходящееПоле <> Неопределено Тогда 
		Возврат ПодходящееПоле;
	КонецЕсли;
	
	ОбластьВладельцаСРеквизитами = СтрНайти(Поиск.ПредставлениеПоля, ",") > 0;
	
	Если ОбластьВладельцаСРеквизитами Тогда 
		Поиск.ПредставлениеПоля = СтрРазделить(Поиск.ПредставлениеПоля, ",")[0];
	КонецЕсли;
	
	ПодходящееПоле = ПодходящееПоле(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля);
	
	Если ПодходящееПоле <> Неопределено Тогда 
		Возврат ПодходящееПоле;
	КонецЕсли;
	
	ОписаниеЗаголовка = СтрРазделить(Поиск.ПредставлениеПоля, ".");
	
	ПоискРаздела = Новый Структура("ПорядокРаздела", Поиск.ПорядокРаздела);
	НайденныеПоля = ИндексСтруктурыОтчета.НайтиСтроки(ПоискРаздела);
	
	Для Каждого ИндексПоля Из НайденныеПоля Цикл 
		
		ОписаниеПредставления = СтрРазделить(ИндексПоля.ПредставлениеПоля, ".");
		
		КоличествоСовпадений = 0;
		
		Для Каждого Фрагмент Из ОписаниеЗаголовка Цикл 
			
			НормализованныйФрагмент = СокрЛП(Фрагмент);
			
			Если ОписаниеПредставления.Найти(НормализованныйФрагмент) <> Неопределено Тогда 
				КоличествоСовпадений = КоличествоСовпадений + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбластьВладельцаСРеквизитами
			И КоличествоСовпадений = ОписаниеПредставления.Количество()
			Или Не ОбластьВладельцаСРеквизитами
			И КоличествоСовпадений = ОписаниеЗаголовка.Количество() Тогда 
			
			Возврат ИндексПоля;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПодходящееПоле(ИндексСтруктурыОтчета, Поиск, ОбработанныеПоля)
	
	НайденныеПоля = ИндексСтруктурыОтчета.НайтиСтроки(Поиск);
	
	Возврат ИндексПоляНеобработанный(
		ИндексСтруктурыОтчета, Поиск.ПредставлениеПоля, НайденныеПоля, ОбработанныеПоля);
	
КонецФункции

Функция ИндексПоляНеобработанный(ИндексСтруктурыОтчета, ПредставлениеПоля, НайденныеПоля, ОбработанныеПоля)
	
	Если НайденныеПоля.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если НайденныеПоля.Количество() = 1 Тогда 
		Возврат НайденныеПоля[0];
	КонецЕсли;
	
	ОбработанныеИндексы = ОбработанныеПоля[ПредставлениеПоля];
	
	Если ОбработанныеИндексы = Неопределено Тогда 
		
		ПодходящееПоле = НайденныеПоля[0];
		
		ОбработанныеИндексы = Новый Соответствие;
		ОбработанныеИндексы.Вставить(ИндексСтруктурыОтчета.Индекс(ПодходящееПоле), ПодходящееПоле);
		
		ОбработанныеПоля.Вставить(ПредставлениеПоля, ОбработанныеИндексы);
		
		Возврат ПодходящееПоле;
		
	КонецЕсли;
	
	ПодходящееПоле = Неопределено;
	
	Для Каждого НайденноеПоле Из НайденныеПоля Цикл 
		
		ИндексПоля = ИндексСтруктурыОтчета.Индекс(НайденноеПоле);
		
		Если ОбработанныеИндексы[ИндексПоля] = Неопределено Тогда 
			
			ПодходящееПоле = НайденноеПоле;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодходящееПоле = Неопределено Тогда 
		Возврат НайденныеПоля[0];
	КонецЕсли;
	
	ОбработанныеИндексы.Вставить(ИндексПоля, ПодходящееПоле);
	ОбработанныеПоля.Вставить(ПредставлениеПоля, ОбработанныеИндексы);
	
	Возврат ПодходящееПоле;
	
КонецФункции

Процедура ВставитьИндикаторСортировки(ИндексПоля, СвойстваЗаголовка, Ячейка)
	
	Если Не ИндексПоля.ПолеСортируется Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИндексПоля.НаправлениеСортировки = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда 
		
		СвойстваЗаголовка.СортироватьПоВозрастанию = Ложь;
		Ячейка.Картинка = БиблиотекаКартинок.СортироватьСтрокиПоВозрастанию;
		
	ИначеЕсли ИндексПоля.НаправлениеСортировки = НаправлениеСортировкиКомпоновкиДанных.Убыв Тогда 
		
		СвойстваЗаголовка.СортироватьПоУбыванию = Ложь;
		Ячейка.Картинка = БиблиотекаКартинок.СортироватьСтрокиПоУбыванию;
		
	КонецЕсли;
	
	Ячейка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	Ячейка.ГоризонтальноеПоложениеКартинки = ГоризонтальноеПоложение.Право;
	Ячейка.ВертикальноеПоложениеКартинки = ВертикальноеПоложение.Верх;
	
КонецПроцедуры

#Область Конструкторы

Функция СтандартныйРазрезСвойствЗаголовковОтчета()
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	
	Свойства = Новый ТаблицаЗначений;
	Свойства.Колонки.Добавить("Верх", ОписаниеЧисла);
	Свойства.Колонки.Добавить("Лево", ОписаниеЧисла);
	Свойства.Колонки.Добавить("Низ", ОписаниеЧисла);
	Свойства.Колонки.Добавить("Право", ОписаниеЧисла);
	Свойства.Колонки.Добавить("Имя", ОписаниеСтроки);
	Свойства.Колонки.Добавить("Расшифровка");
	
	Возврат Свойства;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//    * ИдентификаторИндекса - УникальныйИдентификатор
//    * ОформитьПоложительные - Булево
//    * ОформитьОтрицательные - Булево
//    * СортироватьПоУбыванию - Булево
//    * СортироватьПоВозрастанию - Булево
//    * ПереместитьПолеНиже - Булево
//    * ПереместитьПолеВыше - Булево
//    * ПереместитьПолеВправо - Булево
//    * ПереместитьПолеВлево - Булево
//    * ВставитьГруппировкуНиже - Булево
//    * ВставитьГруппировкуВыше - Булево
//    * ВставитьПолеСправа - Булево
//    * ВставитьПолеСлева - Булево
//    * СкрытьПоле - Булево
//    * ПереименоватьПоле - Булево
//    * ОформитьЕще - Булево
//    * ИспользуетсяВПоляхГруппировки - Булево
//    * ТипПоля - Тип
//    * ТипЗначения - ОписаниеТипов
//    * Ресурс - Булево
//    * Измерение - Булево
//    * Период - Булево
//    * НаправлениеСортировки - НаправлениеСортировкиКомпоновкиДанных
//                            - Неопределено
//    * ПолеСортируется - Булево
//    * Поле - ПолеКомпоновкиДанных
//    * ИдентификаторПоля - ИдентификаторКомпоновкиДанных
//    * ИдентификаторГруппировки - ИдентификаторКомпоновкиДанных
//    * ИдентификаторРаздела - ИдентификаторКомпоновкиДанных
//    * ИдентификаторНастроек - ИдентификаторКомпоновкиДанных
//    * ПорядокПоля - Число
//    * ПорядокГруппировки - Число
//    * ПорядокРаздела - Число
//    * КоличествоРодительскихЗаголовков - Число
//    * КоличествоДочернихЗаголовков - Число
//    * Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных
//                  - Неопределено
//    * Право - Число
//    * Лево - Число
//    * Низ - Число
//    * Верх - Число
//    * Текст - Строка
//
Функция СтандартныеСвойстваЗаголовкаОтчета() Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Текст", "");
	Свойства.Вставить("Верх", 0);
	Свойства.Вставить("Низ", 0);
	Свойства.Вставить("Лево", 0);
	Свойства.Вставить("Право", 0);
	Свойства.Вставить("Расшифровка", Неопределено);
	
	Свойства.Вставить("КоличествоДочернихЗаголовков", 0);
	Свойства.Вставить("КоличествоРодительскихЗаголовков", 0);
	
	Свойства.Вставить("ПорядокРаздела", 0);
	Свойства.Вставить("КоличествоРазделов", 0);
	Свойства.Вставить("ПорядокГруппировки", 0);
	Свойства.Вставить("ПорядокПоля", 0);
	
	Свойства.Вставить("ИдентификаторНастроек", Неопределено);
	Свойства.Вставить("ИдентификаторРаздела", Неопределено);
	Свойства.Вставить("ИдентификаторГруппировки", Неопределено);
	Свойства.Вставить("ИдентификаторПоля", Неопределено);
	
	Свойства.Вставить("Поле", Неопределено);
	Свойства.Вставить("ПолеСортируется", Ложь);
	Свойства.Вставить("НаправлениеСортировки", Неопределено);
	
	Свойства.Вставить("Период", Ложь);
	Свойства.Вставить("Измерение", Ложь);
	Свойства.Вставить("Ресурс", Ложь);
	
	Свойства.Вставить("ТипЗначения", Неопределено);
	Свойства.Вставить("ТипПоля", Неопределено);
	Свойства.Вставить("ИспользуетсяВПоляхГруппировки", Ложь);
	
	Свойства.Вставить("ВставитьПолеСлева", Ложь);
	Свойства.Вставить("ВставитьПолеСправа", Ложь);
	Свойства.Вставить("ВставитьГруппировкуВыше", Ложь);
	Свойства.Вставить("ВставитьГруппировкуНиже", Ложь);
	
	Свойства.Вставить("ПереместитьПолеВлево", Ложь);
	Свойства.Вставить("ПереместитьПолеВправо", Ложь);
	Свойства.Вставить("ПереместитьПолеВыше", Ложь);
	Свойства.Вставить("ПереместитьПолеНиже", Ложь);
	
	Свойства.Вставить("СортироватьПоВозрастанию", Истина);
	Свойства.Вставить("СортироватьПоУбыванию", Истина);
	
	Свойства.Вставить("СкрытьПоле", Ложь);
	Свойства.Вставить("ПереименоватьПоле", Ложь);
	
	Свойства.Вставить("ОформитьОтрицательные", Ложь);
	Свойства.Вставить("ОформитьПоложительные", Ложь);
	Свойства.Вставить("ОформитьЕще", Ложь);
	
	Свойства.Вставить("ИдентификаторИндекса", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеЭлементаРасшифровки

Функция ДанныеЭлементаРасшифровки(Форма, Расшифровка) Экспорт 
	
	Если Не РежимВариантаОтчета(Форма.КлючТекущегоВарианта)
		Или Не Форма.НастройкиОтчета.РазрешеноИзменятьВарианты
		Или ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		Возврат Неопределено;
	КонецЕсли; 
	
	Отчет = Форма.Отчет;
	Документ = Форма.ОтчетТабличныйДокумент;
	ПолеДокумента = Форма.Элементы.ОтчетТабличныйДокумент;
	
	ВыделенныеОбластиДокумента = ПолеДокумента.ПолучитьВыделенныеОбласти();
	
	Данные = ПолучитьИзВременногоХранилища(Форма.ОтчетДанныеРасшифровки);
	ЭлементРасшифровки = Данные.Элементы.Получить(Расшифровка);
	
	Родители = ЭлементРасшифровки.ПолучитьРодителей();
	Родитель = ?(Родители.Количество() = 0, Неопределено, Родители[0]);
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка")
		Или ТипЗнч(Родитель) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда 
		
		ТипЭлементаРасшифровки = ВариантыОтчетовСлужебныйКлиентСервер.ТипЭлементаРасшифровкиГруппировка();
	Иначе
		ТипЭлементаРасшифровки = ТипРеквизит();
	КонецЕсли;
	
	ДанныеЭлементаРасшифровки = Новый Структура;
	ДанныеЭлементаРасшифровки.Вставить("Тип", ТипЭлементаРасшифровки);
	ДанныеЭлементаРасшифровки.Вставить("Настройки", Данные.Настройки);
	ДанныеЭлементаРасшифровки.Вставить("Отбор", ОтборЭлементаРасшифровки(ЭлементРасшифровки));
	ДанныеЭлементаРасшифровки.Вставить("Отборы", ОтборыВыделенныхЭлементовРасшифровки(Документ, ВыделенныеОбластиДокумента, Данные));
	
	Поля = ЭлементРасшифровки.ПолучитьПоля();
	
	Если Поля.Количество() = 0 Тогда
		
		ДанныеЭлементаРасшифровки.Вставить("Значение", Неопределено);
		ДанныеЭлементаРасшифровки.Вставить("Значения", Неопределено);
		ДанныеЭлементаРасшифровки.Вставить("Поле", "");
		
	Иначе 
		
		СвойстваПоля = Поля[0];
		
		ДанныеЭлементаРасшифровки.Вставить("Значение", ?(СвойстваПоля.Значение = Null, Неопределено, СвойстваПоля.Значение));
		ДанныеЭлементаРасшифровки.Вставить("Значения", ДанныеЭлементаРасшифровки.Отборы[СвойстваПоля.Поле]);
		ДанныеЭлементаРасшифровки.Вставить("Поле", СвойстваПоля.Поле);
		
	КонецЕсли;
	
	ДанныеЭлементаРасшифровки.Вставить("ЭтоСсылка", ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЭлементаРасшифровки.Значение)));
	
	ДоступныеВидыСравнения = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ДанныеЭлементаРасшифровки.Поле) Тогда
		
		ДоступноеПоле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(
			Новый ПолеКомпоновкиДанных(ДанныеЭлементаРасшифровки.Поле));
		
		Если ДоступноеПоле = Неопределено Тогда
			
			ДанныеЭлементаРасшифровки.Вставить("ТипЗначения", Тип("Неопределено"));
			ДанныеЭлементаРасшифровки.Вставить("Ресурс", Ложь);
			
		Иначе
			
			ДанныеЭлементаРасшифровки.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
			ДанныеЭлементаРасшифровки.Вставить("Ресурс", ДоступноеПоле.Ресурс);
			
			Если ДанныеЭлементаРасшифровки.Значение = Неопределено Тогда 
				
				Область = ПолеДокумента.ТекущаяОбласть;
				ДанныеЭлементаРасшифровки.Значение = ДоступноеПоле.ТипЗначения.ПривестиЗначение(Область.Текст);
				ДанныеЭлементаРасшифровки.Значения = ПриведенныеЗначенияВыделенныхОбластей(
					Документ, ВыделенныеОбластиДокумента, ДоступноеПоле.ТипЗначения);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		ДоступноеПолеОтбора = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(
			Новый ПолеКомпоновкиДанных(ДанныеЭлементаРасшифровки.Поле));
		
		Если ДоступноеПолеОтбора <> Неопределено Тогда 
			ДоступныеВидыСравнения = ДоступноеПолеОтбора.ДоступныеВидыСравнения;
		КонецЕсли;
		
	Иначе
		
		ДанныеЭлементаРасшифровки.Вставить("ТипЗначения", Тип("Неопределено"));
		ДанныеЭлементаРасшифровки.Вставить("Ресурс", Ложь);
		
	КонецЕсли; 
	
	Если ДоступныеВидыСравнения.Количество() = 0 Тогда 
		
		Для Каждого Вид Из ВидСравненияКомпоновкиДанных Цикл 
			ДоступныеВидыСравнения.Добавить(Вид);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДоступныеВидыСравнения.НайтиПоЗначению("СнятьФильтр") = Неопределено Тогда 
		ДоступныеВидыСравнения.Вставить(0, "СнятьФильтр", НСтр("ru = 'Снять фильтр'"));
	КонецЕсли;
	
	Если ДоступныеВидыСравнения.НайтиПоЗначению("ФильтроватьЕще") = Неопределено Тогда 
		ДоступныеВидыСравнения.Добавить("ФильтроватьЕще", НСтр("ru = 'Еще...'"));
	КонецЕсли;
	
	ДанныеЭлементаРасшифровки.Вставить("ДоступныеВидыСравнения", ДоступныеВидыСравнения);
	
	Возврат ДанныеЭлементаРасшифровки;
	
КонецФункции

Функция ОтборЭлементаРасшифровки(ЭлементРасшифровки, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Соответствие;
	КонецЕсли; 
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		
		Поля = ЭлементРасшифровки.ПолучитьПоля();
		
		Для каждого Поле Из Поля Цикл
			
			Если Поле.Значение = Null Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Результат[Поле.Поле];
			
			Если Значение = Неопределено Тогда 
				
				Результат.Вставить(Поле.Поле, Поле.Значение);
				Продолжить;
				
			КонецЕсли;
			
			Значения = ОтчетыКлиентСервер.ЗначенияСписком(Значение);
			
			Если Значения.НайтиПоЗначению(Поле.Значение) = Неопределено Тогда 
				Значения.Добавить(Поле.Значение);
			КонецЕсли;
			
			Результат.Вставить(Поле.Поле, Значения);
			
		КонецЦикла; 
	КонецЕсли;
	
	Родители = ЭлементРасшифровки.ПолучитьРодителей();
	
	Для Каждого Родитель Из Родители Цикл
		ОтборЭлементаРасшифровки(Родитель, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтборыВыделенныхЭлементовРасшифровки(Документ, ВыделенныеОбластиДокумента, Данные)
	
	Результат = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл 
			
			Область = Документ.Область(НомерСтроки, ВыделеннаяОбласть.Лево, НомерСтроки, ВыделеннаяОбласть.Право);
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТипЗнч(Область.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда 
				
				ЭлементРасшифровки = Данные.Элементы.Получить(Область.Расшифровка);
				ОтборЭлементаРасшифровки(ЭлементРасшифровки, Результат);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПриведенныеЗначенияВыделенныхОбластей(Документ, ВыделенныеОбластиДокумента, ТипЗначения)
	
	Результат = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбластиДокумента Цикл
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл 
			
			Область = Документ.Область(НомерСтроки, ВыделеннаяОбласть.Лево, НомерСтроки, ВыделеннаяОбласть.Право);
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
				
				Значение = ТипЗначения.ПривестиЗначение(Область.Текст);
				
				Если Результат.НайтиПоЗначению(Значение) = Неопределено Тогда 
					Результат.Добавить(Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипРеквизит()
	
	Возврат "Реквизит";
	
КонецФункции

#КонецОбласти

#Область ЗначениеЯчейки

// Параметры:
//  Ячейка - ОбластьЯчеекТабличногоДокумента
//         - Структура:
//             * Текст - Строка
//             * Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных
//                           - Неопределено
//  ДоступныеТипы - ОписаниеТипов
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных
//
// Возвращаемое значение:
//   см. СтандартноеЗначениеЯчейки
//
Функция ЗначениеЯчейки(Ячейка, ДоступныеТипы, ДанныеРасшифровки) Экспорт 
	
	ЗначениеЯчейки = СтандартноеЗначениеЯчейки(Ячейка.Текст);
	
	КоличествоДоступныхТипов = ДоступныеТипы.Типы().Количество();
	
	Если ТипЗнч(Ячейка.Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда 
		
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Ячейка.Расшифровка];
		Поля = ЭлементРасшифровки.ПолучитьПоля();
		
		Если Поля.Количество() > 0 Тогда 
			
			Значение = Поля[0].Значение;
			
			Если КоличествоДоступныхТипов = 0 Тогда 
				
				ЗначениеЯчейки.Значение = Значение;
				
			ИначеЕсли ЗначениеЗаполнено(Значение)
				И Не ДоступныеТипы.СодержитТип(ТипЗнч(Значение)) Тогда 
				
				ЗначениеЯчейки.Значение = Null;
				
			ИначеЕсли Значение = Null Тогда 
				
				ЗначениеЯчейки.Значение = ДоступныеТипы.ПривестиЗначение(Ячейка.Текст);
				
			Иначе
				
				ЗначениеЯчейки.Значение = ДоступныеТипы.ПривестиЗначение(Значение);
				
			КонецЕсли;
			
			Если ЗначениеЯчейки.Значение = Неопределено Тогда 
				ЗначениеЯчейки.Значение = Null;
			КонецЕсли;
			
			Возврат ЗначениеЯчейки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоЧисло(Ячейка.Текст) Тогда 
		
		ОписаниеЧисла = Новый ОписаниеТипов("Число");
		ЗначениеЯчейки.Значение = ОписаниеЧисла.ПривестиЗначение(Ячейка.Текст);
		Возврат ЗначениеЯчейки;
		
	КонецЕсли;
	
	Значение = СтрокаВДату(ЗначениеЯчейки.Значение);
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		ЗначениеЯчейки.Значение = Значение;
	КонецЕсли;
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

// Параметры:
//  Значение - Строка
//
// Возвращаемое значение:
//   Структура:
//     * Значение - Строка
//     * Представление - Строка
//     * Пометка - Булево
//
Функция СтандартноеЗначениеЯчейки(Значение)
	
	ЗначениеЯчейки = Новый Структура;
	ЗначениеЯчейки.Вставить("Значение", Значение);
	ЗначениеЯчейки.Вставить("Представление", Значение);
	ЗначениеЯчейки.Вставить("Пометка", Истина);
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

#Область ПроверкаТипаЗначения

// Возвращает признак того, что переданное значение является, либо не является, числом.
//
// Параметры:
//  ПроверяемоеЗначение - Строка - значение, которое проверяется на соответствие числу.
//
// Возвращаемое значение:
//   Булево - признак того, что переданное значение является, либо не является, числом.
//
Функция ЭтоЧисло(Знач ПроверяемоеЗначение)
	
	Если ПроверяемоеЗначение = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисла.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
	
КонецФункции

#КонецОбласти

#Область ПриведениеЗначения

// Приводит строковое значение к дате.
//
// Параметры:
//  Значение - Строка - строковое значение, которое приводится к дате.
//
// Возвращаемое значение:
//   Дата - приведенное значение.
//
Функция СтрокаВДату(Знач Значение)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат ПустаяДата;
	КонецЕсли;
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	Дата = ОписаниеДаты.ПривестиЗначение(Значение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда 
		
		Возврат Дата;
	КонецЕсли;
	
	#Область ПодготовкаЧастейДаты
	
	КоличествоСимволов = СтрДлина(Значение);
	
	Если КоличествоСимволов > 25 Тогда 
		Возврат ПустаяДата;
	КонецЕсли;
	
	ЧастиЗначения = Новый Массив;
	ЧастьЗначения = "";
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл 
		
		Символ = Сред(Значение, НомерСимвола, 1);
		
		Если ЭтоЧисло(Символ) Тогда 
			
			ЧастьЗначения = ЧастьЗначения + Символ;
			
		Иначе
			
			Если Не ПустаяСтрока(ЧастьЗначения) Тогда 
				ЧастиЗначения.Добавить(ЧастьЗначения);
			КонецЕсли;
			
			ЧастьЗначения = "";
			
		КонецЕсли;
		
		Если НомерСимвола = КоличествоСимволов
			И Не ПустаяСтрока(ЧастьЗначения) Тогда 
			
			ЧастиЗначения.Добавить(ЧастьЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧастиЗначения.Количество() < 3 Тогда 
		Возврат ПустаяДата;
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 4 Тогда 
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 5 Тогда 
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 6 Тогда 
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	#КонецОбласти
	
	// Если формат ггггММддЧЧммсс:
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[1] + ЧастиЗначения[0]
		+ ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];
	
	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда 
		
		Возврат Дата;
	КонецЕсли;
	
	// Если формат ггггддММЧЧммсс
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[0] + ЧастиЗначения[1]
		+ ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];
	
	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда 
		
		Возврат Дата;
	КонецЕсли;
	
	Возврат ПустаяДата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти