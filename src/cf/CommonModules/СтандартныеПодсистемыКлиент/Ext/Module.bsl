///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает заголовок главного окна приложения, используя значение константы
// ЗаголовокПриложения и заголовок приложения по умолчанию.
//
// Параметры:
//   ПриЗапуске - Булево - Истина, если вызывается при начале работы программы.
//
Процедура УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	
	ПараметрыКлиента = ?(ПриЗапуске, ПараметрыРаботыКлиентаПриЗапуске(),
		ПараметрыРаботыКлиента());
		
	Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
		ПредставлениеКонфигурации = ПараметрыКлиента.ПодробнаяИнформация;
		
		Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
				ШаблонЗаголовка = "%1 / %2";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПараметрыКлиента.ПредставлениеОбластиДанных,
					ПредставлениеКонфигурации);
			Иначе
				ШаблонЗаголовка = "%1";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеКонфигурации);
			КонецЕсли;
		Иначе
			ШаблонЗаголовка = "%1 / %2";
			ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
				СокрЛП(ПредставлениеЗаголовка), ПредставлениеКонфигурации);
		КонецЕсли;
	Иначе
		ШаблонЗаголовка = "%1 / %2";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, НСтр("ru = 'Не установлены разделители'"), ПараметрыКлиента.ПодробнаяИнформация);
	КонецЕсли;
	
	Если ПараметрыКлиента.Свойство("РаботаСВнешнимиРесурсамиЗаблокирована")
		И ПараметрыКлиента.Свойство("РазделениеВключено")
		И Не ПараметрыКлиента.РазделениеВключено Тогда
		ЗаголовокПриложения = НСтр("ru = '[КОПИЯ]'") + " " + ЗаголовокПриложения;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентПереопределяемый.ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске);
	
	КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложения);
	
КонецПроцедуры

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//                                                        вопроса со следующими параметрами:
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение
//                                                                       системного перечисления или значение,
//                                                                       связанное с нажатой кнопкой. В случае закрытия
//                                                                       диалога по истечении времени - значение
//                                                                       Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
//                                                                                                  пользователя в
//                                                                                                  одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором:
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может
//                                                  использоваться значение
//                                                  перечисления КодВозвратаДиалога, а также другие значения,
//                                                  поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - см. СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыВопросаПользователю(), Ложь);
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",         КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);
	
	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//  Структура   - структура со свойствами:
//    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
//                                                     с ней значению.
//    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
//                                                     вопроса.
//    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                     на которой отображается количество секунд, оставшихся до
//                                                     истечения таймаута.
//    * Заголовок                     - Строка       - заголовок вопроса. 
//    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево - если Истина, то в окне вопроса будет доступен одноименный флажок.
//    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
//                                                     флажке.
//    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается, блокируя работу всех
//                                                     остальных открытых окон, включая главное окно.
//    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
//
Функция ПараметрыВопросаПользователю() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	Параметры.Вставить("Заголовок", КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	Параметры.Вставить("Картинка", БиблиотекаКартинок.Вопрос32);
	Возврат Параметры;
	
КонецФункции	

// Вызывается при необходимости открыть форму списка активных пользователей,
// которые в данный момент времени работают с системой.
//
// Параметры:
//    ПараметрыФормы - Структура        - см. описание параметра Параметры метода ОткрытьФорму в синтакс-помощнике.
//    ВладелецФормы  - ФормаКлиентскогоПриложения - см. описание параметра Владелец метода ОткрытьФорму в синтакс-помощнике.
//
Процедура ОткрытьСписокАктивныхПользователей(ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		
		ИмяФормы = "";
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
		МодульСоединенияИБКлиент.ПриОпределенииФормыАктивныхПользователей(ИмяФормы);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецФормы);
		
	Иначе
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Для того чтобы открыть список активных пользователей, перейдите в меню
				       |Все функции - Стандартные - Активные пользователи.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Отключает выдачу предупреждения пользователю при завершении работы программы.
//
Процедура ПропуститьПредупреждениеПередЗавершениемРаботыСистемы() Экспорт
	
	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы", Истина);
	
КонецПроцедуры

// Выполнить стандартные действия перед началом работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередНачаломРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПередНачаломРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
//                         оповещение с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
//                         выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
Процедура ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ОценкаПроизводительности.ВремяНачалаЗапуска", ВремяНачала);
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы", 
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	
	УстановитьРазделениеСеанса();
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы();
	
	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");
	
	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	Параметры.Вставить("ПолученныеПараметрыКлиента", Новый Структура);
	
	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыОбработкаЗавершения", ЭтотОбъект));
	
	ОбновитьПараметрыРаботыКлиента(Параметры, Истина, ОповещениеЗавершения <> Неопределено);
	
	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));
	
	Если ОтключенаЛогикаНачалаРаботыСистемы() Тогда
		Попытка
			СтандартныеПодсистемыВызовСервера.ПроверитьПравоОтключитьЛогикуНачалаРаботыСистемы();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПользователиСлужебныйКлиент.УстановитьИнтерактивнуюОбработкуПриОшибкеНедостаточноПравДляВходаВПрограмму(
				Параметры, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
		СкрытьРабочийСтолПриНачалеРаботыСистемы(Истина, Истина);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Выполнить стандартные действия при начале работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПриНачалеРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПриНачалеРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано
//                         оповещение с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не
//                         выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
//  НепрерывноеВыполнение - Булево - только для внутреннего использования.
//                          Для перехода из обработчика ПередНачаломРаботыСистемы
//                          выполненного в режиме интерактивной обработки.
//
Процедура ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
	
	Если ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключенаЛогикаНачалаРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы", 
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы", 
		"НепрерывноеВыполнение", НепрерывноеВыполнение, Тип("Булево"));
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы();
	
	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");
	
	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", НепрерывноеВыполнение);
	
	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"ДействияПриНачалеРаботыСистемыОбработкаЗавершения", ЭтотОбъект));
	
	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре", ЭтотОбъект));
	
	Попытка
		УстановитьРасширенныйЗаголовокПриложения(Истина); // Для главного окна.
		
		Если НЕ ОбработатьПараметрыЗапуска() Тогда
			Параметры.Отказ = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Выполнить стандартные действия перед завершением работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередЗавершениемРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  Отказ                - Булево - Возвращаемое значение. Признак отказа от завершения работы 
//                         для обработчика события ПередЗавершениемРаботыСистемы, либо программного отказа,
//                         либо того, что потребовалась интерактивная обработка. В случае успешного взаимодействия
//                         с пользователем завершение работы будет продолжено.
//  ТекстПредупреждения  - Строка - см. ПередЗавершениемРаботыСистемы() в синтакс-помощнике.
//
Процедура ПередЗавершениемРаботыСистемы(Отказ = Ложь, ТекстПредупреждения = "") Экспорт
	
	Если ОтключенаЛогикаНачалаРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	
	Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		// Произошла попытка закрытия до окончания запуска.
	#Если ВебКлиент Тогда
		// В веб-клиенте это возможно в штатном случае (при закрытии страницы в целом),
		// поэтому закрытие блокируется, так как его все равно можно выполнить принудительно,
		// а в случае случайного закрытия у пользователя должна быть возможность остаться на странице.
		Отказ = Истина;
	#Иначе
		// Не в веб-клиенте это возможно в случае ошибок в немодальной последовательности запуска.
		// То есть нет ни одного окна блокирующего весь интерфейс. Закрытие нужно разрешить,
		// но без стандартных процедур перед завершение работы системы, так как они могут
		// привести к ошибке в процессе закрытия из-за незавершенного запуска.
	#КонецЕсли
		Возврат;
	КонецЕсли;
	
	// В режиме работы толстый клиент (обычное приложение) не выводится список предупреждений.
#Если ТолстыйКлиентОбычноеПриложение Тогда
	Возврат;
#КонецЕсли
	
	Если ПараметрыПриложения["СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы"] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрКлиента("ДоступноИспользованиеРазделенныхДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Предупреждения = Новый Массив;
	ИнтеграцияПодсистемБСПКлиент.ПередЗавершениемРаботыСистемы(Отказ, Предупреждения);
	ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы(Отказ, Предупреждения);
	
	Если Предупреждения.Количество() = 0 Тогда
		Если Не ПараметрКлиента("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы") Тогда
			Возврат;
		КонецЕсли;
		ТекстПредупреждения = НСтр("ru = 'Завершить работу с программой?'");
		Отказ = Истина;
	Иначе
		Отказ = Истина;
		МассивПредупреждений = Новый Массив;
		Для Каждого Предупреждение Из Предупреждения Цикл
			МассивПредупреждений.Добавить(Предупреждение.ТекстПредупреждения);
		КонецЦикла;
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС;
		КонецЕсли;
		ТекстПредупреждения = ТекстПредупреждения + СтрСоединить(МассивПредупреждений, Символы.ПС);
		ПодключитьОбработчикОжидания("ПоказатьПредупрежденияПриЗавершенииРаботы", 0.1, Истина);
	КонецЕсли;
	УстановитьПараметрКлиента("ПредупрежденияПриЗавершенииРаботы", Предупреждения);
	
КонецПроцедуры

// Возвращает новую структуру параметров для вывода предупреждения перед завершением работы программы.
// Для использования в ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    ТекстПредупреждения  - Строка - текст, выводимый в окне веб-браузера (или тонкого клиента) при завершении работы.
//                                    Например, "Имеются редактируемые файлы, которые не помещены в программу".
//                                    Остальные параметры определяют внешний вид формы предупреждений,
//                                    открываемой после подтверждения в окне веб-браузера (или тонкого клиента).
//    ТекстФлажка          - Строка - если задан, то в форме предупреждений выводится флажок с указанным текстом. 
//                                    Например, "Завершить редактирование файлов (5)".
//    ПоясняющийТекст      - Строка - текст, выводимый в форме сверху управляющего элемента (флажок или гиперссылка).
//                                    Например, "Редактируемые файлы, не помещенные в программу".
//    ТекстГиперссылки     - Строка - если задан, то выводится гиперссылка с указанным текстом.
//                                    Например, "Редактируемые файлы (5)".
//    РасширеннаяПодсказка - Строка - текст подсказки, выводимый по кнопке справа от управляющего элемента (флажок или
//                                    гиперссылка). Например, "Нажмите для перехода к списку файлов, 
//                                    открытых для редактирования".
//    Приоритет            - Число  - относительный порядок в списке предупреждений на форме (чем больше, тем выше).
//    ВывестиОдноПредупреждение - Булево - если Истина, то в списке предупреждений выводится только одно это
//                                         предупреждение. Т.е. такое предупреждение не совместимо с любыми другими.
//    ДействиеПриУстановленномФлажке - Структура со свойствами:
//      * Форма          - Строка    - если пользователь установил флажок, то следует открыть указанную форму.
//                                     Например, "Обработка.Файлы.РедактируемыеФайлы".
//      * ПараметрыФормы - Структура - произвольная структура параметров для открытия формы. 
//    ДействиеПриНажатииГиперссылки - Структура со свойствами:
//      * Форма          - Строка    - путь к форме, которая должна открываться по нажатию на гиперссылку.
//                                     Например, "Обработка.Файлы.РедактируемыеФайлы".
//      * ПараметрыФормы - Структура - произвольная структура параметров для открываемой формы.
//      * ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу
//                                        вместо универсальной формы в случае, когда в списке 
//                                        предупреждений оказывается только одно данное предупреждение.
//                                        Например, "Обработка.Файлы.РедактируемыеФайлы".
//      * ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура
//                                                 параметров для вышеописанной формы.
//      * РежимОткрытияОкна - РежимОткрытияОкнаФормы - режим открытия форм Форма или ПрикладнаяФормаПредупреждения.
// 
Функция ПредупреждениеПриЗавершенииРаботы() Экспорт
	
	ДействиеПриУстановленномФлажке = Новый Структура;
	ДействиеПриУстановленномФлажке.Вставить("Форма", "");
	ДействиеПриУстановленномФлажке.Вставить("ПараметрыФормы", Неопределено);
	
	ДействиеПриНажатииГиперссылки = Новый Структура;
	ДействиеПриНажатииГиперссылки.Вставить("Форма", "");
	ДействиеПриНажатииГиперссылки.Вставить("ПараметрыФормы", Неопределено);
	ДействиеПриНажатииГиперссылки.Вставить("ПрикладнаяФормаПредупреждения", "");
	ДействиеПриНажатииГиперссылки.Вставить("ПараметрыПрикладнойФормыПредупреждения", Неопределено);
	ДействиеПриНажатииГиперссылки.Вставить("РежимОткрытияОкна", Неопределено);
	
	ПараметрыПредупреждения = Новый Структура;
	ПараметрыПредупреждения.Вставить("ТекстФлажка", "");
	ПараметрыПредупреждения.Вставить("ПоясняющийТекст", "");
	ПараметрыПредупреждения.Вставить("ТекстПредупреждения", "");
	ПараметрыПредупреждения.Вставить("РасширеннаяПодсказка", "");
	ПараметрыПредупреждения.Вставить("ТекстГиперссылки", "");
	ПараметрыПредупреждения.Вставить("ДействиеПриУстановленномФлажке", ДействиеПриУстановленномФлажке);
	ПараметрыПредупреждения.Вставить("ДействиеПриНажатииГиперссылки", ДействиеПриНажатииГиперссылки);
	ПараметрыПредупреждения.Вставить("Приоритет", 0);
	ПараметрыПредупреждения.Вставить("ВывестиОдноПредупреждение", Ложь);
	
	Возврат ПараметрыПредупреждения;
	
КонецФункции

// Возвращает значения параметров, необходимых для работы клиентского кода
// при запуске конфигурации за один серверный вызов (для минимизации клиент-серверного взаимодействия
// и снижения времени запуска). 
// С помощью этой функции можно обращаться к параметрам в клиентском коде, вызываемым из обработчиков событий:
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// В этих обработчиках при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - параметры работы клиента при запуске. 
//                            См. в ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
КонецФункции

// Возвращает значения параметров, необходимых для работы клиентского кода конфигурации
// без дополнительных серверных вызовов.
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - параметры работы клиента.
//                            Состав свойств см. в ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Возврат СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗапускПрограммыЗавершен() Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
	Если ПараметрыПриложения[ИмяПараметра] = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрКлиента(ИмяПараметра = Неопределено) Экспорт
	
	ИмяГлобальногоПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыКлиента = ПараметрыПриложения[ИмяГлобальногоПараметра];
	
	Если ПараметрыКлиента = Неопределено Тогда
		// Заполнение постоянных параметров клиента.
		СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	КонецЕсли;
	
	Если ИмяПараметра = Неопределено Тогда
		Возврат ПараметрыКлиента;
	Иначе
		Возврат ПараметрыКлиента[ИмяПараметра];
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПараметрКлиента(ИмяПараметра, Значение) Экспорт
	ИмяГлобальногоПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	ПараметрыПриложения[ИмяГлобальногоПараметра].Вставить(ИмяПараметра, Значение);
КонецПроцедуры

Процедура ЗаполнитьПараметрыКлиента(ПараметрыКлиента) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыКлиента";
	Если ТипЗнч(ПараметрыПриложения[ИмяПараметра]) <> Тип("Структура") Тогда
		ПараметрыПриложения[ИмяПараметра] = Новый Структура;
		ПараметрыПриложения[ИмяПараметра].Вставить("РазделениеВключено");
		ПараметрыПриложения[ИмяПараметра].Вставить("ИнформационнаяБазаФайловая");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЭтоСеансВнешнегоПользователя");
		ПараметрыПриложения[ИмяПараметра].Вставить("АвторизованныйПользователь");
		ПараметрыПриложения[ИмяПараметра].Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ДоступноИспользованиеРазделенныхДанных");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПараметрыАвтономнойРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("ПерсональныеНастройкиРаботыСФайлами");
		ПараметрыПриложения[ИмяПараметра].Вставить("КоличествоЗанятыхФайлов");
		ПараметрыПриложения[ИмяПараметра].Вставить("РезервноеКопированиеИБПриЗавершенииРаботы");
		ПараметрыПриложения[ИмяПараметра].Вставить("СмещениеДатыКлиента");
		ПараметрыПриложения[ИмяПараметра].Вставить("КодОсновногоЯзыка");
		Если ПараметрыКлиента.Свойство("ОценкаПроизводительности") Тогда
			ПараметрыПриложения[ИмяПараметра].Вставить("ОценкаПроизводительности");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПриложения[ИмяПараметра], ПараметрыКлиента);
	
КонецПроцедуры

// После предупреждения вызывает процедуру с параметрами Результат, ДополнительныеПараметры.
//
// Параметры:
//  Параметры           - Структура, которая содержит свойство:
//                          ОбработкаПродолжения - ОписаниеОповещения, которое
//                          содержит процедуру с двумя параметрами:
//                            Результат, ДополнительныеПараметры.
//
//  ОписаниеПредупреждения - Неопределено - предупреждение не требуется.
//  ОписаниеПредупреждения - Строка - текст предупреждения, который нужно показать.
//  ОписаниеПредупреждения - Структура - со свойствами:
//       * ТекстПредупреждения - Строка - текст предупреждения, который нужно показать.
//       * Кнопки              - СписокЗначений - для процедуры ПоказатьВопросПользователю.
//       * ПараметрыВопроса    - Структура - содержит подмножество свойств,
//                                 которые нужно переопределить, из числа
//                                 возвращаемых функцией ПараметрыВопросаПользователю.
//
Процедура ПоказатьПредупреждениеИПродолжить(Параметры, ОписаниеПредупреждения) Экспорт
	
	ОповещениеСРезультатом = Параметры.ОбработкаПродолжения;
	
	Если ОписаниеПредупреждения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	
	Если Параметры.Отказ Тогда
		Кнопки.Добавить("Завершить", НСтр("ru = 'Завершить работу'"));
		ПараметрыВопроса.КнопкаПоУмолчанию = "Завершить";
	Иначе
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить("Завершить",  НСтр("ru = 'Завершить работу'"));
		ПараметрыВопроса.КнопкаПоУмолчанию = "Продолжить";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеПредупреждения) = Тип("Структура") Тогда
		ТекстПредупреждения = ОписаниеПредупреждения.ТекстПредупреждения;
		Кнопки = ОписаниеПредупреждения.Кнопки;
		ЗаполнитьЗначенияСвойств(ПараметрыВопроса, ОписаниеПредупреждения.ПараметрыВопроса);
	Иначе
		ТекстПредупреждения = ОписаниеПредупреждения;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПоказатьПредупреждениеИПродолжитьЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопросПользователю(ОповещениеОЗакрытии, ТекстПредупреждения, Кнопки, ПараметрыВопроса);
	
КонецПроцедуры

// Возвращает имя исполняемого файла в зависимости от вида клиента.
//
Функция ИмяИсполняемогоФайлаПриложения(ПолучитьИмяФайлаКонфигуратора = Ложь) Экспорт
	
	ШаблонИмениФайла = "1cv8[УчебнаяПлатформа].exe";
	
#Если ТонкийКлиент Тогда
	Если Не ПолучитьИмяФайлаКонфигуратора Тогда
		ШаблонИмениФайла = "1cv8c[УчебнаяПлатформа].exe";
	КонецЕсли;	
#КонецЕсли
	
	ЭтоУчебнаяПлатформа = ПараметрыРаботыКлиентаПриЗапуске().ЭтоУчебнаяПлатформа;
	Возврат СтрЗаменить(ШаблонИмениФайла, "[УчебнаяПлатформа]", ?(ЭтоУчебнаяПлатформа, "t", ""));
	
КонецФункции

// Устанавливает / отменяет хранение ссылки на управляемую форму в глобальной переменной.
// Требуется для случаев, когда ссылка на форму передается через ДополнительныеПараметры
// в объекте ОписаниеОповещения, который не блокирует освобождение закрытой формы.
//
Процедура УстановитьХранениеФормы(Форма, Хранение) Экспорт
	
	Хранилище = ПараметрыПриложения["СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы"];
	Если Хранилище = Неопределено Тогда
		Хранилище = Новый Соответствие;
		ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ВременноеХранилищеСсылокНаУправляемыеФормы", Хранилище);
	КонецЕсли;
	
	Если Хранение Тогда
		Хранилище.Вставить(Форма, Новый Структура("Форма", Форма));
	ИначеЕсли Хранилище.Получить(Форма) <> Неопределено Тогда
		Хранилище.Удалить(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что текущие данные определены и не являются группировкой.
// Предназначена для обработчиков таблиц формы динамических списков.
//
// Параметры:
//  ТаблицаИлиТекущиеДанные - ТаблицаФормы - таблица формы динамического списка для проверки текущих данных.
//                          - Неопределено, ДанныеФормыСтруктура, Структура - текущие данные для проверки.
//
// Возвращаемое значение:
//  Булево - 
//
Функция ЭтоЭлементДинамическогоСписка(ТаблицаИлиТекущиеДанные) Экспорт
	
	Если ТипЗнч(ТаблицаИлиТекущиеДанные) = Тип("ТаблицаФормы") Тогда
		ТекущиеДанные = ТаблицаИлиТекущиеДанные.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ТаблицаИлиТекущиеДанные;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные) <> Тип("ДанныеФормыСтруктура")
	   И ТипЗнч(ТекущиеДанные) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, выполнено ли опасное отключение процедур запуска для целей автоматического тестирования.
Функция ОтключенаЛогикаНачалаРаботыСистемы() Экспорт
	Возврат СтрНайти(ПараметрЗапуска, "ОтключитьЛогикуНачалаРаботыСистемы") > 0;
КонецФункции

// Коллекция элементов стиля.
//
// Возвращаемое значение:
//  Структура - элементы стиля:
//   * Ключ - Строка - имя элемента стиля.
//   * Значение - ОбъектМетаданных: ЭлементСтиля - элемент стиля.
//
Функция ЭлементыСтиля() Экспорт
	
	ЭлементыСтиля = Новый Структура;
	
	ПараметрыРаботыКлиента = ПараметрыРаботыКлиента();
	Для каждого ЭлементСтиля Из ПараметрыРаботыКлиента.ЭлементыСтиля Цикл
		
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение.Получить());
	#Иначе
		ЭлементыСтиля.Вставить(ЭлементСтиля.Ключ, ЭлементСтиля.Значение);
	#КонецЕсли
		
	КонецЦикла;
	
	Возврат ЭлементыСтиля;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

// Переадресует оповещение без результата на оповещение с результатом.
Функция ОповещениеБезРезультата(ОповещениеСРезультатом) Экспорт
	
	Возврат Новый ОписаниеОповещения("ВыполнитьОповещениеСПустымРезультатом", ЭтотОбъект, ОповещениеСРезультатом);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вывод результата выполнения.

// Разворачивает узлы указанного дерева на форме.
//
// Параметры:
//   Форма                     - ФормаКлиентскогоПриложения - форма, на которой размещен элемент управления с деревом значений.
//   ИмяЭлементаФормы          - Строка           - имя элемента с таблицей формы (деревом значений) и связанного с ней
//                                                  реквизита формы (должны совпадать).
//   ИдентификаторСтрокиДерева - Произвольный     - идентификатор строки дерева, которую требуется развернуть.
//                                                  Если указано "*", то будут развернуты все узлы верхнего уровня.
//                                                  Если указано Неопределено, то строки дерева развернуты не будут.
//                                                  Значение по умолчанию: "*".
//   РазвернутьСПодчиненными   - Булево           - если Истина, то следует раскрыть также и все подчиненные узлы.
//                                                  По умолчанию Ложь.
//
Процедура РазвернутьУзлыДерева(Форма, ИмяЭлементаФормы, ИдентификаторСтрокиДерева = "*", РазвернутьСПодчиненными = Ложь) Экспорт
	
	ТаблицаЭлемент = Форма.Элементы[ИмяЭлементаФормы];
	Если ИдентификаторСтрокиДерева = "*" Тогда
		Узлы = Форма[ИмяЭлементаФормы].ПолучитьЭлементы();
		Для Каждого Узел Из Узлы Цикл
			ТаблицаЭлемент.Развернуть(Узел.ПолучитьИдентификатор(), РазвернутьСПодчиненными);
		КонецЦикла;
	Иначе
		ТаблицаЭлемент.Развернуть(ИдентификаторСтрокиДерева, РазвернутьСПодчиненными);
	КонецЕсли;
	
КонецПроцедуры

// Оповещает открытые форм и динамические списки о массовых изменениях объектов различных типов
// с помощью методов глобального контекста Оповестить и ОповеститьОбИзменении.
//
// Параметры:
//  ТипыИзмененныхОбъектов - Соответствие - см. СтандартныеПодсистемыСервер.ПодготовитьОповещениеФормОбИзменении
//  ПараметрОповещенияФорм - Произвольный - параметр сообщения для метода Оповестить.
//
Процедура ОповеститьФормыОбИзменении(ТипыИзмененныхОбъектов, ПараметрОповещенияФорм = Неопределено) Экспорт
	
	Для Каждого ТипОбъекта Из ТипыИзмененныхОбъектов Цикл
		Оповестить(ТипОбъекта.Значение.ИмяСобытия, 
			?(ПараметрОповещенияФорм <> Неопределено, ПараметрОповещенияФорм, Новый Структура), 
			ТипОбъекта.Значение.ПустаяСсылка);
		ОповеститьОбИзменении(ТипОбъекта.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму списка объекта с позиционированием на объекте.
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - Объект, который необходимо показать в списке.
//   ИмяФормыСписка - Строка - Имя формы списка.
//       Если передать Неопределено то будет определена автоматически (потребуется вызов сервера).
//   ПараметрыФормы - Структура - Необязательный. Дополнительные параметры открытия формы списка.
//
Процедура ПоказатьВСписке(Ссылка, ИмяФормыСписка, ПараметрыФормы = Неопределено) Экспорт
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяФормыСписка = Неопределено Тогда
		ПолноеИмя = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипЗнч(Ссылка));
		Если ПолноеИмя = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяФормыСписка = ПолноеИмя + ".ФормаСписка";
	КонецЕсли;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока", Ссылка);
	
	Форма = ПолучитьФорму(ИмяФормыСписка, ПараметрыФормы, , Истина);
	Форма.Открыть();
	Форма.ВыполнитьПереход(Ссылка);
КонецПроцедуры

// Выводит текст, который пользователь может скопировать.
//
// Параметры:
//   Обработчик - ОписаниеОповещения - Описание процедуры, которая будет вызвана после завершения показа.
//       Возвращаемое значение аналогично ПоказатьВопросПользователю().
//   Текст     - Строка - Текст информации.
//   Заголовок - Строка - Необязательный. Заголовок окна. По умолчанию "Подробнее".
//
Процедура ПоказатьПодробнуюИнформацию(Обработчик, Текст, Заголовок = Неопределено) Экспорт
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", Неопределено);
	НастройкиДиалога.Вставить("ПоказыватьКартинку", Ложь);
	НастройкиДиалога.Вставить("МожноКопировать", Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию", Ложь);
	НастройкиДиалога.Вставить("Заголовок", Заголовок);
	
	Если Не ЗначениеЗаполнено(НастройкиДиалога.Заголовок) Тогда
		НастройкиДиалога.Заголовок = НСтр("ru = 'Подробнее'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопросПользователю(Обработчик, Текст, Кнопки, НастройкиДиалога);
КонецПроцедуры

// Шапка файла для технической поддержки.
Функция ИнформацияДляПоддержки() Экспорт
	
	Текст = НСтр("ru = 'Название программы: [НазваниеПрограммы] 
	                   |Версия программы: [ВерсияПрограммы]; 
	                   |Версия Платформы 1С:Предприятие: [ВерсияПлатформы] [РазрядностьПлатформы]; 
	                   |Версия Библиотеки стандартных подсистем: [ВерсияБСП];
	                   |Операционная система: [ОперационнаяСистема];
	                   |Размер оперативной памяти: [ОперативнаяПамять];
	                   |Имя COM соединителя: [ИмяCOMСоединителя];
	                   |Базовая: [ЭтоБазоваяВерсияКонфигурации]
	                   |Полноправный пользователь: [ЭтоПолноправныйПользователь]
	                   |Учебная: [ЭтоУчебнаяПлатформа]
	                   |Конфигурация изменена: [КонфигурацияИзменена]'") + Символы.ПС;
	
	Параметры = ?(ЗапускПрограммыЗавершен(), ПараметрыРаботыКлиента(), ПараметрыРаботыКлиентаПриЗапуске());
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекстНедоступно = НСтр("ru = 'недоступно'");
	
	Текст = СтрЗаменить(Текст, "[НазваниеПрограммы]", 
		?(Параметры.Свойство("ПодробнаяИнформация"), Параметры.ПодробнаяИнформация, ТекстНедоступно));
	Текст = СтрЗаменить(Текст, "[ВерсияПрограммы]", 
		?(Параметры.Свойство("ВерсияКонфигурации"), Параметры.ВерсияКонфигурации, ТекстНедоступно));
	Текст = СтрЗаменить(Текст, "[ВерсияПлатформы]", СистемнаяИнформация.ВерсияПриложения);
	Текст = СтрЗаменить(Текст, "[РазрядностьПлатформы]", СистемнаяИнформация.ТипПлатформы);
	Текст = СтрЗаменить(Текст, "[ВерсияБСП]", СтандартныеПодсистемыВызовСервера.ВерсияБиблиотеки());
	Текст = СтрЗаменить(Текст, "[ОперационнаяСистема]", СистемнаяИнформация.ВерсияОС);
	Текст = СтрЗаменить(Текст, "[ОперативнаяПамять]", СистемнаяИнформация.ОперативнаяПамять);
	Текст = СтрЗаменить(Текст, "[ИмяCOMСоединителя]", 
		?(Параметры.Свойство("ИмяCOMСоединителя"), Параметры.ИмяCOMСоединителя, ТекстНедоступно));
	Текст = СтрЗаменить(Текст, "[ЭтоБазоваяВерсияКонфигурации]", 
		?(Параметры.Свойство("ЭтоБазоваяВерсияКонфигурации"), Параметры.ЭтоБазоваяВерсияКонфигурации, ТекстНедоступно));
	Текст = СтрЗаменить(Текст, "[ЭтоПолноправныйПользователь]", 
		?(Параметры.Свойство("ЭтоПолноправныйПользователь"), Параметры.ЭтоПолноправныйПользователь, ТекстНедоступно));
	Текст = СтрЗаменить(Текст, "[ЭтоУчебнаяПлатформа]", 
		?(Параметры.Свойство("ЭтоУчебнаяПлатформа"), Параметры.ЭтоУчебнаяПлатформа, ТекстНедоступно));
	Текст = СтрЗаменить(Текст, "[КонфигурацияИзменена]", 
		?(Параметры.Свойство("НастройкиОбновления"), Параметры.НастройкиОбновления.КонфигурацияИзменена, ТекстНедоступно));
	
	Возврат Текст;
	
КонецФункции

#Если Не ВебКлиент И Не МобильныйКлиент Тогда

// Папка системных приложений.
// Используется только для Windows.
Функция ПапкаСистемныхПриложений() Экспорт
	
	Shell = Новый COMОбъект("Shell.Application");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда 
		// Для 32-битной системы "C:\Windows\System32".
		// Для 64-битной системы "C:\Windows\SysWOW64".
		Folder = Shell.Namespace(41);
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда 
		// Для любой системы "C:\Windows\System32".
		Folder = Shell.Namespace(37);
	КонецЕсли;
	
	Возврат Folder.Self.Path + "\";
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПередНачаломРаботыСистемы

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы();
	
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));
	
	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемБСПКлиент.ПередНачаломРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы();
	
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		ДействияПередНачаломРаботыСистемыВПереопределяемойПроцедуре(Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	
	ОписаниеМодуля = Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля = Параметры.ИндексТекущегоМодуля + 1;
	
	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПередНачаломРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы4(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 5 Тогда
				ТекущийМодуль.ПередНачаломРаботыСистемы5(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВПереопределяемойПроцедуре(Неопределен, Контекст)
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы();
	
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыВМодуляхПереопределяемойПроцедуры", ЭтотОбъект));
	
	Параметры.ИнтерактивнаяОбработка = Неопределено;
	
	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Попытка
			Параметры.Вставить("Модули", Новый Массив);
			ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы(Параметры);
			Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
			Параметры.Удалить("Модули");
		Исключение
			ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке());
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВМодуляхПереопределяемойПроцедуры(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы();
	
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	
	ТекущийМодуль = Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля = Параметры.ИндексТекущегоМодуля + 1;
	
	Попытка
		ТекущийМодуль.ПередНачаломРаботыСистемы(Параметры);
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы();
	
	Если Не ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	
	Попытка
		УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
	Исключение
		ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке(), Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПередНачаломРаботыСистемы(Истина);
	
	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	ПараметрыПриЗапускеПрограммы.Удалить("ПолученныеПараметрыКлиента");
	ПараметрыПриложения["СтандартныеПодсистемы.ЗапускПрограммыЗавершен"] = Истина;
	
	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отказ Тогда
		Если Параметры.Перезапустить <> Истина Тогда
			ПрекратитьРаботуСистемы();
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
			ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Иначе
			ПрекратитьРаботуСистемы(Параметры.Перезапустить);
		КонецЕсли;
		
	ИначеЕсли Не Параметры.НепрерывноеВыполнение Тогда
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ПараметрыОбработкиПередНачаломРаботыСистемы(Удалить = Ложь)
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства = ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;
	
	ИмяСвойства = "ПараметрыОбработкиПередНачаломРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;
	
	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПриНачалеРаботыСистемы

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВИнтеграционнойПроцедуре(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы();
	
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры", ЭтотОбъект));
	
	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ИнтеграцияПодсистемБСПКлиент.ПриНачалеРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВМодуляхИнтеграционнойПроцедуры(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы();
	
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		ДействияПриНачалеРаботыСистемыВПереопределяемойПроцедуре(Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	
	ОписаниеМодуля = Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля = Параметры.ИндексТекущегоМодуля + 1;
	
	Попытка
		Если ТипЗнч(ОписаниеМодуля) <> Тип("Структура") Тогда
			ТекущийМодуль = ОписаниеМодуля;
			ТекущийМодуль.ПриНачалеРаботыСистемы(Параметры);
		Иначе
			ТекущийМодуль = ОписаниеМодуля.Модуль;
			Если ОписаниеМодуля.Номер = 2 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы2(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 3 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы3(Параметры);
			ИначеЕсли ОписаниеМодуля.Номер = 4 Тогда
				ТекущийМодуль.ПриНачалеРаботыСистемы4(Параметры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВПереопределяемойПроцедуре(Неопределен, Контекст)
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы();
	
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПриНачалеРаботыСистемыВМодуляхПереопределяемойПроцедуры", ЭтотОбъект));
	
	Параметры.Вставить("ИндексТекущегоМодуля", 0);
	Параметры.Вставить("ДобавленныеМодули", Новый Массив);
	Попытка
		Параметры.Вставить("Модули", Новый Массив);
		ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы(Параметры);
		Параметры.Вставить("ДобавленныеМодули", Параметры.Модули);
		Параметры.Удалить("Модули");
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВМодуляхПереопределяемойПроцедуры(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы();
	
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ИндексТекущегоМодуля >= Параметры.ДобавленныеМодули.Количество() Тогда
		ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределено, Неопределено);
		Возврат;
	КонецЕсли;
	
	ТекущийМодуль = Параметры.ДобавленныеМодули[Параметры.ИндексТекущегоМодуля];
	Параметры.ИндексТекущегоМодуля = Параметры.ИндексТекущегоМодуля + 1;
	
	Попытка
		ТекущийМодуль.ПриНачалеРаботыСистемы(Параметры);
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыПослеВсехПроцедур(Неопределен, Контекст)
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы();
	
	Если Не ПродолжитьДействияПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	
	Попытка
		ИнтеграцияПодсистемБСПКлиент.ПослеНачалаРаботыСистемы();
		ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы();
	Исключение
		ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке());
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыОбработкаЗавершения(Неопределен, Контекст) Экспорт
	
	Параметры = ПараметрыОбработкиПриНачалеРаботыСистемы(Истина);
	
	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;
	
	Если НЕ Параметры.Отказ Тогда
		ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
		Если ПараметрыПриЗапускеПрограммы.Свойство("ПропуститьОчисткуСкрытияРабочегоСтола") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("ПропуститьОчисткуСкрытияРабочегоСтола");
		КонецЕсли;
		СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
	КонецЕсли;
	
	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);
		Возврат;
		
	Иначе
		Если Параметры.Отказ Тогда
			Если Параметры.Перезапустить <> Истина Тогда
				ПрекратитьРаботуСистемы();
				
			ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
				ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
			Иначе
				ПрекратитьРаботуСистемы(Параметры.Перезапустить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ПараметрыОбработкиПриНачалеРаботыСистемы(Удалить = Ложь)
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
	Свойства = ПараметрыПриложения[ИмяПараметра];
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		ПараметрыПриложения.Вставить(ИмяПараметра, Свойства);
	КонецЕсли;
	
	ИмяСвойства = "ПараметрыОбработкиПриНачалеРаботыСистемы";
	Если Свойства.Свойство(ИмяСвойства) Тогда
		Параметры = Свойства[ИмяСвойства];
	Иначе
		Параметры = Новый Структура;
		Свойства.Вставить(ИмяСвойства, Параметры);
	КонецЕсли;
	
	Если Удалить Тогда
		Свойства.Удалить(ИмяСвойства);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Обработать параметры запуска программы.
//
// Возвращаемое значение:
//   Булево   - Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска()

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	ПараметрыЗапуска = СтрРазделить(ПараметрЗапуска, ";", Ложь);
	
	Отказ = Ложь;
	ИнтеграцияПодсистемБСПКлиент.ПриОбработкеПараметровЗапуска(ПараметрыЗапуска, Отказ);
	ОбщегоНазначенияКлиентПереопределяемый.ПриОбработкеПараметровЗапуска(ПараметрыЗапуска, Отказ);
	
	Возврат Не Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПередЗавершениемРаботыСистемы

// Только для внутреннего использования. Продолжение процедуры ПередЗавершениемРаботыСистемы.
Процедура ДействияПередЗавершениемРаботыСистемы(Параметры) Экспорт
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	
	ПараметрыКлиента = ПараметрыРаботыКлиента();
	Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Попытка
			ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Завершение");
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПередЗавершениемРаботыСистемы.
Процедура ДействияПередЗавершениемРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	
	Параметры.ОбработкаПродолжения = Неопределено;
	Параметры.ОбработкаЗавершения  = Неопределено;
	
	Если Не Параметры.Отказ
	   И Не Параметры.НепрерывноеВыполнение Тогда
		
		ИмяПараметра = "СтандартныеПодсистемы.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы";
		ПараметрыПриложения.Вставить(ИмяПараметра, Истина);
		ЗавершитьРаботуСистемы();
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПередЗавершениемРаботыСистемы.
// 
// Параметры:
//  Неопределен - Неопределено - 
// 	ДополнительныеПараметры - Структура -:
// 	 * Параметры - Структура - 
// 	 * ОбработкаПродолжения - ОписаниеОповещения - 
//
Процедура ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки(Неопределен, ДополнительныеПараметры) Экспорт
	
	Параметры = ДополнительныеПараметры.Параметры;
	Параметры.ОбработкаПродолжения = ДополнительныеПараметры.ОбработкаПродолжения;
	
	Если Параметры.Отказ Тогда
		Параметры.Отказ = Ложь;
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции для запуска и завершения работы программы.

// См. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
Процедура ПередНачаломРаботыСистемы2(Параметры) Экспорт
	
	// Проверяет минимально допустимую версию платформы для запуска.
	// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы,
	// то пользователю будет  показано оповещение. Работа программы будет прекращена,
	// если ПараметрыКлиента.РаботаВПрограммеЗапрещена = Истина.
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ИнтерактивнаяОбработкаПроверкиВерсииПлатформыПриЗапуске", ЭтотОбъект);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПроверитьВерсиюПлатформыПриЗапуске.
Процедура ИнтерактивнаяОбработкаПроверкиВерсииПлатформыПриЗапуске(Параметры, Контекст) Экспорт
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы", ЭтотОбъект, Параметры);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		СтандартнаяОбработка = Истина;
		МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ПриПроверкеВерсииПлатформыПриЗапуске(ОповещениеОЗакрытии, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Текущая             = СистемнаяИнформация.ВерсияПриложения;
	Минимальная         = ПараметрыКлиента.МинимальнаяВерсияПлатформы;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Текущая, Минимальная) < 0 Тогда
		Если ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения =
				НСтр("ru = 'Вход в программу невозможен.
				           |Необходимо предварительно обновить версию платформы 1С:Предприятие.'");
		Иначе
			ТекстСообщения =
				НСтр("ru = 'Вход в программу невозможен.
				           |Необходимо обратиться к администратору для обновления версии платформы 1С:Предприятие.'");
		КонецЕсли;
	Иначе
		Если ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения =
				НСтр("ru = 'Рекомендуется завершить работу программы и обновить версию платформы 1С:Предприятия.
				         |Новая версия платформы содержит исправления ошибок, которые позволят программе работать более стабильно.
				         |Вы также можете отказаться от обновления и продолжить работу на текущей версии.
				         |Минимально необходимая версия платформы %1.'");
		Иначе
			ТекстСообщения = 
				НСтр("ru = 'Рекомендуется завершить работу программы и обратиться к администратору для обновления версии платформы 1С:Предприятия.
				         |Новая версия платформы содержит исправления ошибок, которые позволят программе работать более стабильно.
				         |Вы также можете отказаться от обновления и продолжить работу на текущей версии.
				         |Минимально необходимая версия платформы %1.'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыФормы.Вставить("РекомендуемаяВерсияПлатформы", ПараметрыКлиента.РекомендуемаяВерсияПлатформы);
	ПараметрыФормы.Вставить("МинимальнаяВерсияПлатформы", ПараметрыКлиента.МинимальнаяВерсияПлатформы);
	ПараметрыФормы.Вставить("ОткрытаПоСценарию", Истина);
	ПараметрыФормы.Вставить("ПропуститьЗавершениеРаботы", Истина);
	
	Форма = ОткрытьФорму("Обработка.НерекомендуемаяВерсияПлатформы.Форма.НерекомендуемаяВерсияПлатформы", ПараметрыФормы,
		, , , , ОповещениеОЗакрытии);
	
	Если Форма = Неопределено Тогда
		ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы("Продолжить", Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПроверитьВерсиюПлатформыПриЗапуске.
Процедура ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы(Результат, Параметры) Экспорт
	
	Если Результат <> "Продолжить" Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
Процедура ПередНачаломРаботыСистемы3(Параметры) Экспорт
	
	// Проверяет необходимость восстановления связи с главным узлом и
	// начинает восстановление, если требуется.
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	Если НЕ ПараметрыКлиента.Свойство("ВосстановитьСвязьСГлавнымУзлом") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ИнтерактивнаяОбработкаВосстановленияСвязиСГлавнымУзлом", ЭтотОбъект);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
Процедура ПередНачаломРаботыСистемы4(Параметры) Экспорт
	
	// Проверяет необходимость установки основного языка и часового пояса
	// информационной базы и открывает форму региональных настроек, если требуется.
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыКлиента.Свойство("ВыбратьНачальныеРегиональныеНастройкиИБ") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ИнтерактивнаяОбработкаНачальныхРегиональныхНастроекИБ", ЭтотОбъект, Параметры);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПроверитьНеобходимостьВосстановленияСвязиСГлавнымУзлом.
Процедура ИнтерактивнаяОбработкаВосстановленияСвязиСГлавнымУзлом(Параметры, Контекст) Экспорт
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.ВосстановитьСвязьСГлавнымУзлом = Ложь Тогда
		Параметры.Отказ = Истина;
		ПоказатьПредупреждение(
			ОповещениеБезРезультата(Параметры.ОбработкаПродолжения),
			НСтр("ru = 'Вход в программу временно невозможен до восстановления связи с главным узлом.
			           |Обратитесь к администратору за подробностями.'"),
			15);
		Возврат;
	КонецЕсли;
	
	Форма = ОткрытьФорму("ОбщаяФорма.ВосстановлениеСвязиСГлавнымУзлом",,,,,,
		Новый ОписаниеОповещения("ПослеЗакрытияФормыВосстановленияСвязиСГлавнымУзлом", ЭтотОбъект, Параметры));
	
	Если Форма = Неопределено Тогда
		ПослеЗакрытияФормыВосстановленияСвязиСГлавнымУзлом(Новый Структура("Отказ", Истина), Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы4.
Процедура ИнтерактивнаяОбработкаНачальныхРегиональныхНастроекИБ(Параметры, Контекст) Экспорт
	
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.ВыбратьНачальныеРегиональныеНастройкиИБ = Ложь Тогда
		Параметры.Отказ = Истина;
		ПоказатьПредупреждение(
			ОповещениеБезРезультата(Параметры.ОбработкаПродолжения),
			НСтр("ru = 'Вход в программу невозможен до установки начальных региональных настроек программы.
			           |Обратитесь к администратору за подробностями.'"),
			15);
		Возврат;
	КонецЕсли;
	
	Форма = ОткрытьФорму("ОбщаяФорма.РегиональныеНастройки",,,,,,
		Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораНачальныхРегиональныхНастроекИБ", ЭтотОбъект, Параметры));
	
	Если Форма = Неопределено Тогда
		ПослеЗакрытияФормыВыбораНачальныхРегиональныхНастроекИБ(Новый Структура("Отказ", Истина), Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПроверитьНеобходимостьВосстановленияСвязиСГлавнымУзлом.
Процедура ПослеЗакрытияФормыВосстановленияСвязиСГлавнымУзлом(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Параметры.Отказ = Истина;
		
	ИначеЕсли Результат.Отказ Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ВосстановитьСвязьСГлавнымУзлом");
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы4.
Процедура ПослеЗакрытияФормыВыбораНачальныхРегиональныхНастроекИБ(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Параметры.Отказ = Истина;
		
	ИначеЕсли Результат.Отказ Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ВыбратьНачальныеРегиональныеНастройкиИБ");
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Устанавливает флаг скрытия рабочего стола при начале работы системы,
// который блокирует создание форм на рабочем столе.
// Снимает флаг скрытия и обновляет рабочий стол, когда это станет возможным,
// если скрытие выполнялось.
//
// Параметры:
//  Скрыть - Булево. Если передать Ложь, тогда при условии скрытия рабочего
//           стола он будет вновь показан.
//
//  УжеВыполненоНаСервере - Булево. Если передать Истина, тогда уже был вызван
//           метод в модуле СтандартныеПодсистемыВызовСервера, и его не требуется
//           вызвать, а требуется только установить на клиенте, что рабочий стол
//           был скрыт и позднее его требуется показать.
//
Процедура СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина, УжеВыполненоНаСервере = Ложь) Экспорт
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	
	Если Скрыть Тогда
		Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
			ОбновитьИнтерфейс();
		КонецЕсли;
	Иначе
		Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеПрограммы.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
			КонецЕсли;
			ТекущееАктивноеОкно = АктивноеОкно();
			ОбновитьИнтерфейс();
			Если ТекущееАктивноеОкно <> Неопределено Тогда
				ТекущееАктивноеОкно.Активизировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыполнитьОповещениеСПустымРезультатом(ОповещениеСРезультатом) Экспорт
	
	ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура НачатьИнтерактивнуюОбработкуПередЗавершениемРаботыСистемы() Экспорт
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработкиЗавершения") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработкиЗавершения;
	ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработкиЗавершения");
	
	ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
	Параметры.ИнтерактивнаяОбработка = Неопределено;
	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы(Результат, ДополнительныеПараметры) Экспорт
	
	Параметры = ДополнительныеПараметры.Параметры;
	
	Если ДополнительныеПараметры.ВариантФормы = "Вопрос" Тогда
		
		Если Результат = Неопределено Или Результат.Значение <> КодВозвратаДиалога.Да Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ВариантФормы = "СтандартнаяФорма" Тогда
	
		Если Результат = Истина Или Результат = Неопределено Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
		
	Иначе // ПрикладнаяФорма
		Если Результат = Истина Или Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы.
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	Если ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти() Тогда
		ПодключитьОбработчикОжидания("ПоказатьРекомендациюПоОбъемуОперативнойПамяти", 10, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжиданияСтандартныхПериодическихПроверок();
	
КонецПроцедуры

// Вызывается из обработчика ожидания каждые 20 минут, например, для контроля
// динамического обновления и окончания срока действия учетной записи пользователя.
//
Процедура ПриВыполненииСтандартныхПериодическихПроверок() Экспорт
	
	Параметры = Новый Структура;
	
	ПодсистемаЦентрМониторингаСуществует = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		ПодсистемаЦентрМониторингаСуществует = Истина;
		МодульЦентрМониторингаКлиентСлужебный = ОбщегоНазначенияКлиент.ОбщийМодуль("ЦентрМониторингаКлиентСлужебный");
		МодульЦентрМониторингаКлиентСлужебный.ПриВыполненииСтандартныхПериодическихПроверокНаКлиенте(Параметры);
	КонецЕсли;
	
	СтандартныеПодсистемыВызовСервера.ПриВыполненииСтандартныхПериодическихПроверокНаСервере(Параметры);
	
	Если ПодсистемаЦентрМониторингаСуществует Тогда
		МодульЦентрМониторингаКлиентСлужебный.ПослеВыполненияСтандартныхПериодическихПроверокНаКлиенте(Параметры);
	КонецЕсли;
	
	Контекст = Новый Структура("Параметры", Параметры);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи", ЭтотОбъект, Контекст);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	Если Не Параметры.КонфигурацияБазыДанныхИзмененаДинамически Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
		Возврат;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.ПриВыполненииСтандартныхПериодическихПроверок";
	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
		ДатаСеанса      = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если ТипЗнч(ДатаСохраненная) = Тип("Дата") И ДеньГода(ДатаСохраненная) = ДеньГода(ДатаСеанса) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса =
		НСтр("ru = 'Версия программы обновлена (внесены изменения в конфигурацию информационной базы).
		           |Для дальнейшей работы рекомендуется перезапустить программу.'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Требуется перезапуск'"),,
		ТекстВопроса, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное);
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Перезапустить", НСтр("ru = 'Перезапустить'"));
	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриВыполненииСтандартныхПериодическихПроверокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,, "НапомнитьПозже", КлиентскоеПриложение.ПолучитьЗаголовок());
	
КонецПроцедуры

// Продолжение процедуры ПриВыполненииСтандартныхПериодическихПроверок.
Процедура ПриВыполненииСтандартныхПериодическихПроверокЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = "Перезапустить" Тогда
		ПропуститьПредупреждениеПередЗавершениемРаботыСистемы();
		ЗавершитьРаботуСистемы(Истина, Истина);
		Возврат;
	КонецЕсли;
	
	Если Ответ = "НеСегодня" Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПриВыполненииСтандартныхПериодическихПроверок";
		ПараметрыПриложения.Вставить(ИмяПараметра, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПриВыполненииСтандартныхПериодическихПроверок.
Процедура ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователи(Результат, Контекст) Экспорт

	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение", ЭтотОбъект, Контекст);
	
	ПользователиСлужебныйКлиент.ПриВыполненииСтандартныхПериодическихПроверок(
		Контекст.Параметры, ОбработкаПродолжения);
	
КонецПроцедуры

// Продолжение процедуры ПриВыполненииСтандартныхПериодическихПроверок.
Процедура ПриВыполненииСтандартныхПериодическихПроверокПодсистемаПользователиЗавершение(Результат, Контекст) Экспорт
	
	ПодключитьОбработчикОжиданияСтандартныхПериодическихПроверок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для справочника ИдентификаторыОбъектовМетаданных.

// Только для внутреннего использования.
Процедура ИдентификаторыОбъектовМетаданныхФормаСпискаСписокВыборЗначения(Форма, Элемент, Значение, СтандартнаяОбработка) Экспорт
	
	Если Не Форма.ВыбиратьГруппыОбъектовМетаданных
	   И Элемент.ТекущиеДанные <> Неопределено
	   И Не Элемент.ТекущиеДанные.ПометкаУдаления
	   И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Родитель) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.Отображение = ОтображениеТаблицы.Дерево Тогда
			Если Элемент.Развернут(Элемент.ТекущаяСтрока) Тогда
				Элемент.Свернуть(Элемент.ТекущаяСтрока);
			Иначе
				Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КонецЕсли;
			
		ИначеЕсли Элемент.Отображение = ОтображениеТаблицы.ИерархическийСписок Тогда
			
			Если Элемент.ТекущийРодитель <> Элемент.ТекущаяСтрока Тогда
				Элемент.ТекущийРодитель = Элемент.ТекущаяСтрока;
			Иначе
				ТекущаяСтрока = Элемент.ТекущаяСтрока;
				Элемент.ТекущийРодитель = Неопределено;
				Элемент.ТекущаяСтрока = ТекущаяСтрока;
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Невозможно выбрать группу объектов метаданных.
				           |Выберите объект метаданных.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ПодключитьОбработчикОжиданияСтандартныхПериодическихПроверок()
	
	// Вызов стандартных периодических проверок 1 раз в 20 минут.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСтандартныхПериодическихПроверок", 20 * 60, Истина);
	
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога.
Функция КодВозвратаДиалогаВСтроку(Значение)
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установить разделения сеанса перед началом каких-либо действий в программе.
Процедура УстановитьРазделениеСеанса()
	
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапуска = СтрРазделить(ПараметрЗапуска, ";", Ложь);
	ЗначениеПараметраЗапуска = ВРег(ПараметрыЗапуска[0]);
	
	Если ЗначениеПараметраЗапуска <> ВРег("ВойтиВОбластьДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗапуска.Количество() < 2 Тогда
		ВызватьИсключение
			НСтр("ru = 'При указании параметра запуска ВойтиВОбластьДанных,
			           |дополнительным параметром необходимо указать значение разделителя.'");
	КонецЕсли;
	
	Попытка
		ЗначениеРазделителя = Число(ПараметрыЗапуска[1]);
	Исключение
		ВызватьИсключение
			НСтр("ru = 'Значением разделителя в параметре ВойтиВОбластьДанных должно быть число.'");
	КонецПопытки;
	
	СтандартныеПодсистемыВызовСервера.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
	
КонецПроцедуры

// Обновляет параметры работы клиента после очередной интерактивной обработки при запуске.
Процедура ОбновитьПараметрыРаботыКлиента(Параметры, ПервыйВызов = Ложь, ОбновитьПовторноИспользуемыеЗначения = Истина)
	
	Если ПервыйВызов Тогда
		ИмяПараметра = "СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		КонецЕсли;
		ИмяПараметра = "СтандартныеПодсистемы.ЗапускПрограммыЗавершен";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
		КонецЕсли;
	ИначеЕсли Параметры.КоличествоПолученныхПараметровКлиента = Параметры.ПолученныеПараметрыКлиента.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("КоличествоПолученныхПараметровКлиента", Параметры.ПолученныеПараметрыКлиента.Количество());
	
	ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить(
		"ПолученныеПараметрыКлиента", Параметры.ПолученныеПараметрыКлиента);
	
	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет результат интерактивной обработки, если Отказ, тогда вызывает обработку завершения.
// Если добавлен новый полученный параметр клиента, обновляет параметры работы клиента.
//
// Параметры:
//   Параметры - см. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
//
// Возвращаемое значение:
//   Булево - Истина, если можно продолжить выполнения, и соответственно, не выполнялся
//            обработчик оповещения, указанный в свойствах ОбработкаЗавершения.
//
Функция ПродолжитьДействияПередНачаломРаботыСистемы(Параметры)
	
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьПараметрыРаботыКлиента(Параметры);
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает ошибку, найденную при вызове обработчика события ПриНачалеРаботыСистемы.
//
// Параметры:
//   Параметры          - см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//   ИнформацияОбОшибке - ИнформацияОбОшибке - информация об ошибке.
//   ПрекратитьРаботу   - Булево - если указано Истина, то при ошибке запуска не будет возможности продолжить работу.
//
Процедура ОбработатьОшибкуПередНачаломРаботыСистемы(Параметры, ИнформацияОбОшибке, ПрекратитьРаботу = Ложь)
	
	ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, "Запуск", ПрекратитьРаботу);
	
КонецПроцедуры

// Проверяет результат обработчика события ПередНачаломРаботыСистемы и выполняет обработчик оповещения.
//
// Параметры:
//   Параметры - см. ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы.
//
// Возвращаемое значение:
//   Булево - Истина, если был выполнен обработчик оповещения, указанный
//            ОбработкаЗавершения ОбработкаЗавершения или запланирован переход к выполнению
//            интерактивной обработке, указанной в свойстве ИнтерактивнаяОбработка.
//
Функция ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры)
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьПараметрыРаботыКлиента(Параметры);
	
	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		
	Иначе
		// Требуется подготовка к выполнению интерактивной обработки, затребованной
		// в процессе выполнения обработчика ПередНачаломРаботыСистемы, которая
		// предполагает скрытие рабочего стола и обновление интерфейса перед
		// продолжением при первом вызове процедуры ПриНачалеРаботыСистемы.
		ПараметрыПриЗапускеПрограммы.Вставить("ПараметрыОбработки", Параметры);
		СкрытьРабочийСтолПриНачалеРаботыСистемы();
		ПараметрыПриЗапускеПрограммы.Вставить("ПропуститьОчисткуСкрытияРабочегоСтола");
		
		Если Параметры.ОповещениеЗавершения = Неопределено Тогда
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен платформой,
			// как обработчика события, до открытия главного окна 1С:Предприятия 8.
			Если Не ОтключенаЛогикаНачалаРаботыСистемы() Тогда
				УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске();
			КонецЕсли;
		Иначе
			// Вызов процедуры ПередНачаломРаботыСистемы выполнен программно, как вход в область данных,
			// поэтому продолжение после обновления интерфейса возможно только через обработчик ожидания.
			ПодключитьОбработчикОжидания("ОбработчикОжиданияПриНачалеРаботыСистемы", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет результат интерактивной обработки, если Отказ, тогда вызывает обработку завершения.
//
// Параметры:
//   Параметры - см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//
// Возвращаемое значение:
//   Булево - Истина, если можно продолжить выполнения, и соответственно, не выполнялся
//            обработчик оповещения, указанный в свойствах ОбработкаЗавершения.
//
Функция ПродолжитьДействияПриНачалеРаботыСистемы(Параметры)
	
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает ошибку, найденную при вызове обработчика события ПриНачалеРаботыСистемы.
//
// Параметры:
//   Параметры          - см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//   ИнформацияОбОшибке - ИнформацияОбОшибке - информация об ошибке.
//   ПрекратитьРаботу   - Булево - если указано Истина, то при ошибке запуска не будет возможности продолжить работу.
//
Процедура ОбработатьОшибкуПриНачалеРаботыСистемы(Параметры, ИнформацияОбОшибке, ПрекратитьРаботу = Ложь)
	
	ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, "Запуск", ПрекратитьРаботу);
	
КонецПроцедуры

// Проверяет результат обработчика события ПриНачалеРаботыСистемы и выполняет обработчик оповещения.
//
// Параметры:
//   Параметры - см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//
// Возвращаемое значение:
//   Булево - Истина, если был выполнен обработчик оповещения, указанный в
//            свойствах ОбработкаЗавершения или ИнтерактивнаяОбработка.
//
Функция ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры)
	
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
	
	Параметры.НепрерывноеВыполнение = Ложь;
	Параметры.ИнтерактивнаяОбработка = Неопределено;
	
	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	
	Возврат Истина;
	
КонецФункции

Функция ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы()
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	
	Если НЕ ПараметрыПриЗапускеПрограммы.Свойство("ПараметрыОбработки") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры = ПараметрыПриЗапускеПрограммы.ПараметрыОбработки;
	
	Если Параметры.ИнтерактивнаяОбработка <> Неопределено Тогда
		Параметры.НепрерывноеВыполнение = Ложь;
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		ПараметрыПриЗапускеПрограммы.Удалить("ПараметрыОбработки");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры)
	
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		
	Иначе
		// Выполнен вызов из обработчика события ПередЗавершениемРаботыСистемы для подготовки
		// выполнения интерактивной обработки через обработчик ожидания.
		ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"].Вставить("ПараметрыОбработкиЗавершения", Параметры);
		Параметры.НепрерывноеВыполнение = Ложь;
		ПодключитьОбработчикОжидания(
			"ОбработчикОжиданияИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы", 0.1, Истина);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выводит форму сообщений пользователю при закрытии программы, либо выводит сообщение.
Процедура ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	ДополнительныеПараметры.Вставить("ВариантФормы", "Вопрос");
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы",
		ЭтотОбъект, ДополнительныеПараметры);
		
	Предупреждения = Параметры.Предупреждения;
	Параметры.Удалить("Предупреждения");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предупреждения", Предупреждения);
	
	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";
	
	Если Предупреждения.Количество() = 1 Тогда
		Если Не ПустаяСтрока(Предупреждения[0].ТекстФлажка) Тогда 
			ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ИмяФормы", ИмяФормы);
			ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
			ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", Неопределено);
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
				"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		Иначе
			ДополнительныеПараметры.Вставить("ВариантФормы", "ПрикладнаяФорма");
			ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, Предупреждения[0], ИмяФормы, ПараметрыФормы);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", ИмяФормы);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", Неопределено);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьФормуПредупрежденийПриЗавершенииРаботы.
Процедура ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы(Параметры, ПараметрыОткрытияФормы) Экспорт
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы, , , , ,
		ПараметрыОткрытияФормы.ОбработкаОтвета,
		ПараметрыОткрытияФормы.РежимОткрытияОкна);
	
КонецПроцедуры

// Продолжение процедуры ПоказатьПредупреждениеИПродолжить.
Процедура ПоказатьПредупреждениеИПродолжитьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Завершить" Тогда
			Параметры.Отказ = Истина;
		ИначеЕсли Результат.Значение = "Перезапустить" Или Результат.Значение = КодВозвратаДиалога.Таймаут Тогда
			Параметры.Отказ = Истина;
			Параметры.Перезапустить = Истина;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Формирует отображение одного вопроса.
//
//	Если в ПредупреждениеПользователю есть свойство "ТекстГиперссылки", то открывается "ФормаИндивидуальногоОткрытия" из
//	Структуры вопроса.
//	Если в ПредупреждениеПользователю есть свойство "ТекстФлажка", то открывается форма
//	"ОбщаяФорма.ВопросПередЗавершениемРаботыСистемы".
//
// Параметры:
//  Параметры - сквозные параметры цепочки вызовов процедуры ПередЗавершениемРаботыСистемы.
//  ОбработкаОтвета - ОписаниеОповещения для продолжения после получения ответа пользователя.
//  ПредупреждениеПользователю - Структура - структура передаваемого предупреждения.
//  ИмяФормы - Строка - имя общей формы с вопросами.
//  ПараметрыФормы - Структура - параметры для формы с вопросами.
//
Процедура ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, ПредупреждениеПользователю, ИмяФормы, ПараметрыФормы)
	
	ТекстГиперссылки = "";
	Если НЕ ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеПриНажатииГиперссылки = Неопределено;
	Если НЕ ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГиперссылки", ДействиеПриНажатииГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеГиперссылка = ПредупреждениеПользователю.ДействиеПриНажатииГиперссылки;
	Форма = Неопределено;
	
	Если ДействиеГиперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда 
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;
			
			ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",  НСтр("ru = 'Завершить'"));
			ПараметрыФормы.Вставить("ЗаголовокКнопкиНет", НСтр("ru = 'Отмена'"));
			
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", ДействиеГиперссылка.РежимОткрытияОкна);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		
	ИначеЕсли ДействиеГиперссылка.Свойство("Форма", Форма) Тогда 
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда 
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", ДействиеГиперссылка.РежимОткрытияОкна);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Если указан ПрекратитьРаботу = Истина, то прервать дальнейшее выполнение клиентского кода и прекратить работу.
//
Процедура ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, Событие, ПрекратитьРаботу = Ложь)
	
	Если Событие = "Запуск" Тогда
		Если ПрекратитьРаботу Тогда
			Параметры.Отказ = Истина;
			Параметры.ОбработкаПродолжения = Параметры.ОбработкаЗавершения;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура(
			"Параметры, ОбработкаПродолжения", Параметры, Параметры.ОбработкаПродолжения);
		
		Параметры.ОбработкаПродолжения = Новый ОписаниеОповещения(
			"ДействияПередЗавершениемРаботыСистемыПослеОбработкиОшибки", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	НачалоОписанияОшибки = СтандартныеПодсистемыВызовСервера.ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(
		ПрекратитьРаботу, Событие, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));	
	НачалоОписанияОшибки = "";
	
	ТекстПредупреждения = НачалоОписанияОшибки + Символы.ПС
		+ НСтр("ru = 'Техническая информация об ошибке записана в журнал регистрации.'")
		+ Символы.ПС + Символы.ПС
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ПоказатьПредупреждениеИПродолжить",
		ЭтотОбъект,
		ТекстПредупреждения);
	
	Параметры.ИнтерактивнаяОбработка = ИнтерактивнаяОбработка;
	
КонецПроцедуры

Процедура УстановитьПараметрыФункциональныхОпцийИнтерфейсаПриЗапуске()
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	
	Если ТипЗнч(ПараметрыПриЗапускеПрограммы) <> Тип("Структура")
	 Или Не ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейса") Тогда
		// Обработка ошибки запуска.
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПриЗапускеПрограммы.Свойство("ОпцииИнтерфейсаУстановлены") Тогда
		Возврат;
	КонецЕсли;
	
	ОпцииИнтерфейса = Новый Структура(ПараметрыПриЗапускеПрограммы.ОпцииИнтерфейса);
	
	// Установка параметров функциональных опций производится только тогда, когда они заданы.
	Если ОпцииИнтерфейса.Количество() > 0 Тогда
		УстановитьПараметрыФункциональныхОпцийИнтерфейса(ОпцииИнтерфейса);
	КонецЕсли;
	
	ПараметрыПриЗапускеПрограммы.Вставить("ОпцииИнтерфейсаУстановлены");
	
КонецПроцедуры

Функция ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти()
	ПараметрыКлиента = ПараметрыРаботыКлиентаПриЗапуске();
	Возврат ПараметрыКлиента.ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти;
КонецФункции

Процедура ОповеститьОНехваткеПамяти() Экспорт
	РекомендуемыйОбъем = ПараметрыРаботыКлиентаПриЗапуске().РекомендуемыйОбъемОперативнойПамяти;
	
	Заголовок = НСтр("ru = 'Скорость работы снижена'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рекомендуется увеличить объем памяти до %1 Гб.'"), РекомендуемыйОбъем);
	
	ПоказатьОповещениеПользователя(Заголовок, 
		"e1cib/app/Обработка.РекомендацияПоПовышениюСкоростиРаботы",
		Текст, БиблиотекаКартинок.Предупреждение32, СтатусОповещенияПользователя.Важное);
КонецПроцедуры

#КонецОбласти