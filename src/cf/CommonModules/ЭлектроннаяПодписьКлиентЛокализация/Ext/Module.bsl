///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ПриОпределенииПолучателяОбращенияВТехническуюПоддержку(Получатель) Экспорт
	
	// Локализация
	Получатель = "edo";
	// Конец Локализация
	
КонецПроцедуры

Процедура ПриПолученииФильтраДляВыбораПодписей(Фильтр) Экспорт
	
	// Локализация
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Фильтр = НСтр("ru = 'Файлы подписи (*.p7s, *.sig%1), МЧД (*.xml, *.zip)|*.p7s;*.sig%2;*.xml;*.zip'");
	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

Процедура ПриПолученииСпискаВыбораМашиночитаемыхДоверенностей(Форма, ТекущиеДанные, СписокВыбора) Экспорт
	
	// Локализация
	
	Доверенности = Форма.Доверенности;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПоляОтбора) Тогда
		ПоляОтбора = СтрРазделить(ТекущиеДанные.ПоляОтбора, ";");
		
		Для Каждого Доверенность Из Доверенности Цикл
			Для Каждого Элемент Из ПоляОтбора Цикл
				Если СтрНайти(Доверенность.ПоляОтбора, Элемент) <> 0 Тогда
					СписокВыбора.Добавить(Доверенность.НомерДоверенности, Доверенность.МашиночитаемаяДоверенность);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Конец Локализация
	
КонецПроцедуры

Процедура ПриВыбореМашиночитаемойДоверенности(ОбработчикЗавершения, ТекущиеДанные) Экспорт
	
	// Локализация
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваПодписи = ПолучитьИзВременногоХранилища(ТекущиеДанные.АдресСвойствПодписи);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СертификатПредставителя", СвойстваПодписи.Сертификат);
	ПараметрыФормы.Вставить("НаДату", СвойстваПодписи.ДатаПодписи);
	ПараметрыФормы.Вставить("ТолькоДействующие", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	МодульМашиночитаемыеДоверенностиФНСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МашиночитаемыеДоверенностиФНСКлиент");
	МодульМашиночитаемыеДоверенностиФНСКлиент.ОткрытьСписокМЧД(ПараметрыФормы, ОбработчикЗавершения);
	
	// Конец Локализация
	
КонецПроцедуры

Процедура ПриОпределенииФайловМашиночитаемыхДоверенностей(ФайлыМашиночитаемыхДоверенностей,
		КоллекцияПодписей) Экспорт
		
	// Локализация
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
	
	МашиночитаемыеДоверенности = Новый Массив;
		
	Для Каждого Подпись Из КоллекцияПодписей Цикл
		Для Каждого МашиночитаемаяДоверенность Из Подпись.МашиночитаемаяДоверенность Цикл
			Если МашиночитаемыеДоверенности.Найти(МашиночитаемаяДоверенность.Значение) = Неопределено Тогда
				МашиночитаемыеДоверенности.Добавить(МашиночитаемаяДоверенность.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если МашиночитаемыеДоверенности.Количество() > 0 Тогда
		МодульМашиночитаемыеДоверенностиФНССлужебныйВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"МашиночитаемыеДоверенностиФНССлужебныйВызовСервера");
		ФайлыМашиночитаемыхДоверенностей = МодульМашиночитаемыеДоверенностиФНССлужебныйВызовСервера.ФайлыДоверенностей(
			МашиночитаемыеДоверенности, Ложь);
	КонецЕсли;
	
	// Конец Локализация
	
КонецПроцедуры

Асинх Функция УстановленныеТокены(ОбъектКомпоненты = Неопределено, ПредложитьУстановить = Ложь) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ПроверкаВыполнена", Ложь);
	Результат.Вставить("Токены", Новый Массив);
	Результат.Вставить("Ошибка", "");
	
	// Локализация
		
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр(
		"ru = 'Для получения данных о токенах требуется установка внешней компоненты %1.'"),
		"ExtraCryptoAPI");

	Попытка
		ОбъектКомпоненты = Ждать ЭлектроннаяПодписьСлужебныйКлиент.ОбъектВнешнейКомпонентыExtraCryptoAPI(ПредложитьУстановить, ТекстПояснения);
	Исключение
		Результат.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ТипыУстройств = Ждать ОбъектКомпоненты.PKCS11ПолучитьПоддерживаемыеБэкендыАсинх();
		Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
		ТипыУстройств = СтрРазделить(ТипыУстройств.Значение, "; ");
	Исключение
		Результат.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;

	СтрокиУстройств = Новый Соответствие;
	СтрокиТокенов = Новый Соответствие;
	
	Для Каждого ТипУстройства Из ТипыУстройств Цикл
		
		СвойстваТокена = ЭлектроннаяПодписьСлужебныйКлиент.НовыеСвойстваТокена();
		СвойстваТокена.Токен = ТипУстройства;
		СвойстваТокена.Представление = МодельТокена(ТипУстройства);
		СвойстваТокена.СерийныйНомер = ТипУстройства;
		
		ТекстОшибки = "";
		Если ТипУстройства = Рутокен() Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация();
			Если СтрНайти(СистемнаяИнформация.ВерсияОС, "Microsoft Windows 7") Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Версия операционной системы Microsoft Windows 7 не подходит для работы с токеном %1.
					|Требуется более новая версия Windows или токен JaCarta.'"), 
					СвойстваТокена.Представление);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = "" Тогда
			ОшибкаИнициализацииТокена = "";
			БиблиотекиТокена = "";
			Попытка
				НастройкиТокена = Ждать ОбъектКомпоненты.PKCS11ПолучитьНастройкиБэкендаПоУмолчаниюАсинх(ТипУстройства);
				Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
				БиблиотекиТокена = НастройкиТокена.Значение;
				Ждать ОбъектКомпоненты.PKCS11ИнициализацияАсинх(БиблиотекиТокена);
				Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
			Исключение
				ОшибкаИнициализацииТокена = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;

			Если ЗначениеЗаполнено(ОшибкаИнициализацииТокена) Тогда

				Если ЭтоОшибкаЗагрузкиБиблиотеки(ОшибкаИнициализацииТокена) Тогда
					СвойстваТокена.Ошибка = РекомендацииДляУстановкиБиблиотекТокена(ТипУстройства, БиблиотекиТокена);
				ИначеЕсли Не ЗначениеЗаполнено(БиблиотекиТокена) Тогда
					СвойстваТокена.Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: Не удалось получить настройки для работы с токеном: %2'"),
						СвойстваТокена.Представление, ОшибкаИнициализацииТокена);
				Иначе
					СвойстваТокена.Ошибка = ОшибкаИнициализацииТокена + Символы.ПС
						+ РекомендацииДляУстановкиБиблиотекТокена(ТипУстройства, БиблиотекиТокена);
				КонецЕсли;
			Иначе
				СвойстваТокена.Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: %2.'"), СвойстваТокена.Представление,
					ЭлектроннаяПодписьСлужебныйКлиент.ОшибкаНеНайденТокен());
			КонецЕсли;
		Иначе
			СвойстваТокена.Ошибка = ТекстОшибки;
		КонецЕсли;
		
		СтрокиУстройств.Вставить(ТипУстройства, СвойстваТокена);
		
	КонецЦикла;
	
	ОшибкаПолученияСлотов = "";
		
	Попытка
		СписокСлотов = Ждать ОбъектКомпоненты.PKCS11ПолучитьСписокСлотовАсинх(Истина);
		Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
	Исключение
		ОшибкаПолученияСлотов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить список токенов. %1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ТокенНеВставлен = Не ЗначениеЗаполнено(ОшибкаПолученияСлотов) И (СписокСлотов.Значение = Неопределено Или СписокСлотов.Значение = "null");
	
	Если Не ЗначениеЗаполнено(ОшибкаПолученияСлотов) И Не ТокенНеВставлен Тогда

		СписокСлотов = ЭлектроннаяПодписьСлужебныйКлиентСервер.ПрочитатьОтветКомпоненты(СписокСлотов.Значение);

		Для Каждого Слот Из СписокСлотов Цикл
			Если Слот.Ключ <> "available slot number" Тогда
				Продолжить;
			КонецЕсли;
			ЗначенияСлотов = Слот.Значение;
			Для Каждого ЗначениеСлота Из ЗначенияСлотов Цикл

				ТипУстройства = ТипУстройства(ЗначениеСлота);

				СвойстваТокена = ЭлектроннаяПодписьСлужебныйКлиент.НовыеСвойстваТокена();
				СвойстваТокена.Слот = ЗначениеСлота;
				СвойстваТокена.Токен = ТипУстройства;
				СвойстваТокена.Представление = СтрШаблон("%1 %2",  МодельТокена(ТипУстройства), СвойстваТокена.Слот);

				Если СтрокиУстройств.Получить(ТипУстройства) <> Неопределено Тогда
					СтрокиУстройств.Удалить(ТипУстройства);
				КонецЕсли;
			
				Попытка
					ИнформацияОТокене = Ждать ОбъектКомпоненты.PKCS11ПолучитьИнформациюОТокенеАсинх(ЗначениеСлота);
					Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
				Исключение
					СвойстваТокена.Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1: Не удалось получить информацию о токене в слоте %2. %3'"), МодельТокена(ТипУстройства),
						ЗначениеСлота, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					СтрокиТокенов.Вставить(ТипУстройства, СвойстваТокена);
					Продолжить;
				КонецПопытки;

				Информация = ЭлектроннаяПодписьСлужебныйКлиентСервер.ПрочитатьОтветКомпоненты(ИнформацияОТокене.Значение);
				СвойстваТокена.СерийныйНомер = Информация.Получить("serial_number");
				Модель = Информация.Получить("model");
				СвойстваТокена.Модель = МодельТокена(Модель, ТипУстройства);
				СвойстваТокена.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			 		НСтр("ru = '%1 (серийный номер %2)'"), СвойстваТокена.Модель, СвойстваТокена.СерийныйНомер);

				Попытка
					СписокМеханизмов = Ждать ОбъектКомпоненты.PKCS11ПолучитьСписокПоддерживаемыхМеханизмовАсинх(ЗначениеСлота);
					Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
				Исключение
					СвойстваТокена.Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: Не удалось получить информацию о механизмах токена в слоте %2. %3'"),
						МодельТокена(ТипУстройства), ЗначениеСлота, ОбработкаОшибок.КраткоеПредставлениеОшибки(
						ИнформацияОбОшибке()));
					СтрокиТокенов.Вставить(ТипУстройства, СвойстваТокена);
					Продолжить;
				КонецПопытки;

				СвойстваТокена.Механизмы = СписокМеханизмов.Значение;
				СтрокиТокенов.Вставить(ТипУстройства, СвойстваТокена);
				
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Не ТокенНеВставлен И Не ЭтоОшибкаЗагрузкиБиблиотеки(ОшибкаПолученияСлотов) Тогда
		Для Каждого КлючИЗначение Из СтрокиУстройств Цикл
			КлючИЗначение.Значение.Ошибка = ОшибкаПолученияСлотов + Символы.ПС + КлючИЗначение.Значение.Ошибка;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтрокиТокенов Цикл
		Результат.Токены.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	Для Каждого КлючИЗначение Из СтрокиУстройств Цикл
		Результат.Токены.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	// Конец Локализация
	
	Возврат Результат; 
	
КонецФункции

Асинх Функция СертификатыНаТокене(Токен, ОбъектКомпоненты = Неопределено, ПредложитьУстановить = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверкаВыполнена", Ложь);
	Результат.Вставить("Сертификаты", Новый Массив);
	Результат.Вставить("Ошибка", "");
	
	// Локализация
	
	Если ОбъектКомпоненты = Неопределено Тогда
		Попытка
			ОбъектКомпоненты = Ждать ЭлектроннаяПодписьСлужебныйКлиент.ОбъектВнешнейКомпонентыExtraCryptoAPI(ПредложитьУстановить);
		Исключение
			Результат.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		СертификатыНаТокене = Ждать ОбъектКомпоненты.PKCS11ПолучитьСписокСертификатовАсинх(Токен.Слот, Токен.ЗначениеПароля);
		Ждать ПолучитьОшибкуКомпоненты(ОбъектКомпоненты);
		Результат.ПроверкаВыполнена = Истина;
		Результат.Сертификаты = ЭлектроннаяПодписьСлужебныйКлиентСервер.ПрочитатьОтветКомпоненты(СертификатыНаТокене.Значение);
	Исключение
		Результат.Ошибка = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	// Конец Локализация
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоОшибкаНеправильныйПинКод(ТекстОшибки) Экспорт
	// Локализация
	Если СтрНачинаетсяС(ТекстОшибки, "[pkcs11:160]") Тогда
		Возврат Истина;
	КонецЕсли;
	// Конец Локализация
	Возврат Ложь;
КонецФункции 

// Локализация

Функция ЭтоОшибкаЗагрузкиБиблиотеки(ТекстОшибки)

	Если СтрНачинаетсяС(ТекстОшибки, "[token:10102]") Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Асинх Функция ПолучитьОшибкуКомпоненты(ОбъектКомпоненты)
	Ошибка = Ждать ОбъектКомпоненты.ПолучитьСписокОшибокАсинх();
	
	Если Не ЗначениеЗаполнено(Ошибка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВызватьИсключение Ошибка;
	
КонецФункции

Функция МодельТокена(Модель, ТипУстройства = Неопределено)
	
	Если СтрНачинаетсяС(НРег(Модель), "rutokenecp") Тогда
		Возврат НСтр("ru = 'Рутокен ЭЦП'");
	ИначеЕсли СтрНачинаетсяС(НРег(Модель), "rutokenlite") Тогда
		Возврат НСтр("ru = 'Рутокен Lite'");
	ИначеЕсли СтрНачинаетсяС(НРег(Модель), "rutokens") Тогда
		Возврат НСтр("ru = 'Рутокен S'");
	ИначеЕсли СтрНачинаетсяС(НРег(Модель), "rutoken") Тогда
		Возврат НСтр("ru = 'Рутокен'");
	ИначеЕсли СтрНачинаетсяС(НРег(Модель), "jacarta") Тогда
		Возврат "JaCarta";
	КонецЕсли;
	
	Если ТипУстройства <> Неопределено Тогда
		Возврат СтрШаблон("%1 %2", МодельТокена(ТипУстройства), Модель);
	КонецЕсли;
	
	Возврат Модель;
	
КонецФункции

Функция ТипУстройства(Слот)
	
	Если СтрНачинаетсяС(НРег(Слот), Рутокен()) Тогда
		Возврат Рутокен();
	ИначеЕсли СтрНачинаетсяС(НРег(Слот), "jacarta") Тогда
		Возврат "jacarta";
	КонецЕсли;
	
	Массив = СтрРазделить(Слот, ": ");
	Если Массив.Количество() > 0 Тогда
		Возврат Массив[0];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция Рутокен()
	Возврат "rutoken"
КонецФункции

Функция РекомендацииДляУстановкиБиблиотекТокена(ТипУстройства, Библиотеки)
	
	Если НРег(ТипУстройства) = Рутокен() Тогда
		Возврат НСтр("ru = 'Для работы с Рутокеном скачайте и установите библиотеку с сайта производителя https://www.rutoken.ru/support/download/pkcs/, вставьте токен в компьютер, обновите список токенов и повторите попытку.'");
	ИначеЕсли НРег(ТипУстройства) = "jacarta" Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для работы с %1 скачайте и установите библиотеку с сайта производителя https://aladdin-rd.ru/support/downloads/jacarta/, вставьте токен в компьютер, обновите список токенов и повторите попытку.'"),
			"JaСarta");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Конец Локализация

#КонецОбласти
