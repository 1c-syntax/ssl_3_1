///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Конструктор параметра СвойстваПодписи для добавления и обновления данных электронной подписи.
// Содержит развернутое описание подписи.
// 
// Возвращаемое значение:
//   Структура:
//     * Подпись             - ДвоичныеДанные - результат подписания.
//                           - Строка - подписанный КонвертXML, если передавался в данных.
//     * УстановившийПодпись - СправочникСсылка.Пользователи - пользователь, который
//                           подписал объект информационной базы.
//     * Комментарий         - Строка - комментарий, если он был введен при подписании.
//     * ИмяФайлаПодписи     - Строка - если подпись добавлена из файла.
//     * ДатаПодписи         - Дата - дата, когда подпись была сделана. Имеет смысл для случаев,
//                           когда дату невозможно извлечь из данных подписи.
//     * ПропуститьПриПродлении - Булево - не подлежит усовершенствованию, например,
//                                достоверность обеспечивается оператором электронного документооборота.
//
//     Используются при обновлении результата проверки подписи:
//     * ДатаПроверкиПодписи - Дата - дата последней проверки подписи.
//     * ПодписьВерна        - Булево - результат последней проверки подписи.
//     * ТребуетсяПроверка   - Булево - не удалось проверить подпись.
//     * ПодписьМатематическиВерна - Булево - вычисляется при проверке подписи без дополнительных атрибутов.
//     * ОшибкаМатематическойПроверкиПодписи - Строка - ошибка при ПроверитьПодпись с флагом
//                                                      ПроверитьДополнительныеАтрибуты = Ложь
//     * ОшибкаПроверкиДополнительныхАтрибутов - Строка - ошибка при проверке сертификата и атрибутов
//                                                        усовершенствованной подписи, таких как метка времени.
//     * ДополнительныеАтрибутыПровереныВручную - Булево - признак ПодписьВерна в части доп. атрибутов установлен
//         вручную (в случае ПодписьМатематическиВерна = Ложь - Исключение при ручной установке)
//     * АвторРучнойПроверкиДополнительныхАтрибутов - СправочникСсылка.Пользователи
//     * ОбоснованиеРучнойПроверкиДополнительныхАтрибутов - Строка - ссылка на организацию, подтвердившую достоверность
//                                                                   подписи, например, Оператор ЭДО
//
//     Используются при обновлении усовершенствованной подписи:
//     * ПодписанныйОбъект   - ОпределяемыйТип.ПодписанныйОбъект - объект, с которым связана подпись.
//                             Игнорируется в методах, в которые объект передается как параметр.
//     * ПорядковыйНомер     - Число - идентификатор подписи, по которому можно упорядочивать их в списке.
//                             Не заполнен, если подпись не связана с объектом.
//     * ОшибкаПриАвтоматическомПродлении - Булево - не использовать, служебный, заполняется регламентным заданием.
//     Используются для связи с машиночитаемой доверенностью:
//     * ИдентификаторПодписи - УникальныйИдентификатор
//     * РезультатПроверкиПодписиПоМЧД - Массив из Структура
//                                     - Структура - МашиночитаемыеДоверенностиФНС.РезультатПроверкиПодписиПоМЧД
//
//     Производные свойства подписи:
//     * ТипПодписи          - ПеречислениеСсылка.ТипыПодписиКриптографии
//     * СрокДействияПоследнейМеткиВремени - Дата - срок действия сертификата, которым подписана
//                                           последняя метка времени (или пустая дата, если нет метки времени),
//                                           если удалось определить с помощью МенеджерКриптографии
//     * Сертификат          - ХранилищеЗначения - содержит выгрузку сертификата,
//                             который использовался для подписания (содержится в подписи).
//                           - ДвоичныеДанные
//     * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//     * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//     * ОписаниеСертификата - Структура - свойство, требуемое для сертификатов, которые
//                             не могут быть переданы в метод платформы СертификатКриптографии, со свойствами:
//        ** СерийныйНомер  - Строка - серийный номер сертификата, как у объекта платформы СертификатКриптографии.
//        ** КемВыдан       - Строка - как возвращает функция ПредставлениеИздателя.
//        ** КомуВыдан      - Строка - как возвращает функция ПредставлениеСубъекта.
//        ** ДатаНачала     - Строка - дата сертификата, как у объекта платформы СертификатКриптографии в формате "ДЛФ=D".
//        ** ДатаОкончания  - Строка - дата сертификата, как у объекта платформы СертификатКриптографии в формате "ДЛФ=D".
//        ** ДействителенДо - Строка - (необязательный) минимальная дата из дат окончания открытого и закрытого ключа
//                                     (если указана в сертификате) в формате "ДЛФ=D".
//
Функция НовыеСвойстваПодписи() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Подпись");
	Структура.Вставить("УстановившийПодпись");
	Структура.Вставить("Комментарий");
	Структура.Вставить("ИмяФайлаПодписи");
	Структура.Вставить("ДатаПодписи");
	
	Структура.Вставить("ПодписанныйОбъект");
	Структура.Вставить("ПорядковыйНомер");
	
	Структура.Вставить("ДатаПроверкиПодписи");
	Структура.Вставить("ПодписьВерна");
	Структура.Вставить("ТребуетсяПроверка", Ложь);
	
	Структура.Вставить("ПодписьМатематическиВерна");
	Структура.Вставить("ОшибкаМатематическойПроверкиПодписи");
	Структура.Вставить("ОшибкаПроверкиДополнительныхАтрибутов");
	Структура.Вставить("ДополнительныеАтрибутыПровереныВручную");
	Структура.Вставить("АвторРучнойПроверкиДополнительныхАтрибутов");
	Структура.Вставить("ОбоснованиеРучнойПроверкиДополнительныхАтрибутов");
	
	Структура.Вставить("Сертификат");
	Структура.Вставить("Отпечаток");
	Структура.Вставить("КомуВыданСертификат");
	Структура.Вставить("ТипПодписи");
	Структура.Вставить("СрокДействияПоследнейМеткиВремени");
	
	Структура.Вставить("ОписаниеСертификата");
	
	Структура.Вставить("ПропуститьПриПродлении");
	Структура.Вставить("ОшибкаПриАвтоматическомПродлении", Ложь);
	Структура.Вставить("ИдентификаторПодписи");
	Структура.Вставить("РезультатПроверкиПодписиПоМЧД");
	
	Возврат Структура;
	
КонецФункции

// Результат проверки подписи.
// 
// Возвращаемое значение:
//  Структура:
//   * Результат - Булево     - Истина, если проверка выполнена успешно.
//             - Строка       - описание ошибки проверки подписи.
//             - Неопределено - не удалось получить менеджер криптографии (когда не указан).
//   * ПодписьВерна        - Булево, Неопределено - результат последней проверки подписи.
//   * СертификатОтозван   - Булево - ошибка связана с тем, что сертификат отозван.
//   * ТребуетсяПроверка   - Булево - не удалось проверить подпись.
//   * ПодписьМатематическиВерна - Булево - вычисляется при проверке подписи без проверки сертификатов 
//                                           и атрибутов усовершенствованной подписи, таких как метка времени.
//   * ОшибкаМатематическойПроверкиПодписи - Строка - ошибка при ПроверитьПодпись с флагом
//                                                    ПроверитьДополнительныеАтрибуты = Ложь
//   * ОшибкаПроверкиДополнительныхАтрибутов - Строка - ошибка при проверке сертификата и атрибутов усовершенствованной
//                                                      подписи, таких как метка времени.
//   * ПараметрыПроверкиСертификата - см. ЭлектроннаяПодписьКлиент.ПараметрыПроверкиПодписи.ПроверятьСертификат
//
//   * ТипПодписи          - ПеречислениеСсылка.ТипыПодписиКриптографии - не заполнен при проверке подписей конверта XML.
//   * СрокДействияПоследнейМеткиВремени - Дата - срок действия сертификата, которым подписана
//    последняя метка времени (или пустая дата, если нет метки времени), если удалось определить с помощью МенеджерКриптографии.
//   * НеподтвержденнаяДатаПодписи - Дата - неподтвержденная дата подписи.
//                                 - Неопределено - неподтвержденная дата подписи отсутствует в данных подписи и для
//                                                конверта XML.
//   * ДатаПодписиИзМетки  - Дата - дата самой ранней метки времени.
//                         - Неопределено - метка времени отсутствует в данных подписи и при проверке конверта XML.
//   * Сертификат          - ДвоичныеДанные - сертификат подписанта
//   * Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//   * КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//
Функция РезультатПроверкиПодписи() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Результат");
	Структура.Вставить("ПодписьВерна");
	Структура.Вставить("СертификатОтозван", Ложь);
	Структура.Вставить("ТребуетсяПроверка");
	
	Структура.Вставить("ПодписьМатематическиВерна");
	Структура.Вставить("ОшибкаМатематическойПроверкиПодписи");
	Структура.Вставить("ОшибкаПроверкиДополнительныхАтрибутов");
	Структура.Вставить("ПараметрыПроверкиСертификата", ЭлектроннаяПодписьСлужебныйКлиентСервер.ПроверятьКвалифицированные());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		Структура, ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваПодписиПриЧтенииИПроверке());
		
	Возврат Структура;
	
КонецФункции

// Конструктор для заполнения результата проверки подписи в форме.
// 
// Возвращаемое значение:
//  Структура - результат проверки подписи в форме:
//   * ПорядковыйНомер - см. НовыеСвойстваПодписи.ПорядковыйНомер
//   * Объект - см. НовыеСвойстваПодписи.ПодписанныйОбъект
//   * ДатаПодписи - см. НовыеСвойстваПодписи.ДатаПодписи
//   * Комментарий - см. НовыеСвойстваПодписи.Комментарий
//   * АдресПодписи - Строка - адрес подписи во временном хранилище.
//   * Отпечаток - см. НовыеСвойстваПодписи.Отпечаток
//   * АдресСертификата - Строка - адрес сертификата во временном хранилище.
//   * ПодписьВерна - см. НовыеСвойстваПодписи.ПодписьВерна
//   * ДатаПроверкиПодписи - см. НовыеСвойстваПодписи.ДатаПроверкиПодписи
//   * КомуВыданСертификат - см. НовыеСвойстваПодписи.КомуВыданСертификат
//   * ТребуетсяПроверка - см. НовыеСвойстваПодписи.ТребуетсяПроверка
//   * УстановившийПодпись - см. НовыеСвойстваПодписи.УстановившийПодпись
//   * ТипПодписи - см. НовыеСвойстваПодписи.ТипПодписи
//   * СрокДействияПоследнейМеткиВремени - см. НовыеСвойстваПодписи.СрокДействияПоследнейМеткиВремени
//   * МашиночитаемаяДоверенность - СправочникСсылка.МашиночитаемыеДоверенности
//   * МашиночитаемаяДоверенностьВерна - Булево
//   * РезультатПроверкиПодписиПоМЧД - см. НовыеСвойстваПодписи.РезультатПроверкиПодписиПоМЧД
//   * РезультатПроверки - Структура - свойства результата проверки подписи для хранения в базе:
//     ** ПодписьМатематическиВерна - Булево
//     ** ОшибкаМатематическойПроверкиПодписи - Строка - текст ошибки.
//     ** ОшибкаПроверкиДополнительныхАтрибутов - Строка - текст ошибки.
//     ** ДополнительныеАтрибутыПровереныВручную - Булево - признак ручной проверки подписи.
//     ** АвторРучнойПроверкиДополнительныхАтрибутов - СправочникСсылка.Пользователи
//     ** ОбоснованиеРучнойПроверкиДополнительныхАтрибутов - Строка
//   * РезультатПроверкиКраткий - Строка - для отображения результата проверки подписи в форме.
//
Функция РезультатПроверкиПодписиВФорме() Экспорт
	
	СвойстваПодписи = Новый Структура;
	
	СвойстваПодписи.Вставить("ПорядковыйНомер");
	СвойстваПодписи.Вставить("Объект");
	СвойстваПодписи.Вставить("ДатаПодписи");
	СвойстваПодписи.Вставить("Комментарий");
	СвойстваПодписи.Вставить("АдресПодписи");
	СвойстваПодписи.Вставить("Отпечаток");
	СвойстваПодписи.Вставить("АдресСертификата");
	СвойстваПодписи.Вставить("ПодписьВерна");
	СвойстваПодписи.Вставить("ДатаПроверкиПодписи");
	СвойстваПодписи.Вставить("КомуВыданСертификат");
	СвойстваПодписи.Вставить("ИмяФайлаПодписи");
	СвойстваПодписи.Вставить("ТребуетсяПроверка");
	СвойстваПодписи.Вставить("УстановившийПодпись");
	СвойстваПодписи.Вставить("ТипПодписи");
	СвойстваПодписи.Вставить("СрокДействияПоследнейМеткиВремени");
	СвойстваПодписи.Вставить("ИдентификаторПодписи");
	
	// Для совместимости начало
	СвойстваПодписи.Вставить("ОписаниеОшибки"); 
	СвойстваПодписи.Вставить("Статус");
	// Для совместимости конец
	
	СвойстваПодписи.Вставить("МашиночитаемаяДоверенность");
	СвойстваПодписи.Вставить("МашиночитаемаяДоверенностьВерна");
	СвойстваПодписи.Вставить("РезультатПроверкиПодписиПоМЧД");

	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПодписьМатематическиВерна");
	РезультатПроверки.Вставить("ОшибкаМатематическойПроверкиПодписи");
	РезультатПроверки.Вставить("ОшибкаПроверкиДополнительныхАтрибутов");
	РезультатПроверки.Вставить("ДополнительныеАтрибутыПровереныВручную");
	РезультатПроверки.Вставить("АвторРучнойПроверкиДополнительныхАтрибутов");
	РезультатПроверки.Вставить("ОбоснованиеРучнойПроверкиДополнительныхАтрибутов");
	
	СвойстваПодписи.Вставить("РезультатПроверки", РезультатПроверки);
	СвойстваПодписи.Вставить("РезультатПроверкиКраткий");
	
	Возврат СвойстваПодписи;
	
КонецФункции

// Заполняет для отображения в форме текст проверки подписи и помещает его в атрибут РезультатПроверкиКраткий . 
//
// Параметры:
//  СвойстваПодписи - см. РезультатПроверкиПодписиВФорме
//  ДатаСеанса - Дата
//
Процедура ЗаполнитьСтатусПодписи(СвойстваПодписи, ДатаСеанса) Экспорт
	
	Если Не ЗначениеЗаполнено(СвойстваПодписи.АдресПодписи) Тогда
		Статус = "";
		Если ЗначениеЗаполнено(СвойстваПодписи.РезультатПроверки)
			И ЗначениеЗаполнено(СвойстваПодписи.РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов) Тогда
			СвойстваПодписи.РезультатПроверкиКраткий = 
				СвойстваПодписи.РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов;
		Иначе
			СвойстваПодписи.РезультатПроверкиКраткий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидается подписание документа в 1С: Мобильная подпись с %1'"), СвойстваПодписи.ДатаПодписи);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПроверкиПодписи) Тогда
		Статус = "";
		СвойстваПодписи.РезультатПроверкиКраткий = НСтр("ru = 'Не проверена'");
		Возврат;
	КонецЕсли;
		
	РезультатПроверки = СвойстваПодписи.РезультатПроверки;
	
	Если ЗначениеЗаполнено(РезультатПроверки) И РезультатПроверки.ДополнительныеАтрибутыПровереныВручную Тогда
		Статус = НСтр("ru = 'Проверена вручную'");
	ИначеЕсли СвойстваПодписи.ПодписьВерна
		И ЗначениеЗаполнено(СвойстваПодписи.СрокДействияПоследнейМеткиВремени)
		И СвойстваПодписи.СрокДействияПоследнейМеткиВремени < ДатаСеанса Тогда
		Статус = НСтр("ru = 'Была верна на дату подписи'");
	ИначеЕсли СвойстваПодписи.ПодписьВерна Тогда
		Статус = НСтр("ru = 'Верна'");
	ИначеЕсли СвойстваПодписи.ТребуетсяПроверка Тогда
		Статус = НСтр("ru = 'Требуется проверка'");
	Иначе
		Статус = НСтр("ru = 'Неверна'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
		СвойстваПодписи.РезультатПроверкиКраткий = Статус;
		Возврат;
	КонецЕсли;

	Если СвойстваПодписи.ПодписьВерна Тогда
		Если ЗначениеЗаполнено(РезультатПроверки.ОбоснованиеРучнойПроверкиДополнительныхАтрибутов) Тогда
			
			Если СтрДлина(РезультатПроверки.ОбоснованиеРучнойПроверкиДополнительныхАтрибутов) > 100 Тогда
				ОбоснованиеРучнойПроверкиДополнительныхАтрибутов =
					Лев(РезультатПроверки.ОбоснованиеРучнойПроверкиДополнительныхАтрибутов, 100) + "...";
			Иначе
				ОбоснованиеРучнойПроверкиДополнительныхАтрибутов = РезультатПроверки.ОбоснованиеРучнойПроверкиДополнительныхАтрибутов;
			КонецЕсли;
			
			СвойстваПодписи.РезультатПроверкиКраткий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1. %2 (%3)'"), Статус,
				ОбоснованиеРучнойПроверкиДополнительныхАтрибутов, РезультатПроверки.АвторРучнойПроверкиДополнительныхАтрибутов);
		Иначе
			
			Если СвойстваПодписи.ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.БазоваяCAdESBES")
				Или СвойстваПодписи.ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.ОбычнаяCMS")
				Или Не ЗначениеЗаполнено(СвойстваПодписи.ТипПодписи) Тогда
					
				Если ЗначениеЗаполнено(СвойстваПодписи.СрокДействияПоследнейМеткиВремени)
					И СвойстваПодписи.СрокДействияПоследнейМеткиВремени < ДатаСеанса Тогда
					СвойстваПодписи.РезультатПроверкиКраткий = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1. Документ не изменен, сертификат был действителен на дату подписи.'"), Статус);
				Иначе
					СвойстваПодписи.РезультатПроверкиКраткий =  
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1. Документ не изменен, сертификат действителен на дату проверки.'"), Статус);
				КонецЕсли;
			Иначе
				СвойстваПодписи.РезультатПроверкиКраткий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1. Документ не изменен, сертификат действителен на дату метки времени.'"), Статус);
			КонецЕсли;
			
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(РезультатПроверки.ОшибкаМатематическойПроверкиПодписи) И ЗначениеЗаполнено(
		РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов) Тогда

		СвойстваПодписи.РезультатПроверкиКраткий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. Документ изменен и сертификат не прошел проверку. %2 %3'"), Статус,
			РезультатПроверки.ОшибкаМатематическойПроверкиПодписи, РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов);
	ИначеЕсли ЗначениеЗаполнено(РезультатПроверки.ОшибкаМатематическойПроверкиПодписи) Тогда

		СвойстваПодписи.РезультатПроверкиКраткий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1. Документ изменен. %2'"), Статус, РезультатПроверки.ОшибкаМатематическойПроверкиПодписи);
	ИначеЕсли ЗначениеЗаполнено(РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов) Тогда
			
		Если РезультатПроверки.ПодписьМатематическиВерна = Ложь Тогда
			СвойстваПодписи.РезультатПроверкиКраткий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1. %2'"), Статус, РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов);
		ИначеЕсли СвойстваПодписи.ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.ОбычнаяCMS")
			Или СвойстваПодписи.ТипПодписи = ПредопределенноеЗначение(
			"Перечисление.ТипыПодписиКриптографии.БазоваяCAdESBES") Тогда

			СвойстваПодписи.РезультатПроверкиКраткий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1. Документ не изменен, но сертификат не прошел проверку. %2'"), Статус, 
				РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов);
		Иначе
			СвойстваПодписи.РезультатПроверкиКраткий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1. Документ не изменен, но один из сертификатов или дополнительные атрибуты подписи не прошли проверку. %2'"), Статус,
				РезультатПроверки.ОшибкаПроверкиДополнительныхАтрибутов);
		КонецЕсли;
	Иначе
		СвойстваПодписи.РезультатПроверкиКраткий =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1.'"), Статус);
	КонецЕсли;
	
КонецПроцедуры

// Формирует имя файла подписи по шаблону.
//
// Параметры:
//  ИмяБезРасширения			 - Строка - исходное имя файла без расширения. Например, ПодписанныйОбъект.Наименование.
//  КомуВыданСертификат			 - Строка - владелец сертификата (фамилия, имя, организация, должность).
//  РасширениеДляФайловПодписи	 - Строка - расширение для файлов подписи, добавляемое к имени файла.
//  ТребуетсяРазделитель		 - Булево - признак дополнительной установки разделителя в имени файла.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяФайлаПодписи(ИмяБезРасширения, КомуВыданСертификат, РасширениеДляФайловПодписи, ТребуетсяРазделитель = Истина) Экспорт
	
	Возврат ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаПодписи(ИмяБезРасширения,
		КомуВыданСертификат, РасширениеДляФайловПодписи, ТребуетсяРазделитель);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.ПредставлениеСертификата.
// См. ЭлектроннаяПодпись.ПредставлениеСертификата.
//
Функция ПредставлениеСертификата(Сертификат, Отчество = Ложь, СрокДействия = Истина) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если СрокДействия Тогда
		Возврат ЭлектроннаяПодпись.ПредставлениеСертификата(Сертификат);
	Иначе	
		Возврат ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат);
	КонецЕсли;	
#Иначе
	Если СрокДействия Тогда
		Возврат ЭлектроннаяПодписьКлиент.ПредставлениеСертификата(Сертификат);
	Иначе
		Возврат ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта(Сертификат);
	КонецЕсли;
#КонецЕсли
	
КонецФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта.
// См. ЭлектроннаяПодпись.ПредставлениеСубъекта.
//
Функция ПредставлениеСубъекта(Сертификат, Отчество = Истина) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат);
#Иначе
	Возврат ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта(Сертификат);
#КонецЕсли
	
КонецФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.ПредставлениеИздателя.
// См. ЭлектроннаяПодпись.ПредставлениеИздателя.
//
Функция ПредставлениеИздателя(Сертификат) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись.ПредставлениеИздателя(Сертификат);
#Иначе
	Возврат ЭлектроннаяПодписьКлиент.ПредставлениеИздателя(Сертификат);
#КонецЕсли
	
КонецФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.СвойстваСертификата.
// См. ЭлектроннаяПодпись.СвойстваСертификата.
//
Функция ЗаполнитьСтруктуруСертификата(Сертификат) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись.СвойстваСертификата(Сертификат);
#Иначе
	Возврат ЭлектроннаяПодписьКлиент.СвойстваСертификата(Сертификат);
#КонецЕсли
	
КонецФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.СвойстваСубъектаСертификата.
// См. ЭлектроннаяПодпись.СвойстваСубъектаСертификата.
//
Функция СвойстваСубъектаСертификата(Сертификат) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
#Иначе
	Возврат ЭлектроннаяПодписьКлиент.СвойстваСубъектаСертификата(Сертификат);
#КонецЕсли
	
КонецФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.СвойстваИздателяСертификата.
// См. ЭлектроннаяПодпись.СвойстваИздателяСертификата.
//
Функция СвойстваИздателяСертификата(Сертификат) Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись.СвойстваИздателяСертификата(Сертификат);
#Иначе
	Возврат ЭлектроннаяПодписьКлиент.СвойстваИздателяСертификата(Сертификат);
#КонецЕсли
	
КонецФункции

// Устарела.
// См. ЭлектроннаяПодписьКлиент.ПараметрыXMLDSig.
// См. ЭлектроннаяПодпись.ПараметрыXMLDSig.
//
Функция ПараметрыXMLDSig() Экспорт
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись.ПараметрыXMLDSig();
#Иначе
	Возврат ЭлектроннаяПодписьКлиент.ПараметрыXMLDSig();
#КонецЕсли
	
КонецФункции

#КонецОбласти

#КонецОбласти