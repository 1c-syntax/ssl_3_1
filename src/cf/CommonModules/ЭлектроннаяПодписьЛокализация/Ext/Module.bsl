///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// При создании на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	// Локализация
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла" Тогда
		Форма.Элементы.ПодписиМашиночитаемаяДоверенность.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью" Тогда
		Форма.Элементы.ТаблицаПодписейМашиночитаемаяДоверенность.Видимость = Истина;
		Возврат;
	КонецЕсли;
		
	// Конец Локализация
	
КонецПроцедуры

// Переопределяет представление типа подписи в форме настроек панели администрирования и тест подсказки в форме подписания.
// 
// Параметры:
//  ТипПодписи - ПеречислениеСсылка.ТипыПодписиКриптографии
//  ПредставлениеПодписи - Строка
//
Процедура ПриЗаполненииПредставленияТипаПодписи(ТипПодписи, ПредставлениеПодписи) Экспорт
	
	// Локализация
	Если ТипПодписи = Перечисления.ТипыПодписиКриптографии.БазоваяCAdESBES Тогда
		ПредставлениеПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Базовая подпись (%1)
						|Квалифицированная базовая подпись признается действительной до окончания срока действия сертификата подписанта (обычно в течение 1 года) согласно статье 11 Федерального закона от 06.04.2011 N 63-ФЗ ""Об электронной подписи"".'"),
				"CAdES-BES");
	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

// Переопределяет настройку использования сервиса мобильной подписи.
// 
// Параметры:
//  Используется - Булево
//
Процедура ПриПолученииНастройкиИспользованияМобильногоСервиса(Используется) Экспорт
	
	// Локализация
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СервисМобильнойПодписи") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСервисМобильнойПодписи = ОбщегоНазначения.ОбщийМодуль(
			"СервисМобильнойПодписи");
	Используется = МодульСервисМобильнойПодписи.ИспользоватьСервисМобильнойПодписи();
	// Конец Локализация
	
КонецПроцедуры

// Переопределяет заголовок команды для отправки на подписание в мобильный сервис.
// 
// Параметры:
//  Заголовок - Строка
//
Процедура ПриПолученииЗаголовкаКомандыОтправитьНаПодписание(Заголовок) Экспорт
	
	// Локализация
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СервисМобильнойПодписи") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСервисМобильнойПодписиСлужебный = ОбщегоНазначения.ОбщийМодуль(
			"СервисМобильнойПодписиСлужебный");
	Заголовок = МодульСервисМобильнойПодписиСлужебный.ЗаголовокКомандыОтправитьНаПодписание();
	// Конец Локализация
	
КонецПроцедуры

// Переопределяет заголовок команды для отправки на подписание в мобильный сервис.
// 
// Параметры:
//  СписокВыбора - СписокЗначений
//
Процедура ПриПолученииТиповПодписания(СписокВыбора) Экспорт
	
	// Локализация
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СервисМобильнойПодписи") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСервисМобильнойПодписиСлужебный = ОбщегоНазначения.ОбщийМодуль(
			"СервисМобильнойПодписиСлужебный");
	МодульСервисМобильнойПодписиСлужебный.ПриПолученииТиповПодписания(СписокВыбора);
	// Конец Локализация
	
КонецПроцедуры

// Переопределяет результат отправки на подписание в мобильный сервис.
// 
// Параметры:
//  ИдентификаторыДокументов - Массив из УникальныйИдентификатор
//  Результат - Соответствие:
//                * Ключ - УникальныйИдентификатор
//                * Результат - Структура:
//                   ** Подпись - ДвоичныеДанные
//                   ** ТипПодписи  - ПеречислениеСсылка.ТипыПодписиКриптографии
//                   ** СрокДействияПоследнейМеткиВремени - Дата, Неопределено - заполняется только с помощью
//                        менеджера криптографии.
//                   ** ДатаПодписиИзМетки - Дата, Неопределено - самый ранний штамп времени
//                   ** НеподтвержденнаяДатаПодписи - Дата - неподтвержденная дата подписи.
//                   ** Сертификат  - ДвоичныеДанные - сертификат для проверки подписи.
//                   ** Отпечаток           - Строка - отпечаток сертификата в формате строки Base64.
//                   ** КомуВыданСертификат - Строка - представление субъекта, полученное из двоичных данных сертификата.
//                   ** ДатаПодписи - Дата - дата подписи неподтвержденная
//
Процедура ПриПолученииРезультатаОтправкиНаПодписание(ИдентификаторыДокументов, Результат) Экспорт
	
	// Локализация
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СервисМобильнойПодписи") Тогда
		Возврат;
	КонецЕсли;
	
	МодульСервисМобильнойПодписи = ОбщегоНазначения.ОбщийМодуль(
			"СервисМобильнойПодписи");
	Результат = МодульСервисМобильнойПодписи.РезультатыПодписанияИзСервисаМобильнойПодписи(ИдентификаторыДокументов);
	// Конец Локализация
	
КонецПроцедуры

// При загрузке машиночитаемых доверенностей.
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла
//
Процедура ПриЗагрузкеМашиночитаемыхДоверенностей(Форма) Экспорт
	
	// Локализация
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
	
	Подписи = Форма.Подписи;
	Доверенности = Форма.Доверенности;
	
	МодульМашиночитаемыеДоверенностиСлужебный = ОбщегоНазначения.ОбщийМодуль(
			"МашиночитаемыеДоверенностиФНССлужебный");

	Для Каждого Подпись Из Подписи Цикл
		
		Если ТипЗнч(Подпись.МашиночитаемаяДоверенность) = Тип("Строка") И ЗначениеЗаполнено(
			Подпись.МашиночитаемаяДоверенность) Тогда
			
			Найдено = Доверенности.НайтиСтроки(Новый Структура("НомерДоверенности", Подпись.НомерДоверенности));
			
			ФайлыДоверенности = ПолучитьИзВременногоХранилища(Найдено[0].ФайлыДоверенности);
			Результат = МодульМашиночитаемыеДоверенностиСлужебный.ЗагрузитьДоверенностиВИнформационнуюБазу(
				ФайлыДоверенности);
			
			МашиночитаемаяДоверенность = Результат.Доверенности[0];
			
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Подпись.АдресСвойствПодписи);
			СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиСлужебный.НовыйРезультатПроверкиПодписиПоМЧД(
				МашиночитаемаяДоверенность);
			ПоместитьВоВременноеХранилище(СвойстваПодписи, Подпись.АдресСвойствПодписи);
			
			Подпись.МашиночитаемаяДоверенность = МашиночитаемаяДоверенность;
			Найдено = Подписи.НайтиСтроки(Новый Структура("НомерДоверенности", Подпись.НомерДоверенности));
			Для Каждого Строка Из Найдено Цикл
				Строка.МашиночитаемаяДоверенность = МашиночитаемаяДоверенность;
				СвойстваПодписи = ПолучитьИзВременногоХранилища(Строка.АдресСвойствПодписи);
				СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиСлужебный.НовыйРезультатПроверкиПодписиПоМЧД(
					МашиночитаемаяДоверенность);
				ПоместитьВоВременноеХранилище(СвойстваПодписи, Строка.АдресСвойствПодписи);
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Конец Локализация
	
КонецПроцедуры

// При получении состояния заявления на выпуск сертификата.
// 
// Параметры:
//  Сертификат - см. ЭлектроннаяПодпись.СостояниеЗаявленияНаВыпускСертификата.Сертификат
//  Результат - см. ЭлектроннаяПодпись.СостояниеЗаявленияНаВыпускСертификата
//
Процедура ПриПолученииСостоянияЗаявленияНаВыпускСертификата(Сертификат, Результат) Экспорт
	
	// Локализация
	ОбработкаЗаявлениеНаВыпускНовогоКвалифицированногоСертификата = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
				"Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата");
	Результат = ОбработкаЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.СостояниеЗаявленияНаВыпускСертификата(
		Сертификат);
	// Конец Локализация
	
КонецПроцедуры

// При заполнении машиночитаемых доверенностей.
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//
Процедура ПриЗаполненииМашиночитаемыхДоверенностей(Форма, ПодписанныйОбъект = Неопределено) Экспорт
	
	// Локализация
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
	
	Подписи = Форма.Подписи;
	Доверенности = Форма.Доверенности;
	
	МодульМашиночитаемыеДоверенностиФНС = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНС");
	МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНССлужебный");
	
	Для Каждого ТекущаяСтрока Из Подписи Цикл
		ТекущаяСтрока.МашиночитаемаяДоверенность = Неопределено;
		
		СвойстваПодписи = ПолучитьИзВременногоХранилища(ТекущаяСтрока.АдресСвойствПодписи);
		Сертификат = СвойстваПодписи.Сертификат;
		Если Не ЗначениеЗаполнено(Сертификат) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПоСертификату = МодульМашиночитаемыеДоверенностиФНС.ОтборДляДоверенностейПоСертификату(Сертификат, "Представитель");
		ПоляОтбора = Новый Массив;
		Для Каждого Элемент Из ОтборПоСертификату Цикл
			Если Элемент.Ключ = "ПредставительИНН" Или Элемент.Ключ = "ПредставительИННФЛ" Тогда
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
					Для Каждого Доверенность Из Доверенности Цикл
						Если СтрНайти(Доверенность.ПоляОтбора, Элемент.Значение) Тогда
							ТекущаяСтрока.МашиночитаемаяДоверенность = Доверенность.МашиночитаемаяДоверенность;
							ТекущаяСтрока.НомерДоверенности = Доверенность.НомерДоверенности;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ПоляОтбора.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтрока.ПоляОтбора = СтрСоединить(ПоляОтбора, ";");
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
			Результат = МодульМашиночитаемыеДоверенностиФНС.ДоверенностиСОтбором(
				ОтборПоСертификату, "МашиночитаемаяДоверенность", СвойстваПодписи.ДатаПодписи);
			Если Результат.Количество() > 0 Тогда

				Для Каждого Доверенность Из Результат Цикл
					Найдено =  Доверенности.НайтиСтроки(Новый Структура("МашиночитаемаяДоверенность",
						Доверенность.МашиночитаемаяДоверенность));
					Если Найдено.Количество() > 0 Тогда
						ТекущаяСтрока.МашиночитаемаяДоверенность = Найдено[0].МашиночитаемаяДоверенность;
						Прервать;
					КонецЕсли;
				КонецЦикла;

				Если Не ЗначениеЗаполнено(ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
					ТекущаяСтрока.МашиночитаемаяДоверенность = Результат[0].МашиночитаемаяДоверенность;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
			Если ПодписанныйОбъект = Неопределено Тогда
				СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиФНССлужебный.НовыйРезультатПроверкиПодписиПоМЧД(
					ТекущаяСтрока.МашиночитаемаяДоверенность);
			ИначеЕсли МодульМашиночитаемыеДоверенностиФНССлужебный.ЭтоМашиночитаемаяДоверенность(
				ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
				СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиФНССлужебный.РезультатПроверкиПодписиПоМЧД(
					ТекущаяСтрока.МашиночитаемаяДоверенность, ПодписанныйОбъект, СвойстваПодписи.Сертификат,
					СвойстваПодписи.ДатаПодписи);
			Иначе
				СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = Неопределено;	
			КонецЕсли;
		Иначе
			СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = Неопределено;
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(СвойстваПодписи, ТекущаяСтрока.АдресСвойствПодписи);
		
	КонецЦикла;
	
	// Конец Локализация
	
КонецПроцедуры

// При заполнении машиночитаемой доверенности в строке.
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//  ИдентификаторСтроки - Число
//
Процедура ПриЗаполненииМашиночитаемойДоверенностиВСтроке(Форма, ИдентификаторСтроки, ПодписанныйОбъект) Экспорт

	// Локализация
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;
	
	Подписи = Форма.Подписи;
	МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенностиФНССлужебный");
	ТекущаяСтрока = Подписи.НайтиПоИдентификатору(ИдентификаторСтроки);
	СвойстваПодписи = ПолучитьИзВременногоХранилища(ТекущаяСтрока.АдресСвойствПодписи);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
		Если ПодписанныйОбъект = Неопределено Тогда
			СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиФНССлужебный.НовыйРезультатПроверкиПодписиПоМЧД(
					ТекущаяСтрока.МашиночитаемаяДоверенность);
		ИначеЕсли МодульМашиночитаемыеДоверенностиФНССлужебный.ЭтоМашиночитаемаяДоверенность(
			ТекущаяСтрока.МашиночитаемаяДоверенность) Тогда
			СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиФНССлужебный.РезультатПроверкиПодписиПоМЧД(
					ТекущаяСтрока.МашиночитаемаяДоверенность, ПодписанныйОбъект, СвойстваПодписи.Сертификат,
				СвойстваПодписи.ДатаПодписи);
		Иначе
			СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = Неопределено;
		КонецЕсли;
	Иначе
		СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = Неопределено;
	КонецЕсли;
	ПоместитьВоВременноеХранилище(СвойстваПодписи, ТекущаяСтрока.АдресСвойствПодписи);
	
	// Конец Локализация
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
		
	// Локализация
	
	Описание = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		Описание = МодульРаботаСКлассификаторами.ОписаниеКлассификатора();
	КонецЕсли;
	Если Описание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Описание.Идентификатор = ЭлектроннаяПодписьСлужебныйРФ.ИдентификаторКлассификатора();
	Описание.Наименование = НСтр("ru = 'Список аккредитованных удостоверяющих центров'");
	Описание.ОбновлятьАвтоматически = Истина;
	Описание.ОбщиеДанные = Истина;
	Описание.ОбработкаРазделенныхДанных = Ложь;
	Описание.СохранятьФайлВКэш = Ложь;
	
	Классификаторы.Добавить(Описание);
	
	// Конец Локализация
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	// Локализация
	
	Если Идентификатор <> ЭлектроннаяПодписьСлужебныйРФ.ИдентификаторКлассификатора() Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОбщиеМодули.Найти("ЭлектроннаяПодписьСлужебныйРФ") = Неопределено Тогда
		Обработан = Истина;
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьСлужебныйРФ = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйРФ");
	МодульЭлектроннаяПодписьСлужебныйРФ.ЗагрузитьДанныеАккредитованныхУЦ(Версия, Адрес, Обработан, ДополнительныеПараметры);
	
	// Конец Локализация
	
КонецПроцедуры

// При добавлении строк на сервере.
// 
// Параметры:
//  Форма - см. ОбщаяФорма.ДобавлениеЭлектроннойПодписиИзФайла
//  ПомещенныеФайлы - Массив 
//  ДругиеФайлы - Соответствие 
//  ОшибкиПриЗагрузкеДоверенностей - Строка 
//  УникальныйИдентификатор - УникальныйИдентификатор
// 
Процедура ПриДобавленииСтрокНаСервере(Форма, ПомещенныеФайлы, ДругиеФайлы, ОшибкиПриЗагрузкеДоверенностей, УникальныйИдентификатор) Экспорт
	
	// Локализация

	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;

	Доверенности = Форма.Доверенности;

	МодульМашиночитаемыеДоверенностиСлужебный = ОбщегоНазначения.ОбщийМодуль(
			"МашиночитаемыеДоверенностиФНССлужебный");

	СвойстваДоверенностей = МодульМашиночитаемыеДоверенностиСлужебный.СвойстваДоверенностейИзФайлов(
				ПомещенныеФайлы, УникальныйИдентификатор);
	Для Каждого СвойстваДоверенности Из СвойстваДоверенностей.Доверенности Цикл

		НоваяСтрока = Доверенности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваДоверенности);

	КонецЦикла;

	ОшибкиПриЗагрузкеДоверенностей = СтрСоединить(СвойстваДоверенностей.ТекстыОшибок, Символы.ПС);
	ДругиеФайлы = СвойстваДоверенностей.ДругиеФайлы;
	
	// Конец Локализация
	
КонецПроцедуры

// При проверке подписей по МЧД.
// 
// Параметры:
//  Подписи - Массив
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//  РезультатыПроверок - Массив
//
Процедура ПриПроверкеПодписейПоМЧД(Подписи, ПодписанныйОбъект, РезультатыПроверок) Экспорт

	// Локализация
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
		Возврат;
	КонецЕсли;

	РезультатыПроверок = Новый Массив;
	МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль(
			"МашиночитаемыеДоверенностиФНССлужебный");
	Для Каждого Подпись Из Подписи Цикл

		РезультатПроверкиДоверенностей = ПолучитьИзВременногоХранилища(Подпись.РезультатПроверкиПодписиПоМЧД);
		НовыйРезультатПроверкиДоверенностей = Новый Массив;
		Для Каждого Результат Из РезультатПроверкиДоверенностей Цикл
			Если Не ЗначениеЗаполнено(Подпись.Сертификат) Тогда
				НовыйРезультатПроверкиДоверенностей.Добавить(
					МодульМашиночитаемыеДоверенностиФНССлужебный.НовыйРезультатПроверкиПодписиПоМЧД(Результат.МашиночитаемаяДоверенность));
			Иначе
				РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиФНССлужебный.РезультатПроверкиПодписиПоМЧД(
						Результат.МашиночитаемаяДоверенность, ПодписанныйОбъект, Подпись.Сертификат, Подпись.ДатаПодписи);
				НовыйРезультатПроверкиДоверенностей.Добавить(РезультатПроверкиПодписиПоМЧД);
			КонецЕсли;
		КонецЦикла;

		РезультатПроверки = Новый Структура("Индекс, РезультатПроверкиПодписиПоМЧД", Подпись.Индекс,
			НовыйРезультатПроверкиДоверенностей);
		МодульМашиночитаемыеДоверенностиФНССлужебный.ДобавитьИнформациюМЧД(РезультатПроверки,
			Подпись.РезультатПроверкиПодписиПоМЧД);
		РезультатыПроверок.Добавить(РезультатПроверки);

	КонецЦикла;
	
	// Конец Локализация

КонецПроцедуры

// При определении доступности создания заявления.
// 
// Параметры:
//  ДоступностьСозданияЗаявления - см. ЭлектроннаяПодпись.ДоступностьСозданияЗаявления
//
Процедура ПриОпределенииДоступностиСозданияЗаявления(ДоступностьСозданияЗаявления) Экспорт
	
	// Локализация	
	
	МодульЭлектроннаяПодписьСлужебныйРФ = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйРФ");
	ДоступностьСозданияЗаявления = МодульЭлектроннаяПодписьСлужебныйРФ.ДоступностьСозданияЗаявления();
	
	// Конец Локализация
	
КонецПроцедуры

// При заполнении результата проверки удостоверяющего центра.
// 
// Параметры:
//  Результат - см. ЭлектроннаяПодписьСлужебныйКлиентСервер.РезультатПроверкиУдостоверяющегоЦентраПоУмолчанию
//  СертификатКриптографии - СертификатКриптографии
//  НаДату - Дата
//  ПараметрыПроверки - Структура
//  СвойстваСертификата - см. ЭлектроннаяПодпись.СвойстваСертификата
//
Процедура ПриЗаполненииРезультатаПроверкиУдостоверяющегоЦентра(
	Результат, СертификатКриптографии, НаДату, ПараметрыПроверки, СвойстваСертификата) Экспорт
	
	// Локализация
	
	Результат = ЭлектроннаяПодписьСлужебныйРФ.РезультатПроверкиУдостоверяющегоЦентра(
		Результат, СертификатКриптографии, НаДату, ПараметрыПроверки, СвойстваСертификата);
	
	// Конец Локализация
	
КонецПроцедуры

// При получении аккредитованных удостоверяющих центров.
// 
// Параметры:
//  АккредитованныеУдостоверяющиеЦентры - Структура
//
Процедура ПриПолученииАккредитованныхУдостоверяющихЦентров(АккредитованныеУдостоверяющиеЦентры) Экспорт
	
	// Локализация
	
	МодульЭлектроннаяПодписьСлужебныйРФ = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйРФ");
	АккредитованныеУдостоверяющиеЦентры = МодульЭлектроннаяПодписьСлужебныйРФ.АккредитованныеУдостоверяющиеЦентры();
	
	// Конец Локализация
	
КонецПроцедуры

// При получении классификатора ошибок криптографии.
// 
// Параметры:
//  ДанныеКлассификатора - Неопределено, Структура
//
Процедура ПриПолученииКлассификатораОшибокКриптографии(ДанныеКлассификатора) Экспорт
	
	// Локализация
	УстановитьПривилегированныйРежим(Истина);
	МодульЭлектроннаяПодписьСлужебныйРФ = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйРФ");
	
	Если Не ОбщегоНазначения.РазделениеВключено() 
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета")
		И ЭлектроннаяПодпись.РазрешенДоступКИнтернетСервисам() Тогда
		
		Попытка
			ТекстОшибки = МодульЭлектроннаяПодписьСлужебныйРФ.ОбновитьКлассификатор();
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить классификатор ошибок криптографии по причине:
				           |%1'"), ТекстОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронная подпись.Обновление классификатора ошибок'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Версия = МодульЭлектроннаяПодписьСлужебныйРФ.ВерсияКлассификатора();
	
	ДанныеКлассификатора = Константы.КлассификаторОшибокКриптографии.Получить().Получить();
	
	Если ТипЗнч(ДанныеКлассификатора) = Тип("Структура") Тогда
		Попытка
			Если ЗначениеЗаполнено(Версия)
				И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеКлассификатора.Версия, Версия) < 0 Тогда
				
				Версия = Неопределено;
			Иначе
				Версия = ДанныеКлассификатора.Версия;
			КонецЕсли;
		Исключение
			Версия = Неопределено;
		КонецПопытки;
	Иначе
		ДанныеКлассификатора = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКлассификатора)
		Или Версия = Неопределено Тогда
		
		МодульЭлектроннаяПодписьСлужебныйРФ = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйРФ");
		ДанныеКлассификатора = МодульЭлектроннаяПодписьСлужебныйРФ.КлассификаторОшибокКриптографии();

	КонецЕсли;

	// Конец Локализация
	
КонецПроцедуры

// При определении доступности проверки по списку УЦ.
// 
// Параметры:
//  ПроверкаДоступна - Булево
//
Процедура ПриОпределенииДоступностиПроверкиПоСпискуУЦ(ПроверкаДоступна) Экспорт
	
	// Локализация
	
	ПроверкаДоступна = Истина;
	
	// Конец Локализация
	
КонецПроцедуры

// При получении дистрибутива.
// 
// Параметры:
//  Параметры - Структура
//  Идентификатор - Строка
//  Результат - см. ДлительныеОперации.ВыполнитьФункцию 
//
Процедура ПриПолученииДистрибутива(Параметры, Идентификатор, Результат) Экспорт
	
	// Локализация

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	Если Идентификатор = "CryptoProCSP" Тогда

		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дистрибутива CryptoPro CSP'");
		Результат =  ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"ЭлектроннаяПодписьСлужебныйРФ.ДистрибутивCryptoProCSP", Параметры);
			
	ИначеЕсли Идентификатор = "ViPNetCSP" Тогда

		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дистрибутива VipNet CSP'");
		Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"ЭлектроннаяПодписьСлужебныйРФ.ДистрибутивViPNetCSP", Параметры);

	КонецЕсли;
	
	// Конец Локализация
	
КонецПроцедуры

// При обработке результата получения дистрибутива.
// 
// Параметры:
//  ДлительнаяОперация - Структура:
//   * АдресРезультата - Строка - адрес во временном хранилище
//  ИдентификаторФормы - УникальныйИдентификатор
//  Результат - Структура
//
Процедура ПриОбработкеРезультатаПолученияДистрибутива(ДлительнаяОперация, ИдентификаторФормы, Результат) Экспорт
	
	// Локализация
	
	Результат = ЭлектроннаяПодписьСлужебныйРФ.РезультатПолученияДистрибутиваКриптопровайдера(
		ДлительнаяОперация, ИдентификаторФормы);
	
	// Конец Локализация
	
КонецПроцедуры

// При определении использования сервиса облачной подписи.
// 
// Параметры:
//  Результат - Булево
//
Процедура ПриОпределенииИспользованияСервисаОблачнойПодписи(Результат) Экспорт
	
	// Локализация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		Результат = МодульСервисКриптографииDSS.ИспользоватьСервисОблачнойПодписи();
	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

// При определении типа программы сервиса подписи.
// 
// Параметры:
//  Результат - Тип
//
Процедура ПриОпределенииТипаПрограммыСервисаПодписи(Результат) Экспорт
	
	// Локализация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		МодульСервисКриптографииDSSКлиентСервер = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSКлиентСервер");
		Результат = МодульСервисКриптографииDSSКлиентСервер.ПолучитьТипОблачнойПодписи();
	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

// При получении адресов серверов меток времени.
// 
// Параметры:
//  АдресаСерверовМетокВремени - Строка
//
Процедура ПриПолученииАдресовСерверовМетокВремени(АдресаСерверовМетокВремени) Экспорт
	
	// Локализация
	АдресаСерверовМетокВремени = Обработки.ПрограммыЭлектроннойПодписиИШифрования.АдресаСерверовМетокВремениПоУмолчанию();
	// Конец Локализация
	
КонецПроцедуры

// При получении отпечатков облачного сервиса.
// 
// Параметры:
//  МассивОтпечатков - Массив
//
Процедура ПриПолученииОтпечатковОблачногоСервиса(МассивОтпечатков) Экспорт
	
	// Локализация
	МодульСервисКриптографииDSSСлужебный = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSСлужебный");
	МассивСертификатов = МодульСервисКриптографииDSSСлужебный.ПолучитьДанныеСертификатов(Ложь);

	Для Каждого Сертификат Из МассивСертификатов Цикл
		МассивОтпечатков.Добавить(Base64Строка(Сертификат.Отпечаток));
	КонецЦикла;
	// Конец Локализация
	
КонецПроцедуры

// При добавлении свойств сертификатов облачного сервиса.
// 
// Параметры:
//  ТаблицаСвойствСертификатов - ТаблицаЗначений
//  БезОтбора - Булево
//
Процедура ПриДобавленииСвойствСертификатовОблачногоСервиса(ТаблицаСвойствСертификатов, БезОтбора) Экспорт
	
	// Локализация
	МодульСервисКриптографииDSSСлужебный = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSСлужебный");
	МассивСертификатов = МодульСервисКриптографииDSSСлужебный.ПолучитьДанныеСертификатов(Ложь);

	ПараметрыДобавленияСвойств = Новый Структура("ОблачнаяПодпись", Истина);

	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьСвойстваСертификатов(ТаблицаСвойствСертификатов,
		МассивСертификатов, БезОтбора, ЭлектроннаяПодписьСлужебный.РазницаСУниверсальнымВременем(),
		ТекущаяДатаСеанса(), ПараметрыДобавленияСвойств);
	// Конец Локализация
	
КонецПроцедуры

// При определении настроенного облачного сервиса.
// 
// Параметры:
//  Результат - Булево
//
Процедура ПриОпределенииНастроенногоОблачногоСервиса(Результат) Экспорт
	
	// Локализация
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		Результат = МодульСервисКриптографииDSS.ИспользоватьСервисОблачнойПодписи();
		Если Результат Тогда
			ВсеУчетныеЗаписи = МодульСервисКриптографииDSS.ПолучитьВсеУчетныеЗаписи();
			Если ВсеУчетныеЗаписи.Количество() > 0 Тогда
				СтрокаПоиска = Новый Структура("ПометкаУдаления", Истина);
				Результат = ВсеУчетныеЗаписи.НайтиСтроки(СтрокаПоиска).Количество() <> ВсеУчетныеЗаписи.Количество();
			Иначе
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	// Конец Локализация
	
КонецПроцедуры

// При заполнении сертификатов облачного сервиса.
// 
// Параметры:
//  ОтпечаткиСертификатовНаКлиенте - Массив
//
Процедура ПриЗаполненииСертификатовОблачногоСервиса(ОтпечаткиСертификатовНаКлиенте) Экспорт

	// Локализация
	МодульСервисКриптографииDSSСлужебный = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSSСлужебный");
	ВсеСертификаты = МодульСервисКриптографииDSSСлужебный.ПолучитьВсеСертификаты(Ложь);

	МассивСертификатов = Новый ТаблицаЗначений;
	МассивСертификатов.Колонки.Добавить("Отпечаток");
	МассивСертификатов.Колонки.Добавить("ДатаНачала");
	МассивСертификатов.Колонки.Добавить("ДатаОкончания");

	Для Каждого СтрокаТаблицы Из ВсеСертификаты Цикл
		НоваяСтрока = МассивСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Отпечаток = ПолучитьДвоичныеДанныеИзHexСтроки(СтрокаТаблицы.Отпечаток);
	КонецЦикла;

	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьОтпечаткиСертификатов(
			ОтпечаткиСертификатовНаКлиенте, МассивСертификатов,
			ЭлектроннаяПодписьСлужебный.РазницаСУниверсальнымВременем(), ТекущаяДатаСеанса());
	// Конец Локализация
		
КонецПроцедуры

#КонецОбласти

// Локализация

#Область СлужебныеПроцедурыИФункции

// Регламентное задание.
Процедура ОбновлениеСостоянияЗаявленияНаВыпускСертификата(Сертификат) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОбновлениеСостоянияЗаявленияНаВыпускСертификата);
	ОбработкаЗаявлениеНаВыпускНовогоКвалифицированногоСертификата = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
				"Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата");
	ОбработкаЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.ОбновлениеСостоянияЗаявленияРегламентноеЗадание(
		Сертификат);
	
КонецПроцедуры

#КонецОбласти

// Конец Локализация