///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//
Процедура ОпределитьДоступностьДействийКонтекстногоМеню(Форма, СвойстваЗаголовка) Экспорт 
	
	Если ТипЗнч(СвойстваЗаголовка) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ДействияКонтекстногоМеню = ДействияКонтекстногоМенюОбластиЗаголовка();
	
	Для Каждого Действие Из ДействияКонтекстногоМеню Цикл 
		Форма.Элементы[Действие.Ключ].Доступность = СвойстваЗаголовка[Действие.Значение];
	КонецЦикла;
	
КонецПроцедуры

Функция КартинкаПоля(ТипЗначенияПоля) Экспорт 
	
	ДоступныеТипы = ТипЗначенияПоля.Типы();
	
	Если ДоступныеТипы.Количество() = 0 Тогда 
		Возврат БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	Если ДоступныеТипы.Количество() > 1 Тогда 
		Возврат БиблиотекаКартинок.ТипСоставнойОсновной;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда 
		Возврат БиблиотекаКартинок.ТипЧисло;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда 
		Возврат БиблиотекаКартинок.ТипСтрока;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Дата")) Тогда 
		Возврат БиблиотекаКартинок.ТипДата;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Булево")) Тогда 
		Возврат БиблиотекаКартинок.ТипБулево;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		Возврат БиблиотекаКартинок.ТипИдентификатор;
	КонецЕсли;
	
	Возврат БиблиотекаКартинок.ТипСсылка;
	
КонецФункции

// Параметры:
//  Поля - ПоляГруппировкиКомпоновкиДанных
//       - ВыбранныеПоляКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  ПроверятьИспользование - Булево
//  Содержится - Булево
//
// Возвращаемое значение:
//  Булево
//
Функция ПолеСодержитсяВГруппировкеОтчета(Поля, Поле, ПроверятьИспользование = Истина, Содержится = Ложь) Экспорт 
	
	Возврат ПолеОтчета(Поля, Поле, ПроверятьИспользование) <> Неопределено;
	
КонецФункции

// Параметры:
//  Родитель - ГруппировкаКомпоновкиДанных
//           - ГруппировкаТаблицыКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  Содержится - Булево
//
// Возвращаемое значение:
//  Булево
//
Функция ПолеИспользуетсяВРодительскихГруппировкахОтчета(Родитель, Поле, Содержится = Ложь) Экспорт 
	
	Если (ТипЗнч(Родитель) = Тип("ГруппировкаКомпоновкиДанных")
		Или ТипЗнч(Родитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда 
		
		Если ПолеСодержитсяВГруппировкеОтчета(Родитель.ПоляГруппировки, Поле) Тогда 
			Содержится = Истина;
		Иначе
			ПолеИспользуетсяВРодительскихГруппировкахОтчета(Родитель.Родитель, Поле, Содержится);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Содержится;
	
КонецФункции

// Параметры:
//  Поля - ВыбранныеПоляКомпоновкиДанных
//       - ПоляГруппировкиКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  ПроверятьИспользование - Булево
//  ПолеОтчета - ВыбранноеПолеКомпоновкиДанных
//             - ПолеГруппировкиКомпоновкиДанных
//             - Неопределено
//
// Возвращаемое значение:
//  ВыбранноеПолеКомпоновкиДанных
//  ПолеГруппировкиКомпоновкиДанных
//  Неопределено
//
Функция ПолеОтчета(Поля, Поле, ПроверятьИспользование = Истина, ПолеОтчета = Неопределено) Экспорт 
	
	НайтиПолеОтчета(Поля, Поле, ПроверятьИспользование, ПолеОтчета);
	
	Возврат ПолеОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДействияКонтекстногоМенюОбластиЗаголовка()
	
	Действия = Новый Соответствие;
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаВставитьПолеСправа", "ВставитьПолеСправа");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаВставитьГруппировкуНиже", "ВставитьГруппировкуНиже");
	
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеВлево", "ПереместитьПолеВлево");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеВправо", "ПереместитьПолеВправо");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеВыше", "ПереместитьПолеВыше");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереместитьПолеНиже", "ПереместитьПолеНиже");
	
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаСортироватьПоВозрастанию", "СортироватьПоВозрастанию");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаСортироватьПоУбыванию", "СортироватьПоУбыванию");
	
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаСкрытьПоле", "СкрытьПоле");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаПереименоватьПоле", "ПереименоватьПоле");
	
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаОформитьОтрицательные", "ОформитьОтрицательные");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаОформитьПоложительные", "ОформитьПоложительные");
	Действия.Вставить("КонтекстноеМенюОбластиЗаголовкаМенюОформитьЕще", "ОформитьЕще");
	
	Возврат Действия;
	
КонецФункции

#Область Фильтры

// Параметры:
//  Настройки - НастройкиКомпоновкиДанных
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//
Функция ГруппировкаФильтра(Настройки, СвойстваЗаголовка, ЭтоГруппировка = Ложь) Экспорт 
	
	Если СвойстваЗаголовка.ИдентификаторНастроек = Неопределено Тогда 
		Возврат Настройки;
	КонецЕсли;
	
	ИспользуемыеНастройки = Настройки.ПолучитьОбъектПоИдентификатору(
		СвойстваЗаголовка.ИдентификаторНастроек);
	
	Если ИспользуемыеНастройки = Неопределено Тогда 
		ИспользуемыеНастройки = Настройки;
	КонецЕсли;
	
	Если ЭтоГруппировка
		Или СвойстваЗаголовка.КоличествоРазделов > 1 Тогда 
		
		Раздел = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторРаздела);
	Иначе
		Раздел = ИспользуемыеНастройки;
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		
		Если СтрНайти(СвойстваЗаголовка.ИдентификаторГруппировки, "/column/") > 0
			И Раздел.Строки.Количество() > 0 Тогда 
			
			Возврат Раздел.Строки[0];
			
		Иначе
			
			Группировка = ИспользуемыеНастройки.ПолучитьОбъектПоИдентификатору(СвойстваЗаголовка.ИдентификаторГруппировки);
			Возврат Группировка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Раздел;
	
КонецФункции

// Параметры:
//  Настройки - НастройкиКомпоновкиДанных
//  СвойстваЗаголовка - см. ВариантыОтчетовСлужебный.СтандартныеСвойстваЗаголовкаОтчета
//
// Возвращаемое значение:
//  ОтборКомпоновкиДанных
//
Функция ФильтрыРазделаОтчета(Настройки, СвойстваЗаголовка, ЭтоГруппировка = Ложь) Экспорт 
	
	ГруппировкаФильтра = ГруппировкаФильтра(Настройки, СвойстваЗаголовка, ЭтоГруппировка);
	Возврат ГруппировкаФильтра.Отбор;
	
КонецФункции

// Параметры:
//  Фильтры - ОтборКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  Фильтр - Неопределено
//         - ЭлементОтбораКомпоновкиДанных
//
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных
//  Неопределено
//
Функция ФильтрРазделаОтчета(Фильтры, Поле, Фильтр = Неопределено) Экспорт 
	
	Для Каждого Элемент Из Фильтры.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			
			ФильтрРазделаОтчета(Элемент, Поле, Фильтр);
			
		ИначеЕсли Элемент.ЛевоеЗначение = Поле Тогда 
			
			Фильтр = Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Фильтр;
	
КонецФункции

#КонецОбласти

#Область ПоискПоля

// Параметры:
//  Поля - ВыбранныеПоляКомпоновкиДанных
//       - ПоляГруппировкиКомпоновкиДанных
//  Поле - ПолеКомпоновкиДанных
//  НайденноеПоле - ВыбранноеПолеКомпоновкиДанных
//                - ПолеГруппировкиКомпоновкиДанных
//                - Неопределено
//
Процедура НайтиПолеОтчета(Поля, Поле, ПроверятьИспользование, НайденноеПоле)
	
	Для Каждого Элемент Из Поля.Элементы Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			И Элемент.Поле = Поле
			И (Не ПроверятьИспользование Или ПроверятьИспользование И Элемент.Использование) Тогда 
			
			НайденноеПоле = Элемент;
			Возврат;
			
		ИначеЕсли ТипЭлемента = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда 
			
			НайтиПолеОтчета(Элемент, Поле, ПроверятьИспользование, НайденноеПоле);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеЭлементаРасшифровки

Функция ТипЭлементаРасшифровкиГруппировка() Экспорт 
	
	Возврат "Группировка";
	
КонецФункции

#КонецОбласти

Функция ФормулаПоПутиКДанным(Настройки, ПутьКДанным) Экспорт 
	
	Формулы = Настройки.ПользовательскиеПоля.Элементы;
	
	Для Каждого Формула Из Формулы Цикл 
		
		Если СтрЗаканчиваетсяНа(Формула.ПутьКДанным, ПутьКДанным) Тогда 
			Возврат Формула;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИндексКартинкиПоля(Знач ТипЗначенияПоля, ЭтоГруппа = Ложь) Экспорт 
	
	Если ЭтоГруппа Тогда 
		Возврат 14;
	КонецЕсли;
	
	Если ТипЗначенияПоля = Неопределено Тогда 
		ТипЗначенияПоля = Новый ОписаниеТипов();
	КонецЕсли;
	
	ДоступныеТипы = ТипЗначенияПоля.Типы();
	
	Если ДоступныеТипы.Количество() = 0 Тогда 
		Возврат -1;
	КонецЕсли;
	
	Если ДоступныеТипы.Количество() > 1 Тогда 
		Возврат 15;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Число")) Тогда 
		Возврат 13;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Строка")) Тогда 
		Возврат 8;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Дата")) Тогда 
		Возврат 2;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("Булево")) Тогда 
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗначенияПоля.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		Возврат 4;
	КонецЕсли;
	
	Возврат 16;
	
КонецФункции

#КонецОбласти