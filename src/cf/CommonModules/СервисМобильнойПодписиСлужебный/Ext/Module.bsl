///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает заголовок команды отправки на подписание.
// 
// Возвращаемое значение:
//  Строка
// 
Функция ЗаголовокКомандыОтправитьНаПодписание() Экспорт
	Возврат НСтр("ru='Отправить в сервис мобильной подписи ФНС'") + "...";
КонецФункции

// Добавляет в список способов подписания отправку в сервис мобильной подписи.
// 
// Параметры:
//  СписокВыбора - СписокЗначений
//
Процедура ПриПолученииТиповПодписания(СписокВыбора) Экспорт
	Если СервисМобильнойПодписи.ИспользоватьСервисМобильнойПодписи() Тогда
		СписокВыбора.Добавить("ОтправитьНаПодписание", 
			НСтр("ru='В мобильном приложении ""Моя подпись"" от ФНС'"));
	КонецЕсли;
КонецПроцедуры

// Используется для инициализации параметра сеанса в рамках механизмов БСП,
// см. ИнтеграцияПодсистемБСП.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПараметрыАвторизацииВСервисеМобильнойПодписи", "СервисМобильнойПодписиСлужебный.УстановитьПараметрСеансаПараметрыАвторизацииВСервисеМобильнойПодписи");
	
КонецПроцедуры

// Используется для инициализации параметра сеанса в рамках механизмов БСП
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура УстановитьПараметрСеансаПараметрыАвторизацииВСервисеМобильнойПодписи(
		ИмяПараметра = Неопределено,
		УстановленныеПараметры = Неопределено) Экспорт
	
	Если ИмяПараметра = "ПараметрыАвторизацииВСервисеМобильнойПодписи" Тогда
		ПараметрыРезультатаАвторизации = ПараметрыРезультатаАвторизацииВСервисеМобильнойПодписи();
		ПараметрыСеанса.ПараметрыАвторизацииВСервисеМобильнойПодписи = Новый ФиксированнаяСтруктура(ПараметрыРезультатаАвторизации);
		УстановленныеПараметры.Добавить("ПараметрыАвторизацииВСервисеМобильнойПодписи");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ПодписантыСервисаМобильнойПодписи, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СервисМобильнойПодписиСтатусы, Истина);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Зависимость = Настройки.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеРезультатовИзСервисаМобильнойПодписи;
	Зависимость.ДоступноВМоделиСервиса = Истина;
	Зависимость.ДоступноВАвтономномРабочемМесте = Истина;
	Зависимость.ОбращаетсяКВнешнимРесурсам = Истина;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСервисМобильнойПодписи;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт

	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеРезультатовИзСервисаМобильнойПодписи.ИмяМетода);

КонецПроцедуры

// Добавить ожидаемые подписи объекта к списку подписей объекта.
// 
// Параметры:
//  Объект - ЛюбаяСсылка
//  Результат - Массив
//
Процедура ДобавитьОжидаемыеПодписиОбъекта(Объект, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ПРЕДСТАВЛЕНИЕ(СервисМобильнойПодписиСтатусы.Подписант) КАК ПодписантПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СервисМобильнойПодписиСтатусы.Отправитель) КАК ОтправительПредставление,
	|	СервисМобильнойПодписиСтатусы.Отправитель КАК Отправитель,
	|	СервисМобильнойПодписиСтатусы.ДатаОтправки КАК ДатаОтправки,
	|	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект КАК ПодписанныйОбъект,
	|	СервисМобильнойПодписиСтатусы.Комментарий КАК Комментарий,
	|	СервисМобильнойПодписиСтатусы.Доверенность КАК Доверенность,
	|	СервисМобильнойПодписиСтатусы.Статус КАК Статус,
	|	СервисМобильнойПодписиСтатусы.Результат КАК Результат
	|ИЗ
	|	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	|ГДЕ
	|	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект = &Объект
	|	И СервисМобильнойПодписиСтатусы.Операция = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиОперации.Подписание)";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
		Если Выборка.Статус = Перечисления.СервисМобильнойПодписиСтатусы.Успешно Тогда
			Подпись = Выборка.Результат.Получить();
			СвойстваПрочитанные = ЭлектроннаяПодпись.СвойстваПодписи(Подпись);
			ЗаполнитьЗначенияСвойств(СвойстваПодписи, СвойстваПрочитанные);
		Иначе
			СвойстваПодписи.ИдентификаторПодписи = Выборка.ИдентификаторДокумента;
			СвойстваПодписи.ПодписанныйОбъект = Выборка.ПодписанныйОбъект;
			СвойстваПодписи.КомуВыданСертификат = СтрШаблон("%1 (%2)", Выборка.ПодписантПредставление, Выборка.ОтправительПредставление);
			СвойстваПодписи.УстановившийПодпись = Выборка.Отправитель;
			СвойстваПодписи.ДатаПодписи = Выборка.ДатаОтправки;
			СвойстваПодписи.Комментарий = Выборка.Комментарий;
			Ошибка = Выборка.Результат.Получить();
			Если ТипЗнч(Ошибка) = Тип("Структура") Тогда
				СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов = Ошибка.ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Доверенность) И ОбщегоНазначения.ПодсистемаСуществует(
									"СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
			МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль(
										"МашиночитаемыеДоверенностиФНССлужебный");
			СвойстваПодписи.РезультатПроверкиПодписиПоМЧД = 
				МодульМашиночитаемыеДоверенностиФНССлужебный.НовыйРезультатПроверкиПодписиПоМЧД(Выборка.Доверенность);
		КонецЕсли;
		Результат.Добавить(СвойстваПодписи);
	КонецЦикла;
	
КонецПроцедуры

// Документ отправлен на подпись в сервис мобильной подписи.
// 
// Параметры:
//  ПодписанныйОбъект - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьОжидаемыеПодписи(ПодписанныйОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(ПодписанныйОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	|ГДЕ
	|	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект = &ПодписанныйОбъект
	|	И СервисМобильнойПодписиСтатусы.Операция = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиОперации.Подписание)";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Удаляет запросы, отправленные на подпись в сервис мобильно подписи и устанавливает признак ПодписанЭП = Ложь, 
// если у объекта нет других подписей.
// 
// Параметры:
//  ПодписанныйОбъект - ЛюбаяСсылка
//  ИдентификаторыДокументов - Массив из УникальныйИдентификатор
//  ЕстьПраваНаУдалениеЧужихПодписей - Булево
//  СообщениеЖурналаРегистрации - Строка - параметры подписи для записи в журнал регистрации.
//
Процедура УдалитьОжидаемыеПодписиОбъекта(ПодписанныйОбъект,
	ИдентификаторыДокументов, ЕстьПраваНаУдалениеЧужихПодписей, СообщениеЖурналаРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	               |	СервисМобильнойПодписиСтатусы.Подписант КАК Подписант,
	               |	СервисМобильнойПодписиСтатусы.Отправитель КАК Отправитель,
	               |	СервисМобильнойПодписиСтатусы.ДатаОтправки КАК ДатаОтправки,
	               |	СервисМобильнойПодписиСтатусы.НаименованиеДокумента КАК НаименованиеДокумента,
	               |	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект КАК ПодписанныйОбъект
	               |ИЗ
	               |	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	               |ГДЕ
	               |	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента В(&ИдентификаторыДокументов)
	               |	И СервисМобильнойПодписиСтатусы.Операция = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиОперации.Подписание)
	               |	И СервисМобильнойПодписиСтатусы.ПодписанныйОбъект = &ПодписанныйОбъект";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	
	НачатьТранзакцию();
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.СервисМобильнойПодписиСтатусы.ПолноеИмя());
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса.Выгрузить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторДокумента", "ИдентификаторДокумента");
		Блокировка.Заблокировать();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СообщениеЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл %1, Отправитель %2, ДатаОтправки %3, Подписант %4'"),
				ВыборкаДетальныеЗаписи.НаименованиеДокумента,
				ВыборкаДетальныеЗаписи.Отправитель,
				ВыборкаДетальныеЗаписи.ДатаОтправки,
				ВыборкаДетальныеЗаписи.Подписант);
				
			ЕстьПрава = ЕстьПраваНаУдалениеЧужихПодписей 
				Или ВыборкаДетальныеЗаписи.Отправитель = Пользователи.АвторизованныйПользователь();
				
			Если Не ЕстьПрава Тогда
				ВызватьИсключение(НСтр("ru = 'Недостаточно прав на удаление ожидаемой подписи.'"), КатегорияОшибки.НарушениеПравДоступа);
			КонецЕсли;

			УдалитьОжидаемуюПодпись(ВыборкаДетальныеЗаписи.ИдентификаторДокумента, СообщениеЖурналаРегистрации, ВыборкаДетальныеЗаписи.ПодписанныйОбъект);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет записи о документах, отправленных на подпись в сервис мобильной подписи из регистра СервисМобильнойПодписиСтатусы.
// Также пытается удалить запрос на подписание в сервисе, он будет удален, если еще не доставлен получателю.
// Если отправка была пакетная, то запрос на подпись в сервисе будет удален, если указаны все документы из пакета.
// 
// Параметры:
//  ИдентификаторыДокументов - Массив из УникальныйИдентификатор
//  ПриПодписании - Булево - удаление служебной записи при подписании в ЭлектроннаяПодписьКлиент.Подписать, 
//         Ложь - при отмене подписания, Истина - при успешном подписании, Неопределено - при других сценариях удаления.
//
Процедура УдалитьОжидаемыеПодписи(ИдентификаторыДокументов, ПриПодписании = Неопределено) Экспорт

	ЕстьПраваНаУдалениеЧужихПодписей = Пользователи.ЭтоПолноправныйПользователь() 
		Или Пользователи.РолиДоступны("УдалениеЭлектронныхПодписей");

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	                |	СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	                |	СервисМобильнойПодписиСтатусы.Подписант КАК Подписант,
	                |	СервисМобильнойПодписиСтатусы.Отправитель КАК Отправитель,
	                |	СервисМобильнойПодписиСтатусы.ДатаОтправки КАК ДатаОтправки,
	                |	СервисМобильнойПодписиСтатусы.НаименованиеДокумента КАК НаименованиеДокумента,
	                |	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект КАК ПодписанныйОбъект,
	                |	СервисМобильнойПодписиСтатусы.Статус КАК Статус
	                |ПОМЕСТИТЬ ДокументыНаПодписании
	                |ИЗ
	                |	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	                |ГДЕ
	                |	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента В(&ИдентификаторыДокументов)
	                |	И СервисМобильнойПодписиСтатусы.Операция = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиОперации.Подписание)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ДокументыНаПодписании.ИдентификаторВСервисе КАК ИдентификаторВСервисе
	                |ПОМЕСТИТЬ ДругиеПодписиВПакете
	                |ИЗ
	                |	ДокументыНаПодписании КАК ДокументыНаПодписании
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	                |		ПО ДокументыНаПодписании.ИдентификаторВСервисе = СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе
	                |ГДЕ
	                |	НЕ СервисМобильнойПодписиСтатусы.ИдентификаторДокумента В (&ИдентификаторыДокументов)
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	                |	СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	                |	СервисМобильнойПодписиСтатусы.Подписант КАК Подписант,
	                |	СервисМобильнойПодписиСтатусы.Отправитель КАК Отправитель,
	                |	СервисМобильнойПодписиСтатусы.ДатаОтправки КАК ДатаОтправки,
	                |	СервисМобильнойПодписиСтатусы.НаименованиеДокумента КАК НаименованиеДокумента,
	                |	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект КАК ПодписанныйОбъект,
	                |	ВЫБОР
	                |		КОГДА ДругиеПодписиВПакете.ИдентификаторВСервисе ЕСТЬ NULL
	                |			ТОГДА ЛОЖЬ
	                |		ИНАЧЕ ИСТИНА
	                |	КОНЕЦ КАК ЕстьДругиеПодписиВПакете,
	                |	ИСТИНА КАК ДетальнаяЗапись,
	                |	СервисМобильнойПодписиСтатусы.Статус КАК Статус
	                |ИЗ
	                |	ДокументыНаПодписании КАК СервисМобильнойПодписиСтатусы
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ДругиеПодписиВПакете КАК ДругиеПодписиВПакете
	                |		ПО СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе = ДругиеПодписиВПакете.ИдентификаторВСервисе
	                |ИТОГИ ПО
	                |	ИдентификаторВСервисе";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	УдалитьВСервисе = Новый Массив;
	ОшибкиУдаленияВСервисе = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.СервисМобильнойПодписиСтатусы.ПолноеИмя());
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса.Выгрузить().Скопировать(Новый Структура("ДетальнаяЗапись", Истина));
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторДокумента", "ИдентификаторДокумента");
		Блокировка.Заблокировать();
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			ЕстьДругиеПодписиВПакете = Новый Массив;
			УдалятьВСервисе = Истина;

			ВыборкаДетальныеЗаписи = Выборка.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.ЕстьДругиеПодписиВПакете Тогда
					ЕстьДругиеПодписиВПакете.Добавить(ВыборкаДетальныеЗаписи.НаименованиеДокумента);
				КонецЕсли;
				
				ПодписанныйОбъект = ВыборкаДетальныеЗаписи.ПодписанныйОбъект;
				
				СообщениеЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1, Отправитель %2, ДатаОтправки %3, Подписант %4'"),
					ВыборкаДетальныеЗаписи.НаименованиеДокумента,
					ВыборкаДетальныеЗаписи.Отправитель,
					ВыборкаДетальныеЗаписи.ДатаОтправки,
					ВыборкаДетальныеЗаписи.Подписант);
				
				СтандартнаяОбработка = Истина;
				УдалитьПодпись = Истина;
				
				ПараметрыПодписи = Новый Структура;
				ПараметрыПодписи.Вставить("ИдентификаторДокумента", ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
				ПараметрыПодписи.Вставить("ПодписанныйОбъект", ВыборкаДетальныеЗаписи.ПодписанныйОбъект);
				ПараметрыПодписи.Вставить("Отправитель", ВыборкаДетальныеЗаписи.Отправитель);
				ПараметрыПодписи.Вставить("Подписант", ВыборкаДетальныеЗаписи.Подписант);
				
				Если ПриПодписании = Неопределено Тогда
					СервисМобильнойПодписиПереопределяемый.ПриУдаленииОжидаемойПодписиОбъекта(
						ПараметрыПодписи, УдалитьПодпись, СтандартнаяОбработка);
				КонецЕсли;
				
				Если СтандартнаяОбработка Тогда
					
					ЕстьПрава = ЕстьПраваНаУдалениеЧужихПодписей 
						Или ВыборкаДетальныеЗаписи.Отправитель = Пользователи.АвторизованныйПользователь();
					
					Если Не ЕстьПрава Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Сервис мобильной подписи.Удаление ожидаемой подписи'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Информация,
							?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПодписанныйОбъект), ВыборкаДетальныеЗаписи.ПодписанныйОбъект.Метаданные(), Неопределено),
							ВыборкаДетальныеЗаписи.ПодписанныйОбъект,
							СообщениеЖурналаРегистрации, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
						ВызватьИсключение(НСтр("ru = 'Недостаточно прав на удаление ожидаемой подписи.'"), КатегорияОшибки.НарушениеПравДоступа);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПодписанныйОбъект) И ЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(ПодписанныйОбъект)) Тогда
						ЭлектроннаяПодпись.УдалитьПодпись(ПодписанныйОбъект, ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
						Продолжить;
					ИначеЕсли ЗначениеЗаполнено(ПодписанныйОбъект) Тогда
						Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
							МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
							МодульУправлениеДоступом.ПроверитьИзменениеРазрешено(ПодписанныйОбъект);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если УдалитьПодпись Тогда
					Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СервисМобильнойПодписиСтатусы.Успешно
						Или ВыборкаДетальныеЗаписи.Статус = Перечисления.СервисМобильнойПодписиСтатусы.Отклонено Тогда
						УдалятьВСервисе = Ложь;
					КонецЕсли;
					УдалитьОжидаемуюПодпись(ВыборкаДетальныеЗаписи.ИдентификаторДокумента, СообщениеЖурналаРегистрации, ПодписанныйОбъект, ПриПодписании);
				Иначе
					УдалятьВСервисе = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьВСервисе Тогда
				Если ЕстьДругиеПодписиВПакете.Количество() > 0 Тогда
					ОшибкиУдаленияВСервисе.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Запрос на удаление документов (%1) не отправлен: в пакете на подписание %2 есть другие документы.'"),
							СтрСоединить(ЕстьДругиеПодписиВПакете, ", "),
						Выборка.ИдентификаторВСервисе));
				Иначе
					УдалитьВСервисе.Добавить(Выборка.ИдентификаторВСервисе);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ЗначениеЗаполнено(СообщениеЖурналаРегистрации) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Сервис мобильной подписи.Ошибка удаления ожидаемой подписи'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				?(ЗначениеЗаполнено(ПодписанныйОбъект), ПодписанныйОбъект.Метаданные(), Неопределено),
				ПодписанныйОбъект,
				СообщениеЖурналаРегистрации + "
				|
				|" + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Для Каждого ИдентификаторЗапроса Из УдалитьВСервисе Цикл
		Попытка
			УдалитьЗапросНаПодписание(ИдентификаторЗапроса);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Сервис мобильной подписи.Ошибка удаления запроса на подписание'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ИдентификаторЗапроса + ": " + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
	Если ОшибкиУдаленияВСервисе.Количество() > 0 Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Сервис мобильной подписи.Ошибка удаления запроса на подписание'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, СтрСоединить(ОшибкиУдаленияВСервисе, Символы.ПС));
	КонецЕсли;
	
КонецПроцедуры

// Оформляет поле Подписант в форме подписания или отправки на подпись в зависимости от переданного параметра.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Подписант - Структура, СправочникСсылка.ПодписантыСервисаМобильнойПодписи
//
Процедура ПодписантПриСозданииНаСервере(Форма, Подписант) Экспорт
	
	Если Форма.ИмяФормы <> "Справочник.ПодписантыСервисаМобильнойПодписи.Форма.ОтправитьНаПодписание" Тогда
		Форма.Элементы.ПодписантРасширеннаяПодсказка.Заголовок = НСтр("ru = 'Документы будут отправлены подписанту в приложение ""Моя подпись"" от ФНС, необходимо будет дождаться получения результатов подписания'");
	Иначе
		Форма.Элементы.ПодписантРасширеннаяПодсказка.Заголовок = НСтр("ru = 'Документы будут отправлены подписанту в приложение ""Моя подпись"" от ФНС'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подписант) Тогда
		Если ТипЗнч(Подписант) = Тип("Структура") Тогда
			ПараметрыПодписанта = СервисМобильнойПодписиКлиентСервер.ПараметрыПодписанта();
			ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Подписант);
			Форма.Подписант = НайденныйПодписант(ПараметрыПодписанта);
			Если Не ЗначениеЗаполнено(Форма.Подписант) Тогда
				Наименование = Справочники.ПодписантыСервисаМобильнойПодписи.АвтоНаименование(ПараметрыПодписанта);
				Форма.ПараметрыПодписанта = ПараметрыПодписанта;
				Форма.Элементы.Подписант.ПодсказкаВвода = Наименование;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Подписант) = Тип("СправочникСсылка.ПодписантыСервисаМобильнойПодписи") Тогда
			Форма.Подписант = Подписант;
		КонецЕсли;
		Форма.Элементы.Подписант.ТолькоПросмотр = Истина;
	Иначе
		Форма.Подписант = Справочники.ПодписантыСервисаМобильнойПодписи.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаПараметровПодписанта(ПараметрыПодписанта) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПодписанта.НомерТелефона) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен номер телефона'");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПараметрыПодписанта.ИННФЛ) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен номер ИНН физического лица'");
	КонецЕсли;
	
	НомерТелефона = СервисМобильнойПодписиКлиентСервер.ТолькоЦифры(ПараметрыПодписанта.НомерТелефона);
	Если СтрДлина(НомерТелефона) = 11 И СтрНачинаетсяС(НомерТелефона, "8") Тогда
		НомерТелефона = "7" + Прав(НомерТелефона, 10);
	КонецЕсли;
	
	Если СтрДлина(НомерТелефона) <> 11 Или Не СтрНачинаетсяС(НомерТелефона, "7") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный номер телефона подписанта %1'"), ПараметрыПодписанта.НомерТелефона);
	КонецЕсли;
	
	ПараметрыПодписанта.НомерТелефона = НомерТелефона;
	ПараметрыПодписанта.ИННФЛ = СервисМобильнойПодписиКлиентСервер.ТолькоЦифры(ПараметрыПодписанта.ИННФЛ);
	ПараметрыПодписанта.ИНН = СервисМобильнойПодписиКлиентСервер.ТолькоЦифры(ПараметрыПодписанта.ИНН);
	
	Если СтрДлина(ПараметрыПодписанта.ИННФЛ) <> 12 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ИНН физического лица должен быть длиной 12 символов: %1'"), ПараметрыПодписанта.ИННФЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПодписанта.ИНН) И СтрДлина(ПараметрыПодписанта.ИНН) <> 10 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ИНН юридического лица должен быть длиной 10 символов: %1'"), ПараметрыПодписанта.ИНН);
	КонецЕсли;

КонецПроцедуры

// Удалить ожидаемую подпись.
// 
// Параметры:
//  ИдентификаторДокумента - УникальныйИдентификатор
//  СообщениеЖурналаРегистрации - Строка - сообщение журнала регистрации
//  ПодписанныйОбъект - ЛюбаяСсылка
//  ПриПодписании - см. УдалитьОжидаемыеПодписи.ПриПодписании
//
Процедура УдалитьОжидаемуюПодпись(ИдентификаторДокумента, СообщениеЖурналаРегистрации, ПодписанныйОбъект = Неопределено, ПриПодписании = Неопределено)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СервисМобильнойПодписиСтатусы");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.СервисМобильнойПодписиСтатусы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Выбран() Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			Если ПриПодписании <> Истина Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Сервис мобильной подписи.Удаление ожидаемой подписи'",
					ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация, ?(ЗначениеЗаполнено(
				ПодписанныйОбъект), ПодписанныйОбъект.Метаданные(), Неопределено), ПодписанныйОбъект,
					СообщениеЖурналаРегистрации, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОтправитьНаПодписание(Знач НаборДанных, Знач Подписант, Знач Параметры) Экспорт
	
	Если Параметры.ПакетнаяОтправкаНаПодписание Тогда
		РезультатОтправкиНаПодписание = ОтправитьНаПодписаниеВСервис(НаборДанных, Подписант, Параметры);
		Если ЗначениеЗаполнено(РезультатОтправкиНаПодписание.Ошибка) Тогда
			РезультатОтправкиНаПодписание.Ошибка.Вставить("НаборДанных", НаборДанных);
			Возврат РезультатОтправкиНаПодписание.Ошибка;
		КонецЕсли;
	Иначе
		РеквизитыПодписанта = Неопределено;
		Для Каждого Элемент Из НаборДанных Цикл
			
			НовыйНаборДанных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент);
			//@skip-check query-in-loop - запрос выполнится один раз, если Подписант передан ссылкой.
			РезультатОтправкиНаПодписание = ОтправитьНаПодписаниеВСервис(НовыйНаборДанных, Подписант, Параметры, РеквизитыПодписанта);
			Если ЗначениеЗаполнено(РезультатОтправкиНаПодписание.Ошибка) Тогда
				РезультатОтправкиНаПодписание.Ошибка.Вставить("НаборДанных", НаборДанных);
				Возврат РезультатОтправкиНаПодписание.Ошибка;
			Иначе
				Элемент.Вставить("ИдентификаторДокумента", НовыйНаборДанных[0].ИдентификаторДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НаборДанных;
	
КонецФункции

Процедура ПолучениеРезультатовИзСервисаМобильнойПодписи() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ПолучениеРезультатовИзСервисаМобильнойПодписи);
	Если Не СервисМобильнойПодписи.ИспользоватьСервисМобильнойПодписи() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьРезультатыИзСервисаМобильнойПодписи();

КонецПроцедуры

Функция СогласиеПодписанта(Подписант, ОтправитьСогласие = Ложь, ТокенДоступа = "")
	
	ПараметрыПодписанта = СервисМобильнойПодписиКлиентСервер.ПараметрыПодписанта();
	
	Если ТипЗнч(Подписант) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Подписант);
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подписант, "НомерТелефона, ИННФЛ");
		ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Реквизиты);
	КонецЕсли;
	
	Результат = Новый Структура("Статус, Ошибка, Код");
	
	ЗаголовокОшибки = НСтр("ru='Не удалось получить информацию о согласии подписанта'");

	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяВСервисеМобильнойПодписи(ЗаголовокОшибки);
		
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	СвойстваСервисаМобильнойПодписи = СвойстваСервисаМобильнойПодписи();
	РесурсНаСервере = СвойстваСервисаМобильнойПодписи.РесурсКорняAPI + "fns-ms/public-api/v1/signings/approvements/check";
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + ТокенДоступа);
	ИдентификаторЗапроса = ИдентификаторЗапроса();
	ЗаголовкиHTTP.Вставить("X-Request-Id", ИдентификаторЗапроса);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("inn", ПараметрыПодписанта.ИННФЛ);
	СтруктураЗапроса.Вставить("phone", ПараметрыПодписанта.НомерТелефона);
	
	Если ЗначениеЗаполнено(ПараметрыПодписанта.ИНН) Тогда
		СтруктураЗапроса.Вставить("legalEntityInn", ПараметрыПодписанта.ИНН);
	КонецЕсли;
	
	ТелоЗапроса = ОбщегоНазначения.ЗначениеВJSON(СтруктураЗапроса);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ОтветHTTP = Неопределено;
	ВидОперации = НСтр("ru='Сервис мобильной подписи.Согласие на подписание'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		Соединение = СоединениеССерверомИнтернета(ВидОперации, СвойстваСервисаМобильнойПодписи.АдресСервера);
		СоединениеHTTP = Соединение.HTTPСоединение;
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецПопытки;

	Если ОтветHTTP.КодСостояния = 200 Тогда
		
		Попытка
			СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
			Результат.Статус = СтруктураОтвета.Status;
		Исключение
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ОтветHTTP.КодСостояния = 204 Тогда
		Результат.Статус = СтатусСогласиеНеОтправлено();
	Иначе
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки(ОтветHTTP), ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецЕсли;

	Если Результат.Статус = СтатусСогласиеНеОтправлено() И ОтправитьСогласие Тогда
		РезультатОтправки = ОтправитьСогласие(Подписант, ТокенДоступа);
		Если РезультатОтправки.ИдентификаторЗапроса <> Неопределено Тогда
			Результат.Статус = СтатусОжидаетПодписания();
			Результат.Код = РезультатОтправки.Код;
		Иначе
			Результат.Ошибка = РезультатОтправки.Ошибка;
		КонецЕсли;
	ИначеЕсли Результат.Статус = СтатусОтклонено() Тогда
		ЗаголовокОшибки = НСтр("ru='Отсутствует согласие на получение документов'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Подписант отклонил согласие на получение документов из ""1С:Мобильная подпись"".
			|Статус согласия: %1.'"), СтруктураОтвета.message);
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ТекстОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
	ИначеЕсли Результат.Статус = СтатусОшибка() Тогда
		Если СтруктураОтвета.ОшибкаИзСервиса = ОшибкаКлиентНеНайден() И ОтправитьСогласие Тогда
			РезультатОтправки = ОтправитьСогласие(Подписант, ТокенДоступа);
			Если РезультатОтправки.ИдентификаторЗапроса <> Неопределено Тогда
				Результат.Статус = ОшибкаКлиентНеНайден();
				Результат.Код = РезультатОтправки.Код;
			Иначе
				Результат.Ошибка = РезультатОтправки.Ошибка;
			КонецЕсли;
		Иначе
			Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, СтруктураОтвета.ОшибкаИзСервиса, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьСогласие(Подписант, ТокенДоступа = "")
	
	Результат = Новый Структура("ИдентификаторЗапроса, Ошибка, Код");
	
	ЗаголовокОшибки = НСтр("ru='Не удалось отправить на подпись согласие на получение документов на подписание в 1С: Мобильная подпись'");

	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяВСервисеМобильнойПодписи(ЗаголовокОшибки);
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	СвойстваСервисаМобильнойПодписи = СвойстваСервисаМобильнойПодписи();
	РесурсНаСервере = СвойстваСервисаМобильнойПодписи.РесурсКорняAPI + "fns-ms/public-api/v1/signings/approvements/jobs";
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + ТокенДоступа);
	ИдентификаторЗапроса = ИдентификаторЗапроса();
	ЗаголовкиHTTP.Вставить("X-Request-Id", ИдентификаторЗапроса);
	
	ПараметрыПодписанта = СервисМобильнойПодписиКлиентСервер.ПараметрыПодписанта();
	Если ТипЗнч(Подписант) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Подписант);
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подписант, "ИНН, НомерТелефона, ИННФЛ, ОГРН");
		ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Реквизиты);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("inn", ПараметрыПодписанта.ИННФЛ);
	СтруктураЗапроса.Вставить("phone", ПараметрыПодписанта.НомерТелефона);
	
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяДатаСеанса() - Дата(1, 1, 1));
	Код = Формат(Генератор.СлучайноеЧисло(1000, 9999), "ЧГ=0");
	
	СтруктураЗапроса.Вставить("syncCode", Код);
	Если ЗначениеЗаполнено(ПараметрыПодписанта.ИНН) Тогда
		СтруктураЗапроса.Вставить("legalEntity", Новый Структура);
		СтруктураЗапроса.legalEntity.Вставить("inn", ПараметрыПодписанта.ИНН);
	КонецЕсли;
	
	ТелоЗапроса = ОбщегоНазначения.ЗначениеВJSON(СтруктураЗапроса);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ОтветHTTP = Неопределено;
	ВидОперации = НСтр("ru='Сервис мобильной подписи.Согласие на подписание'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		Соединение = СоединениеССерверомИнтернета(ВидОперации, СвойстваСервисаМобильнойПодписи.АдресСервера);
		СоединениеHTTP = Соединение.HTTPСоединение;
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния = 202 Тогда
		Попытка
			СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
			Результат.ИдентификаторЗапроса = СтруктураОтвета.jobID;
			Результат.Код = Код;
			ЗаписьЖурналаРегистрации(ВидОперации, УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отправлено на подпись согласие %1 для %2. Код %3'"), Результат.ИдентификаторЗапроса, ТелоЗапроса, Код));
		Исключение
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ВидОперации, УровеньЖурналаРегистрации.Ошибка,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось отправить на подпись согласие %1 для %2. %3'"), 
					Результат.ИдентификаторЗапроса, ТелоЗапроса, ПредставлениеОшибки));
			Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			Возврат Результат;
		КонецПопытки;
	Иначе
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки(ОтветHTTP), ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИдентификаторЗапроса) Тогда
		Если ТипЗнч(Подписант) = Тип("Структура") Тогда
			Подписант = ДобавитьПодписантаВСправочник(ПараметрыПодписанта);
		КонецЕсли;
		ЗаписатьСтатусОтправленВСервис(ПараметрыПодписанта);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаписатьСтатусОтправленВСервис(ПараметрыПодписанта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодписантыСервисаМобильнойПодписи.Ссылка
	|ИЗ
	|	Справочник.ПодписантыСервисаМобильнойПодписи КАК ПодписантыСервисаМобильнойПодписи
	|ГДЕ 
	|	НЕ ПодписантыСервисаМобильнойПодписи.ПометкаУдаления
	|	И НЕ ПодписантыСервисаМобильнойПодписи.ОтправленВСервис
	|	И ПодписантыСервисаМобильнойПодписи.ИННФЛ = &ИННФЛ
	|	И ПодписантыСервисаМобильнойПодписи.ИНН = &ИНН
	|	И ПодписантыСервисаМобильнойПодписи.НомерТелефона = &НомерТелефона";
	
	Запрос.УстановитьПараметр("НомерТелефона", ПараметрыПодписанта.НомерТелефона);
	Запрос.УстановитьПараметр("ИННФЛ", ПараметрыПодписанта.ИННФЛ);
	Запрос.УстановитьПараметр("ИНН", ПараметрыПодписанта.ИНН);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПодписантыСервисаМобильнойПодписи");
	
	НачатьТранзакцию();
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Таблица = РезультатЗапроса.Выгрузить();
			ЭлементБлокировки.ИсточникДанных = Таблица;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ОтправленВСервис = Истина;
				СправочникОбъект.ОбменДанными.Загрузка = Истина;
				СправочникОбъект.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ДобавитьПодписантаВСправочник(Знач ПараметрыПодписанта) Экспорт
	
	ПроверкаПараметровПодписанта(ПараметрыПодписанта);
	ПравоДоступаДобавление = ПравоДоступа("Добавление", Метаданные.Справочники.ПодписантыСервисаМобильнойПодписи);
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПодписантыСервисаМобильнойПодписи");
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодписантыСервисаМобильнойПодписи.Ссылка
	|ИЗ
	|	Справочник.ПодписантыСервисаМобильнойПодписи КАК ПодписантыСервисаМобильнойПодписи
	|ГДЕ
	|	НЕ ПодписантыСервисаМобильнойПодписи.ПометкаУдаления
	|	И ПодписантыСервисаМобильнойПодписи.ИННФЛ = &ИННФЛ
	|	И ПодписантыСервисаМобильнойПодписи.ИНН = &ИНН
	|	И ПодписантыСервисаМобильнойПодписи.НомерТелефона = &НомерТелефона";

	Запрос.УстановитьПараметр("НомерТелефона", ПараметрыПодписанта.НомерТелефона);
	Запрос.УстановитьПараметр("ИННФЛ", ПараметрыПодписанта.ИННФЛ);
	Запрос.УстановитьПараметр("ИНН", ПараметрыПодписанта.ИНН);
		
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			Если Не ПравоДоступаДобавление Тогда
				ВызватьИсключение(НСтр("ru = 'Недостаточно прав для добавления подписанта.'"), КатегорияОшибки.НарушениеПравДоступа);
			КонецЕсли;
			
			СправочникОбъект = Справочники.ПодписантыСервисаМобильнойПодписи.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыПодписанта);
			СправочникОбъект.Добавил = ТекущийПользователь;
			Если Не ЗначениеЗаполнено(СправочникОбъект.ИНН) Тогда
				СправочникОбъект.Должность = "";
			КонецЕсли;
			
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПодписантыСервисаМобильнойПодписи
		КонецЕсли;
		
		Если СправочникОбъект.Пользователи.Найти(ТекущийПользователь, "Пользователь") = Неопределено Тогда
			НоваяСтрока = СправочникОбъект.Пользователи.Добавить();
			НоваяСтрока.Пользователь = ТекущийПользователь;
			СправочникОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СправочникОбъект.Ссылка;
КонецФункции

Функция НайденныйПодписант(ПараметрыПодписанта)
	
	ПроверкаПараметровПодписанта(ПараметрыПодписанта);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодписантыСервисаМобильнойПодписи.Ссылка
	|ИЗ
	|	Справочник.ПодписантыСервисаМобильнойПодписи КАК ПодписантыСервисаМобильнойПодписи
	|ГДЕ
	|	НЕ ПодписантыСервисаМобильнойПодписи.ПометкаУдаления
	|	И ПодписантыСервисаМобильнойПодписи.ИННФЛ = &ИННФЛ
	|	И ПодписантыСервисаМобильнойПодписи.ИНН = &ИНН
	|	И ПодписантыСервисаМобильнойПодписи.НомерТелефона = &НомерТелефона";

	Запрос.УстановитьПараметр("НомерТелефона", ПараметрыПодписанта.НомерТелефона);
	Запрос.УстановитьПараметр("ИННФЛ", ПараметрыПодписанта.ИННФЛ);
	Запрос.УстановитьПараметр("ИНН", ПараметрыПодписанта.ИНН);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ПодписантыСервисаМобильнойПодписи.ПустаяСсылка();
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Возвращает описание HTTP соединения.
// 
// Параметры:
//   URL - Строка
//   Таймаут - Число
//   ПроверятьДоставкуПакетовПриОшибке - см. ПолучениеФайловИзИнтернета.ДиагностикаСоединения.ПроверятьДоставкуПакетов.
// Возвращаемое значение:
//   Структура:
//    * HTTPСоединение - HTTPСоединение
//    * СтруктураURI - см. ОбщегоНазначенияКлиентСервер.СтруктураURI
//
Функция СоединениеССерверомИнтернета(ВидОперации, URL, Таймаут = Неопределено, 
	ПроверятьДоставкуПакетовПриОшибке = Истина)

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	ЭлектроннаяПодпись.РазрешенДоступКИнтернетСервисам(Истина);
	
	Схема        = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси       = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	КонецЕсли;
	
	Если Таймаут = Неопределено Тогда
		Таймаут = 60;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()));
	Исключение
		
		ШаблонЗапроса = "%1:%2ping";
		СсылкаНаРесурс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса,
			СтруктураURI.Хост, СтруктураURI.Порт);
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить HTTP-соединение с сервером %1:%2
			           |по причине:
			           |%3'"),
			СтруктураURI.Хост, Формат(СтруктураURI.Порт, "ЧГ="),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			РезультатДиагностики = МодульПолучениеФайловИзИнтернета.ДиагностикаСоединения(СсылкаНаРесурс,,
				ПроверятьДоставкуПакетовПриОшибке);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				           |Результат диагностики:
				           |%2'"),
				ТекстОшибки,
				РезультатДиагностики.ОписаниеОшибки);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ВидОперации, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	ОписаниеСоединения = Новый Структура;
	ОписаниеСоединения.Вставить("HTTPСоединение", Соединение);
	ОписаниеСоединения.Вставить("СтруктураURI", СтруктураURI);
	
	Возврат ОписаниеСоединения;
	
КонецФункции

Функция ОтправитьНаПодписаниеВСервис(НаборДанных, Подписант, Параметры = Неопределено, РеквизитыПодписанта = Неопределено, ТокенДоступа = "")
	
	ПараметрыПодписания = Новый Структура("ТипПодписи, ИдентификаторФормы, Доверенность, Комментарий, Атрибуты");
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодписания, Параметры);
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru='Не удалось отправить документы на подписание'");
	Результат = Новый Структура("Ошибка, НаборДанных");
	Результат.НаборДанных = НаборДанных;

	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяВСервисеМобильнойПодписи(ЗаголовокОшибки);
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	СвойстваСервисаМобильнойПодписи = СвойстваСервисаМобильнойПодписи();
	РесурсНаСервере = СвойстваСервисаМобильнойПодписи.РесурсКорняAPI + "fns-ms/public-api/v1/signings/simplifieds/jobs";
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + ТокенДоступа);
	ИдентификаторЗапроса = ИдентификаторЗапроса();
	ЗаголовкиHTTP.Вставить("X-Request-Id", ИдентификаторЗапроса);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Если РеквизитыПодписанта = Неопределено Тогда
		
		ПараметрыПодписанта = СервисМобильнойПодписиКлиентСервер.ПараметрыПодписанта();
		
		Если ТипЗнч(Подписант) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Подписант);
			ОтправленВСервис = Неопределено;
		Иначе
			РеквизитыПодписантаИзСправочника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подписант,
				"ИНН, НомерТелефона, ИННФЛ, ОГРН, ОтправленВСервис");
			ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, РеквизитыПодписантаИзСправочника);
			ОтправленВСервис = РеквизитыПодписантаИзСправочника.ОтправленВСервис;
		КонецЕсли;

		Попытка
			ПроверкаПараметровПодписанта(ПараметрыПодписанта);
			РеквизитыПодписанта = ПараметрыПодписанта;
			РеквизитыПодписанта.Вставить("ОтправленВСервис", ОтправленВСервис);
		Исключение
			Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(
				ИнформацияОбОшибке()), "");
			Возврат Результат;
		КонецПопытки;
	Иначе
		ПараметрыПодписанта = РеквизитыПодписанта;
	КонецЕсли;
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("inn", ПараметрыПодписанта.ИННФЛ);
	СтруктураЗапроса.Вставить("phone", ПараметрыПодписанта.НомерТелефона);
	Если ЗначениеЗаполнено(ПараметрыПодписанта.ИНН) Тогда
		СтруктураЗапроса.Вставить("legalEntity", Новый Структура);
		СтруктураЗапроса.legalEntity.Вставить("inn", ПараметрыПодписанта.ИНН);
	КонецЕсли;
	СтруктураЗапроса.Вставить("documents", Новый Массив);
	Если Параметры.ТипПодписи = Перечисления.ТипыПодписиКриптографии.СМеткойДоверенногоВремениCAdEST Тогда
		СтруктураЗапроса.Вставить("signatureType", "T");
	ИначеЕсли Параметры.ТипПодписи = Перечисления.ТипыПодписиКриптографии.CAdESXLongType1 Тогда
		СтруктураЗапроса.Вставить("signatureType", "XLT1");
	ИначеЕсли ЗначениеЗаполнено(Параметры.ТипПодписи)
		И Параметры.ТипПодписи <> Перечисления.ТипыПодписиКриптографии.БазоваяCAdESBES
		И Параметры.ТипПодписи <> Перечисления.ТипыПодписиКриптографии.ОбычнаяCMS
		И Параметры.ТипПодписи <> Перечисления.ТипыПодписиКриптографии.Неопределен Тогда
		
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не поддерживается тип подписи: %1'"),
			Параметры.ТипПодписи), "");
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПодписания.Атрибуты) Тогда
		Атрибуты = Новый Массив;
		Для Каждого Элемент Из ПараметрыПодписания.Атрибуты Цикл
			Атрибуты.Добавить(Новый Структура("key, value", Элемент.Ключ, Элемент.Значение));
		КонецЦикла;
		СтруктураЗапроса.Вставить("data", Новый Структура("attributes", Атрибуты));
	КонецЕсли;

	ОшибкаНабораДанных = Неопределено;
	Дубли = Новый Соответствие;
	
	РазмерЗапроса = 0;
	
	Для Каждого Элемент Из НаборДанных Цикл
		Если Элемент.Свойство("ИдентификаторДокумента") И ЗначениеЗаполнено(Элемент.ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(Элемент.Данные) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Элемент.Данные);
			Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
				Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не поддерживается тип данных для отправки в сервис: %1 - %2'"),
				ТипЗнч(ДвоичныеДанные), Элемент.Представление), "");
				Прервать;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Элемент.Данные) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = Элемент.Данные;
		Иначе
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не поддерживается тип данных для отправки в сервис: %1 - %2'"),
					ТипЗнч(Элемент.Данные), Элемент.Представление), "");
			Прервать;
		КонецЕсли;
		
		Размер = ДвоичныеДанные.Размер();
	
		Если Размер = 0 Тогда
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Пустые данные для подписи: %1'"),
				Элемент.Представление), "");
			Прервать;
		КонецЕсли;
		
		РазмерЗапроса = РазмерЗапроса + Размер;
		
		Если СтрДлина(Элемент.Представление) > 250 Тогда
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Длина имени отправляемого файла не должна превышать 250 символов: %1'"),
					Элемент.Представление), "");
			Прервать;
		КонецЕсли;
		
		Элемент.Представление = СтрЗаменить(Элемент.Представление, "№", "N");
		Элемент.Представление = СтрЗаменитьПоРегулярномуВыражению(Элемент.Представление, "[^\.\(\)\w,\s-]", "_");
		
		Если Дубли.Получить(Элемент.Представление) = Неопределено Тогда
			Дубли.Вставить(Элемент.Представление, Истина);
		Иначе
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В пакете на подписание не должно быть одинаковых имен файлов: %1'"),
					Элемент.Представление), "");
			Прервать;
		КонецЕсли;
		
		ЭлементДанных = Новый Структура("title, path", Элемент.Представление, Base64Строка(ДвоичныеДанные));
		СтруктураЗапроса.documents.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Если Ошибка <> Неопределено Тогда
		Результат.Ошибка = Ошибка;
		Возврат Результат;
	КонецЕсли;
	
	Если СтруктураЗапроса.documents.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если РазмерЗапроса > 1024 * 1024 * 70 Тогда
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Размер отправляемых файлов в одном пакете не должен превышать 70 Мб: %1 байт'"),
				РазмерЗапроса),
				"");
		Возврат Результат;
	КонецЕсли;
	
	ТелоЗапроса = ОбщегоНазначения.ЗначениеВJSON(СтруктураЗапроса);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ОтветHTTP = Неопределено;
	ВидОперации = НСтр("ru='Сервис мобильной подписи.Отправка на подписание'", ОбщегоНазначения.КодОсновногоЯзыка());

	Попытка
		Соединение = СоединениеССерверомИнтернета(ВидОперации, СвойстваСервисаМобильнойПодписи.АдресСервера);
		СоединениеHTTP = Соединение.HTTPСоединение;
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния = 200 Или ОтветHTTP.КодСостояния = 202 Тогда
		Попытка
			СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
			НомерЗадачи = СтруктураОтвета.jobID;
		Исключение
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			Возврат Результат;
		КонецПопытки;
		
		ДатаОтправки = ТекущаяДатаСеанса();
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		ОтправленныеДокументы = Новый Массив;
		
		Если ТипЗнч(Подписант) = Тип("Структура") Тогда
			Подписант = ДобавитьПодписантаВСправочник(ПараметрыПодписанта);
			РеквизитыПодписанта.ОтправленВСервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подписант, "ОтправленВСервис");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Элемент Из НаборДанных Цикл
			ПредставлениеОшибки = "";
			
			НачатьТранзакцию();
			Попытка
				ИдентификаторДокумента = Новый УникальныйИдентификатор;
				
				НаборЗаписей = РегистрыСведений.СервисМобильнойПодписиСтатусы.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ИдентификаторДокумента = ИдентификаторДокумента;
				НоваяЗапись.ИдентификаторВСервисе = НомерЗадачи;
				НоваяЗапись.НаименованиеДокумента = Элемент.Представление;
				Если Элемент.Свойство("Объект") Тогда
					НоваяЗапись.ПодписанныйОбъект = Элемент.Объект;
				КонецЕсли;
				НоваяЗапись.Отправитель = ТекущийПользователь;
				НоваяЗапись.ДатаОтправки = ДатаОтправки;
				НоваяЗапись.Подписант = Подписант;
				НоваяЗапись.Доверенность = ПараметрыПодписания.Доверенность;
				НоваяЗапись.Комментарий = ПараметрыПодписания.Комментарий;
				НоваяЗапись.Статус = Перечисления.СервисМобильнойПодписиСтатусы.ОжидаетОбработки;
				НоваяЗапись.Операция = Перечисления.СервисМобильнойПодписиОперации.Подписание;
				НаборЗаписей.Записать();
				
				Если Элемент.Свойство("Объект") И ЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(Элемент.Объект)) Тогда
					
					ВерсияОбъекта = Неопределено;
					Элемент.Свойство("ВерсияОбъекта", ВерсияОбъекта);
					ЗаблокироватьДанныеДляРедактирования(Элемент.Объект, ВерсияОбъекта, ПараметрыПодписания.ИдентификаторФормы);
					ОбъектДанных = Элемент.Объект.ПолучитьОбъект();
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(ОбъектДанных.Метаданные().ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектДанных.Ссылка);
					
					Блокировка.Заблокировать();
					
					Если Не ОбъектДанных.ПодписанЭП Тогда
						ОбъектДанных.ПодписанЭП = Истина;
						// Чтобы определить, что это запись с целью добавления/удаления подписи.
						ОбъектДанных.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
						Если ОбъектДанных.Модифицированность() Тогда
							ОбъектДанных.Записать();
						КонецЕсли;
					КонецЕсли;
					
					РазблокироватьДанныеДляРедактирования(Элемент.Объект, ПараметрыПодписания.ИдентификаторФормы);
				КонецЕсли;
				
				Элемент.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаписьЖурналаРегистрации(НСтр("ru='Сервис мобильной подписи.Запись результата отправки на подписание'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
				Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса);
				Возврат Результат;
			КонецЕсли;

		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если РеквизитыПодписанта.ОтправленВСервис <> Истина Тогда
			ЗаписатьСтатусОтправленВСервис(ПараметрыПодписанта);
			РеквизитыПодписанта.ОтправленВСервис = Истина;
		КонецЕсли;
		
		Результат.НаборДанных = НаборДанных;
		
	ИначеЕсли ОтветHTTP.КодСостояния = 403 Тогда
		
		СогласиеПодписанта = СогласиеПодписанта(ПараметрыПодписанта, Истина);
		
		Если Не ЗначениеЗаполнено(СогласиеПодписанта.Ошибка) Тогда
			
			Если СогласиеПодписанта.Статус = СтатусОжидаетПодписания() Тогда
				
				Если Не ЗначениеЗаполнено(СогласиеПодписанта.Код) Тогда
					ТекстОшибки = НСтр(
						"ru='Не подписано согласие подписанта. Подписант должен подписать согласие на получение документов из ""1С:Мобильная подпись"" в приложении ""Моя подпись"" от ФНС.'");
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru='Не подписано согласие подписанта. Сообщите подписанту секретный код %1 для подписания согласия на получение документов из ""1С:Мобильная подпись"" в приложении ""Моя подпись"" от ФНС.'"),
						СогласиеПодписанта.Код);
				КонецЕсли;
				Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ТекстОшибки, ИдентификаторЗапроса);
				
			ИначеЕсли СогласиеПодписанта.Статус = ОшибкаКлиентНеНайден() Тогда
				
				Телефон = Лев(ПараметрыПодписанта.НомерТелефона, 3) + "****" + Прав(ПараметрыПодписанта.НомерТелефона, 4);
		
				Если ЗначениеЗаполнено(ПараметрыПодписанта.ИНН) Тогда
					Если ЗначениеЗаполнено(ПараметрыПодписанта.ОГРН) Тогда
						ДанныеПодписанта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ИНН ЮЛ: %1, ОГРН: %2, ИНН ФЛ: %3, Телефон: +%4'"), ПараметрыПодписанта.ИНН,
							ПараметрыПодписанта.ОГРН, ПараметрыПодписанта.ИННФЛ, Телефон);
					Иначе
						ДанныеПодписанта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='ИНН ЮЛ: %1, ИНН ФЛ: %2, Телефон: +%3'"), ПараметрыПодписанта.ИНН,
							ПараметрыПодписанта.ИННФЛ, Телефон);
					КонецЕсли;
				Иначе
					ДанныеПодписанта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ИНН ФЛ: %1, Телефон: +%2'"), ПараметрыПодписанта.ИННФЛ,
						Телефон);
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru='Не найден подписант с данными %1. Убедитесь, что у подписанта установлено приложение ""Моя подпись"" от ФНС и выпущен сертификат.
						|Сообщите подписанту секретный код %2 для подписания согласия на получение документов из ""1С:Мобильная подпись"" в приложении ""Моя подпись"" от ФНС.'"),
						ДанныеПодписанта,
						СогласиеПодписанта.Код);
						
				Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ТекстОшибки, ИдентификаторЗапроса);

			ИначеЕсли СогласиеПодписанта.Статус = СтатусОтклонено() Тогда
				ТекстОшибки = НСтр("ru='Подписант отклонил согласие на получение документов из ""1С:Мобильная подпись"".'");
				Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ТекстОшибки, ИдентификаторЗапроса);
			ИначеЕсли СогласиеПодписанта.Статус = СтатусОшибка() Тогда
				Результат.Ошибка = СогласиеПодписанта.Ошибка;
			Иначе
				Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, СогласиеПодписанта.Статус, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			КонецЕсли;
			
		Иначе
			Результат.Ошибка = СогласиеПодписанта.Ошибка;
		КонецЕсли;
		
		Возврат Результат;
	Иначе
		
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки(ОтветHTTP), ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		ЗаписьЖурналаРегистрации(ВидОперации,
			УровеньЖурналаРегистрации.Ошибка,,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1
				|Идентификатор запроса: %2'"), Результат.Ошибка.ТекстОшибки, ИдентификаторЗапроса));
	
		Возврат Результат;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьРезультатыИзСервисаМобильнойПодписи(ИдентификаторыДокументов = Неопределено, Ошибка = Null) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе КАК ИдентификаторВСервисе
	               |ИЗ
	               |	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	               |ГДЕ
	               |	СервисМобильнойПодписиСтатусы.Операция = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиОперации.Подписание)
	               |	И СервисМобильнойПодписиСтатусы.Статус = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиСтатусы.ОжидаетОбработки)
	               |	И СервисМобильнойПодписиСтатусы.ИдентификаторДокумента В(&ИдентификаторыДокументов)";

	Если ИдентификаторыДокументов = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисМобильнойПодписиСтатусы.ИдентификаторДокумента В(&ИдентификаторыДокументов)", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисМобильнойПодписиСтатусы.Статус = ЗНАЧЕНИЕ(Перечисление.СервисМобильнойПодписиСтатусы.ОжидаетОбработки)", "");
		Если ТипЗнч("ИдентификаторыДокументов") = Тип("УникальныйИдентификатор") Тогда
			Запрос.УстановитьПараметр("ИдентификаторыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ИдентификаторыДокументов));
		Иначе
			Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		ЗаголовокОшибки = НСтр("ru='Не удалось получить подпись документа в 1С: Мобильная подпись'");
		
		РезультатАвторизации = АвторизоватьсяВСервисеМобильнойПодписи(ЗаголовокОшибки);
		
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Если Ошибка = Null Тогда
				ВызватьИсключение РезультатАвторизации.Ошибка.ТекстОшибки;
			КонецЕсли;
			Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
			
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
		
		Пока Выборка.Следующий() Цикл
			ОбновитьСтатусПодписания(Выборка.ИдентификаторВСервисе, ТокенДоступа); // @skip-check query-in-loop - проверка результатов подписания в мобильном сервисе по задачам
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверкиОжидаемыхПодписей(ИдентификаторыДокументов, ДляПроверкиПодписиВФорме = Истина) Экспорт
	
	Результат = Новый Структура("РезультатыПроверки, Ошибка", Новый Соответствие);
	ЗаголовокОшибки = НСтр("ru='Не удалось получить подпись документа в 1С: Мобильная подпись'");
	
	ПолучитьРезультатыИзСервисаМобильнойПодписи(ИдентификаторыДокументов, Результат.Ошибка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисМобильнойПодписиСтатусы.Результат КАК Результат,
	|	СервисМобильнойПодписиСтатусы.Статус КАК Статус,
	|	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	NULL КАК ПодписанныйОбъект,
	|	NULL КАК ПорядковыйНомер,
	|	NULL КАК ТребуетсяПроверка,
	|	NULL КАК ТипПодписи,
	|	NULL КАК СрокДействияПоследнейМеткиВремени,
	|	NULL КАК ДатаПроверкиПодписи,
	|	NULL КАК Комментарий,
	|	NULL КАК КомуВыданСертификат,
	|	NULL КАК Отпечаток,
	|	NULL КАК Подпись,
	|	NULL КАК ПодписьВерна,
	|	NULL КАК ДатаПодписи,
	|	NULL КАК УстановившийПодпись,
	|	NULL КАК ПодписьМатематическиВерна,
	|	NULL КАК ОшибкаМатематическойПроверкиПодписи,
	|	NULL КАК ОшибкаПроверкиДополнительныхАтрибутов
	|ИЗ
	|	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	|ГДЕ
	|	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента В(&ИдентификаторДокумента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	ЭлектронныеПодписи.ИдентификаторПодписи,
	|	ЭлектронныеПодписи.ПодписанныйОбъект,
	|	ЭлектронныеПодписи.ПорядковыйНомер,
	|	ЭлектронныеПодписи.ТребуетсяПроверка,
	|	ЭлектронныеПодписи.ТипПодписи,
	|	ЭлектронныеПодписи.СрокДействияПоследнейМеткиВремени,
	|	ЭлектронныеПодписи.ДатаПроверкиПодписи,
	|	ЭлектронныеПодписи.Комментарий,
	|	ЭлектронныеПодписи.КомуВыданСертификат,
	|	ЭлектронныеПодписи.Отпечаток,
	|	ЭлектронныеПодписи.Подпись,
	|	ЭлектронныеПодписи.ПодписьВерна,
	|	ЭлектронныеПодписи.ДатаПодписи,
	|	ЭлектронныеПодписи.УстановившийПодпись,
	|	ЭлектронныеПодписи.ПодписьМатематическиВерна,
	|	ЭлектронныеПодписи.ОшибкаМатематическойПроверкиПодписи,
	|	ЭлектронныеПодписи.ОшибкаПроверкиДополнительныхАтрибутов
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ИдентификаторПодписи В(&ИдентификаторДокумента)";
	
	Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторыДокументов);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ДляПроверкиПодписиВФорме Тогда
			РезультатПроверкиПодписи = ЭлектроннаяПодписьКлиентСервер.РезультатПроверкиПодписи();
			РезультатПроверкиПодписи.Вставить("ДатаПодписи");
			РезультатПроверкиПодписи.Вставить("ИдентификаторПодписи", Выборка.ИдентификаторДокумента);
		Иначе
			РезультатПроверкиПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваПодписи(
				Неопределено, Неопределено, Неопределено, Неопределено);
			РезультатПроверкиПодписи.ИдентификаторПодписи = Выборка.ИдентификаторДокумента;
		КонецЕсли;
		
		РезультатПроверкиПодписи.Вставить("Подпись");
		
		Если Выборка.Статус = Null Тогда
			
			ЗаполнитьЗначенияСвойств(РезультатПроверкиПодписи, Выборка);
			РезультатПроверкиПодписи.НеподтвержденнаяДатаПодписи = РезультатПроверкиПодписи.ДатаПодписи;
			РезультатПроверкиПодписи.Вставить("Подпись", Выборка.Подпись.Получить());
			РезультатПроверкиПодписи.Сертификат = ЭлектроннаяПодпись.СертификатИзДвоичныхДанныхПодписи(
				РезультатПроверкиПодписи.Подпись);
			Если ДляПроверкиПодписиВФорме Тогда
				РезультатПроверкиПодписи.Вставить("ЗаписаннаяПодпись", Новый Структура("ПодписанныйОбъект, ПорядковыйНомер", 
					Выборка.ПодписанныйОбъект, Выборка.ПорядковыйНомер));
			КонецЕсли;
		Иначе
			РезультатПодписания = Выборка.Результат.Получить();
			
			Если Выборка.Статус = Перечисления.СервисМобильнойПодписиСтатусы.Успешно Тогда
				СвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(РезультатПодписания);
				ЗаполнитьЗначенияСвойств(РезультатПроверкиПодписи, СвойстваПодписи);
				РезультатПроверкиПодписи.ДатаПодписи = СвойстваПодписи.НеподтвержденнаяДатаПодписи;
				РезультатПроверкиПодписи.Вставить("Подпись", РезультатПодписания);
			ИначеЕсли Выборка.Статус = Перечисления.СервисМобильнойПодписиСтатусы.Отклонено Тогда
				РезультатПроверкиПодписи.ОшибкаПроверкиДополнительныхАтрибутов = НСтр("ru='Отклонено подписание в 1С: Мобильная подпись'");
				Если ТипЗнч(РезультатПодписания) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(РезультатПодписания.ТекстОшибки) Тогда
						РезультатПроверкиПодписи.ОшибкаПроверкиДополнительныхАтрибутов = РезультатПодписания.ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Выборка.Статус = Перечисления.СервисМобильнойПодписиСтатусы.Ошибка Тогда
				РезультатПроверкиПодписи.ОшибкаПроверкиДополнительныхАтрибутов = НСтр("ru='Не удалось отправить документ в 1С: Мобильная подпись'");
				Если ТипЗнч(РезультатПодписания) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(РезультатПодписания.ТекстОшибки) Тогда
						РезультатПроверкиПодписи.ОшибкаПроверкиДополнительныхАтрибутов = РезультатПодписания.ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				РезультатПроверкиПодписи.ОшибкаПроверкиДополнительныхАтрибутов = НСтр("ru='Ожидается подписание документа в 1С: Мобильная подпись'");
				Если ТипЗнч(РезультатПодписания) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(РезультатПодписания.ТекстОшибки) Тогда
						РезультатПроверкиПодписи.ОшибкаПроверкиДополнительныхАтрибутов = РезультатПодписания.ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		РезультатПроверкиПодписи.Вставить("СтатусВМобильномСервисе", ?(Выборка.Статус = Null, Перечисления.СервисМобильнойПодписиСтатусы.Успешно, Выборка.Статус));
		Результат.РезультатыПроверки.Вставить(Выборка.ИдентификаторДокумента, РезультатПроверкиПодписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЗапросНаПодписание(ИдентификаторЗадачи, ТокенДоступа = "")
	
	ЗаголовокОшибки = НСтр("ru='Не удалось удалить запрос на подписание в 1С: Мобильная подпись'");

	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяВСервисеМобильнойПодписи(ЗаголовокОшибки);
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			ВызватьИсключение РезультатАвторизации.Ошибка.ТекстОшибки;
		КонецЕсли;
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	СвойстваСервисаМобильнойПодписи = СвойстваСервисаМобильнойПодписи();
	РесурсНаСервере = СвойстваСервисаМобильнойПодписи.РесурсКорняAPI + "fns-ms/public-api/v1/signings/simplifieds/jobs/" + ИдентификаторЗадачи + "/cancel";
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + ТокенДоступа);
	ИдентификаторЗапроса = ИдентификаторЗапроса();
	ЗаголовкиHTTP.Вставить("X-Request-Id", ИдентификаторЗапроса);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ОтветHTTP = Неопределено;
	
	ВидОперации = НСтр("ru='Сервис мобильной подписи.Удаление запроса на подписание'", ОбщегоНазначения.КодОсновногоЯзыка());
	Соединение = СоединениеССерверомИнтернета(ВидОперации, СвойстваСервисаМобильнойПодписи.АдресСервера);
	СоединениеHTTP = Соединение.HTTPСоединение;
	ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
	Если СтруктураОтвета.Свойство("ОшибкаИзСервиса") И ЗначениеЗаполнено(СтруктураОтвета.ОшибкаИзСервиса) Тогда
		ВызватьИсключение СтруктураОтвета.ОшибкаИзСервиса;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусПодписания(ИдентификаторЗадачи, ТокенДоступа = "", Ошибка = Null)
	
	Статус = Неопределено;
	
	ЗаголовокОшибки = НСтр("ru='Не удалось получить информацию о подписании документов в 1С: Мобильная подпись'");

	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяВСервисеМобильнойПодписи(ЗаголовокОшибки);
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Если Ошибка = Null Тогда
				ВызватьИсключение РезультатАвторизации.Ошибка.ТекстОшибки;
			КонецЕсли;
			Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Ошибка <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	СвойстваСервисаМобильнойПодписи = СвойстваСервисаМобильнойПодписи();
	РесурсНаСервере = СвойстваСервисаМобильнойПодписи.РесурсКорняAPI + "fns-ms/public-api/v1/signings/simplifieds/jobs/" + ИдентификаторЗадачи;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить("Authorization", "Bearer " + ТокенДоступа);
	ИдентификаторЗапроса = ИдентификаторЗапроса();
	ЗаголовкиHTTP.Вставить("X-Request-Id", ИдентификаторЗапроса);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ОтветHTTP = Неопределено;
	ВидОперации = НСтр("ru='Сервис мобильной подписи.Проверка статуса подписания'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		Соединение = СоединениеССерверомИнтернета(ВидОперации, СвойстваСервисаМобильнойПодписи.АдресСервера);
		СоединениеHTTP = Соединение.HTTPСоединение;
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод("GET", ЗапросHTTP);
	Исключение
		Если Ошибка <> Null Тогда
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			Возврат;
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

	Если ОтветHTTP.КодСостояния = 200 Тогда
		
		Попытка
			СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
			Статус = СтруктураОтвета.Status;
		Исключение
			Если Ошибка <> Null Тогда
				ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
				Возврат;
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		
		Если Статус = СтатусУспешно() Тогда
			РезультатПодписания = СтруктураОтвета.result;
			Если РезультатПодписания.Status = "SIGNED" Тогда
				ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, РезультатПодписания.Signatures, Перечисления.СервисМобильнойПодписиСтатусы.Успешно);
			ИначеЕсли РезультатПодписания.Status = "REJECTED" Тогда
				ЗаголовокОшибки = НСтр("ru='Подписание отклонено'");
				ПредставлениеОшибки = РезультатПодписания.message;
				Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
				ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, Ошибка, Перечисления.СервисМобильнойПодписиСтатусы.Отклонено);
			КонецЕсли;
		ИначеЕсли Статус = СтатусОшибка() Тогда
			ЗаголовокОшибки = НСтр("ru='Не удалось подписать документы в приложении ""Моя подпись""'");
			ПредставлениеОшибки = ?(СтруктураОтвета.Свойство("ОшибкаИзСервиса"), СтруктураОтвета.ОшибкаИзСервиса, ОтветHTTP.ПолучитьТелоКакСтроку());
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, Ошибка, Перечисления.СервисМобильнойПодписиСтатусы.Ошибка);
		ИначеЕсли Статус = СтатусОтмена() Тогда
			ЗаголовокОшибки = НСтр("ru='Отправка документов на подпись была отменена'");
			ПредставлениеОшибки = ?(СтруктураОтвета.Свойство("ОшибкаИзСервиса"), СтруктураОтвета.ОшибкаИзСервиса, ОтветHTTP.ПолучитьТелоКакСтроку());
			Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, Ошибка, Перечисления.СервисМобильнойПодписиСтатусы.Ошибка);
		Иначе
			ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, Неопределено, Перечисления.СервисМобильнойПодписиСтатусы.ОжидаетОбработки);
		КонецЕсли;
	Иначе
		Статус = Неопределено;
		Если ОтветHTTP.КодСостояния = 204 Тогда
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В 1С:Мобильная подпись не найдена задача на подписание с кодом %1'"), ИдентификаторЗадачи);
			Статус = Перечисления.СервисМобильнойПодписиСтатусы.Ошибка;
		Иначе
			ПредставлениеОшибки = ПредставлениеОшибки(ОтветHTTP);
		КонецЕсли;
		
		Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, ИдентификаторЗапроса, СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, Ошибка, Статус);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРезультатПодписанияВРегистрСтатусов(ИдентификаторЗадачи, Результат, Статус = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисМобильнойПодписиСтатусы.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	СервисМобильнойПодписиСтатусы.Подписант КАК Подписант,
	|	ПРЕДСТАВЛЕНИЕ(СервисМобильнойПодписиСтатусы.Подписант) КАК ПодписантПредставление,
	|	СервисМобильнойПодписиСтатусы.Отправитель КАК Отправитель,
	|	СервисМобильнойПодписиСтатусы.ДатаОтправки КАК ДатаОтправки,
	|	СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	СервисМобильнойПодписиСтатусы.НаименованиеДокумента КАК НаименованиеДокумента,
	|	СервисМобильнойПодписиСтатусы.ПодписанныйОбъект КАК ПодписанныйОбъект,
	|	СервисМобильнойПодписиСтатусы.Операция КАК Операция,
	|	СервисМобильнойПодписиСтатусы.Комментарий КАК Комментарий,
	|	СервисМобильнойПодписиСтатусы.Доверенность КАК Доверенность
	|ИЗ
	|	РегистрСведений.СервисМобильнойПодписиСтатусы КАК СервисМобильнойПодписиСтатусы
	|ГДЕ
	|	СервисМобильнойПодписиСтатусы.ИдентификаторВСервисе = &ИдентификаторЗадачи";
	
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", ИдентификаторЗадачи);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Статус = Перечисления.СервисМобильнойПодписиСтатусы.Успешно Тогда
			
			Для Каждого Подпись Из Результат Цикл
				Если Выборка.НайтиСледующий(Подпись.title) Тогда
					
					ИдентификаторДокумента = Выборка.ИдентификаторДокумента;
					
					НаборЗаписей = РегистрыСведений.СервисМобильнойПодписиСтатусы.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СервисМобильнойПодписиСтатусы");
					ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);

					НачатьТранзакцию();
					Попытка
						Блокировка.Заблокировать();
						НаборЗаписей.Прочитать();
						
						Если НаборЗаписей.Выбран() И НаборЗаписей[0].Статус <> Статус Тогда
							Если ЗначениеЗаполнено(Выборка.ПодписанныйОбъект)
								И ЭлектроннаяПодписьСлужебный.ДоступнаЭлектроннаяПодпись(ТипЗнч(Выборка.ПодписанныйОбъект)) Тогда
								
								НовыеСвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
								НовыеСвойстваПодписи.Подпись = ЭлектроннаяПодпись.ПодписьВКодировкеDER(Base64Значение(Подпись.signature));
								СвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(НовыеСвойстваПодписи.Подпись);
								
								Если СвойстваПодписи.Успех = Ложь Тогда
									ВызватьИсключение СвойстваПодписи.ТекстОшибки;
								КонецЕсли;
								
								ЗаполнитьЗначенияСвойств(НовыеСвойстваПодписи, СвойстваПодписи);
								НовыеСвойстваПодписи.ИдентификаторПодписи = ИдентификаторДокумента;
								НовыеСвойстваПодписи.УстановившийПодпись = Выборка.Отправитель;
								НовыеСвойстваПодписи.ПодписанныйОбъект = Выборка.ПодписанныйОбъект;
								НовыеСвойстваПодписи.Комментарий = Выборка.Комментарий;
								Если Не ЗначениеЗаполнено(НовыеСвойстваПодписи.КомуВыданСертификат) Тогда
									НовыеСвойстваПодписи.КомуВыданСертификат = Выборка.ПодписантПредставление;
								КонецЕсли;
								ЭлектроннаяПодпись.ДобавитьПодпись(Выборка.ПодписанныйОбъект, НовыеСвойстваПодписи);
								Если ЗначениеЗаполнено(Выборка.Доверенность) И ОбщегоНазначения.ПодсистемаСуществует(
									"СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
									МодульМашиночитаемыеДоверенностиФНССлужебный = ОбщегоНазначения.ОбщийМодуль(
										"МашиночитаемыеДоверенностиФНССлужебный");
									НовыеСвойстваПодписи.РезультатПроверкиПодписиПоМЧД = 
										МодульМашиночитаемыеДоверенностиФНССлужебный.НовыйРезультатПроверкиПодписиПоМЧД(
										Выборка.Доверенность);
								КонецЕсли;
								
								НаборЗаписей.Очистить();
								НаборЗаписей.Записать();
							Иначе
								НоваяЗапись = НаборЗаписей[0];
								НоваяЗапись.Статус = Статус;
								НоваяЗапись.Результат = Новый ХранилищеЗначения(
									ЭлектроннаяПодпись.ПодписьВКодировкеDER(Base64Значение(Подпись.signature)),
										Новый СжатиеДанных(9));
								НаборЗаписей.Записать();
							КонецЕсли;
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не удалось записать подпись %1(%2): %3'"), Подпись.title, ИдентификаторДокумента,
							ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							НСтр("ru='Сервис мобильной подписи.Запись результата подписания'",
							ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			Пока Выборка.Следующий() Цикл
				ИдентификаторДокумента = Выборка.ИдентификаторДокумента;
				
				НаборЗаписей = РегистрыСведений.СервисМобильнойПодписиСтатусы.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторДокумента.Установить(ИдентификаторДокумента);
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СервисМобильнойПодписиСтатусы");
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ИдентификаторДокумента);
				
				НачатьТранзакцию();
				Попытка
					Блокировка.Заблокировать();
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Выбран() И (НаборЗаписей[0].Статус <> Статус Или Статус
						= Перечисления.СервисМобильнойПодписиСтатусы.Ошибка Или Статус = Неопределено) Тогда

						НоваяЗапись = НаборЗаписей[0];
						Если Статус <> Неопределено Тогда
							НоваяЗапись.Статус = Статус;
						КонецЕсли;
						НоваяЗапись.Результат = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
						НаборЗаписей.Записать();

					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось записать результат подписания %1(%2): %3'"), ИдентификаторДокумента,
						ИдентификаторЗадачи, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(НСтр("ru='Сервис мобильной подписи.Запись результата подписания'",
						ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПредставлениеОшибки(ОтветHTTP)
	
	Попытка
		СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
		ПредставлениеОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("ОшибкаИзСервиса"),
			СтруктураОтвета.ОшибкаИзСервиса, ОтветHTTP.ПолучитьТелоКакСтроку() + " (" + ОтветHTTP.КодСостояния + ")");
	Исключение
		ПредставлениеОшибки = ОтветHTTP.ПолучитьТелоКакСтроку() + " (" + ОтветHTTP.КодСостояния + ")";
	КонецПопытки;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

Функция СтатусОтклонено()
	Возврат "REJECTED";
КонецФункции

Функция СтатусОжидаетПодписания()
	Возврат "WAITING_FOR_SIGNING";
КонецФункции

Функция СтатусОшибка()
	Возврат "FAILED";
КонецФункции

Функция СтатусОтмена()
	Возврат "CANCELLED";
КонецФункции

Функция СтатусУспешно()
	Возврат "SUCCESS";
КонецФункции

Функция ОшибкаКлиентНеНайден()
	Возврат "Клиент с такими данными не найден"; // АПК:1297 Строка из сервиса ФНС
КонецФункции

Функция СтатусСогласиеНеОтправлено()
	Возврат НСтр("ru='Согласие не отправлено на подписание'");
КонецФункции

Функция АвторизоватьсяВСервисеМобильнойПодписи(ЦельАвторизации = "")
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыРезультатаАвторизации = ПараметрыСеанса.ПараметрыАвторизацииВСервисеМобильнойПодписи;
	Если ПараметрыРезультатаАвторизации <> Неопределено И ПараметрыРезультатаАвторизации.ДатаСеанса <> Неопределено
		И ПараметрыРезультатаАвторизации.РезультатАвторизации <> Неопределено Тогда
		
		ДатаСеанса = ТекущаяДатаСеанса();
		Если ПараметрыРезультатаАвторизации.ДатаСеанса >= ДатаСеанса - 60 * 60
			И ПараметрыРезультатаАвторизации.ДатаСеанса <= ДатаСеанса Тогда
			
			Возврат Новый Структура(ПараметрыРезультатаАвторизации.РезультатАвторизации);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСервисаМобильнойПодписи = СвойстваСервисаМобильнойПодписи();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", СвойстваСервисаМобильнойПодписи.АдресСервера);
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("Ошибка");
	
	Если Не ЭлектроннаяПодпись.РазрешенДоступКИнтернетСервисам() Тогда
		ЗаголовокОшибки = ?(ЦельАвторизации = "", НСтр("ru='Не удается авторизоваться в сервисе 1С:Мобильная подпись'"), ЦельАвторизации);
		Результат.Ошибка = ОшибкаЗапретаДоступаКИнтернетСервисам(ЗаголовокОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РесурсНаСервере = СвойстваСервисаМобильнойПодписи.РесурсКорняAPI + "fns-ms/public-api/v1/auth-tokens/create";
	
	ПараметрыРесурсаНаСервере = "";
	ТикетАутентификацииИлиДанныеПользователя = ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
	Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
		ЗаголовокОшибки = ?(ЦельАвторизации = "", НСтр("ru='Не удается авторизоваться на сайте интернет-поддержки'"), ЦельАвторизации);
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, НСтр("ru='Не удается получить тикет аутентификации или данные пользователя.'"), "");
		Возврат Результат;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
		
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("ticket", ТикетАутентификацииИлиДанныеПользователя.Тикет);
	СтруктураЗапроса.Вставить("applicationGuid", ИдентификаторИнформационнойБазы());
	ТелоЗапроса = ОбщегоНазначения.ЗначениеВJSON(СтруктураЗапроса);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ОтветHTTP = Неопределено;
	ВидОперации = НСтр("ru='Авторизация в сервисе мобильной подписи'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		Соединение = СоединениеССерверомИнтернета(ВидОперации, СвойстваСервисаМобильнойПодписи.АдресСервера);
		СоединениеHTTP = Соединение.HTTPСоединение;
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод("POST", ЗапросHTTP);
	
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаголовокОшибки = ?(ЦельАвторизации = "", НСтр("ru='Не удалось авторизоваться в сервисе 1С:Мобильная подпись'"), ЦельАвторизации);
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, "", СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецПопытки;

	Если ОтветHTTP.КодСостояния = 200 Тогда
		Попытка
			СтруктураОтвета = СтруктураОтвета(ОтветHTTP);
			Результат.ТокенДоступа = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("token"),
				СтруктураОтвета.token, "");
		Исключение
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаголовокОшибки = ?(ЦельАвторизации = "", НСтр("ru='Не удалось получить токен доступа в сервисе 1С:Мобильная подпись'"), ЦельАвторизации);
			Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, "", СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
			Возврат Результат;
		КонецПопытки;
	Иначе
		ЗаголовокОшибки = ?(ЦельАвторизации = "", НСтр("ru='Отказ при получении токена доступа в сервисе 1С:Мобильная подпись'"), ЦельАвторизации);
		ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить токен доступа в сервисе 1С:Мобильная подпись: %1'"), ПредставлениеОшибки(ОтветHTTP));
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, "", СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		ЗаголовокОшибки = ?(ЦельАвторизации = "", НСтр("ru='Сервис 1С:Мобильная подпись не предоставил токен для авторизации'"), ЦельАвторизации);
		ПредставлениеОшибки = НСтр("ru='Сервис 1С:Мобильная подпись не предоставил токен для авторизации.'");
		Результат.Ошибка = ОшибкаМобильногоСервиса(ЗаголовокОшибки, ПредставлениеОшибки, "", СоединениеHTTP, ЗапросHTTP, ОтветHTTP);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыРезультатаАвторизации = ПараметрыРезультатаАвторизацииВСервисеМобильнойПодписи();
	ПараметрыРезультатаАвторизации.ДатаСеанса = ТекущаяДатаСеанса();
	ПараметрыРезультатаАвторизации.РезультатАвторизации = Новый ФиксированнаяСтруктура(Результат);
	ПараметрыСеанса.ПараметрыАвторизацииВСервисеМобильнойПодписи = Новый ФиксированнаяСтруктура(ПараметрыРезультатаАвторизации);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыРезультатаАвторизацииВСервисеМобильнойПодписи()
	
	ПараметрыРезультатаАвторизации = Новый Структура;
	ПараметрыРезультатаАвторизации.Вставить("ДатаСеанса", 			Неопределено);
	ПараметрыРезультатаАвторизации.Вставить("РезультатАвторизации", Неопределено);
	Возврат ПараметрыРезультатаАвторизации;
	
КонецФункции

Функция СтруктураОтвета(ОтветHTTP)
	
	ТелоОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Заголовки = СтандартныеПодсистемыСервер.HTTPЗаголовкиВНижнийРегистр(ОтветHTTP.Заголовки);
	
	Если СтрНачинаетсяС(НРег(Заголовки["content-type"]), "text/html") Тогда
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьHTML(ТелоОтвета, Новый Структура);
		ФорматированнаяСтрока = ФорматированныйДокумент.ПолучитьФорматированнуюСтроку();
		СтруктураОтвета = Новый Структура("ОшибкаИзСервиса", ФорматированнаяСтрока);
	ИначеЕсли Не ЗначениеЗаполнено(ТелоОтвета) Тогда
		Если ОтветHTTP.КодСостояния >= 400 Тогда
			СтруктураОтвета = Новый Структура("ОшибкаИзСервиса", ТелоОтвета + " (" + ОтветHTTP.КодСостояния + ")");
		Иначе
			СтруктураОтвета = Новый Структура;
		КонецЕсли;
	ИначеЕсли НРег(Заголовки["content-type"]) = "application/xml;charset=UTF-8" Тогда
		СтруктураОтвета = Новый Структура("ОшибкаИзСервиса", ТелоОтвета + " (" + ОтветHTTP.КодСостояния + ")");
	Иначе
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(ТелоОтвета,,Ложь);
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("error") И ЗначениеЗаполнено(СтруктураОтвета.error) Тогда
			ОбработатьОшибкуСервиса(СтруктураОтвета);
		ИначеЕсли ОтветHTTP.КодСостояния > 202 Тогда
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("message") Тогда
			
				Если СтруктураОтвета.Свойство("details") Тогда
					ДеталиОшибки = ДеталиОшибки(СтруктураОтвета.details);
				Иначе
					ДеталиОшибки = "";
				КонецЕсли;
				
				Если ОтветHTTP.КодСостояния = 500 И СтруктураОтвета.Type = "INTERNAL" Тогда
					ТекстОшибки = НСтр("ru='Сервису 1С:Мобильная подпись не удалось обработать запрос. Попробуйте выполнить операцию позднее.'");
				ИначеЕсли СтруктураОтвета.Type = "MAXIMUM_FILE_SIZE_EXCEEDED" Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Превышен максимальный размер файла: %1.'"),
						ДеталиОшибки);
				ИначеЕсли СтруктураОтвета.Type = "INPUT_DATA_VALIDATION_FAILED" Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные не могут быть отправлены: %1.'"),
						ДеталиОшибки);
				ИначеЕсли СтруктураОтвета.Type = "TICKET_VERIFICATION_ERROR" Тогда
					ТекстОшибки = НСтр("ru='Некорректный тикет авторизации.'");
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)%3'"), 
						СтруктураОтвета.message, ОтветHTTP.КодСостояния, ДеталиОшибки);
				КонецЕсли;
					
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: %2'"),
					ОтветHTTP.КодСостояния, ТелоОтвета);
			КонецЕсли;
			СтруктураОтвета = Новый Структура("ОшибкаИзСервиса", ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

Процедура ОбработатьОшибкуСервиса(СтруктураОтвета)
	
	ИдентификаторОшибки = "";
	ТипОшибки = "";
	СообщениеОбОшибке = "";
	Ошибки = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураОтвета.error Цикл
		Если КлючИЗначение.Ключ = "details" Тогда
			Если ЗначениеЗаполнено(СтруктураОтвета.error.details) Тогда
				Ошибки.Добавить(ДеталиОшибки(СтруктураОтвета.error.details));
			КонецЕсли;
		ИначеЕсли КлючИЗначение.Ключ = "message" Тогда
			Если НРег(КлючИЗначение.Значение) = "see details" Тогда
				Продолжить;
			КонецЕсли;
			СообщениеОбОшибке = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "ueid" Тогда
			ИдентификаторОшибки = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "type" Тогда
			ТипОшибки = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "non_field_errors" Тогда
			Ошибки.Добавить(ДеталиОшибки(КлючИЗначение.Значение));
		Иначе
			Ошибки.Добавить(КлючИЗначение.Ключ + ": " + ДеталиОшибки(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) И ТипОшибки <> "FNS_ERROR" Тогда
		Ошибки.Вставить(0, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ТипОшибки <> "FNS_SIMPLIFIED_SIGNING_ERROR" Тогда
		Если ЗначениеЗаполнено(ИдентификаторОшибки) Тогда
			Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Идентификатор ошибки: %1'"), ИдентификаторОшибки));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипОшибки) Тогда
			Если ТипОшибки = "INTERNAL_APPLICATION_ERROR" Тогда
				Ошибки.Вставить(0, НСтр("ru='Сервис не смог обработать запрос:'"));
			ИначеЕсли ТипОшибки = "FNS_ERROR" Тогда
				Ошибки.Вставить(0, НСтр("ru='Сервис ФНС не смог обработать запрос на подписание. Попробуйте переотправить документ позднее.'"));
			Иначе
				Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Тип ошибки: %1'"), ТипОшибки));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтвета.Вставить("ОшибкаИзСервиса", СтрСоединить(Ошибки, Символы.ПС));
			
КонецПроцедуры

Функция ДеталиОшибки(Детали)
	
	Если ТипЗнч(Детали) = Тип("Структура") Тогда
		
		Ошибки = Новый Массив;
		
		Если Детали.Свойство("Field") И Детали.Свойство("RejectedValue") И Детали.Свойство("message") Тогда
			Ошибки.Добавить(Детали.RejectedValue + ": " + ДеталиОшибки(Детали.message));
		Иначе
			Для Каждого КлючИЗначение Из Детали Цикл
				ОшибкаСтрокой = ДеталиОшибки(КлючИЗначение.Значение);
				Если КлючИЗначение.Ключ = "non_field_errors" Тогда
					Ошибки.Добавить(ОшибкаСтрокой);
				Иначе
					Ошибки.Добавить(КлючИЗначение.Ключ + ": " + ОшибкаСтрокой);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтрСоединить(Ошибки, ";" + Символы.ПС);
		
	ИначеЕсли ТипЗнч(Детали) = Тип("Массив") Тогда
		
		Ошибки = Новый Массив;
		Для Каждого Элемент Из Детали Цикл
			Ошибки.Добавить(ДеталиОшибки(Элемент));
		КонецЦикла;
		
		Возврат СтрСоединить(Ошибки, ";" + Символы.ПС);
		
	ИначеЕсли ТипЗнч(Детали) = Тип("Строка") Тогда
		
		Возврат Детали;
		
	КонецЕсли;
	
	Возврат ЗаписатьЗначениеJSON(Детали);
	
КонецФункции

Функция СвойстваСервисаМобильнойПодписи()
	
	Результат = Новый Структура;
	
	URLСервера = "https://signing-integration.1c.ru/";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСервера);
	Результат.Вставить("АдресСервера", СтруктураURI.Схема + "://" + СтруктураURI.ИмяСервера);
	Результат.Вставить("РесурсКорняAPI", "/" + СтруктураURI.ПутьНаСервере);
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторИнформационнойБазы()
	Возврат СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();
КонецФункции

Функция ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПродолжитьПолучениеТикета = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");	
		ПродолжитьПолучениеТикета = МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
	Если ПродолжитьПолучениеТикета Тогда
			
			ВладелецТикета = ВладелецТикета();
			
			РезультатПолученияТикета =
				МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
			
			Если РезультатПолученияТикета = Неопределено Или Не ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
				Возврат Неопределено;
			Иначе
				Возврат РезультатПолученияТикета;
			КонецЕсли;
			
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВладелецТикета()

	Возврат "signing-integration-onec-dss";

КонецФункции

Функция ОшибкаЗапретаДоступаКИнтернетСервисам(ЗаголовокОшибки)
	Возврат ОшибкаМобильногоСервиса(ЗаголовокОшибки,
		ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗапрещенДоступКИнтернетСервисамТекстСообщения(), "");
КонецФункции

Функция ОшибкаМобильногоСервиса(ЗаголовокОшибки, ТекстОшибки, ИдентификаторЗапроса, СоединениеHTTP = Неопределено,
	ЗапросHTTP = Неопределено, ОтветHTTP = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	Результат.Вставить("ДополнительныеФайлы", );

	Если СоединениеHTTP <> Неопределено Тогда
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ЗапросHTTP, ОтветHTTP, СоединениеHTTP);
		Результат.Вставить("ДополнительныеФайлы", ДополнительныеФайлы);
	Иначе
		Результат.Вставить("ДополнительныеФайлы", Новый Массив);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ИдентификаторЗапроса()
	Возврат Строка(Новый УникальныйИдентификатор);
КонецФункции

Процедура ДобавитьФайлДляРасследования(Файлы, ДанныеФайла, ТипФайла, Расширение = "txt")
	
	СведенияОФайле = Новый Структура;
	Если ТипЗнч(ДанныеФайла) = Тип("Строка") Тогда
		СведенияОФайле.Вставить("Данные", Новый ДвоичныеДанные(ДанныеФайла));
	ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		СведенияОФайле.Вставить("Данные", ДанныеФайла);
	Иначе
		СведенияОФайле.Вставить("Данные", Неопределено);
	КонецЕсли;
	СведенияОФайле.Вставить("Имя", ТипФайла + "." + Расширение);
	СведенияОФайле.Вставить("ТипФайла", ТипФайла);
	Файлы.Добавить(СведенияОФайле);

КонецПроцедуры

Функция ПараметрыФайловДляРасследования()
	
	ПараметрыФайловДляРасследования = Новый Структура;
	ПараметрыФайловДляРасследования.Вставить("ИмяФайлаЗапроса", "");
	ПараметрыФайловДляРасследования.Вставить("ИмяФайлаОтвета", "");
	ПараметрыФайловДляРасследования.Вставить("Запрос", Неопределено);
	ПараметрыФайловДляРасследования.Вставить("Ответ", Неопределено);
	ПараметрыФайловДляРасследования.Вставить("СоединениеHTTP", Неопределено);
	Возврат ПараметрыФайловДляРасследования;

КонецФункции

Функция ФайлыДляРасследования(Запрос, Ответ, СоединениеHTTP)
	
	ДополнительныеФайлы = Новый Массив;
	
	Если Запрос <> Неопределено И СоединениеHTTP <> Неопределено Тогда
		RestЗапрос = RestПредставлениеЗапроса(Запрос, СоединениеHTTP);
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(RestЗапрос);
		ДобавитьФайлДляРасследования(ДополнительныеФайлы, ДанныеФайла, НСтр("ru='Запрос http'"), "txt");
	КонецЕсли;
	
	Если Ответ <> Неопределено Тогда
		СтруктураЗначения = Новый Структура;
		СтруктураЗначения.Вставить("КодСостояния", Ответ.КодСостояния);
		Заголовки = Ответ.Заголовки;
		СтруктураЗначения.Вставить("Заголовки", Заголовки);
		СтруктураЗначения.Вставить("Тело", Ответ.ПолучитьТелоКакСтроку());
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ОбщегоНазначения.ЗначениеВJSON(СтруктураЗначения));
		ДобавитьФайлДляРасследования(ДополнительныеФайлы, ДанныеФайла, НСтр("ru='Ответ http'"), "txt");
	КонецЕсли;
	
	Возврат ДополнительныеФайлы;
КонецФункции

Функция RestПредставлениеЗапроса(Запрос, СоединениеHTTP)
	RestЗапрос = Новый Массив;
	RestЗапрос.Добавить("###");
	RestЗапрос.Добавить(Символы.ПС);
	АдресРесурса = ?(СоединениеHTTP.ЗащищенноеСоединение = Неопределено, "http://", "https://") + СоединениеHTTP.Сервер + Запрос.АдресРесурса;
	СтрокаЗапроса = ?(ЗначениеЗаполнено(Запрос.ПолучитьТелоКакСтроку()), "POST", "GET") + " " + АдресРесурса + " HTTP/1.1";
	RestЗапрос.Добавить(СтрокаЗапроса);
	Для Каждого Заголовок Из Запрос.Заголовки Цикл
		RestЗапрос.Добавить(Заголовок.Ключ+": "+Заголовок.Значение);
	КонецЦикла;
	
	RestЗапрос.Добавить(Символы.ПС);
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Попытка
			ЗапросБезДанных = ПрочитатьЗначениеJSON(ТелоЗапроса);
			Если ЗапросБезДанных.Свойство("documents") Тогда
				Для Каждого Элемент Из ЗапросБезДанных.documents Цикл
					Элемент.Path = "*";
				КонецЦикла;
			КонецЕсли;
			Если ЗапросБезДанных.Свойство("phone") Тогда
				ЗапросБезДанных.phone = "*" + Прав(ЗапросБезДанных.phone, 4);
			КонецЕсли;
			RestЗапрос.Добавить(ЗаписатьЗначениеJSON(ЗапросБезДанных));
		Исключение
			RestЗапрос.Добавить(ТелоЗапроса);
		КонецПопытки;
		RestЗапрос.Добавить(Символы.ПС);
	КонецЕсли;
	RestЗапрос.Добавить("###");
	Возврат СтрСоединить(RestЗапрос, Символы.ПС);
КонецФункции

#КонецОбласти

