///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Отправляет вопрос в поддержку.
// Вложения обращения:
//   - "Технологическая информация.txt";
//   - "Журнал регистрации.xml";
//   - "Снимок экрана.png" (опционально);
//   - Дополнительные файлы (опционально).
//
// Способы и порядок отправки в зависимости от наличия подсистем:
//  1. Через службу поддержки. Требуется подсистема: "ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки".
//  2. Через отправку письма. Требуется подсистема: "СтандартныеПодсистемы.РаботаСПочтовымиСообщениями".
//  3. Через сохранение файла.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - владелец.
//  ПараметрыОбращения - см. ОбращенияВТехническуюПоддержкуСлужебныйКлиент.ПараметрыОбращения
//
Процедура ОтправитьВопросВПоддержку(Форма, ПараметрыОбращения) Экспорт
	
	Если Не ПриложениеДляСнимкаЭкранаДоступно() Тогда
		ПродолжитьОтправкуВопросаВПоддержку(Неопределено, ПараметрыОбращения);
		Возврат;
	КонецЕсли;
	
	// Служба технической поддержки не поддерживает вложения формата "png" или "jpg".
	Если СообщенияВСлужбуТехническойПоддержкиДоступны() Тогда
		ПродолжитьОтправкуВопросаВПоддержку(Неопределено, ПараметрыОбращения);
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ГруппаТребуетсяПомощь") <> Неопределено Тогда
		Форма.Элементы.ГруппаТребуетсяПомощь.Скрыть();
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"ПродолжитьОтправкуВопросаВПоддержку",
		ЭтотОбъект,
		ПараметрыОбращения);
	
	ЗапроситьСозданиеСнимкаЭкрана(ОбработчикЗавершения);
	
КонецПроцедуры

// Скачивает файл с технической информацией для отправки в поддержку.
// Содержание zip-файла:
//   - "Технологическая информация.txt";
//   - "Журнал регистрации.xml";
//   - "Снимок экрана.png" (опционально);
//   - Дополнительные файлы (опционально).
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - владелец.
//  ПараметрыОбращения - см. ОбращенияВТехническуюПоддержкуСлужебныйКлиент.ПараметрыОбращения
//
Процедура СкачатьИнформациюДляОтправкиВПоддержку(Форма, ПараметрыОбращения) Экспорт
	
	Если Не ПриложениеДляСнимкаЭкранаДоступно() Тогда
		ПродолжитьСкачиваниеИнформацииДляОтправкиВПоддержку(Неопределено, ПараметрыОбращения);
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ГруппаТребуетсяПомощь") <> Неопределено Тогда
		Форма.Элементы.ГруппаТребуетсяПомощь.Скрыть();
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"ПродолжитьСкачиваниеИнформацииДляОтправкиВПоддержку",
		ЭтотОбъект,
		ПараметрыОбращения);
	
	ЗапроситьСозданиеСнимкаЭкрана(ОбработчикЗавершения);
	
КонецПроцедуры

// Конструктор параметров обращения.
//
// Возвращаемое значение:
//  Структура:
//    * ТехнологическаяИнформация - Строка - основная причина обращения. Содержимое будущего файла "Технологическая информация.txt".
//    * ОтборЖурналаРегистрации   - Структура - отбор журнала регистрации, соответствует отбору, который используется в
//                                              методе "ВыгрузитьЖурналРегистрации".
//    * Получатель                - см. ПолучательОбращенияВПоддержку. Используется только при отправке вопроса в поддержку.
//    * АдресПолучателя           - см. АдресПолучателяОбращенияВПоддержку. Используется только при отправке вопроса в поддержку.
//    * Тема                      - Строка - тема обращения. Используется только при отправке вопроса в поддержку.
//    * Сообщение                 - см. ТекстСообщенияВПоддержку. Используется только при отправке вопроса в поддержку.
//    * ДополнительныеФайлы       - Массив из см. ОбращенияВТехническуюПоддержкуСлужебныйКлиент.ДанныеДополнительногоФайла.
//
Функция ПараметрыОбращения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТехнологическаяИнформация", СтандартныеПодсистемыКлиент.ИнформацияДляПоддержки());
	Результат.Вставить("ОтборЖурналаРегистрации",   Новый Структура);
	Результат.Вставить("Получатель",                ПолучательОбращенияВПоддержку());
	Результат.Вставить("АдресПолучателя",           АдресПолучателяОбращенияВПоддержку());
	Результат.Вставить("Тема",                      "");
	Результат.Вставить("Сообщение",                 ТекстСообщенияВПоддержку());
	Результат.Вставить("ДополнительныеФайлы",       Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Конструктор данных дополнительного файла.
//
// Параметры:
//  АдресФайла - Строка - адрес файла во временном хранилище со значением типа "ДвоичныеДанные".
//  ПолноеИмяФайла - Строка - полное имя файла, включая формат. Например, "Технологическая информация.txt".
//
// Возвращаемое значение:
//  Структура:
//    * АдресФайла - Строка
//    * ПолноеИмяФайла - Строка
//
Функция ДанныеДополнительногоФайла(АдресФайла, ПолноеИмяФайла) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("АдресФайла", АдресФайла);
	Результат.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ЭлектроннаяПодпись

// Проверяет доступность подсистемы "Сообщения в службу технической поддержки".
// Подсистема доступна, если разблокирована работа с внешними ресурсами.
//
// Возвращаемое значение:
//  Булево - Истина, если доступна отправка сообщения в службу технической поддержки.
//
Функция СообщенияВСлужбуТехническойПоддержкиДоступны() Экспорт
	
	ПодсистемаСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		"ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки");
	
	РаботаСВнешнимиРесурсамиДоступна =
		ОбращенияВТехническуюПоддержкуСлужебныйВызовСервера.РаботаСВнешнимиРесурсамиДоступна();
	
	Возврат ПодсистемаСуществует И РаботаСВнешнимиРесурсамиДоступна;
	
КонецФункции

// Проверяет доступность приложения для снятия снимка экрана.
//
// Возвращаемое значение:
//  Булево - Истина, если приложение доступно, иначе Ложь.
//
Функция ПриложениеДляСнимкаЭкранаДоступно() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() И СредстваБуфераОбмена.ИспользованиеДоступно();
	
КонецФункции

// Запрашивает у пользователя подтверждение на снятие снимка экрана.// Если подтверждение получено, то запускает приложение для снимка экрана.
// После запуска приложения получает снимок экрана и передает его в указанный обработчик завершения.
//
// Параметры:
//  ОбработчикЗавершения - ОписаниеОповещения, Неопределено - обработчик завершения, который вызывается после сохранения
//                                                            снимка экрана. В Результате возвращается Структура, см. ОбращенияВТехническуюПоддержкуСлужебныйКлиент.ДанныеДополнительногоФайла.
//
Процедура ЗапроситьСозданиеСнимкаЭкрана(ОбработчикЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗапросаСоздатьСнимокЭкрана", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Рекомендуется создать снимок экрана. Необходимо выделить весь экран или область с текстом возникшей проблемы.'");
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Создать снимок экрана'"));
	Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Пропустить'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Формирование технической информации'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СнимокЭкрана

Процедура ПослеЗапросаСоздатьСнимокЭкрана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложениеДляСнимкаЭкрана(ДополнительныеПараметры.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, Неопределено);
	КонецЕсли
	
КонецПроцедуры

Процедура ЗапуститьПриложениеДляСнимкаЭкрана(ОбработчикЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.Оповещение = Новый ОписаниеОповещения(
		"ПослеЗапускаПриложенияДляСнимкаЭкрана",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму("explorer.exe ms-screenclip:", ПараметрыЗапускаПрограммы);
	
КонецПроцедуры

Процедура ПослеЗапускаПриложенияДляСнимкаЭкрана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ПриложениеЗапущено Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ОчиститьБуферОбмена();
	
	ПараметрыОбработкиБуфераОбмена = Новый Структура;
	ПараметрыОбработкиБуфераОбмена.Вставить("ТекущаяПопытка", 0);
	ПараметрыОбработкиБуфераОбмена.Вставить("МаксимальнаяПопытка", 3);
	
	СохраняемыеПараметры = Новый Структура;
	СохраняемыеПараметры.Вставить("ПараметрыОбработкиБуфераОбмена", ПараметрыОбработкиБуфераОбмена);
	СохраняемыеПараметры.Вставить("ОбработчикЗавершения", ДополнительныеПараметры.ОбработчикЗавершения);
	
	ИмяПараметра = "СтандартныеПодсистемы.ОбращенияВТехническуюПоддержку";
	ПараметрыПриложения.Вставить(ИмяПараметра, СохраняемыеПараметры);
	
	ПодключитьОбработчикОжидания("ПродолжитьСохранениеСнимкаЭкрана", 1, Истина);
	
КонецПроцедуры

Процедура ОчиститьБуферОбмена()
	
	ПомещаемыеДанные = Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.Текст, "");
	СредстваБуфераОбмена.ПоместитьДанныеАсинх(ПомещаемыеДанные);
	
КонецПроцедуры

Асинх Процедура СохранитьСнимокЭкрана() Экспорт
	
	ФорматДанных = СтандартныйФорматДанныхБуфераОбмена.Картинка;
	СнимокЭкрана = Неопределено;
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		Если Ждать СредстваБуфераОбмена.СодержитДанныеАсинх(ФорматДанных) Тогда
			СнимокЭкрана = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(ФорматДанных);
		КонецЕсли;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.ОбращенияВТехническуюПоддержку";
	СохраненныеПараметры = ПараметрыПриложения[ИмяПараметра];
	
	ПараметрыОбработкиБуфераОбмена = СохраненныеПараметры.ПараметрыОбработкиБуфераОбмена;
	
	Если СнимокЭкрана = Неопределено Тогда
		
		Если ПараметрыОбработкиБуфераОбмена.ТекущаяПопытка < ПараметрыОбработкиБуфераОбмена.МаксимальнаяПопытка Тогда
			// Повторная попытка получить снимок экрана из буфера обмена.
			ПодключитьОбработчикОжидания("ПродолжитьСохранениеСнимкаЭкрана", 1, Истина);
			ПараметрыОбработкиБуфераОбмена.ТекущаяПопытка = ПараметрыОбработкиБуфераОбмена.ТекущаяПопытка + 1;
		Иначе
			// Продолжить без снимка экрана.
			Если СохраненныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(СохраненныеПараметры.ОбработчикЗавершения);
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить снимок экрана.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	АдресФайла = ОбращенияВТехническуюПоддержкуСлужебныйВызовСервера.АдресСнимкаЭкрана(СнимокЭкрана);
	ДанныеСнимка = ДанныеДополнительногоФайла(АдресФайла, НСтр("ru = 'Снимок экрана.png'"));
	
	Если СохраненныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(СохраненныеПараметры.ОбработчикЗавершения, ДанныеСнимка);
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СкачиваниеИнформации

Процедура ПродолжитьСкачиваниеИнформацииДляОтправкиВПоддержку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.ДополнительныеФайлы.Добавить(Результат);
	КонецЕсли;
	
	АдресАрхива = ОбращенияВТехническуюПоддержкуСлужебныйВызовСервера.АдресАрхиваТехническойИнформации(
		ДополнительныеПараметры);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"ПослеСкачиванияИнформацииДляОтправкиВПоддержку",
		ЭтотОбъект,
		Новый Структура("АдресАрхива", АдресАрхива));
	
	ФайловаяСистемаКлиент.СохранитьФайл(ОбработчикЗавершения, АдресАрхива, "service_info.zip");
	
КонецПроцедуры

Процедура ПослеСкачиванияИнформацииДляОтправкиВПоддержку(СохраненныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СохраненныеФайлы) Тогда
		ФайловаяСистемаКлиент.ОткрытьПроводник(СохраненныеФайлы[0].ПолноеИмя);
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресАрхива);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаВопроса

Процедура ПродолжитьОтправкуВопросаВПоддержку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.ДополнительныеФайлы.Добавить(Результат);
	КонецЕсли;
	
	Если СообщенияВСлужбуТехническойПоддержкиДоступны() Тогда
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СообщенияВСлужбуТехническойПоддержкиКлиент");
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"СообщенияВСлужбуТехническойПоддержкиКлиентСервер");
		
		ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
		ДанныеСообщения.Получатель = ДополнительныеПараметры.Получатель;
		ДанныеСообщения.Тема = ДополнительныеПараметры.Тема;
		ДанныеСообщения.Сообщение = ДополнительныеПараметры.Сообщение;
		
		ВложенныеФайлыДляСлужбыПоддержки = ВложенныеФайлыВПоддержку(ДополнительныеПараметры, "Данные");
		
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"ПослеОтправкиВопросаВПоддержку",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		МодульСообщенияВСлужбуТехническойПоддержкиКлиент.ОтправитьСообщение(
			ДанныеСообщения,
			ВложенныеФайлыДляСлужбыПоддержки,
			,
			ОбработчикЗавершения);
		
		Возврат;
		
	КонецЕсли;
	
	// Попытка отправить при помощи письма.
	ПослеОтправкиВопросаВПоддержку(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеОтправкиВопросаВПоддержку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		
		ИмяСобытия = НСтр("ru = 'Работа с почтовыми сообщениями.Отправка вопроса в поддержку'");
		
		КомментарийСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			Результат.КодОшибки,
			Результат.СообщениеОбОшибке);
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			ИмяСобытия,
			"Ошибка",
			КомментарийСобытия,
			,
			Истина);
		
	ИначеЕсли Результат <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСПочтовымиСообщениямиДоступна() Тогда
		
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"РаботаСПочтовымиСообщениямиКлиент");
		
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"ПослеПроверкиУчетнойЗаписиПочты",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОбработчикЗавершения);
		Возврат;
		
	КонецЕсли;
	
	// Попытка сохранить файл.
	ПослеПроверкиУчетнойЗаписиПочты(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеПроверкиУчетнойЗаписиПочты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"РаботаСПочтовымиСообщениямиКлиент");
		
		ПараметрыОтправкиПисьма = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправкиПисьма.Получатель = ДополнительныеПараметры.АдресПолучателя;
		ПараметрыОтправкиПисьма.Тема = ДополнительныеПараметры.Тема;
		ПараметрыОтправкиПисьма.Текст = ШаблонТекстаСообщенияВПоддержку(ДополнительныеПараметры.Сообщение);
		
		Вложения = ВложенныеФайлыВПоддержку(ДополнительныеПараметры, "АдресВоВременномХранилище");
		ПараметрыОтправкиПисьма.Вложения = Вложения;
		
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"ПослеОтправкиПисьмаВПоддержку",
			ЭтотОбъект,
			ПараметрыОтправкиПисьма);
		
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправкиПисьма, ОбработчикЗавершения);
		Возврат;
		
	КонецЕсли;
	
	// Попытка сохранить файл.
	ПродолжитьСкачиваниеИнформацииДляОтправкиВПоддержку(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеОтправкиПисьмаВПоддержку(Результат, ДополнительныеПараметры) Экспорт
	
	Для Каждого Вложение Из ДополнительныеПараметры.Вложения Цикл
		УдалитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучательОбращенияВПоддержку()
	
	Возврат "v8";
	
КонецФункции

Функция АдресПолучателяОбращенияВПоддержку()
	
	Возврат "v8@1c.ru";
	
КонецФункции

Функция ТекстСообщенияВПоддержку()
	
	Возврат НСтр("ru = '<Опишите возникшую проблему и приложите скриншоты ошибки.>'");
	
КонецФункции

Функция ШаблонТекстаСообщенияВПоддержку(ТекстОбращения)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Здравствуйте.
			|
			|%1
			|
			|<Укажите ФИО>.'"),
		ТекстОбращения);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет доступность подсистемы "Работа с почтовыми сообщениями".
//
// Возвращаемое значение:
//  Булево - Истина, если доступна работа с почтовыми сообщениями.
//
Функция РаботаСПочтовымиСообщениямиДоступна()
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		"СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
КонецФункции

Функция ВложенныеФайлыВПоддержку(ПараметрыОбращения, КлючАдресаФайлов)
	
	АдресаФайлов = ОбращенияВТехническуюПоддержкуСлужебныйВызовСервера.АдресаФайловТехническойИнформации(
		ПараметрыОбращения);
	
	Результат = Новый Массив;
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить(КлючАдресаФайлов, АдресаФайлов.ТехнологическаяИнформация);
	ДанныеФайла.Вставить("Представление", НСтр("ru = 'Технологическая информация.txt'"));
	ДанныеФайла.Вставить("ВидДанных", "Адрес");
	Результат.Добавить(ДанныеФайла);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить(КлючАдресаФайлов, АдресаФайлов.ЖурналРегистрации);
	ДанныеФайла.Вставить("Представление", НСтр("ru = 'Журнал регистрации.xml'"));
	ДанныеФайла.Вставить("ВидДанных", "Адрес");
	Результат.Добавить(ДанныеФайла);
	
	Для Каждого ДополнительныйФайл Из ПараметрыОбращения.ДополнительныеФайлы Цикл
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить(КлючАдресаФайлов, ДополнительныйФайл.АдресФайла);
		ДанныеФайла.Вставить("Представление", ДополнительныйФайл.ПолноеИмяФайла);
		ДанныеФайла.Вставить("ВидДанных", "Адрес");
		Результат.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
