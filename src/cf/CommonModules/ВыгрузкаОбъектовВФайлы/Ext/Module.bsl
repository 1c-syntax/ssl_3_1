///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выгружает объекты в требуемом формате и записывает в файлы.
//
// Параметры:
//  КомандыВыгрузки  - Структура
//                   - Массив - команда или несколько команд выгрузки,
//                            см. УправлениеПечатью.КомандыПечатиФормы.
//  СписокОбъектов - Массив из СправочникСсылка, ДокументСсылка - ссылки на сохраняемые объекты.
//  НастройкиСохранения - см. УправлениеПечатью.НастройкиСохранения.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ИмяФайла - Строка - имя файла;
//   * ДвоичныеДанные - ДвоичныеДанные - файл печатной формы.
//
Функция СохранитьПоФорматуВФайл(КомандыВыгрузки, СписокОбъектов, НастройкиСохранения) Экспорт
	
	МассивТипов = Новый Массив; // Массив Из ОписаниеТипов
	
	Для Каждого ОбъектВыгрузки Из СписокОбъектов Цикл
		
		ТекущийТип = ТипЗнч(ОбъектВыгрузки);
		Если МассивТипов.Найти(ТекущийТип) = Неопределено Тогда
			
			 МассивТипов.Добавить(ТекущийТип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДвоичныеДанные", Новый ОписаниеТипов("ДвоичныеДанные"));
	Результат.Колонки.Добавить("ОбъектВыгрузки", Новый ОписаниеТипов(МассивТипов));
	
	СписокКоманд = КомандыВыгрузки;
	Если ТипЗнч(КомандыВыгрузки) <> Тип("Массив") Тогда
		СписокКоманд = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КомандыВыгрузки);
	КонецЕсли;
	
	Для Каждого КомандаВыгрузки Из СписокКоманд Цикл
		
		//@skip-check query-in-loop - запрос используется внутри обработки исключения для заранее неизвестных данных.
		ВыполнитьВыгрузкуВФайл(КомандаВыгрузки, НастройкиСохранения, СписокОбъектов, Результат);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат) И НастройкиСохранения.УпаковатьВАрхив Тогда
		
		ДвоичныеДанные = УправлениеПечатью.УпаковатьВАрхив(Результат);
		Результат.Очистить();
		Файл = Результат.Добавить();
		ИмяФайла = УправлениеПечатью.ИмяФайла(ПолучитьИмяВременногоФайла("zip"));
		Файл.ИмяФайла = ИмяФайла;
		Файл.ДвоичныеДанные = ДвоичныеДанные;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	СписокОбъектов = Новый Массив;
	Для Каждого Источник Из Источники.Строки Цикл
		СписокОбъектов.Добавить(Источник.Метаданные);
	КонецЦикла;
	
	ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(Источники.Строки[0].Метаданные);
	
	Если Источники.Строки.Количество() = 1
	   И ЭтоЖурналДокументов Тогда
		СписокОбъектов = Неопределено;
	КонецЕсли;
	
	ИмяФормы = НастройкиФормы.ИмяФормы;
	КомандыВыгрузки = КомандыВыгрузкиФормы(ИмяФормы, СписокОбъектов);
	
	КлючиПараметровОбработчика = "Обработчик, МенеджерПечати, ЗаголовокФормы, ФорматСохранения,
		|ВыполнятьВФоновомЗадании, ИдентификаторМакета, ТипИсточника";
	
	Для Каждого КомандаВыгрузки Из КомандыВыгрузки Цикл
		
		Если КомандаВыгрузки.Отключена Тогда
			Продолжить;
		КонецЕсли;
		
		Команда = Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаВыгрузки,, "Обработчик");
		Команда.Вид = "ВыгрузкаДанныхОбъекта";
		Команда.МножественныйВыбор = Истина;
		Команда.ВидимостьВФормах = КомандаВыгрузки.СписокФорм;
		Команда.РежимЗаписи = "ЗаписыватьТолькоНовые";
		Если КомандаВыгрузки.ТипыОбъектовПечати.Количество() > 0 Тогда
			Команда.ТипПараметра = Новый ОписаниеТипов(КомандаВыгрузки.ТипыОбъектовПечати);
		КонецЕсли;
		Команда.Обработчик = "ВыгрузкаОбъектовВФайлыСлужебныйКлиент.ОбработчикКомандыВыполнитьВыгрузку";
		Команда.ДополнительныеПараметры = Новый Структура(КлючиПараметровОбработчика);
		ЗаполнитьЗначенияСвойств(Команда.ДополнительныеПараметры, КомандаВыгрузки);
		
		МассивФорматовСохранения = Новый Массив;
		Если ЗначениеЗаполнено(КомандаВыгрузки.ФорматСохранения) Тогда
			МассивФорматовСохранения.Добавить(КомандаВыгрузки.ФорматСохранения);
		КонецЕсли;
		
		Команда.ДополнительныеПараметры.ФорматСохранения = МассивФорматовСохранения;
		Если Команда.Порядок = 0 Тогда
			Команда.Порядок = 50;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КомандыВыгрузки.Количество() > 0
	   И НЕ ЭтоЖурналДокументов
	   И Источники.Строки.Количество() = 1
	   И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати) Тогда
		
		ОбъектМетаданных = Источники.Строки[0].Метаданные;
		ТипПараметра = Новый Массив; // Массив Из Тип
		ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
		ТипПараметра.Добавить(ТипОбъекта);
		
		Команда = Команды.Добавить();
		Команда.Вид = "ВыгрузкаДанныхОбъекта";
		Команда.Представление = Нстр("ru = 'Перейти к макетам файлов выгрузки'");
		Команда.МножественныйВыбор = Ложь;
		Команда.Обработчик = "ВыгрузкаОбъектовВФайлыСлужебныйКлиент.ОткрытьФормуМакетовВыгрузки";
		Команда.ТипПараметра = Новый ОписаниеТипов(ТипПараметра);
		Команда.Важность = "СмТакже";
		ДополнительныеПараметры = Команда.ДополнительныеПараметры;
		ДополнительныеПараметры.Вставить("Владелец", ОбъектМетаданных.ПолноеИмя());
		
		Команда.Порядок = 50;
		
	КонецЕсли;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ВыгрузкаДанныхОбъекта";
	Вид.ИмяПодменю = "ПодменюВыгрузкаДанныхОбъекта";
	Вид.Заголовок = НСтр("ru = 'Выгрузить в файл'");
	Вид.Порядок = 40;
	Вид.Картинка = БиблиотекаКартинок.СохранитьФайлКак;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
КонецПроцедуры

// Возвращает список команд выгрузки для указанной формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//        - Строка - форма или полное имя формы, для которой необходимо получить список
//                   команд выгрузки.
//  СписокОбъектов - Массив - коллекция объектов метаданных, команды печати которых необходимо использовать при составлении
//                            списка команд печати для указанной формы.
// Возвращаемое значение:
//   см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Функция КомандыВыгрузкиФормы(Форма, СписокОбъектов = Неопределено) Экспорт
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		СсылкаОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	КонецЕсли;
	
	КомандыВыгрузки = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	
	Если СписокОбъектов = Неопределено
	   И ОбъектМетаданных = Неопределено Тогда
		Возврат КомандыВыгрузки;
	КонецЕсли;
	
	Если СписокОбъектов <> Неопределено Тогда
		
		ЗаполнитьКомандыВыгрузкиДляСпискаОбъектов(СписокОбъектов, КомандыВыгрузки);
		
	Иначе
		
		ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
		Если ЭтоЖурналДокументов Тогда
			
			ЗаполнитьКомандыВыгрузкиДляСпискаОбъектов(ОбъектМетаданных.РегистрируемыеДокументы, КомандыВыгрузки);
			
		Иначе
			
			ДобавляемыеКомандыВыгрузки = КомандыВыгрузкиОбъекта(ОбъектМетаданных);
			Для Каждого КомандаВыгрузки Из ДобавляемыеКомандыВыгрузки Цикл
				ЗаполнитьЗначенияСвойств(КомандыВыгрузки.Добавить(), КомандаВыгрузки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КомандаВыгрузки Из КомандыВыгрузки Цикл
		
		Если КомандаВыгрузки.Порядок = 0 Тогда
			КомандаВыгрузки.Порядок = 50;
		КонецЕсли;
		
	КонецЦикла;
	
	КомандыВыгрузки.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество() - 1];
	
	// фильтр по именам форм
	КоличествоКоманд = КомандыВыгрузки.Количество();
	Для НомерСтроки = 1 По КоличествоКоманд Цикл
		
		ИндексСтроки = КоличествоКоманд - НомерСтроки;
		КомандаВыгрузки = КомандыВыгрузки[ИндексСтроки];
		СписокФорм = СтрРазделить(КомандаВыгрузки.СписокФорм, ",", Ложь);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыВыгрузки.Удалить(КомандаВыгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатью.ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыВыгрузки, Форма);
	
	Возврат КомандыВыгрузки;
	
КонецФункции

// Формирует структуру выгрузки объекта в соответствии с макетом выгрузки
// 
// Параметры:
//  Макет - ТабличныйДокумент - макет выгрузки
//  ФорматСохранения - ПеречислениеСсылка.ФорматыВыгрузкиОбъектов
//  МассивОбъектов - Массив из СправочникСсылка, ДокументСсылка - ссылки на сохраняемые объекты
//  КодЯзыка - Строка - код языка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ЛюбаяСсылка
//  * Значение - см. НоваяСтруктураДанных
//
Функция СформироватьСтруктуруДляВыгрузки(Макет, ФорматСохранения, МассивОбъектов, КодЯзыка) Экспорт
	
	Если ТипЗнч(ФорматСохранения) <> Тип("ПеречислениеСсылка.ФорматыВыгрузкиОбъектов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	ПоляМакета = УправлениеПечатью.ПоляМакета(Макет);
	ДанныеПечати = УправлениеПечатью.ДанныеПечати(МассивОбъектов, ПоляМакета, КодЯзыка);
	НастройкиФорматаПолей = ДанныеПечати["НастройкиФорматаПолей"];
	ТипыПолейПараметров = ДанныеПечати["ТипыПолейПараметров"];
	ОбластиМакета = УправлениеПечатью.ОбластиМакета(Макет, ДанныеПечати);
	ОбластиТаблиц = ОбластиМакета.ОбластиТаблиц;
	
	ТаблицыМакета = ТаблицыМакета(Макет, ОбластиТаблиц);
	ТаблицаОбластей = ТаблицаОбластей(Макет); 
	ДополнитьТаблицуОбластейДаннымиТаблицы(Макет, ТаблицаОбластей, ТаблицыМакета);
	
	ДопДанные = Новый Структура;
	ДопДанные.Вставить("Макет", Макет);
	ДопДанные.Вставить("НастройкиФорматаПолей", НастройкиФорматаПолей);
	ДопДанные.Вставить("ТипыПолейПараметров", ТипыПолейПараметров);
	ДопДанные.Вставить("ТаблицаОбластей", ТаблицаОбластей);
	ДопДанные.Вставить("ТаблицыМакета", ТаблицыМакета);
	ДопДанные.Вставить("КодЯзыка", КодЯзыка);
	ДопДанные.Вставить("ФорматСохранения", ФорматСохранения);
	
	Если ФорматСохранения = Перечисления.ФорматыВыгрузкиОбъектов.DBF Тогда
		
		Результат = СформироватьДанныеВыгрузкиДляDBF(
			МассивОбъектов,
			ДанныеПечати,
			ДопДанные);
		
	Иначе
		
		Результат = СформироватьДанныеВыгрузки(
			МассивОбъектов,
			ДанныеПечати,
			ДопДанные);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Макет - ТабличныйДокумент
//  ОбластиТаблиц -  Соответствие из КлючИЗначение:
//   * Ключ - Строка - адрес таблицы
//   * Значение - Строка - имя таблицы
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Имя - Строка
// * Верх - Число 
// * Низ - Число
// * ПараметрРасшифровки - Строка
// 
Функция ТаблицыМакета(Макет, ОбластиТаблиц) Экспорт
	
	ТаблицаМакета = Новый ТаблицаЗначений;
	ТаблицаМакета.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаМакета.Колонки.Добавить("Верх", Новый ОписаниеТипов("Число"));
	ТаблицаМакета.Колонки.Добавить("Низ", Новый ОписаниеТипов("Число"));
	ТаблицаМакета.Колонки.Добавить("ПараметрРасшифровки", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекСоответствие Из ОбластиТаблиц Цикл
		
		ИдентификаторОбласти = ТекСоответствие.Ключ;
		ИмяТаблицы = ТекСоответствие.Значение;
		
		МассивАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторОбласти, ":");
		НомерСтрокиВерх = Число(СтрЗаменить(МассивАдреса[0], "R", ""));
		НомерСтрокиНиз = Число(СтрЗаменить(МассивАдреса[1], "R", ""));
		
		НоваяСтрока = ТаблицаМакета.Добавить();
		НоваяСтрока.Имя = ИмяТаблицы;
		НоваяСтрока.Верх = НомерСтрокиВерх;
		НоваяСтрока.Низ = НомерСтрокиНиз;
		
		ОбластьЯчейки = Макет.Область("R" + XMLСтрока(НомерСтрокиВерх) + "C2:" + "R" + XMLСтрока(НомерСтрокиВерх) + "C2");
		НоваяСтрока.ПараметрРасшифровки = ОбластьЯчейки.ПараметрРасшифровки;
		
	КонецЦикла;
	ТаблицаМакета.Сортировать("Верх, Низ");
	
	Возврат ТаблицаМакета;

КонецФункции

// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ФорматыВыгрузкиОбъектов - форматы выгрузки без использования табличного документа
//
Функция ФорматыВыгрузкиБезИспользованияТабличногоДокумента() Экспорт
	
	МассивФорматов = Новый Массив; // Массив из ПеречислениеСсылка.ФорматыВыгрузкиОбъектов
	МассивФорматов.Добавить(Перечисления.ФорматыВыгрузкиОбъектов.DBF);
	МассивФорматов.Добавить(Перечисления.ФорматыВыгрузкиОбъектов.JSON);
	МассивФорматов.Добавить(Перечисления.ФорматыВыгрузкиОбъектов.XML);
	
	Возврат МассивФорматов;
	
КонецФункции

// Параметры:
//  СтруктураСДанными - Структура
//  ПолноеИмяФайла - Строка - полное имя файла
//  ПредставлениеВыгрузки - Строка - представление выгрузки
//
Процедура ВыполнитьВыгрузкуВXML(СтруктураСДанными, ПолноеИмяФайла, ПредставлениеВыгрузки) Экспорт
	
	ИмяТела = НСтр("ru = 'Документ'");
	ЗаписьXML = Новый ЗаписьXML; 
	Если НЕ ПустаяСтрока(ПолноеИмяФайла) Тогда
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8"); // Открываем файл для записи, указываем кодировку
	Иначе
		ЗаписьXML.УстановитьСтроку();
	КонецЕсли;
	ЗаписьXML.ЗаписатьОбъявлениеXML(); // Записываем объявление XML
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТела);
	
	КоличествоДанных = СтруктураСДанными.КоличествоДанных;
	
	Для НомерДанных = 1 По КоличествоДанных Цикл
		
		НомерДанныхСтрокой = Формат(НомерДанных, "ЧДЦ=0; ЧГ=");
		Данные = СтруктураСДанными["Данные_" + НомерДанныхСтрокой];
		ОбработатьДанныеОбластьXML(ЗаписьXML, Данные);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ПредставлениеВыгрузки = ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Параметры:
//  СтруктураСДанными - Структура
//  ПолноеИмяФайла - Строка - полное имя файла
//  ПредставлениеВыгрузки - Строка - представление выгрузки
//
Процедура ВыполнитьВыгрузкуВJSON(СтруктураСДанными, ПолноеИмяФайла, ПредставлениеВыгрузки) Экспорт
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
		
	ЗаписьJSON = Новый ЗаписьJSON;
	Если НЕ ПустаяСтрока(ПолноеИмяФайла) Тогда
		ЗаписьJSON.ОткрытьФайл(ПолноеИмяФайла,,, ПараметрыЗаписиJSON);
	Иначе
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	КонецЕсли;
	ДанныеВJSON = Новый Структура;
	ОбработатьДанныеОбластьJSON(СтруктураСДанными, ДанныеВJSON);
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеВJSON);
	ПредставлениеВыгрузки = ЗаписьJSON.Закрыть();
	
КонецПроцедуры

// Соответствие формата выгрузки формату сохранения.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ФорматыВыгрузкиОбъектов
//  * Значение - Строка
// 
Функция СоответствиеФорматаВыгрузкиФорматуСохранения() Экспорт
	
	СоответствиеФорматРасширение = Новый Соответствие;
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.DBF, "DBF");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.JSON, "json");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.XML, "xml");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.ANSITXT, "txt");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.TXT, "txt");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.HTML5, "html");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.XLS, "xls");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.XLSX, "xlsx");
	СоответствиеФорматРасширение.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.MXL, "mxl");
	
	Возврат СоответствиеФорматРасширение;
	
КонецФункции

// Параметры:
//  ОбъектМетаданных - СправочникСсылка, ДокументСсылка - ссылки на сохраняемые объекты
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. УправлениеПечатью.КомандыПечатиФормы
// 
Функция КомандыВыгрузкиОбъектаДоступныеДляВложений(ОбъектМетаданных) Экспорт
	
	ИсточникиКомандПечати = УправлениеПечатью.ИсточникиКомандПечати();
	Если ИсточникиКомандПечати.Найти(ОбъектМетаданных) <> Неопределено Тогда
		
		КомандыВыгрузки = КомандыВыгрузкиОбъекта(ОбъектМетаданных);
		
	Иначе
		
		КомандыВыгрузки = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
		
	КонецЕсли;
	
	Возврат КомандыВыгрузки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормированияСтруктурыДляВыгрузки

// Параметры:
//  ОбъектМетаданных - СправочникСсылка, ДокументСсылка - ссылки на сохраняемые объекты
// 
// Возвращаемое значение:
//  см. УправлениеПечатью.КомандыПечатиФормы
// 
Функция КомандыВыгрузкиОбъекта(ОбъектМетаданных)
	
	КомандыВыгрузки = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
		Возврат КомандыВыгрузки;
	КонецЕсли;
	
	Источники = ПодключаемыеКоманды.ДеревоИсточниковКоманд();
	НастройкиAPI = ПодключаемыеКоманды.НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	ПодключенныеОтчетыИОбработки = ПодключаемыеКоманды.ТаблицаПодключаемыхОбъектов(НастройкиAPI);
	Источник = ПодключаемыеКоманды.ЗарегистрироватьИсточник(
		ОбъектМетаданных,
		Источники,
		ПодключенныеОтчетыИОбработки,
		НастройкиAPI);
	
	Если Источник.Менеджер = Неопределено Тогда
		Возврат КомандыВыгрузки;
	КонецЕсли;
	
	ДобавитьКомандыВыгрузкиОбъекта(КомандыВыгрузки, ОбъектМетаданных);
	
	КомандыВыгрузки.Сортировать("Порядок Возр, Представление Возр");
	УправлениеПечатью.ИсправитьПризнакПроверкаПроведенияПередПечатью(КомандыВыгрузки, ОбъектМетаданных);
	УправлениеПечатью.ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыВыгрузки);
	
	КомандыВыгрузки.Индексы.Добавить("УникальныйИдентификатор");
	
	Возврат КомандыВыгрузки;
	
КонецФункции

// Формирует таблицу значений с описанием команд выгрузки
// 
// Параметры:
//  КомандыВыгрузки - ТаблицаЗначений:
// * Идентификатор - Строка
// * Представление - Строка 
// * МенеджерПечати - Строка
// * ТипыОбъектовПечати - Массив из ЛюбаяСсылка
// * Обработчик - Строка 
// * Порядок - Число 
// * Картинка - Картинка 
// * СписокФорм - Строка 
// * МестоРазмещения - Строка
// * ЗаголовокФормы - Строка 
// * ФункциональныеОпции - Строка 
// * УсловияВидимости - Массив из Структура:
//     ** ВидСравнения - ВидСравненияКомпоновкиДанных
//     ** Значение - ЛюбаяСсылка
//     ** Реквизит - Строка 
// * ПроверкаПроведенияПередПечатью - Булево
// * СразуНаПринтер - Булево 
// * ФорматСохранения - ПеречислениеСсылка.ФорматыВыгрузкиОбъектов
// * ПереопределитьПользовательскиеНастройкиКоличества - Булево
// * ДополнитьКомплектВнешнимиПечатнымиФормами - Булево 
// * ФиксированныйКомплект - Булево 
// * ДополнительныеПараметры - Структура 
// * НеВыполнятьЗаписьВФорме - Булево 
// * ТребуетсяРасширениеРаботыСФайлами - Булево
// * СкрытаФункциональнымиОпциями - Булево 
// * УникальныйИдентификатор - Строка 
// * Отключена - Булево 
// * ИмяКомандыНаФорме - Строка
// * УсловияВидимостиПоТипамОбъектов - Соответствие из КлючИЗначение:
//     ** Ключ - ОписаниеТипов - тип объекта
//     ** Значение - Структура 
// * ВыполнятьВФоновомЗадании - Булево
// * ИдентификаторМакета - Строка
// * ТипИсточника - Тип 
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных
//
Процедура ДобавитьКомандыВыгрузкиОбъекта(КомандыВыгрузки, ОбъектМетаданных)
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных, Ложь);
	Если Владелец = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КомандыВыгрузки.Колонки.Найти("ИдентификаторМакета") = Неопределено Тогда
		КомандыВыгрузки.Колонки.Добавить("ИдентификаторМакета", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если КомандыВыгрузки.Колонки.Найти("ТипИсточника") = Неопределено Тогда
		КомандыВыгрузки.Колонки.Добавить("ТипИсточника", Новый ОписаниеТипов("Тип"));
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МакетыПечатныхФорм.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(МакетыПечатныхФормИсточникиДанных.ИсточникДанных) = ТИП(Справочник.ИдентификаторыОбъектовМетаданных)
	|			ТОГДА ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(МакетыПечатныхФормИсточникиДанных.ИсточникДанных КАК Справочник.ИдентификаторыОбъектовМетаданных).ЗначениеПустойСсылки)
	|		КОГДА ТИПЗНАЧЕНИЯ(МакетыПечатныхФормИсточникиДанных.ИсточникДанных) = ТИП(Справочник.ИдентификаторыОбъектовРасширений)
	|			ТОГДА ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(МакетыПечатныхФормИсточникиДанных.ИсточникДанных КАК Справочник.ИдентификаторыОбъектовРасширений).ЗначениеПустойСсылки)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипИсточника,
	|	МакетыПечатныхФорм.Представление КАК Представление,
	|	МакетыПечатныхФорм.УсловиеВидимости КАК УсловияВидимости,
	|	МакетыПечатныхФорм.Ссылка КАК Ссылка,
	|	МакетыПечатныхФорм.ФорматСохраненияОбъекта КАК ФорматСохранения
	|ИЗ
	|	Справочник.МакетыПечатныхФорм.ИсточникиДанных КАК МакетыПечатныхФормИсточникиДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм
	|		ПО МакетыПечатныхФормИсточникиДанных.Ссылка = МакетыПечатныхФорм.Ссылка
	|ГДЕ
	|	МакетыПечатныхФормИсточникиДанных.ИсточникДанных = &Владелец
	|	И МакетыПечатныхФорм.Используется
	|	И МакетыПечатныхФорм.МакетДляВыгрузкиОбъекта
	|	И НЕ МакетыПечатныхФорм.ПометкаУдаления
	|	И МакетыПечатныхФорм.ФорматСохраненияОбъекта <> ЗНАЧЕНИЕ(Перечисление.ФорматыВыгрузкиОбъектов.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КлючиПараметровОбработчика = "ИдентификаторМакета,ТипИсточника,ФорматСохранения";
	
	Пока Выборка.Следующий() Цикл
		
		КомандаВыгрузки = КомандыВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(КомандаВыгрузки, Выборка);
		КомандаВыгрузки.Идентификатор = "ПФ_" + Строка(КомандаВыгрузки.Идентификатор);
		КомандаВыгрузки.МенеджерПечати = "УправлениеПечатью";
		КомандаВыгрузки.ИдентификаторМакета = Строка(Выборка.Идентификатор);
		КомандаВыгрузки.УникальныйИдентификатор = Строка(Выборка.Идентификатор);
		КомандаВыгрузки.ВыполнятьВФоновомЗадании = Ложь;
		
		КомандаВыгрузки.ДополнительныеПараметры = Новый Структура(КлючиПараметровОбработчика);
		КомандаВыгрузки.ДополнительныеПараметры.ИдентификаторМакета = Строка(Выборка.Идентификатор);
		КомандаВыгрузки.ДополнительныеПараметры.ТипИсточника = Выборка.ТипИсточника;
		КомандаВыгрузки.ДополнительныеПараметры.ФорматСохранения = Выборка.ФорматСохранения;
		
		УсловияВидимостиХранилище = Выборка.УсловияВидимости; // ХранилищеЗначения
		УсловияВидимости = УсловияВидимостиХранилище.Получить();
		
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			
			Для Каждого Условие Из УсловияВидимости Цикл
				
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
					КомандаВыгрузки,
					Условие.Реквизит,
					Условие.Значение,
					Условие.ВидСравнения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДанныеДляВыгрузки(Знач ИмяМенеджераПечати, ТаблицаОбъектовПоМакетам, Знач КодЯзыка = Неопределено)
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	КоллекцияПечатныхФорм.Колонки.Добавить(
		"ФорматСохранения",
		Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыВыгрузкиОбъектов"));
	КоллекцияПечатныхФорм.Колонки.Добавить("СтруктураВыгрузки");
	
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		ПараметрыВывода.КодЯзыка = КодЯзыка;
	КонецЕсли;
	
	ИменаМакетов = ТаблицаОбъектовПоМакетам.ВыгрузитьКолонку("ИмяМакета");
	ДанныеМакетов = Справочники.МакетыПечатныхФорм.ДанныеМакетов(ИменаМакетов);
	МассивФорматовБезИспользованияТД = ФорматыВыгрузкиБезИспользованияТабличногоДокумента();
	
	ОбъектыВыгрузки = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектовПоМакетам Цикл
		
		ИмяМакета = СтрокаТаблицы.ИмяМакета;
		МассивОбъектов = СтрокаТаблицы.МассивОбъектов;
		
		ФорматСохранения = ДанныеМакетов[ИмяМакета].ФорматСохраненияОбъекта;
		ДопустимыеТипыОбъектовВыгрузки = ДанныеМакетов[ИмяМакета].ТипыИсточников;
		ПредставлениеМакета = ДанныеМакетов[ИмяМакета].Представление;
		
		Идентификатор = ИмяМакета;
		
		ОбъектыСоответствующиеМакетуВыгрузки = ПроверкаСоответствияОбъектовМакетуВыгрузки(
			МассивОбъектов,
			ДопустимыеТипыОбъектовВыгрузки);
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		ВыгрузкаБезИспользованияТД = (МассивФорматовБезИспользованияТД.Найти(ФорматСохранения) <> Неопределено);
		
		ТипФорматСохранения = Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыВыгрузкиОбъектов");
		ВременнаяКоллекцияДляОднойПечатнойФормы.Колонки.Добавить("ФорматСохранения", ТипФорматСохранения);
		ВременнаяКоллекцияДляОднойПечатнойФормы.Колонки.Добавить("СтруктураВыгрузки");
		
		Если ОбъектыСоответствующиеМакетуВыгрузки <> Неопределено Тогда
			
			Если ВыгрузкаБезИспользованияТД Тогда
				
				СлужебныеПараметры = Новый Структура;
				СлужебныеПараметры.Вставить("ПараметрыВывода", ПараметрыВывода);
				СлужебныеПараметры.Вставить("ФорматСохранения", ФорматСохранения);
				
				// @skip-check query-in-loop - Малый цикл
				НачатьПодготовкуКВыгрузке(
					ОбъектыСоответствующиеМакетуВыгрузки,
					ВременнаяКоллекцияДляОднойПечатнойФормы,
					СлужебныеПараметры);
			Иначе
				
				ПараметрыПечати = Новый Структура;
				// @skip-check query-in-loop - Малый цикл
				УправлениеПечатью.Печать(
					ОбъектыСоответствующиеМакетуВыгрузки,
					ПараметрыПечати,
					ВременнаяКоллекцияДляОднойПечатнойФормы,
					ОбъектыВыгрузки,
					ПараметрыВывода);
					
			КонецЕсли;
			
		КонецЕсли;
		
		// обновление коллекции
		Отказ = ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 0;
		ОбновитьКоллекцию(
			КоллекцияПечатныхФорм,
			ВременнаяКоллекцияДляОднойПечатнойФормы,
			ИмяМакета,
			ФорматСохранения,
			Отказ);
		
		// Вызов исключения при возникновении ошибки.
		Если Отказ Тогда
			
			ШаблонСообщения = НСтр("ru = 'Не удалось выполнить выгрузку по шаблону ""%1"" (""%2""). Обратитесь к администратору.'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ПредставлениеМакета,
				ИмяМакета);
			ВызватьИсключение ТекстСообщенияОбОшибке;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	Результат.Вставить("ОбъектыВыгрузки", ОбъектыВыгрузки);
	Результат.Вставить("ПараметрыВывода", ПараметрыВывода);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаСоответствияОбъектовМакетуВыгрузки(МассивОбъектов, ДопустимыеТипыОбъектовВыгрузки)
	
	// Проверка соответствия выгружаемых объектов выбранному макету выгрузки.
	ОбъектыСоответствующиеМакетуВыгрузки = МассивОбъектов;
	Если ДопустимыеТипыОбъектовВыгрузки <> Неопределено И ДопустимыеТипыОбъектовВыгрузки.Количество() > 0 Тогда
		
		Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
			
			ОбъектыСоответствующиеМакетуВыгрузки = Новый Массив;
			Для Каждого Объект Из МассивОбъектов Цикл
				
				Если ДопустимыеТипыОбъектовВыгрузки.Найти(ТипЗнч(Объект)) = Неопределено Тогда
					СообщитьВыгрузкаНедоступна(Объект);
				Иначе
					ОбъектыСоответствующиеМакетуВыгрузки.Добавить(Объект);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ОбъектыСоответствующиеМакетуВыгрузки.Количество() = 0 Тогда
				ОбъектыСоответствующиеМакетуВыгрузки = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектыСоответствующиеМакетуВыгрузки;
	
КонецФункции

Процедура ОбновитьКоллекцию(КоллекцияПечатныхФорм, ВременнаяКоллекция, ИмяМакета, ФорматСохранения, Отказ)
	
	Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекция Цикл
		
		Если НЕ ВременнаяПечатнаяФорма.ОфисныеДокументы = Неопределено Тогда
			ВременнаяПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		КонецЕсли;
		
		Если Не УправлениеПечатью.МакетСуществует(ВременнаяПечатнаяФорма.ПолныйПутьКМакету) Тогда
			ВременнаяПечатнаяФорма.ПолныйПутьКМакету = "";
		КонецЕсли;
		
		Если ВременнаяПечатнаяФорма.ТабличныйДокумент <> Неопределено
		 ИЛИ ВременнаяПечатнаяФорма.СтруктураВыгрузки <> Неопределено Тогда
			
			НоваяКоллекция = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоллекция, ВременнаяПечатнаяФорма);
			Если ВременнаяКоллекция.Количество() = 1 Тогда
				
				НоваяКоллекция.ИмяМакета = ИмяМакета;
				НоваяКоллекция.ИмяВРЕГ = ВРег(ИмяМакета);
				
			КонецЕсли;
			
			Если ВременнаяПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
				
				НоваяКоллекция.Защита = ВременнаяПечатнаяФорма.ТабличныйДокумент.Защита;
				
			КонецЕсли;
			
			НоваяКоллекция.ФорматСохранения = ФорматСохранения;
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьПодготовкуКВыгрузке(МассивОбъектов, КоллекцияПечатныхФорм, СлужебныеПараметры)
	
	ПараметрыВывода = СлужебныеПараметры.ПараметрыВывода;
	ФорматСохранения = СлужебныеПараметры.ФорматСохранения;
	
	Если КоллекцияПечатныхФорм.Колонки.Найти("СтруктураВыгрузки") = Неопределено Тогда
		КоллекцияПечатныхФорм.Колонки.Добавить("СтруктураВыгрузки");
	КонецЕсли;
	
	Если КоллекцияПечатныхФорм.Колонки.Найти("ФорматСохранения") = Неопределено Тогда
		
		ТипФорматСохранения = Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыВыгрузкиОбъектов");
		КоллекцияПечатныхФорм.Колонки.Добавить("ФорматСохранения", ТипФорматСохранения);
		
	КонецЕсли;
	
	КодЯзыка = ПараметрыВывода.КодЯзыка;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(МассивОбъектов[0]);
	Если УправлениеПечатью.НастройкиПечатиОбъекта(МенеджерОбъекта).ПриОпределенииПолучателей Тогда
		
		МенеджерОбъекта.ПриОпределенииПолучателей(
			ПараметрыВывода.ПараметрыОтправки,
			МассивОбъектов,
			КоллекцияПечатныхФорм);
			
	КонецЕсли;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		ПечатнаяФорма.ДоступенВыводНаДругихЯзыках = Истина;
		ПечатнаяФорма.ПолныйПутьКМакету = ПечатнаяФорма.ИмяМакета;
		ПечатнаяФорма.СинонимМакета = УправлениеПечатью.ПредставлениеМакета(ПечатнаяФорма.ПолныйПутьКМакету, КодЯзыка);
		// @skip-check query-in-loop - Небольшое количество итераций цикла с запросом к таблице РегистрСведений.ПользовательскиеМакетыПечати 
		// с заведомо небольшим количеством записей
		Макет = УправлениеПечатью.МакетПечатнойФормы(ПечатнаяФорма.ПолныйПутьКМакету, КодЯзыка);
		Результат = СформироватьСтруктуруДляВыгрузки(
			Макет,
			ФорматСохранения,
			МассивОбъектов,
			КодЯзыка);
		
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			ПечатнаяФорма.СтруктураВыгрузки = Результат;
		Иначе
			ПечатнаяФорма.СтруктураВыгрузки = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура :
// * ЭтоТаблица - Булево
// * ЭтоСтрокаТаблицы - Булево
// * ЭтоОбласть - Булево
// * ИмяТаблицы - Строка
// * ИменаКолонок - Структура
// * ИмяОбласти - Строка
// * ПредставлениеСтрокиТаблицы - Строка
// * КоличествоДанных - Число
// * ТипыКолонок - Соответствие из КлючИЗначение:
// ** Ключ - Строка
// ** Значение - ОписаниеТипов
// 
Функция НоваяСтруктураДанных()
	
	Структура = Новый Структура;
	Структура.Вставить("ЭтоТаблица", Ложь);
	Структура.Вставить("ЭтоСтрокаТаблицы", Ложь);
	Структура.Вставить("ЭтоОбласть", Ложь);
	Структура.Вставить("ЭтоПараметр", Ложь);
	Структура.Вставить("ИмяТаблицы", "");
	Структура.Вставить("ИменаКолонок", Новый Структура);
	Структура.Вставить("ИмяОбласти", "");
	Структура.Вставить("ПредставлениеСтрокиТаблицы", "");
	Структура.Вставить("КоличествоДанных", 0);
	Структура.Вставить("ТипыКолонок", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

Функция РазложитьИмяОбласти(ПолноеИмяОбласти, Разделитель)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОбласти", ПолноеИмяОбласти);
	Результат.Вставить("ИмяВложеннойОбласти", НСтр("ru = 'СтрокаТаблицы'"));
	
	Если СтрНайти(ПолноеИмяОбласти, Разделитель,, 2) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбласти, Разделитель, Истина);
	Если МассивИмен.Количество() > 1 Тогда
		
		НомерПозиции = СтрНайти(ПолноеИмяОбласти, МассивИмен[0]);
		ИмяОбласти = Лев(ПолноеИмяОбласти, НомерПозиции - 1) + МассивИмен[0];
		ИмяВложеннойОбласти = Прав(ПолноеИмяОбласти, СтрДлина(ПолноеИмяОбласти) - СтрДлина(ИмяОбласти) - 1);
		
		Результат.ИмяОбласти = ИмяОбласти;
		Результат.ИмяВложеннойОбласти = ИмяВложеннойОбласти;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - новая структура параметров:
// * ЭтоОбласть - Булево
// * ПолныйПуть - Строка
// * Значение - Произвольный
// * УсловноеОформление - Строка
// * ИмяПараметра - Строка
// * Выводить - Булево
// 
Функция НоваяСтруктураПараметра()
	
	Структура = Новый Структура;
	Структура.Вставить("ЭтоПараметр", Истина);
	Структура.Вставить("ЭтоОбласть", Ложь);
	Структура.Вставить("ПолныйПуть", "");
	Структура.Вставить("Значение");
	Структура.Вставить("УсловноеОформление", "");
	Структура.Вставить("ИмяПараметра", "");
	Структура.Вставить("ТипПоля", "");
	Структура.Вставить("Выводить", Истина);
	Структура.Вставить("КодЯзыка", "");
	
	Возврат Структура;
	
КонецФункции

// Возвращаемое значение:
//  Структура - новая структура для расчета параметра:
// * НастройкиФорматаПолей - Соответствие из КлючИЗначение:
//   ** Ключ - Строка
//   ** Значение - Строка
// * ТипыПолейПараметров - Соответствие из КлючИЗначение:
//   ** Ключ - Строка
//   ** Значение - ОписаниеТипов
// * КодЯзыка - Строка
// * Макет - ТабличныйДокумент
// * НомерСтрокиТабличнойЧасти - Число
// * НомерСтрокиИмениПараметра - Число
// * НомерСтрокиПараметра - Число
// * НомерКолонкиИмениПараметра - Число
// * НомерКолонкиПараметра - Число
//
Функция НоваяСтруктураДляРасчетаПараметра()
	
	Структура = Новый Структура;
	Структура.Вставить("НастройкиФорматаПолей", Новый Соответствие);
	Структура.Вставить("ТипыПолейПараметров", Новый Соответствие);
	Структура.Вставить("КодЯзыка", "");
	Структура.Вставить("Макет", Новый ТабличныйДокумент);
	Структура.Вставить("ИмяТаблицы", "");
	Структура.Вставить("НомерСтрокиТабличнойЧасти", 0);
	Структура.Вставить("НомерСтрокиИмениПараметра", 0);
	Структура.Вставить("НомерСтрокиПараметра", 0);
	Структура.Вставить("НомерКолонкиИмениПараметра", 1);
	Структура.Вставить("НомерКолонкиПараметра", 2);
	
	Возврат Структура;
	
КонецФункции

Функция ЯчейкаПринадлежитОбласти(ТаблицаОбластей, МассивОбработанных, НомерСтроки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЯчейкаПринадлежитОбласти", Ложь);
	Результат.Вставить("СтрокаОбрабатываемойОбласти", Неопределено);
	
	Для Каждого СтрокаОбрабатываемойОбласти Из ТаблицаОбластей Цикл
		
		Результат.СтрокаОбрабатываемойОбласти = СтрокаОбрабатываемойОбласти;
		Если МассивОбработанных.Найти(СтрокаОбрабатываемойОбласти.Имя) <> Неопределено
		   ИЛИ СтрокаОбрабатываемойОбласти.ЭтоОбластьУсловияВывода Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОбрабатываемойОбласти.Верх <= НомерСтроки
		   И СтрокаОбрабатываемойОбласти.Низ >= НомерСтроки Тогда
			
			Результат.ЯчейкаПринадлежитОбласти = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЯчейкаПринадлежитТаблице(ТаблицыМакета, НомерСтроки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоТаблица", Ложь);
	Результат.Вставить("ТекущаяСтрокаТаблицыМакета", Неопределено);
	
	Для Каждого ТекущаяСтрокаТаблицыМакета Из ТаблицыМакета Цикл
		
		Если ТекущаяСтрокаТаблицыМакета.Верх <= НомерСтроки
		   И ТекущаяСтрокаТаблицыМакета.Низ >= НомерСтроки Тогда
			
			Результат.ЭтоТаблица = Истина;
			Результат.ТекущаяСтрокаТаблицыМакета = ТекущаяСтрокаТаблицыМакета;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураТекущихДанных(СтрокаОбрабатываемойОбласти, МассивОбработанных, ИмяТаблицыВладельца = Неопределено, НомерСтрокиВладельца = Неопределено)
	
	ТекущиеДанные = Новый Структура;
	ТекущиеДанные.Вставить("СтрокаТаблицы", СтрокаОбрабатываемойОбласти);
	ТекущиеДанные.Вставить("МассивОбработанных", МассивОбработанных);
	ТекущиеДанные.Вставить("ИмяТаблицыВладельца", ИмяТаблицыВладельца);
	ТекущиеДанные.Вставить("НомерСтрокиВладельца", НомерСтрокиВладельца);
	
	Возврат ТекущиеДанные;
	
КонецФункции

Функция СформироватьДанныеВыгрузки(МассивОбъектов, ДанныеПечати, ДопДанные)
	
	Результат = Новый Соответствие;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		ДанныеОбъекта = ДанныеПечати[Ссылка];
		ИсточникДанных = Новый Соответствие;
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИсточникДанных, ДанныеОбъекта);
		
		ДанныеИсточника = Новый Структура;
		ДанныеИсточника.Вставить("ДанныеОбъекта", ДанныеОбъекта);
		ДанныеИсточника.Вставить("ИсточникДанныхПереданный", ИсточникДанных);
		
		МассивОбработанных = Новый Массив;
		СчДанных = 0;
		ИмяОбласти = НСтр("ru = 'Документ'");
		
		СтруктураСДанными = НоваяСтруктураДанных();
		СтруктураСДанными.ИмяОбласти = ИмяОбласти;
		ОбъектВСтруктуру(СтруктураСДанными, ДанныеИсточника, ДопДанные, МассивОбработанных, СчДанных);
		
		Результат.Вставить(Ссылка, СтруктураСДанными);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбъектВСтруктуру(СтруктураСДанными, ДанныеИсточника, ДопДанные, МассивОбработанных, СчДанных)
	
	Макет = ДопДанные.Макет;
	ТаблицаОбластей = ДопДанные.ТаблицаОбластей;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		Область = Макет.Область(НомерСтроки, 1);
		ТекстЯчейки = Область.Текст;
		
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ЯчейкаПринадлежитОбласти(ТаблицаОбластей, МассивОбработанных, НомерСтроки);
		ЯчейкаПринадлежитОбласти = РезультатПроверки.ЯчейкаПринадлежитОбласти;
		СтрокаОбрабатываемойОбласти = РезультатПроверки.СтрокаОбрабатываемойОбласти;
		
		Если НЕ ЯчейкаПринадлежитОбласти Тогда
			
			СтрокуМакетаВСтруктуру(
				СтруктураСДанными,
				ДанныеИсточника,
				ДопДанные,
				МассивОбработанных,
				НомерСтроки,
				СтрокаОбрабатываемойОбласти,
				СчДанных);
			
		Иначе
			
			ТекущиеДанные = СтруктураТекущихДанных(СтрокаОбрабатываемойОбласти, МассивОбработанных);
			СтруктураОбласти = ОбластьМакетаВСтруктуру(ДанныеИсточника, ДопДанные, ТекущиеДанные);
			
			Если СтруктураОбласти <> Неопределено
			   И СтруктураОбласти.КоличествоДанных > 0 Тогда
				
				СчДанных = СчДанных + 1;
				СчДанныхСтрокой = XMLСтрока(СчДанных);
				СтруктураСДанными.Вставить("Данные_" + СчДанныхСтрокой, СтруктураОбласти);
				СтруктураСДанными.КоличествоДанных = СчДанных;
				
			КонецЕсли;
			
			НомерСтроки = СтрокаОбрабатываемойОбласти.Низ;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтрокуМакетаВСтруктуру(СтруктураСДанными, ДанныеИсточника, ДопДанные, МассивОбработанных, НомерСтроки, СтрокаОбрабатываемойОбласти, СчДанных)
	
	ТаблицыМакета = ДопДанные.ТаблицыМакета;
	ТаблицаОбластей = ДопДанные.ТаблицаОбластей;
	ИмяТаблицы = "";
	НомерСтрокиТабличнойЧасти = 0;
	
	РезультатПроверки = ЯчейкаПринадлежитТаблице(ТаблицыМакета, НомерСтроки);
	ЭтоТаблица = РезультатПроверки.ЭтоТаблица;
	ТекущаяСтрокаТаблицыМакета = РезультатПроверки.ТекущаяСтрокаТаблицыМакета;
	
	Если ЭтоТаблица Тогда
		
		ТаблицаОбластейСтрок = ТаблицаОбластей.Скопировать();
		ТаблицаОбластейСтрок.Очистить();
		СтрокаОбрабатываемойОбласти = ТаблицаОбластейСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбрабатываемойОбласти, ТекущаяСтрокаТаблицыМакета);
		СтрокаОбрабатываемойОбласти.ИмяТаблицы = СтрокаОбрабатываемойОбласти.Имя;
		СтрокаОбрабатываемойОбласти.ЭтоТаблица = Истина;
		ЭтоУсловиеВывода = НЕ ПустаяСтрока(СтрокаОбрабатываемойОбласти.ПараметрРасшифровки);
		СтрокаОбрабатываемойОбласти.ЭтоОбластьУсловияВывода = ЭтоУсловиеВывода;
		
		ТекущиеДанные = СтруктураТекущихДанных(СтрокаОбрабатываемойОбласти, МассивОбработанных);
		СтруктураОбласти = ОбластьМакетаВСтруктуру(ДанныеИсточника, ДопДанные, ТекущиеДанные);
		
		Если СтруктураОбласти <> Неопределено
		   И СтруктураОбласти.КоличествоДанных > 0 Тогда
			
			СчДанных = СчДанных + 1;
			СчДанныхСтрокой = XMLСтрока(СчДанных);
			СтруктураСДанными.Вставить("Данные_" + СчДанныхСтрокой, СтруктураОбласти);
			СтруктураСДанными.КоличествоДанных = СчДанных;
			
		КонецЕсли;
		
		НомерСтроки = СтрокаОбрабатываемойОбласти.Низ;
		
	Иначе
		
		ДанныеДляРасчетаПараметра = НоваяСтруктураДляРасчетаПараметра();
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаПараметра, ДопДанные);
		ДанныеДляРасчетаПараметра.ИмяТаблицы = ИмяТаблицы;
		ДанныеДляРасчетаПараметра.НомерСтрокиТабличнойЧасти = НомерСтрокиТабличнойЧасти;
		ДанныеДляРасчетаПараметра.НомерСтрокиИмениПараметра = НомерСтроки;
		ДанныеДляРасчетаПараметра.НомерСтрокиПараметра = НомерСтроки;
		
		ДанныеПараметраСтруктура = ДанныеПараметра(ДанныеИсточника, ДанныеДляРасчетаПараметра);
		
		ДобавитьВСтруктуру = (ДанныеПараметраСтруктура <> Неопределено
			И ДанныеПараметраСтруктура.Выводить);
		
		Если ДобавитьВСтруктуру Тогда
			
			СчДанных = СчДанных + 1;
			СчДанныхСтрокой = XMLСтрока(СчДанных);
			СтруктураСДанными.Вставить("Данные_" + СчДанныхСтрокой, ДанныеПараметраСтруктура);
			СтруктураСДанными.КоличествоДанных = СчДанных;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДанныеВыгрузкиДляDBF(Знач МассивОбъектов, Знач ДанныеПечати, Знач ДопДанные)
	
	Результат = Новый Соответствие;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		ДанныеОбъекта = ДанныеПечати[Ссылка];
		ИсточникДанных = Новый Соответствие;
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИсточникДанных, ДанныеОбъекта);
		
		ДанныеИсточника = Новый Структура;
		ДанныеИсточника.Вставить("ДанныеОбъекта", ДанныеОбъекта);
		ДанныеИсточника.Вставить("ИсточникДанныхПереданный", ИсточникДанных);
		
		СтруктураСДанными = ОбластьМакетаВСтруктуруДляDBF(ДанныеИсточника, ДопДанные);
		Результат.Вставить(Ссылка, СтруктураСДанными);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаТаблицыОбластейСодержитТаблицу(СтрокаТаблицы, ИмяТаблицыВладельца)
	
	ЭтоТаблица = СтрокаТаблицы.ЭтоТаблица;
	Если ЭтоТаблица Тогда
		
		ИмяТаблицы = СокрЛП(СтрокаТаблицы.ИмяТаблицы);
		ЭтоТаблица = (ИмяТаблицы <> ИмяТаблицыВладельца); // Если ЭтоТаблица = Ложь - это вложенная область таблицы, обрабатываем как область
		
	Иначе
		ИмяТаблицы = ИмяТаблицыВладельца;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоТаблица", ЭтоТаблица);
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИсточникДанныхДаннымиТаблицы(Знач ИмяТаблицы, Знач ДанныеСтрокиТабличнойЧастиПараметры, ИсточникДанныхДляОбласти)
	
	Для Каждого КлючИЗначение Из ДанныеСтрокиТабличнойЧастиПараметры Цикл
		ИсточникДанныхДляОбласти[ИмяТаблицы + "." + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбластьМакетаВСтруктуру(ДанныеИсточникаПереданные, ДопДанные, ТекущиеДанныеПереданные)
	
	ДанныеОбъекта = ДанныеИсточникаПереданные.ДанныеОбъекта;
	ИсточникДанныхПереданный = ДанныеИсточникаПереданные.ИсточникДанныхПереданный;
	
	Макет = ДопДанные.Макет;
	СтрокаТаблицы = ТекущиеДанныеПереданные.СтрокаТаблицы;
	МассивОбработанных = ТекущиеДанныеПереданные.МассивОбработанных;
	ИмяТаблицыВладельца = ТекущиеДанныеПереданные.ИмяТаблицыВладельца;
	НомерСтрокиВладельца = ТекущиеДанныеПереданные.НомерСтрокиВладельца;
	ПолноеИмяОбласти = СокрЛП(СтрокаТаблицы.Имя);
	
	РезультатПроверки = СтрокаТаблицыОбластейСодержитТаблицу(СтрокаТаблицы, ИмяТаблицыВладельца);
	ЭтоТаблица = РезультатПроверки.ЭтоТаблица;
	ИмяТаблицы = РезультатПроверки.ИмяТаблицы;
	
	МассивОбработанных.Добавить(ПолноеИмяОбласти);
	КоличествоПовторений = 1;
	ПредставлениеСтрокиТаблицы = "";
	ИмяОбласти = ПолноеИмяОбласти;
	МассивВложенных = Новый Массив;
	
	ИсточникДанныхДляОбласти = Новый Соответствие;
	Если ИсточникДанныхПереданный <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИсточникДанныхДляОбласти, ИсточникДанныхПереданный);
	КонецЕсли;
	
	НомерПервойСтроки = 1;
	
	Если ЭтоТаблица Тогда
		
		КоличествоПовторений = ДанныеОбъекта[ИмяТаблицы].Количество();
		
		Если ДопДанные.ФорматСохранения = Перечисления.ФорматыВыгрузкиОбъектов.XML Тогда
			
			РезультатРазбивки = РазложитьИмяОбласти(ПолноеИмяОбласти, "_");
			ИмяОбласти = РезультатРазбивки.ИмяОбласти;
			ПредставлениеСтрокиТаблицы = РезультатРазбивки.ИмяВложеннойОбласти;
			
		КонецЕсли;
		
		СтруктураТаблицы = НоваяСтруктураДанных();
		ЗаполнитьЗначенияСвойств(СтруктураТаблицы, СтрокаТаблицы);
		СтруктураТаблицы.ЭтоСтрокаТаблицы = Ложь;
		СтруктураТаблицы.ЭтоОбласть = Ложь;
		СтруктураТаблицы.ПредставлениеСтрокиТаблицы = ПредставлениеСтрокиТаблицы;
		СтруктураТаблицы.ИмяОбласти = ИмяОбласти;
		
		Если ИмяТаблицыВладельца = ИмяТаблицы Тогда
			
			КоличествоПовторений = НомерСтрокиВладельца;
			НомерПервойСтроки = НомерСтрокиВладельца;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СчСтрокДанных = 0;
	Для НомерСтрокиТабличнойЧасти = НомерПервойСтроки По КоличествоПовторений Цикл
		
		СчДанных = 0;
		
		СтруктураСДанными = НоваяСтруктураДанных();
		ЗаполнитьЗначенияСвойств(СтруктураСДанными, СтрокаТаблицы);
		СтруктураСДанными.ЭтоСтрокаТаблицы = ЭтоТаблица;
		СтруктураСДанными.ЭтоТаблица = ЭтоТаблица;
		СтруктураСДанными.ЭтоОбласть = НЕ ЭтоТаблица;
		СтруктураСДанными.ПредставлениеСтрокиТаблицы = ПредставлениеСтрокиТаблицы;
		СтруктураСДанными.ИмяОбласти = ИмяОбласти;
		
		Если ЭтоТаблица Тогда
			
			ДанныеСтрокиТабличнойЧастиПараметры = ДанныеОбъекта[ИмяТаблицы][НомерСтрокиТабличнойЧасти];
			ДополнитьИсточникДанныхДаннымиТаблицы(
				ИмяТаблицы,
				ДанныеСтрокиТабличнойЧастиПараметры,
				ИсточникДанныхДляОбласти);
			
		КонецЕсли;
		
		ТекущиеДанныеТабличнойЧасти = Новый Структура;
		ТекущиеДанныеТабличнойЧасти.Вставить("СтрокаТаблицы", СтрокаТаблицы);
		ТекущиеДанныеТабличнойЧасти.Вставить("НомерСтрокиТабличнойЧасти", НомерСтрокиТабличнойЧасти);
		ТекущиеДанныеТабличнойЧасти.Вставить("ИмяТаблицы", ИмяТаблицы);
		
		ДанныеИсточника = Новый Структура;
		ДанныеИсточника.Вставить("ДанныеОбъекта", ДанныеОбъекта);
		ДанныеИсточника.Вставить("ИсточникДанныхПереданный", ИсточникДанныхДляОбласти);
		
		ЗаполнитьСтруктуруСДанными(
			СтруктураСДанными,
			МассивВложенных,
			МассивОбработанных,
			ДанныеИсточника,
			ДопДанные,
			СчДанных,
			ТекущиеДанныеТабличнойЧасти);
		
		ДанныеДляАнализа = Новый Структура;
		ДанныеДляАнализа.Вставить("НомерСтрокиТабличнойЧасти", НомерСтрокиТабличнойЧасти);
		ДанныеДляАнализа.Вставить("КоличествоПовторений", КоличествоПовторений);
		ДанныеДляАнализа.Вставить("МассивВложенных", МассивВложенных);
		ДанныеДляАнализа.Вставить("Макет", Макет);
		ДанныеДляАнализа.Вставить("ИмяОбласти", ПолноеИмяОбласти);
		
		АктуализироватьОбработанныеОбласти(МассивОбработанных, ДанныеДляАнализа);
		
		Если ЭтоТаблица
		   И СтруктураСДанными.КоличествоДанных > 0 Тогда
			
			СчСтрокДанных = СчСтрокДанных + 1;
			СчСтрокДанныхСтрокой = XMLСтрока(СчСтрокДанных);
			СтруктураТаблицы.Вставить("Данные_" + СчСтрокДанныхСтрокой, СтруктураСДанными);
			СтруктураТаблицы.КоличествоДанных = СчСтрокДанных;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		Возврат СтруктураТаблицы;
	Иначе
		Возврат СтруктураСДанными;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСтруктуруСДанными(СтруктураСДанными, МассивВложенных, МассивОбработанных, ДанныеИсточника, ДопДанные, СчДанных, ТекущиеДанныеТабличнойЧасти)
	
	СтрокаТаблицы = ТекущиеДанныеТабличнойЧасти.СтрокаТаблицы;
	ИмяТаблицы = ТекущиеДанныеТабличнойЧасти.ИмяТаблицы;
	НомерСтрокиТабличнойЧасти = ТекущиеДанныеТабличнойЧасти.НомерСтрокиТабличнойЧасти;
	
	Верх = СтрокаТаблицы.Верх;
	Низ = СтрокаТаблицы.Низ;
	ТаблицаОбластей = ДопДанные.ТаблицаОбластей;
	
	Для НомерСтроки = Верх По Низ Цикл
		
		ЭтоСтрокаТекущейОбласти = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Верх", НомерСтроки);
		НайденныеОбласти = ТаблицаОбластей.НайтиСтроки(Отбор);
		Выводить = Истина;
		
		Если НайденныеОбласти.Количество() > 0 Тогда
			
			КонецВложеннойОбласти = 0;
			ДанныеДляАнализаИЗаполнения = Новый Структура;
			ДанныеДляАнализаИЗаполнения.Вставить("ДанныеИсточника", ДанныеИсточника);
			ДанныеДляАнализаИЗаполнения.Вставить("ДопДанные", ДопДанные);
			ДанныеДляАнализаИЗаполнения.Вставить("ТекущиеДанныеТабличнойЧасти", ТекущиеДанныеТабличнойЧасти);
			ДанныеДляАнализаИЗаполнения.Вставить("НайденныеОбласти", НайденныеОбласти);
			ДанныеДляАнализаИЗаполнения.Вставить("НомерСтроки", НомерСтроки);
			
			ДополнитьСтруктуруДаннымиНайденныхОбластей(
				СтруктураСДанными,
				МассивВложенных,
				МассивОбработанных,
				СчДанных,
				ДанныеДляАнализаИЗаполнения);
			Выводить = ДанныеДляАнализаИЗаполнения.Выводить;
			ЭтоСтрокаТекущейОбласти = ДанныеДляАнализаИЗаполнения.ЭтоСтрокаТекущейОбласти;
			КонецВложеннойОбласти = ДанныеДляАнализаИЗаполнения.КонецВложеннойОбласти;
			
			НомерСтроки = Макс(НомерСтроки, КонецВложеннойОбласти);
			
		КонецЕсли;
		
		Если ЭтоСтрокаТекущейОбласти
		   И Выводить Тогда
			
			ДанныеДляРасчетаПараметра = НоваяСтруктураДляРасчетаПараметра();
			ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаПараметра, ДопДанные);
			ДанныеДляРасчетаПараметра.ИмяТаблицы = ИмяТаблицы;
			ДанныеДляРасчетаПараметра.НомерСтрокиТабличнойЧасти = НомерСтрокиТабличнойЧасти;
			ДанныеДляРасчетаПараметра.НомерСтрокиИмениПараметра = НомерСтроки;
			ДанныеДляРасчетаПараметра.НомерСтрокиПараметра = НомерСтроки;
			
			ДанныеПараметраСтруктура = ДанныеПараметра(ДанныеИсточника, ДанныеДляРасчетаПараметра);
			
			Если ДанныеПараметраСтруктура = Неопределено
			 ИЛИ НЕ ДанныеПараметраСтруктура.Выводить Тогда
				Продолжить;
			КонецЕсли;
			
			СчДанных = СчДанных + 1;
			СчДанныхСтрокой = XMLСтрока(СчДанных);
			СтруктураСДанными.Вставить("Данные_" + СчДанныхСтрокой, ДанныеПараметраСтруктура);
			СтруктураСДанными.КоличествоДанных = СчДанных;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДаннымиНайденныхОбластей(СтруктураСДанными, МассивВложенных, МассивОбработанных, СчДанных, Знач ДанныеДляАнализаИЗаполнения)
	
	ДанныеИсточника = ДанныеДляАнализаИЗаполнения.ДанныеИсточника;
	ДопДанные = ДанныеДляАнализаИЗаполнения.ДопДанные;
	ТекущиеДанныеТабличнойЧасти = ДанныеДляАнализаИЗаполнения.ТекущиеДанныеТабличнойЧасти;
	НайденныеОбласти = ДанныеДляАнализаИЗаполнения.НайденныеОбласти;
	НомерСтроки = ДанныеДляАнализаИЗаполнения.НомерСтроки;
	
	СтрокаТаблицы = ТекущиеДанныеТабличнойЧасти.СтрокаТаблицы;
	ИмяТаблицы = ТекущиеДанныеТабличнойЧасти.ИмяТаблицы;
	НомерСтрокиТабличнойЧасти = ТекущиеДанныеТабличнойЧасти.НомерСтрокиТабличнойЧасти;
	Верх = СтрокаТаблицы.Верх;
	ЭтоТаблица = СтрокаТаблицы.ЭтоТаблица;
	
	КонецВложеннойОбласти = 0;
	Выводить = Истина;
	ЭтоСтрокаТекущейОбласти = Истина;
	
	Для Каждого ТекНайденнаяСтрока Из НайденныеОбласти Цикл
		
		Если МассивОбработанных.Найти(ТекНайденнаяСтрока.Имя) <> Неопределено
		   И НомерСтроки = Верх Тогда
			Продолжить;
		ИначеЕсли ТекНайденнаяСтрока.ЭтоОбластьУсловияВывода Тогда
			
			Если ЭтоТаблица
			   И ИмяТаблицы <> ТекНайденнаяСтрока.ИмяТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверкаУсловияВыводаОбласти(
				ДанныеИсточника,
				ДопДанные,
				ТекНайденнаяСтрока,
				КонецВложеннойОбласти,
				Выводить);
			
		Иначе
			
			ЭтоСтрокаТекущейОбласти = Ложь;
			КонецВложеннойОбласти = Макс(КонецВложеннойОбласти, ТекНайденнаяСтрока.Низ);
			
			ТекущиеДанные = СтруктураТекущихДанных(
				ТекНайденнаяСтрока,
				МассивОбработанных,
				ИмяТаблицы,
				НомерСтрокиТабличнойЧасти);
			ДанныеСтроки = ОбластьМакетаВСтруктуру(ДанныеИсточника, ДопДанные, ТекущиеДанные);
			
			ИмяВложеннойОбласти = ТекНайденнаяСтрока.Имя;
			МассивВложенных.Добавить(ИмяВложеннойОбласти);
			
			Если ДанныеСтроки <> Неопределено
			   И ДанныеСтроки.КоличествоДанных > 0 Тогда
				
				СчДанных = СчДанных + 1;
				СчДанныхСтрокой = XMLСтрока(СчДанных);
				СтруктураСДанными.Вставить("Данные_" + СчДанныхСтрокой, ДанныеСтроки);
				СтруктураСДанными.КоличествоДанных = СчДанных;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляАнализаИЗаполнения.Вставить("Выводить", Выводить);
	ДанныеДляАнализаИЗаполнения.Вставить("КонецВложеннойОбласти", КонецВложеннойОбласти);
	ДанныеДляАнализаИЗаполнения.Вставить("ЭтоСтрокаТекущейОбласти", ЭтоСтрокаТекущейОбласти);
	
КонецПроцедуры

Процедура ПроверкаУсловияВыводаОбласти(ДанныеИсточника, ДопДанные, СтрокаТаблицыОбластей, КонецВложеннойОбласти, Выводить)
	
	ИсточникДанныхДляОбласти = ДанныеИсточника.ИсточникДанныхПереданный;
	НастройкиФорматаПолей = ДопДанные.НастройкиФорматаПолей;
	КодЯзыка = ДопДанные.КодЯзыка;
	ПараметрРасшифровки = СтрокаТаблицыОбластей.ПараметрРасшифровки;
	КонецОбласти = СтрокаТаблицыОбластей.Низ;
	
	Если НЕ ПустаяСтрока(ПараметрРасшифровки) Тогда
		
		Выводить = УправлениеПечатью.ВычислитьВыражение(
			"[" + ПараметрРасшифровки + "]",
			ИсточникДанныхДляОбласти,
			НастройкиФорматаПолей,
			КодЯзыка);
		
	КонецЕсли;
	
	Если ТипЗнч(Выводить) = Тип("Булево")
	   И Не Выводить Тогда
		
		КонецВложеннойОбласти = Макс(КонецВложеннойОбласти, КонецОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НомерПервойЗаполненнойСтрокиКолонки(Знач Макет)
	
	НомерПервойЗаполненнойСтроки = 0;
	НомерПервойЗаполненнойКолонки = 0;
	НачалоНайдено = Ложь;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По Макет.ШиринаТаблицы Цикл
			
			Область = Макет.Область(НомерСтроки, НомерКолонки);
			
			Если НЕ ПустаяСтрока(Область.Текст) Тогда
				
				НомерПервойЗаполненнойСтроки = НомерСтроки;
				НомерПервойЗаполненнойКолонки = НомерКолонки;
				НачалоНайдено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НачалоНайдено Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеНачалаЗаполнения = Новый Структура;
	ДанныеНачалаЗаполнения.Вставить("НомерПервойЗаполненнойСтроки", НомерПервойЗаполненнойСтроки);
	ДанныеНачалаЗаполнения.Вставить("НомерПервойЗаполненнойКолонки", НомерПервойЗаполненнойКолонки);
	
	Возврат ДанныеНачалаЗаполнения;
	
КонецФункции

Функция ОбластьМакетаВСтруктуруДляDBF(ДанныеИсточникаПереданные, ДопДанные)
	
	ДанныеОбъекта = ДанныеИсточникаПереданные.ДанныеОбъекта;
	ТипыПолейПараметров = ДопДанные.ТипыПолейПараметров;
	Макет = ДопДанные.Макет;
	ТаблицыМакета = ДопДанные.ТаблицыМакета;
	
	СтруктураСДанными = НоваяСтруктураДанных();
	КоличествоПовторений = 1;
	ИмяТаблицы = "";
	
	Если ТаблицыМакета.Количество() > 0 Тогда
		
		СтрокаТаблицы = ТаблицыМакета[0];
		Верх = СтрокаТаблицы.Верх;
		ИмяТаблицы = СокрЛП(СтрокаТаблицы.Имя);
		КоличествоПовторений = ДанныеОбъекта[ИмяТаблицы].Количество();
		СтруктураСДанными.ЭтоТаблица = Истина;
		
	Иначе
		
		ДанныеНачалаЗаполнения = НомерПервойЗаполненнойСтрокиКолонки(Макет);
		Верх = ДанныеНачалаЗаполнения.НомерПервойЗаполненнойСтроки + 1;
		СтруктураСДанными.ЭтоТаблица = Ложь;
		
	КонецЕсли;
	
	СтруктураСДанными.ИмяТаблицы = ИмяТаблицы;
	
	ШиринаТаблицы = Макет.ШиринаТаблицы;
	МассивПолейКолонок = Новый Массив;
	ТипыКолонок = Новый Соответствие;
	ИменаКолонок = Новый Структура;
	
	ДанныеМакета = Новый Структура;
	ДанныеМакета.Вставить("Макет", Макет);
	ДанныеМакета.Вставить("ШиринаТаблицы", ШиринаТаблицы);
	ДанныеМакета.Вставить("Верх", Верх);
	ДанныеМакета.Вставить("НомерСтроки", 0);
	ТекущийНомерСтроки = 0;
	
	Для НомерСтроки = 1 По Верх - 1 Цикл
		
		ТекущийНомерСтроки = НомерСтроки;
		ДанныеМакета.НомерСтроки = ТекущийНомерСтроки;
		КолонкиИПоляТаблицы(ИменаКолонок, МассивПолейКолонок, ТипыКолонок, ТипыПолейПараметров, ДанныеМакета);
		
		Если МассивПолейКолонок.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПолейКолонок.Количество() > 0 Тогда
		
		ДанныеТаблицы = Новый Структура;
		ДанныеТаблицы.Вставить("МассивПолейКолонок", МассивПолейКолонок);
		ДанныеТаблицы.Вставить("ИменаКолонок", ИменаКолонок);
		ДанныеТаблицы.Вставить("КоличествоПовторений", КоличествоПовторений);
		ДанныеТаблицы.Вставить("ТипыКолонок", ТипыКолонок);
		
		СтруктураТаблицыDBF(
			СтруктураСДанными,
			ДанныеИсточникаПереданные,
			ДопДанные,
			ДанныеТаблицы,
			Верх,
			ТекущийНомерСтроки);
		
	КонецЕсли;
	
	СтруктураСДанными.ТипыКолонок = ТипыКолонок;
	Возврат СтруктураСДанными;
	
КонецФункции

Процедура СтруктураТаблицыDBF(СтруктураСДанными, ДанныеИсточникаПереданные, ДопДанные, ДанныеТаблицы, Верх, ТекущийНомерСтроки)
	
	МассивПолейКолонок = ДанныеТаблицы.МассивПолейКолонок;
	ИменаКолонок = ДанныеТаблицы.ИменаКолонок;
	КоличествоПовторений = ДанныеТаблицы.КоличествоПовторений;
	ТипыКолонок = ДанныеТаблицы.ТипыКолонок;
	
	ДанныеОбъекта = ДанныеИсточникаПереданные.ДанныеОбъекта;
	ИсточникДанных = ДанныеИсточникаПереданные.ИсточникДанныхПереданный;
	
	НастройкиФорматаПолей = ДопДанные.НастройкиФорматаПолей;
	Макет = ДопДанные.Макет;
	КодЯзыка = ДопДанные.КодЯзыка;
	ТаблицыМакета = ДопДанные.ТаблицыМакета;
	
	ИмяТаблицы = СтруктураСДанными.ИмяТаблицы;
	НомерСтолбца = МассивПолейКолонок[0];
	ПараметрРасшифровки = Макет.Область(Верх, НомерСтолбца, Верх, НомерСтолбца).ПараметрРасшифровки;
	
	СтруктураСДанными.ИменаКолонок = ИменаКолонок;
	
	СчДанных = 0;
	Для НомерСтрокиТабличнойЧасти = 1 По КоличествоПовторений Цикл
		
		Если ТаблицыМакета.Количество() > 0 Тогда
			
			ДанныеСтрокиТабличнойЧастиПараметры = ДанныеОбъекта[ИмяТаблицы][НомерСтрокиТабличнойЧасти];
			ДополнитьИсточникДанныхДаннымиТаблицы(
				ИмяТаблицы,
				ДанныеСтрокиТабличнойЧастиПараметры,
				ИсточникДанных);
			
		КонецЕсли;
		
		СлужебныеДанные = Новый Структура;
		СлужебныеДанные.Вставить("ИмяТаблицы", ИмяТаблицы);
		СлужебныеДанные.Вставить("НомерСтрокиТабличнойЧасти", НомерСтрокиТабличнойЧасти);
		СлужебныеДанные.Вставить("Верх", Верх);
		СлужебныеДанные.Вставить("НомерСтроки", ТекущийНомерСтроки);
		СлужебныеДанные.Вставить("МассивПолейКолонок", МассивПолейКолонок);
		СлужебныеДанные.Вставить("ДопДанные", ДопДанные);
		СлужебныеДанные.Вставить("ИсточникДанных", ИсточникДанных);
		СлужебныеДанные.Вставить("ДанныеОбъекта", ДанныеОбъекта);
		
		СтруктураСтроки = НоваяСтруктураДанных();
		СтруктураСтрокиDBF(СтруктураСтроки, ТипыКолонок, СлужебныеДанные);
		
		Выводить = Истина;
		Если НЕ ПустаяСтрока(ПараметрРасшифровки) Тогда
			
			Выводить = УправлениеПечатью.ВычислитьВыражение(
				"[" + ПараметрРасшифровки + "]",
				ИсточникДанных,
				НастройкиФорматаПолей,
				КодЯзыка);
				
		КонецЕсли;
		
		Если ТипЗнч(Выводить) = Тип("Булево")
		   И Не Выводить Тогда
			Продолжить;
		КонецЕсли;
		
		СчДанных = СчДанных + 1;
		СчДанныхСтрокой = XMLСтрока(СчДанных);
		
		СтруктураСДанными.Вставить("Данные_" + СчДанныхСтрокой, СтруктураСтроки);
		СтруктураСДанными.КоличествоДанных = СчДанных;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтруктураСтрокиDBF(СтруктураСтроки, ТипыКолонок, СлужебныеДанные)
	
	ИмяТаблицы = СлужебныеДанные.ИмяТаблицы;
	НомерСтрокиТабличнойЧасти = СлужебныеДанные.НомерСтрокиТабличнойЧасти;
	Верх = СлужебныеДанные.Верх;
	НомерСтроки = СлужебныеДанные.НомерСтроки;
	МассивПолейКолонок = СлужебныеДанные.МассивПолейКолонок;
	ДопДанные = СлужебныеДанные.ДопДанные;
	ИсточникДанных = СлужебныеДанные.ИсточникДанных;
	ДанныеОбъекта = СлужебныеДанные.ДанныеОбъекта;
	
	ДанныеДляРасчетаПараметра = НоваяСтруктураДляРасчетаПараметра();
	ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаПараметра, ДопДанные);
	ДанныеДляРасчетаПараметра.ИмяТаблицы = ИмяТаблицы;
	ДанныеДляРасчетаПараметра.НомерСтрокиТабличнойЧасти = НомерСтрокиТабличнойЧасти;
	ДанныеДляРасчетаПараметра.НомерСтрокиИмениПараметра = НомерСтроки;
	ДанныеДляРасчетаПараметра.НомерСтрокиПараметра = Верх;
	
	СчетчикКолонок = 0;
	Для Каждого НомерКолонки Из МассивПолейКолонок Цикл
		
		СчетчикКолонок = СчетчикКолонок + 1;
		СчетчикКолонокСтрокой = XMLСтрока(СчетчикКолонок);
		НомерКолонкиСтрокой = XMLСтрока(НомерКолонки);
		
		ДанныеДляРасчетаПараметра.НомерКолонкиИмениПараметра = НомерКолонки;
		ДанныеДляРасчетаПараметра.НомерКолонкиПараметра = НомерКолонки;
		
		ДанныеИсточника = Новый Структура;
		ДанныеИсточника.Вставить("ДанныеОбъекта", ДанныеОбъекта);
		ДанныеИсточника.Вставить("ИсточникДанныхПереданный", ИсточникДанных);
		
		ДанныеПараметраСтруктура = ДанныеПараметра(ДанныеИсточника, ДанныеДляРасчетаПараметра);
		СтруктураСтроки.Вставить("Данные_" + СчетчикКолонокСтрокой, ДанныеПараметраСтруктура);
		СтруктураСтроки.КоличествоДанных = СчетчикКолонок;
		Если ТипыКолонок["НомерКолонки_" + НомерКолонкиСтрокой] = Неопределено Тогда
			ТипыКолонок.Вставить("НомерКолонки_" + НомерКолонкиСтрокой, ДанныеПараметраСтруктура.ТипПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КолонкиИПоляТаблицы(ИменаКолонок, МассивПолейКолонок, ТипыКолонок, ТипыПолейПараметров, ДанныеМакета)
	
	ИмяКолонки = "";
	
	Макет = ДанныеМакета.Макет;
	ШиринаТаблицы = ДанныеМакета.ШиринаТаблицы;
	Верх = ДанныеМакета.Верх;
	НомерСтроки = ДанныеМакета.НомерСтроки;
	
	Для НомерСтолбца = 1 По ШиринаТаблицы Цикл
		
		НомерСтолбцаСтрокой = XMLСтрока(НомерСтолбца);
		ИмяКолонки = Макет.Область(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца).Текст;
		
		Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
			
			ИменаКолонок.Вставить("НомерКолонки_" + НомерСтолбцаСтрокой, ИмяКолонки);
			МассивПолейКолонок.Добавить(НомерСтолбца);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого НомерКолонки Из МассивПолейКолонок Цикл
		
		НомерКолонкиСтрокой = XMLСтрока(НомерКолонки);
		ПолныйПуть = Макет.Область(Верх, НомерКолонки, Верх, НомерКолонки).Текст;
		ПолныйПуть = СокрЛП(ПолныйПуть);
		ИмяПоля = УправлениеПечатью.ОчиститьКвадратныеСкобки(ПолныйПуть);
		ТипПоля = ТипыПолейПараметров[СтрЗаменить(ИмяПоля, ".", "_")];
		ТипыКолонок["НомерКолонки_" + НомерКолонкиСтрокой] = ТипПоля;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьОбработанныеОбласти(МассивОбработанных, Знач ДанныеДляАнализа)
	
	НомерСтрокиТабличнойЧасти = ДанныеДляАнализа.НомерСтрокиТабличнойЧасти;
	КоличествоПовторений = ДанныеДляАнализа.КоличествоПовторений;
	МассивВложенных = ДанныеДляАнализа.МассивВложенных;
	Макет = ДанныеДляАнализа.Макет;
	ИмяОбласти = ДанныеДляАнализа.ИмяОбласти;
	
	Если НомерСтрокиТабличнойЧасти < КоличествоПовторений Тогда
		
		УдалитьИзМассиваВложенныеОбласти(МассивОбработанных, МассивВложенных);
		
	Иначе
		
		ДополнитьМассивОбработанныхОбластейВложеннымиОбластями(МассивОбработанных, Макет, ИмяОбласти);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИзМассиваВложенныеОбласти(МассивОбработанных, Знач МассивВложенных)
	
	Для Каждого ТекИмяОбласти Из МассивВложенных Цикл
		
		Область = МассивОбработанных.Найти(ТекИмяОбласти);
		Если Область <> Неопределено Тогда
			МассивОбработанных.Удалить(Область);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассивОбработанныхОбластейВложеннымиОбластями(МассивОбработанных, Знач Макет, Знач ИмяОбласти)
	
	Для Каждого ТекущаяОбласть Из Макет.Области Цикл
		
		Если ТекущаяОбласть.Имя = ИмяОбласти Тогда
			
			ВложенныеОбласти = Макет.ПолучитьОбласть(ИмяОбласти).Области;
			Для Каждого ТекВложеннаяОбласть Из ВложенныеОбласти Цикл
				
				ИмяТекущейОбласти = ТекВложеннаяОбласть.Имя;
				Если МассивОбработанных.Найти(ИмяТекущейОбласти) = Неопределено Тогда
					МассивОбработанных.Добавить(ИмяТекущейОбласти);
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПараметра(ДанныеИсточника, ДанныеДляРасчетаПараметра)
	
	ИсточникДанныхЗначения = ДанныеИсточника.ИсточникДанныхПереданный;
	
	НастройкиФорматаПолей = ДанныеДляРасчетаПараметра.НастройкиФорматаПолей;
	ТипыПолейПараметров = ДанныеДляРасчетаПараметра.ТипыПолейПараметров;
	КодЯзыка = ДанныеДляРасчетаПараметра.КодЯзыка;
	Макет = ДанныеДляРасчетаПараметра.Макет;
	НомерСтрокиТабличнойЧасти = ДанныеДляРасчетаПараметра.НомерСтрокиТабличнойЧасти;
	НомерСтрокиИмениПараметра = ДанныеДляРасчетаПараметра.НомерСтрокиИмениПараметра;
	НомерКолонкиИмениПараметра = ДанныеДляРасчетаПараметра.НомерКолонкиИмениПараметра;
	НомерСтрокиПараметра = ДанныеДляРасчетаПараметра.НомерСтрокиПараметра;
	НомерКолонкиПараметра = ДанныеДляРасчетаПараметра.НомерКолонкиПараметра;
	
	ИмяПараметра = СокрЛП(Макет.Область(
		НомерСтрокиИмениПараметра,
		НомерКолонкиИмениПараметра,
		НомерСтрокиИмениПараметра,
		НомерКолонкиИмениПараметра).Текст);
	
	Если ПустаяСтрока(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПолныйПуть = СокрЛП(Макет.Область(
		НомерСтрокиПараметра,
		НомерКолонкиПараметра,
		НомерСтрокиПараметра,
		НомерКолонкиПараметра).Текст);
	ПараметрРасшифровки = СокрЛП(Макет.Область(
		НомерСтрокиПараметра,
		НомерКолонкиПараметра,
		НомерСтрокиПараметра,
		НомерКолонкиПараметра).ПараметрРасшифровки);
	
	ИмяПоля = УправлениеПечатью.ОчиститьКвадратныеСкобки(ПолныйПуть);
	ТипПоля = ТипыПолейПараметров[СтрЗаменить(ИмяПоля, ".", "_")];
	
	СтруктураПараметра = НоваяСтруктураПараметра();
	СтруктураПараметра.ПолныйПуть = ПолныйПуть;
	СтруктураПараметра.УсловноеОформление = НастройкиФорматаПолей[ИмяПоля];
	СтруктураПараметра.ИмяПараметра = СтрЗаменить(ИмяПараметра, " ", "");
	СтруктураПараметра.КодЯзыка = КодЯзыка;
	
	Если СтрНайти(ПолныйПуть, "[") = 0 Тогда
		
		ЗначениеПоля = ПолныйПуть;
		ТипПоля = ОбщегоНазначения.ОписаниеТипаСтрока(СтрДлина(Строка(ЗначениеПоля)));
		
	Иначе
		
		Результат = ЗначениеПоляИсточника(
			ДанныеИсточника,
			ДанныеДляРасчетаПараметра,
			ИмяПоля,
			ПолныйПуть,
			НомерСтрокиТабличнойЧасти);
		ЗначениеПоля = Результат.ЗначениеПоля;
		
		Если ЗначениеПоля <> Неопределено
		   И Результат.РезультатВычислен Тогда
			
			ТипПоля = ТипПоляПоЗначению(ЗначениеПоля);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Выводить = Истина;
	Если НЕ ПустаяСтрока(ПараметрРасшифровки) Тогда
		
		Выводить = УправлениеПечатью.ВычислитьВыражение(
			"[" + ПараметрРасшифровки + "]",
			ИсточникДанныхЗначения,
			НастройкиФорматаПолей,
			КодЯзыка);
			
	КонецЕсли;
	
	СтруктураПараметра.ТипПоля = ТипПоля;
	СтруктураПараметра.Значение = ЗначениеПоля;
	
	Если ТипЗнч(Выводить) = Тип("Булево")
	   И Не Выводить Тогда
		СтруктураПараметра.Выводить = Ложь;
	Иначе
		СтруктураПараметра.Выводить = Истина;
	КонецЕсли;
	
	Возврат СтруктураПараметра;
	
КонецФункции

Функция ЗначениеПоляИсточника(ДанныеИсточника, ДанныеДляРасчетаПараметра, ИмяПоля, ПолныйПуть, НомерСтрокиТабличнойЧасти)
	
	ДанныеОбъекта = ДанныеИсточника.ДанныеОбъекта;
	ИсточникДанныхЗначения = ДанныеИсточника.ИсточникДанныхПереданный;
	
	НастройкиФорматаПолей = ДанныеДляРасчетаПараметра.НастройкиФорматаПолей;
	ИмяТаблицы = ДанныеДляРасчетаПараметра.ИмяТаблицы;
	КодЯзыка = ДанныеДляРасчетаПараметра.КодЯзыка;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ЗначениеПоля");
	СтруктураРезультат.Вставить("РезультатВычислен", Ложь);
	
	Результат = Неопределено;
	
	Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда
		
		ИмяПараметраТаблицы = УправлениеПечатью.ИмяПоляВТаблицу(ИмяПоля, ИмяТаблицы);
		Результат = ДанныеОбъекта[ИмяТаблицы][НомерСтрокиТабличнойЧасти][ИмяПараметраТаблицы];
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ДанныеОбъекта[ИмяПоля];
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		ПараметрыТекста = УправлениеПечатью.НайтиПараметрыВТексте(ПолныйПуть);
		ЗначенияПараметров = УправлениеПечатью.ЗначенияПараметров(
			ПараметрыТекста,
			ИсточникДанныхЗначения,
			НастройкиФорматаПолей,
			КодЯзыка);
		
		Если ЗначенияПараметров.Количество() = 1 Тогда
			
			Результат = ЗначенияПараметров[ПараметрыТекста[0]];
			
		Иначе
			
			Если ТипЗнч(ПолныйПуть) = Тип("ФорматированнаяСтрока") Тогда
				Результат = УправлениеПечатью.ЗаменитьВФорматированнойСтроке(ПолныйПуть, ЗначенияПараметров);
			Иначе
				Результат = УправлениеПечатью.ЗаменитьВСтроке(ПолныйПуть, ЗначенияПараметров);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРезультат.РезультатВычислен = Истина;
		
	КонецЕсли;
	
	СтруктураРезультат.ЗначениеПоля = Результат;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Параметры:
//  ЗначениеПоля - Строка, Произвольный - значение поля
// 
// Возвращаемое значение:
//  ОписаниеТипов - тип поля по значению
//
Функция ТипПоляПоЗначению(ЗначениеПоля)
	
	Если ТипЗнч(ЗначениеПоля) = Тип("Булево") Тогда
		
		ТипПоля = Новый ОписаниеТипов("Булево");
		
	ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
		
		ТипПоля = ОбщегоНазначения.ОписаниеТипаДата(ЗначениеПоля);
		
	ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
		
		МинимальнаяРазрядность = 2;
		Разрядность = СтрДлина(ЗначениеПоля - Цел(ЗначениеПоля)) - МинимальнаяРазрядность;
		Если Разрядность < МинимальнаяРазрядность Тогда
			Разрядность = МинимальнаяРазрядность;
		КонецЕсли;
		ТипПоля =  ОбщегоНазначения.ОписаниеТипаЧисло(15, Разрядность);
		
	Иначе
		
		ТипПоля = ОбщегоНазначения.ОписаниеТипаСтрока(СтрДлина(Строка(ЗначениеПоля)));
		
	КонецЕсли;
	
	Возврат ТипПоля;
	
КонецФункции

Функция ТаблицаОбластей(Макет)
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("Имя", ОписаниеТиповСтрока);
	ТаблицаОбластей.Колонки.Добавить("Верх", ОписаниеТиповЧисло);
	ТаблицаОбластей.Колонки.Добавить("Низ", ОписаниеТиповЧисло);
	ТаблицаОбластей.Колонки.Добавить("ПараметрРасшифровки", ОписаниеТиповСтрока);
	ТаблицаОбластей.Колонки.Добавить("ИмяТаблицы", ОписаниеТиповСтрока);
	ТаблицаОбластей.Колонки.Добавить("ЭтоТаблица", ОписаниеТиповБулево);
	ТаблицаОбластей.Колонки.Добавить("Приоритет", ОписаниеТиповЧисло);
	ТаблицаОбластей.Колонки.Добавить("ЭтоОбластьУсловияВывода", ОписаниеТиповБулево);
	
	Для Каждого Область Из Макет.Области Цикл
		
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента")
		   И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			НоваяСтрока = ТаблицаОбластей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Область);
			Если ЗначениеЗаполнено(Область.ПараметрРасшифровки) > 0 Тогда
				
				НоваяСтрока.ЭтоОбластьУсловияВывода = Истина;
				НоваяСтрока.Приоритет = 100;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОбластей.Сортировать("Верх, Низ Убыв, Приоритет");
	Возврат ТаблицаОбластей;
	
КонецФункции

Процедура ДополнитьТаблицуОбластейДаннымиТаблицы(Макет, ТаблицаОбластей, ТаблицыМакета)
	
	МассивОбработанных = Новый Массив;
	Для Каждого ТекСтрокаОбласти Из ТаблицаОбластей Цикл
		
		Область = Макет.Области[ТекСтрокаОбласти.Имя];
		Верх = Область.Верх;
		Низ = Область.Низ;
		ИмяОбласти = Область.Имя;
		МассивОбработанных.Добавить(ИмяОбласти);
		
		Для НомерСтроки = Верх По Низ Цикл
			
			СтрокаТаблиц = ТаблицыМакета.Найти(НомерСтроки, "Верх");
			ЭтоСтрокаТекущейОбласти = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Верх", НомерСтроки);
			НайденныеОбласти = ТаблицаОбластей.НайтиСтроки(Отбор);
			
			Если НайденныеОбласти.Количество() > 0 Тогда
				
				Результат = КонецОбласти(МассивОбработанных, ЭтоСтрокаТекущейОбласти, НайденныеОбласти);
				КонецВложеннойОбласти = Результат.КонецВложеннойОбласти;
				ЭтоСтрокаТекущейОбласти = Результат.ЭтоСтрокаТекущейОбласти;
				НомерСтроки = Макс(НомерСтроки, КонецВложеннойОбласти);
				
			КонецЕсли;
			
			Если СтрокаТаблиц <> Неопределено
			   И ЭтоСтрокаТекущейОбласти Тогда
				
				ТекСтрокаОбласти.ИмяТаблицы = СтрокаТаблиц.Имя;
				ТекСтрокаОбласти.ЭтоТаблица = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаОбластей.Сортировать("Верх, Низ Убыв, Приоритет");
	
КонецПроцедуры

Функция КонецОбласти(Знач МассивОбработанных, Знач ЭтоСтрокаТекущейОбластиПереданная, Знач НайденныеОбласти)
	
	КонецВложеннойОбласти = 0;
	ЭтоСтрокаТекущейОбласти = ЭтоСтрокаТекущейОбластиПереданная;
	
	Для Каждого ТекНайденнаяСтрока Из НайденныеОбласти Цикл
			
		Если МассивОбработанных.Найти(ТекНайденнаяСтрока.Имя) <> Неопределено
		 ИЛИ ТекНайденнаяСтрока.ЭтоОбластьУсловияВывода Тогда
			Продолжить;
		Иначе
			
			ЭтоСтрокаТекущейОбласти = Ложь;
			КонецВложеннойОбласти = Макс(КонецВложеннойОбласти, ТекНайденнаяСтрока.Низ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоСтрокаТекущейОбласти", ЭтоСтрокаТекущейОбласти);
	Результат.Вставить("КонецВложеннойОбласти", КонецВложеннойОбласти);
	Возврат Результат;
	
КонецФункции

Процедура СообщитьВыгрузкаНедоступна(Объект)
	
	Шаблон = НСтр("ru = 'Выгрузка %1 не выполнена: выбранный макет недоступен.'");
	ОбъектСтрокой = Строка(Объект);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ОбъектСтрокой);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект);
	
КонецПроцедуры

// Параметры:
//  КомандаПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//  НастройкиСохранения - см. УправлениеПечатью.НастройкиСохранения
//  СписокОбъектов - Массив из СправочникСсылка, ДокументСсылка
//  Результат - ТаблицаЗначений:
//   * ИмяФайла - Строка
//   * ДвоичныеДанные - ДвоичныеДанные
//
Процедура ВыполнитьВыгрузкуВФайл(КомандаПечати, НастройкиСохранения, СписокОбъектов, Результат)
	
	ТаблицаОбъектовПоМакетам = Новый ТаблицаЗначений;
	ТаблицаОбъектовПоМакетам.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовПоМакетам.Колонки.Добавить("МассивОбъектов", Новый ОписаниеТипов("Массив"));
	
	НоваяСтрока = ТаблицаОбъектовПоМакетам.Добавить();
	НоваяСтрока.ИмяМакета = КомандаПечати.Идентификатор;
	НоваяСтрока.МассивОбъектов = СписокОбъектов;
	
	ДанныеВыгрузки = СформироватьДанныеДляВыгрузки(КомандаПечати.МенеджерПечати, ТаблицаОбъектовПоМакетам);
	
	КоллекцияПечатныхФорм = ДанныеВыгрузки.КоллекцияПечатныхФорм;
	ОбъектыВыгрузки = ДанныеВыгрузки.ОбъектыВыгрузки;
	
	ИмяВременногоКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ПодписиИПечатиОбластей = Неопределено;
	Если НастройкиСохранения.ПодписьИПечать Тогда
		ПодписиИПечатиОбластей = УправлениеПечатью.ПодписиИПечатиОбластей(ОбъектыВыгрузки);
	КонецЕсли;
	
	Для Каждого ТекущаяКоллекция Из КоллекцияПечатныхФорм Цикл
		
		ТабличныйДокумент = ТекущаяКоллекция.ТабличныйДокумент;
		
		Если ТабличныйДокумент <> Неопределено Тогда
			
			ОбработатьНастройкиСохраненияПодписьИПечать(
				НастройкиСохранения,
				ТабличныйДокумент,
				ОбъектыВыгрузки,
				ПодписиИПечатиОбластей);
			
			ВыгрузкиПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ТабличныйДокумент, ОбъектыВыгрузки);
			
		Иначе
			
			ВыгрузкиПоОбъектам = ТекущаяКоллекция.СтруктураВыгрузки;
			
		КонецЕсли;
		
		ВыполнитьОбходПоОбъектам(ВыгрузкиПоОбъектам, ТекущаяКоллекция, НастройкиСохранения, Результат);
		
	КонецЦикла;
	
	ФайловаяСистема.УдалитьВременныйКаталог(ИмяВременногоКаталога);
	
КонецПроцедуры

Процедура ОбработатьНастройкиСохраненияПодписьИПечать(НастройкиСохранения, ТабличныйДокумент, ОбъектыВыгрузки, Знач ПодписиИПечатиОбластей)
	
	Если НастройкиСохранения.ПодписьИПечать Тогда
		
		ДанныеПечатиРисунковТабличногоДокумента = УправлениеПечатью.ПодписиИПечатиТабличногоДокумента(
			ОбъектыВыгрузки,
			ТабличныйДокумент,
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		Для Каждого ПодписиИПечатиОбласти Из ПодписиИПечатиОбластей Цикл
			
			ИмяОбласти = ПодписиИПечатиОбласти.Ключ;
			Если ДанныеПечатиРисунковТабличногоДокумента[ИмяОбласти] = Неопределено Тогда
				ДанныеПечатиРисунковТабличногоДокумента[ИмяОбласти] = Новый Соответствие();
			КонецЕсли;
			Для Каждого Элемент Из ПодписиИПечатиОбласти.Значение Цикл
				ДанныеПечатиРисунковТабличногоДокумента[ИмяОбласти][Элемент.Ключ] = Элемент.Значение;
			КонецЦикла;
			
		КонецЦикла;
		
		УправлениеПечатью.ДобавитьПодписьИПечать(ТабличныйДокумент, ДанныеПечатиРисунковТабличногоДокумента);
		
	Иначе
		УправлениеПечатью.УбратьПодписьИПечать(ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбходПоОбъектам(ВыгрузкиПоОбъектам, ТекущаяКоллекция, НастройкиСохранения, Результат)
	
	СоответствиеФорматаВыгрузкиРасширению = СоответствиеФорматаВыгрузкиФорматуСохранения();
	СоответствиеФорматов = СоответствиеФорматовВыгрузкиТипуФайлаТабличногоДокумента();
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	ИмяВременногоКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ДанныеДляРасширения = Новый Структура;
	ДанныеДляРасширения.Вставить("СоответствиеФорматаВыгрузкиРасширению", СоответствиеФорматаВыгрузкиРасширению);
	ДанныеДляРасширения.Вставить("СоответствиеФорматов", СоответствиеФорматов);
	ДанныеДляРасширения.Вставить("ТаблицаФорматов", ТаблицаФорматов);
	
	ПереводитьИменаФайловВТранслит = НастройкиСохранения.ПереводитьИменаФайловВТранслит;
	ВыбранныйФормат = ТекущаяКоллекция.ФорматСохранения; // ПеречислениеСсылка.ФорматыВыгрузкиОбъектов
	
	Счетчик = 0;
	
	Для Каждого СоответствиеОбъектаВыгрузке Из ВыгрузкиПоОбъектам Цикл
		
		Счетчик = Счетчик + 1;
		
		ОбъектВыгрузки = СоответствиеОбъектаВыгрузке.Ключ;
		РезультатВыгрузки = СоответствиеОбъектаВыгрузке.Значение;
		
		ИмяФайла = УправлениеПечатью.ИмяФайлаПечатнойФормыОбъекта(ОбъектВыгрузки, "", ТекущаяКоллекция.СинонимМакета);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		
		Если ПереводитьИменаФайловВТранслит Тогда
			ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
		КонецЕсли;
		
		ДанныеДляРасширения.Вставить("ИмяФайла", ИмяФайла);
		ДанныеДляРасширения.Вставить("ВыбранныйФормат", ВыбранныйФормат);
		
		ДанныеРасширения = ДанныеРасширенияФайла(РезультатВыгрузки, ДанныеДляРасширения, Счетчик);
		РасширениеФайла = ДанныеРасширения.РасширениеФайла;
		ТипФайла = ДанныеРасширения.ТипФайла;
		ИмяФайлаСРасширениемПредставление = ДанныеРасширения.ИмяФайлаСРасширениемПредставление;
		ИмяФайла = ДанныеРасширения.ИмяФайла;
		
		ШаблонИмяФайла = "%1.%2";
		ШаблонПолноеИмяФайла = "%1%2.%3";
		
		ИмяФайлаСРасширением = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонИмяФайла,
			ИмяФайла,
			РасширениеФайла);
		ПолноеИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПолноеИмяФайла,
			ИмяВременногоКаталога,
			ИмяФайла,
			РасширениеФайла);
			
		ПолноеИмяФайла = ФайловаяСистема.УникальноеИмяФайла(ПолноеИмяФайла);
		
		Если ТипЗнч(РезультатВыгрузки) = Тип("Структура") Тогда
			СформироватьФайлВыгрузкиСтруктуры(РезультатВыгрузки, ВыбранныйФормат, ПолноеИмяФайла);
		Иначе
			ЗаписатьТабличныйДокумент(РезультатВыгрузки, ПолноеИмяФайла, ТипФайла);
		КонецЕсли;
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			УправлениеПечатью.ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		УдалитьФайлы(ПолноеИмяФайла);
		
		Файл = Результат.Добавить();
		Файл.ИмяФайла = ИмяФайлаПоФормату(ИмяФайлаСРасширением, ИмяФайлаСРасширениемПредставление, ВыбранныйФормат);
		Файл.ДвоичныеДанные = ДвоичныеДанные;
		Файл.ОбъектВыгрузки = ОбъектВыгрузки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяФайлаПоФормату(Знач ИмяФайлаСРасширением, Знач ИмяФайлаСРасширениемПредставление, Знач ВыбранныйФормат)
	
	Если ВыбранныйФормат = Перечисления.ФорматыВыгрузкиОбъектов.DBF Тогда
		Возврат ИмяФайлаСРасширениемПредставление;
	Иначе
		Возврат ИмяФайлаСРасширением;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьТабличныйДокумент(ПечатнаяФорма, ПолноеИмяФайла, ТипФайла)
	
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла); // ТабличныйДокумент
	
	Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT
	 ИЛИ ТипФайла = ТипФайлаТабличногоДокумента.TXT Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла);
		ИсходныйТекст = ЧтениеТекста.Прочитать();
		НовыйТекст = СтрЗаменить(ИсходныйТекст, Символы.Таб, "");
		ЧтениеТекста.Закрыть();
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(НовыйТекст);
		Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
			ТекстовыйДокумент.Записать(ПолноеИмяФайла, КодировкаТекста.ANSI);
		Иначе
			ТекстовыйДокумент.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРасширенияФайла(РезультатВыгрузки, ДанныеДляРасширения, Счетчик)
	
	СоответствиеФорматаВыгрузкиРасширению = ДанныеДляРасширения.СоответствиеФорматаВыгрузкиРасширению;
	СоответствиеФорматов = ДанныеДляРасширения.СоответствиеФорматов;
	ТаблицаФорматов = ДанныеДляРасширения.ТаблицаФорматов;
	ВыбранныйФормат = ДанныеДляРасширения.ВыбранныйФормат;
	ИмяФайла = ДанныеДляРасширения.ИмяФайла;
	
	ИмяФайлаСРасширениемПредставление = "";
	РасширениеФайла = "";
	ТипФайла = "";
	
	Если ТипЗнч(РезультатВыгрузки) = Тип("Структура") Тогда
		
		РасширениеФайла = СоответствиеФорматаВыгрузкиРасширению[ВыбранныйФормат];
		
		Если ВыбранныйФормат = Перечисления.ФорматыВыгрузкиОбъектов.DBF Тогда
			
			ИмяФайлаСРасширениемПредставление = ИмяФайла + "." + РасширениеФайла;
			
			МаксимальнаяДлина = 3;
			ИмяФайла = СокрЛП(СтрЗаменить(ИмяФайла, " ", ""));
			Если СтрДлина(ИмяФайла) > МаксимальнаяДлина Тогда
				ИмяФайла = Лев(ИмяФайла, МаксимальнаяДлина) + Счетчик;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ВыбранныйФормат) = Тип("ПеречислениеСсылка.ФорматыВыгрузкиОбъектов") Тогда
			
			ТипФайла = СоответствиеФорматов[ВыбранныйФормат];
			
		Иначе
			
			ТипФайла = ТипФайлаТабличногоДокумента[ВыбранныйФормат];
			
		КонецЕсли;
		
		Отбор = Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла);
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Отбор)[0];
		РасширениеФайла = НастройкиФормата.Расширение;
		
	КонецЕсли;
	
	ДанныеРасширения = Новый Структура;
	ДанныеРасширения.Вставить("РасширениеФайла", РасширениеФайла);
	ДанныеРасширения.Вставить("ИмяФайлаСРасширениемПредставление", ИмяФайлаСРасширениемПредставление);
	ДанныеРасширения.Вставить("ТипФайла", ТипФайла);
	ДанныеРасширения.Вставить("ИмяФайла", ИмяФайла);
	
	Возврат ДанныеРасширения;
	
КонецФункции

// Параметры:
//  СтруктураСДанными - Структура
//  ВыбранныйФормат - ПеречислениеСсылка.ФорматыВыгрузкиОбъектов
//  ПолноеИмяФайла - Строка - полное имя файла
//
Процедура СформироватьФайлВыгрузкиСтруктуры(СтруктураСДанными, ВыбранныйФормат, ПолноеИмяФайла)
	
	ПредставлениеВыгрузки = "";
	Если ВыбранныйФормат = Перечисления.ФорматыВыгрузкиОбъектов.XML Тогда
		ВыполнитьВыгрузкуВXML(СтруктураСДанными, ПолноеИмяФайла, ПредставлениеВыгрузки);
	ИначеЕсли ВыбранныйФормат = Перечисления.ФорматыВыгрузкиОбъектов.JSON Тогда
		ВыполнитьВыгрузкуВJSON(СтруктураСДанными, ПолноеИмяФайла, ПредставлениеВыгрузки);
	ИначеЕсли ВыбранныйФормат = Перечисления.ФорматыВыгрузкиОбъектов.DBF Тогда
		ВыполнитьВыгрузкуВDBF(СтруктураСДанными, ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеОбластьXML(ЗаписьXML, СтруктураСДанными)
	
	Если СтруктураСДанными.ЭтоПараметр Тогда
		
		ЭлементСтруктуры = СтруктураСДанными;
		ИмяПараметра = СокрЛП(ЭлементСтруктуры.ИмяПараметра); // Строка
		ИмяПараметра = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ИмяПараметра);
		Значение = ЭлементСтруктуры.Значение; // ЛюбаяСсылка
		ЗначениеВФайл = ЗначениеВXMLJSON(Значение);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяПараметра);
		ЗаписьXML.ЗаписатьТекст(ЗначениеВФайл);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе
		
		Если СтруктураСДанными.ЭтоСтрокаТаблицы Тогда
			ИмяОбласти = СтруктураСДанными.ПредставлениеСтрокиТаблицы;
		Иначе
			ИмяОбласти = СтруктураСДанными.ИмяОбласти;
		КонецЕсли;
		ИмяОбласти = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ИмяОбласти);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяОбласти);
		КоличествоДанных = СтруктураСДанными.КоличествоДанных;
		
		Для НомерДанных = 1 По КоличествоДанных Цикл
			
			НомерДанныхСтрокой = Формат(НомерДанных, "ЧДЦ=0; ЧГ=");
			ЭлементСтруктуры = СтруктураСДанными["Данные_" + НомерДанныхСтрокой];
			Если ЭлементСтруктуры.ЭтоПараметр Тогда
				
				ИмяПараметра = СокрЛП(ЭлементСтруктуры.ИмяПараметра); // Строка
				ИмяПараметра = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ИмяПараметра);
				Значение = ЭлементСтруктуры.Значение; // ЛюбаяСсылка
				ЗначениеВФайл = ЗначениеВXMLJSON(Значение);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяПараметра);
				ЗаписьXML.ЗаписатьТекст(ЗначениеВФайл);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			Иначе
				ОбработатьДанныеОбластьXML(ЗаписьXML, ЭлементСтруктуры);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВXMLJSON(Значение, ЭтоXML = Истина)
	
	ДанныеПоЗначению = ТипЗначенияПримитивный(Значение);
	ПримитивныйТип = ДанныеПоЗначению.ПримитивныйТип;
	
	Если ПримитивныйТип
	   И ЭтоXML Тогда
		
		Результат = XMLСтрока(Значение);
		
	ИначеЕсли ПримитивныйТип Тогда
		
		Результат = Значение;
		
	Иначе
		
		Результат = СокрЛП(Строка(Значение));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеОбластьJSON(СтруктураСДанными, ДанныеВJSON)
	
	Если СтруктураСДанными.ЭтоПараметр Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДанных = СтруктураСДанными.КоличествоДанных;
	
	Для НомерДанных = 1 По КоличествоДанных Цикл
		
		НомерДанныхСтрокой = Формат(НомерДанных, "ЧДЦ=0; ЧГ=");
		ЭлементСтруктуры = СтруктураСДанными["Данные_" + НомерДанныхСтрокой];
		
		Если ЭлементСтруктуры.ЭтоПараметр Тогда
			
			ИмяПараметра = ЭлементСтруктуры.ИмяПараметра; // Строка
			Значение = ЭлементСтруктуры.Значение; // ЛюбаяСсылка
			ЗначениеВФайл = ЗначениеВXMLJSON(Значение, Ложь);
			ДанныеВJSON.Вставить(ИмяПараметра, ЗначениеВФайл);
			
		ИначеЕсли ЭлементСтруктуры.ЭтоТаблица Тогда
			
			МассивСтрок = ОбработатьТаблицуJSON(ЭлементСтруктуры);
			ДанныеВJSON.Вставить(ЭлементСтруктуры.ИмяОбласти, МассивСтрок);
			
		Иначе
			
			ВложенныеДанныеВJSON = Новый Структура;
			ОбработатьДанныеОбластьJSON(ЭлементСтруктуры, ВложенныеДанныеВJSON);
			ДанныеВJSON.Вставить(ЭлементСтруктуры.ИмяОбласти, ВложенныеДанныеВJSON);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьТаблицуJSON(ЭлементСтруктуры)
	
	МассивСтрок = Новый Массив;
	КоличествоДанных = ЭлементСтруктуры.КоличествоДанных;
	
	Для НомерДанных = 1 По КоличествоДанных Цикл
		
		НомерДанныхСтрокой = Формат(НомерДанных, "ЧДЦ=0; ЧГ=");
		ДанныеСтроки = Новый Структура;
		СтруктураДанныеСтроки = ЭлементСтруктуры["Данные_" + НомерДанныхСтрокой];
		ОбработатьДанныеОбластьJSON(СтруктураДанныеСтроки, ДанныеСтроки);
		МассивСтрок.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Процедура ВыполнитьВыгрузкуВDBF(СтруктураСДанными, ПолноеИмяФайла)
	
	КоличествоДанных = СтруктураСДанными.КоличествоДанных;
	ТипыКолонок = СтруктураСДанными.ТипыКолонок;
	ИменаКолонок = СтруктураСДанными.ИменаКолонок;
	ТаблицаДанных = Новый XBase;
	
	Для Каждого Колонка Из ИменаКолонок Цикл
		
		ИмяПоля = Колонка.Значение; // Строка
		ТипКолонки = ТипыКолонок[Колонка.Ключ]; // ОписаниеТипов
		ОписаниеКолонки = ОписаниеКолонкиДляDBF(ТипКолонки);
		
		ТипПоля = ОписаниеКолонки.ТипПоля;
		Длина = ОписаниеКолонки.Длина;
		Точность = ОписаниеКолонки.Точность;
		Если ТипПоля = "Булево" Тогда
			ТаблицаДанных.Поля.Добавить(ИмяПоля, "L");
		ИначеЕсли ТипПоля = "Дата" Тогда
			ТаблицаДанных.Поля.Добавить(ИмяПоля, "D");
		ИначеЕсли ТипПоля = "Строка" Тогда
			ТаблицаДанных.Поля.Добавить(ИмяПоля, "S", Длина);
		Иначе
			ТаблицаДанных.Поля.Добавить(ИмяПоля, "N", Длина, Точность);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДанных.СоздатьФайл(ПолноеИмяФайла);
	
	Для НомерСтроки = 1 По КоличествоДанных Цикл
		
		НомерСтрокиСтрокой = XMLСтрока(НомерСтроки);
		Данные = СтруктураСДанными["Данные_" + НомерСтрокиСтрокой];
		КоличествоКолонок = Данные.КоличествоДанных;
		
		ТаблицаДанных.Добавить();
		
		Для НомерПоля = 1 По КоличествоКолонок Цикл
			
			НомерПоляСтрокой = XMLСтрока(НомерПоля);
			ДанныеКолонки = Данные["Данные_" + НомерПоляСтрокой];
			Значение = ДанныеКолонки.Значение;
			ИмяПоля = ДанныеКолонки.ИмяПараметра;
			ТаблицаДанных[ИмяПоля] = Значение;
			
		КонецЦикла;
		
		ТаблицаДанных.Записать();
		
	КонецЦикла;
	
	ТаблицаДанных.ЗакрытьФайл();
	
КонецПроцедуры

// Возвращает структуру с описанием колонок для файла DBF.
// 
// Параметры:
//  ОписаниеТипа - ОписаниеТипов 
// 
// Возвращаемое значение:
//  Структура -  описание колонки для DBF:
// * ТипПоля - Строка
// * Длина - Число
// * Точность - Число
//
Функция ОписаниеКолонкиДляDBF(ОписаниеТипа)
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПоля", "");
	Результат.Вставить("Длина", 0);
	Результат.Вставить("Точность", 0);
	
	ТипПоляСтрока = "Строка";
	
	Если ТипЗнч(ОписаниеТипа) = Тип("ОписаниеТипов") Тогда
		
		КвалификаторыСтроки = ОписаниеТипа.КвалификаторыСтроки;
		КвалификаторыЧисла = ОписаниеТипа.КвалификаторыЧисла;
		
		Если ОписаниеТипа.СодержитТип(Тип("Дата")) Тогда
			Результат.ТипПоля = "Дата";
		ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Булево"))  Тогда
			Результат.ТипПоля = "Булево";
		ИначеЕсли КвалификаторыЧисла.Разрядность <> 0 Тогда
			
			Результат.ТипПоля = "Число";
			Результат.Длина = КвалификаторыЧисла.Разрядность;
			Результат.Точность = КвалификаторыЧисла.РазрядностьДробнойЧасти;
			
		ИначеЕсли КвалификаторыСтроки.Длина <> 0 Тогда
			
			Результат.ТипПоля = ТипПоляСтрока;
			Результат.Длина = КвалификаторыСтроки.Длина;
			
		Иначе
			
			Результат.ТипПоля = ТипПоляСтрока;
			Результат.Длина = 150;
			
		КонецЕсли;
		
	Иначе
		
		Результат.ТипПоля = ТипПоляСтрока;
		Результат.Длина = 150;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание (структуру) для переданного значения.
// 
// Параметры:
//  Значение - ЛюбаяСсылка - значение
// 
// Возвращаемое значение:
//  Структура - тип значения примитивный:
// * ТипЗначения - Тип
// * ПримитивныйТип - Булево
//
Функция ТипЗначенияПримитивный(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	МассивПримитивныхТипов = Новый Массив; // Массив из Тип
	МассивПримитивныхТипов.Добавить(Тип("Строка"));
	МассивПримитивныхТипов.Добавить(Тип("Булево"));
	МассивПримитивныхТипов.Добавить(Тип("Число"));
	МассивПримитивныхТипов.Добавить(Тип("Дата"));
	
	Результат = (МассивПримитивныхТипов.Найти(ТипЗначения) <> Неопределено);
	
	Структура = Новый Структура;
	Структура.Вставить("ТипЗначения", ТипЗначения);
	Структура.Вставить("ПримитивныйТип", Результат);
	
	Возврат Структура;
	
КонецФункции

Функция СоответствиеФорматовВыгрузкиТипуФайлаТабличногоДокумента()
	
	СоответствиеФорматов = Новый Соответствие;
	СоответствиеФорматов.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.ANSITXT, ТипФайлаТабличногоДокумента.ANSITXT);
	СоответствиеФорматов.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.TXT, ТипФайлаТабличногоДокумента.TXT);
	СоответствиеФорматов.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.XLS, ТипФайлаТабличногоДокумента.XLS);
	СоответствиеФорматов.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.XLSX, ТипФайлаТабличногоДокумента.XLSX);
	СоответствиеФорматов.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.HTML5, ТипФайлаТабличногоДокумента.HTML5);
	СоответствиеФорматов.Вставить(Перечисления.ФорматыВыгрузкиОбъектов.MXL, ТипФайлаТабличногоДокумента.MXL);
	
	Возврат СоответствиеФорматов;
	
КонецФункции

// Собирает список команд выгрузки из нескольких объектов.
Процедура ЗаполнитьКомандыВыгрузкиДляСпискаОбъектов(СписокОбъектов, КомандыВыгрузки)
	
	ИсточникиКомандВыгрузки = Новый Соответствие;
	Для Каждого ИсточникКомандПечати Из УправлениеПечатью.ИсточникиКомандПечати() Цикл
		ИсточникиКомандВыгрузки.Вставить(ИсточникКомандПечати, Истина);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из СписокОбъектов Цикл
		
		Если ИсточникиКомандВыгрузки[ОбъектМетаданных] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомандыВыгрузкиФормы = КомандыВыгрузкиОбъекта(ОбъектМетаданных); // @skip-check query-in-loop - Малый цикл
		
		Для Каждого ДобавляемаяКомандаВыгрузки Из КомандыВыгрузкиФормы Цикл
			
			Если ДобавляемаяКомандаВыгрузки.Отключена Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("УникальныйИдентификатор", ДобавляемаяКомандаВыгрузки.УникальныйИдентификатор);
			НайденныеКоманды = КомандыВыгрузки.НайтиСтроки(Отбор);
			
			Если НайденныеКоманды.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДобавляемаяКомандаВыгрузки.ТипыОбъектовПечати.Количество() = 0 Тогда
				
				ДополнительныеПараметры = ДобавляемаяКомандаВыгрузки.ДополнительныеПараметры;
				Если ЗначениеЗаполнено(ДополнительныеПараметры.ТипИсточника) Тогда
					
					ДобавляемаяКомандаВыгрузки.ТипыОбъектовПечати.Добавить(ДополнительныеПараметры.ТипИсточника);
					
				Иначе
					
					ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
					ДобавляемаяКомандаВыгрузки.ТипыОбъектовПечати.Добавить(ТипОбъекта);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(КомандыВыгрузки.Добавить(), ДобавляемаяКомандаВыгрузки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
