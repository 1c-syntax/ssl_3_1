///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует отчеты и отправляет их согласно настройкам транспорта (Папка, FILE, EMAIL, FTP);
//
// Параметры:
//   Рассылка - СправочникСсылка.РассылкиОтчетов - выполняемая рассылка отчетов.
//   ПараметрыЖурнала - Структура - параметры записи в журнал регистрации, где:
//       * ИмяСобытия - Строка - имя события (или группы событий).
//       * Метаданные - ОбъектМетаданных - метаданные для привязки события журнала регистрации.
//       * Данные     - Произвольный - данные для привязки события журнала регистрации.
//   ДополнительныеНастройки - Структура - настройки, которые переопределяют стандартные параметры рассылки, где:
//       * Получатели - Соответствие - набор получателей и их e-mail адресов.
//           ** Ключ - СправочникСсылка - получатель.
//           ** Значение - Строка - набор e-mail адресов получателя в строке с разделителями.
//
// Возвращаемое значение:
//   Булево - признак успешного выполнения рассылки.
//
Функция ВыполнитьРассылкуОтчетов(Рассылка, ПараметрыЖурнала = Неопределено, ДополнительныеНастройки = Неопределено) Экспорт
	// Параметры записи в журнал регистрации.
	Если ПараметрыЖурнала = Неопределено Тогда
		ПараметрыЖурнала = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыЖурнала.Свойство("ИмяСобытия") Тогда
		ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Запуск по требованию'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если Не ПараметрыЖурнала.Свойство("Данные") Тогда
		ПараметрыЖурнала.Вставить("Данные", Рассылка);
	КонецЕсли;
	
	Если Не ПараметрыЖурнала.Свойство("Метаданные") Тогда
		ПараметрыЖурнала.Вставить("Метаданные", ПараметрыЖурнала.Данные.Метаданные());
	КонецЕсли;
	
	// Проверка прав доступа
	Если Не ПравоВывода(ПараметрыЖурнала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка базовых реквизитов рассылки.
	Если Не Рассылка.Подготовлена
		Или Рассылка.ПометкаУдаления Тогда
		
		Причина = "";
		Если Не Рассылка.Подготовлена Тогда
			Причина = Причина + Символы.ПС + НСтр("ru = 'Рассылка не подготовлена'");
		КонецЕсли;
		Если Рассылка.ПометкаУдаления Тогда
			Причина = Причина + Символы.ПС + НСтр("ru = 'Рассылка помечена на удаление'");
		КонецЕсли;
		
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Завершение'"), СокрЛП(Причина));
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗапускЗафиксирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеНастройки, "ЗапускЗафиксирован");
	Если ЗапускЗафиксирован <> Истина Тогда
		// Регистрация запуска (запущена, но не выполнена).
		РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьЗапускРассылки(Рассылка);
	КонецЕсли;
	
	// Таблица отчетов
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ТаблицаОтчетов.Колонки.Добавить("Отчет", Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.Отчеты.Реквизиты.Отчет.Тип);
	ТаблицаОтчетов.Колонки.Добавить("ОтправлятьЕслиПустой", Новый ОписаниеТипов("Булево"));
	
	МассивТиповНастроек = Новый Массив;
	МассивТиповНастроек.Добавить(Тип("Неопределено"));
	МассивТиповНастроек.Добавить(Тип("ПользовательскиеНастройкиКомпоновкиДанных"));
	МассивТиповНастроек.Добавить(Тип("Структура"));
	
	ТаблицаОтчетов.Колонки.Добавить("Настройки", Новый ОписаниеТипов(МассивТиповНастроек));
	ТаблицаОтчетов.Колонки.Добавить("Форматы", Новый ОписаниеТипов("Массив"));
	
	// Форматы по умолчанию
	ФорматыПоУмолчанию = Новый Массив;
	Найденные = Рассылка.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", ПустоеЗначениеОтчета()));
	Для Каждого СтрокаФормат Из Найденные Цикл
		ФорматыПоУмолчанию.Добавить(СтрокаФормат.Формат);
	КонецЦикла;
	Если ФорматыПоУмолчанию.Количество() = 0 Тогда
		СписокФорматов = СписокФорматов();
		Для Каждого ЗначениеСписка Из СписокФорматов Цикл
			Если ЗначениеСписка.Пометка Тогда
				ФорматыПоУмолчанию.Добавить(ЗначениеСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ФорматыПоУмолчанию.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не установлены форматы по умолчанию.'");
	КонецЕсли;
	
	// Заполнение таблицы отчетов
	Для Каждого СтрокаОтчет Из Рассылка.Отчеты Цикл
		Стр = ТаблицаОтчетов.Добавить();
		Стр.Отчет = СтрокаОтчет.Отчет;
		Стр.ОтправлятьЕслиПустой = СтрокаОтчет.ОтправлятьЕслиПустой;
		
		// Настройки
		Настройки = СтрокаОтчет.Настройки.Получить();
		Если ТипЗнч(Настройки) = Тип("ТаблицаЗначений") Тогда
			Стр.Настройки = Новый Структура;
			Найденные = Настройки.НайтиСтроки(Новый Структура("Использование", Истина));
			Для Каждого СтрокаНастройка Из Найденные Цикл
				Стр.Настройки.Вставить(СтрокаНастройка.Реквизит, СтрокаНастройка.Значение);
			КонецЦикла;
		Иначе
			Стр.Настройки = Настройки;
		КонецЕсли;
		
		// Форматы
		Найденные = Рассылка.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СтрокаОтчет.Отчет));
		Если Найденные.Количество() = 0 Тогда
			Стр.Форматы = ФорматыПоУмолчанию;
		Иначе
			Для Каждого СтрокаФормат Из Найденные Цикл
				Стр.Форматы.Добавить(СтрокаФормат.Формат);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка параметров доставки.
	ПараметрыДоставки = Новый Структура;
	ПараметрыДоставки.Вставить("ЗапускЗафиксирован",           Истина);
	ПараметрыДоставки.Вставить("Автор",                        Пользователи.ТекущийПользователь());
	ПараметрыДоставки.Вставить("ИспользоватьПапку",            Рассылка.ИспользоватьПапку);
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог",   Рассылка.ИспользоватьСетевойКаталог);
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс",        Рассылка.ИспользоватьFTPРесурс);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Рассылка.ИспользоватьЭлектроннуюПочту);
	ПараметрыДоставки.Вставить("ТранслитерироватьИменаФайлов", Рассылка.ТранслитерироватьИменаФайлов);
	
	// Проверки отмеченных способов доставки.
	Если Не ПараметрыДоставки.ИспользоватьПапку
		И Не ПараметрыДоставки.ИспользоватьСетевойКаталог
		И Не ПараметрыДоставки.ИспользоватьFTPРесурс
		И Не ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение, НСтр("ru = 'Не выбран способ доставки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("Персонализирована", Рассылка.Персонализирована);
	ПараметрыДоставки.Вставить("Архивировать",      Рассылка.Архивировать);
	ПараметрыДоставки.Вставить("ИмяАрхива",         Рассылка.ИмяАрхива);
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыДоставки.Вставить("ПарольАрхива", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Рассылка, "ПарольАрхива"));
	УстановитьПривилегированныйРежим(Ложь);
	
	// Подготовка параметров доставки в папку.
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		ПараметрыДоставки.Вставить("Папка", Рассылка.Папка);
	КонецЕсли;
	
	// Подготовка параметров доставки в сетевой каталог.
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		ПараметрыДоставки.Вставить("СетевойКаталогWindows", Рассылка.СетевойКаталогWindows);
		ПараметрыДоставки.Вставить("СетевойКаталогLinux",   Рассылка.СетевойКаталогLinux);
	КонецЕсли;
	
	// Подготовка параметров доставки на FTP ресурс.
	Если ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
		ПараметрыДоставки.Вставить("Сервер",              Рассылка.FTPСервер);
		ПараметрыДоставки.Вставить("Порт",                Рассылка.FTPПорт);
		ПараметрыДоставки.Вставить("Логин",               Рассылка.FTPЛогин);
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыДоставки.Вставить("Пароль", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Рассылка, "FTPПароль"));
		УстановитьПривилегированныйРежим(Ложь);
		ПараметрыДоставки.Вставить("Каталог",             Рассылка.FTPКаталог);
		ПараметрыДоставки.Вставить("ПассивноеСоединение", Рассылка.FTPПассивноеСоединение);
	КонецЕсли;
	
	// Подготовка параметров доставки по электронной почте.
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		ПараметрыДоставки.Вставить("УчетнаяЗапись",   Рассылка.УчетнаяЗапись);
		ПараметрыДоставки.Вставить("ТолькоУведомить", Рассылка.ТолькоУведомить);
		ПараметрыДоставки.Вставить("СкрытыеКопии",    Рассылка.СкрытыеКопии);
		ПараметрыДоставки.Вставить("ШаблонТемы",      Рассылка.ТемаПисьма);
		ПараметрыДоставки.Вставить("ШаблонТекста",  ?(Рассылка.ПисьмоВФорматеHTML, Рассылка.ТекстПисьмаВФорматеHTML, Рассылка.ТекстПисьма));
		
		// Получатели
		Если ДополнительныеНастройки <> Неопределено И ДополнительныеНастройки.Свойство("Получатели") Тогда
			ПараметрыДоставки.Вставить("Получатели", ДополнительныеНастройки.Получатели);
		Иначе
			Получатели = СформироватьСписокПолучателейРассылки(Рассылка, ПараметрыЖурнала);
			Если Получатели.Количество() = 0 Тогда
				ПараметрыДоставки.ИспользоватьЭлектроннуюПочту = Ложь;
				Если Не ПараметрыДоставки.ИспользоватьПапку
					И Не ПараметрыДоставки.ИспользоватьСетевойКаталог
					И Не ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			ПараметрыДоставки.Вставить("Получатели", Получатели);
		КонецЕсли;
		
		ТипТекста = ?(Рассылка.ПисьмоВФорматеHTML, "HTML", "ПростойТекст");
		Картинки = Новый Структура;
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
		ПараметрыПисьма.Вставить("Картинки", Картинки);
		
		Если Рассылка.ПисьмоВФорматеHTML Тогда
			ПараметрыПисьма.Картинки = Рассылка.КартинкиПисьмаВФорматеHTML.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Рассылка.АдресОтвета) Тогда
			ПараметрыПисьма.Вставить("АдресОтвета", Рассылка.АдресОтвета);
		КонецЕсли;
		
		ПараметрыДоставки.Вставить("ПараметрыПисьма", ПараметрыПисьма);
		
	КонецЕсли;
	
	Если Не ПараметрыДоставки.Свойство("ЗапускЗафиксирован") Или Не ПараметрыДоставки.ЗапускЗафиксирован Тогда
		РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьЗапускРассылки(Рассылка);
	КонецЕсли;
	
	Результат = ВыполнитьРассылку(ТаблицаОтчетов, ПараметрыДоставки, Рассылка, ПараметрыЖурнала);
	РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьРезультатВыполненияРассылки(Рассылка, ПараметрыДоставки);
	Возврат Результат;
	
КонецФункции

// Выполняет рассылку отчетов без элемента справочника "Рассылки отчетов".
//
////////////////////////////////////////////////////////////////////////////////
// Параметры:
//
//   Отчеты - ТаблицаЗначений - набор выгружаемых отчетов. Колонки:
//       * Отчет - СправочникСсылка.ВариантыОтчетов, СправочникСсылка.ДополнительныеОтчетыИОбработки -
//           Отчет, который необходимо сформировать.
//       * ОтправлятьЕслиПустой - Булево - флаг отправки отчета даже если он пустой.
//       * Настройки - настройки, с которыми должен сформироваться отчет, где:
//           Дополнительно используется для определения принадлежности отчета к СКД.
//           - ПользовательскиеНастройкиКомпоновкиДанных - табличный документ сформируется механизмами СКД.
//           - Структура - Табличный документ сформируется при помощи метода "Сформировать()", где:
//               *** Ключ     - Строка       - имя реквизита объекта отчета.
//               *** Значение - Произвольный - значение реквизита объекта отчета.
//           - Неопределено - настройки по умолчанию. Для определения принадлежности к СКД
//               будет использован реквизит объекта "СхемаКомпоновкиДанных".
//       * Форматы - Массив из ПеречислениеСсылка.ФорматыСохраненияОтчетов -
//            Форматы, в которых необходимо сохранить и отправить отчет.
//
//   ПараметрыДоставки - Структура - настройки транспорта (способа доставки) отчетов.
//     Набор реквизитов может отличаться для разных способов доставки:
//
//     Обязательные реквизиты:
//       * Автор - СправочникСсылка.Пользователи - автор рассылки.
//       * ИспользоватьПапку            - Булево - доставлять отчеты в папку подсистемы "Работа с файлами".
//       * ИспользоватьСетевойКаталог   - Булево - доставлять отчеты в папку файловой системы.
//       * ИспользоватьFTPРесурс        - Булево - доставлять отчеты на FTP.
//       * ИспользоватьЭлектроннуюПочту - Булево - доставлять отчеты по электронной почте.
//
//     Обязательные реквизиты когда { ИспользоватьПапку = Истина }:
//       * Папка (СправочникСсылка.ПапкиФайлов) Папка подсистемы "Работа с файлами".
//
//     Обязательные реквизиты когда { ИспользоватьСетевойКаталог = Истина }:
//       * СетевойКаталогWindows - Строка - каталог файловой системы (локальный на сервере или сетевой).
//       * СетевойКаталогLinux   - Строка - каталог файловой системы (локальный на сервере или сетевой).
//
//     Обязательные реквизиты когда { ИспользоватьFTPРесурс = Истина }:
//       * Сервер              - Строка - имя FTP сервера.
//       * Порт                - Число  - порт FTP сервера.
//       * Логин               - Строка - имя пользователя FTP сервера.
//       * Пароль              - Строка - пароль пользователя FTP сервера.
//       * Каталог             - Строка - путь к каталогу на FTP сервере.
//       * ПассивноеСоединение - Булево - использовать пассивное соединение.
//
//     Обязательные реквизиты когда { ИспользоватьЭлектроннуюПочту = Истина }:
//       * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты -
//           Учетная запись для отправки почтового сообщения.
//       * Получатели - Соответствие - набор получателей и их e-mail адресов.
//           ** Ключ - СправочникСсылка - получатель.
//           ** Значение - Строка - набор e-mail адресов получателя в строке с разделителями.
//
//     Необязательные реквизиты:
//       * Архивировать - Булево - архивировать все файлы сформированных отчетов в один архив.
//                                 Архивация может потребоваться, например, при рассылке графиков в формате html.
//       * ИмяАрхива    - Строка - имя архива.
//       * ПарольАрхива - Строка - пароль архива.
//       * ТранслитерироватьИменаФайлов - Булево - признак необходимости транслитерации имен файлов отчетов рассылки.
//
//     Необязательные реквизиты когда { ИспользоватьЭлектроннуюПочту = Истина }:
//       * Персонализирована - Булево - рассылка персонализирована получателями.
//           Значение по умолчанию Ложь.
//           Если установить значение Истина, то каждый получатель получит отчет с отбором по нему.
//           Для этого в отчетах следует установить отбор "[Получатель]" по реквизиту, совпадающем с типом получателя.
//           Применимо только только при доставке по почте,
//           поэтому когда устанавливается в Истина, то другие способы доставки отключаются:
//           { ИспользоватьПапку = Ложь }
//           { ИспользоватьСетевойКаталог = Ложь }
//           { ИспользоватьFTPРесурс = Ложь }
//           И соответствующая им возможность уведомления:
//           { ТолькоУведомить = Ложь }
//       * ТолькоУведомить - Булево, Ложь - отправлять только уведомления (не присоединять сформированные отчеты).
//       * СкрытыеКопии    - Булево, Ложь - если "Истина", то при отправке вместо "Кому" заполняется "СкрытыеКопии".
//       * ШаблонТемы      - Строка -       тема письма.
//       * ШаблонТекста    - Строка -       тело письма.
//       * ПараметрыПисьма - Структура -    параметры сообщения,
//           которые будут переданы подсистеме "РаботаСПочтовымиСообщениями" напрямую.
//           Их обработку можно увидеть в модуле "РаботаСПочтовымиСообщениямиСлужебный", процедура "ОтправитьСообщение".
//           Подсистемой "РассылкаОтчетов" могут использоваться:
//           ** ТипТекста - ТипТекстаПочтовогоСообщения, Строка, ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем -
//               Тип текста письма.
//           ** Вложения - Соответствие - картинки письма.
//               *** Ключ - Строка - наименование.
//               *** Значение - данные картинки.
//                   - Строка - адрес во временном хранилище, по которому размещена картинка.
//                   - ДвоичныеДанные - двоичные данные картинки.
//                   - Картинка - данные картинки.
//           ** АдресОтвета - Строка - e-mail адрес ответа.
//
//   НаименованиеРассылки - Строка - выводится в тему и сообщение, а также для вывода ошибок.
//
//   ПараметрыЖурнала - Структура - параметры записи в журнал регистрации.
//       * ИмяСобытия - Строка           - имя события (или группы событий).
//       * Метаданные - ОбъектМетаданных - метаданные для привязки события журнала регистрации.
//       * Данные     - Произвольный     - данные для привязки события журнала регистрации.
//
// Возвращаемое значение:
//   Булево - признак успешного выполнения рассылки.
//
Функция ВыполнитьРассылку(Отчеты, ПараметрыДоставки, НаименованиеРассылки = "", ПараметрыЖурнала = Неопределено) Экспорт
	РассылкаВыполнена = Ложь;
	
	// Добавление дерева сформированных отчетов - табличных документов и отчетов, сохраненных в форматы (файлов).
	ДеревоОтчетов = СоздатьДеревоОтчетов();
	
	// Заполнение параметрами по умолчанию и проверка на заполненность ключевых параметров доставки.
	Если Не ПроверитьИДозаполнитьПараметрыВыполнения(Отчеты, ПараметрыДоставки, НаименованиеРассылки, ПараметрыЖурнала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Строка дерева общих (не персонализированных по получателям) отчетов.
	ПараметрыДоставки.Вставить("СтрокаОбщихОтчетов", ОпределитьСтрокуДереваДляПолучателя(ДеревоОтчетов, Неопределено, ПараметрыДоставки));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Инициализирована рассылка ''%1'', автор: ''%2'''"),
		НаименованиеРассылки, ПараметрыДоставки.Автор);
	
	ЗаписьЖурнала(ПараметрыЖурнала,, ТекстСообщения);
	
	// Формирование и сохранение отчетов.
	НомерОтчета = 1;
	Для Каждого СтрокаОтчет Из Отчеты Цикл
		ТекстЖурнала = НСтр("ru = 'Отчет ''%1'' формируется'");
		Если СтрокаОтчет.Настройки = Неопределено Тогда
			ТекстЖурнала = ТекстЖурнала + Символы.ПС + НСтр("ru = '(пользовательские настройки не заданы)'");
		КонецЕсли;
		
		ПредставлениеОтчета = Строка(СтрокаОтчет.Отчет);
		
		ЗаписьЖурнала(ПараметрыЖурнала,
			УровеньЖурналаРегистрации.Примечание,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЖурнала, ПредставлениеОтчета));
		
		// Инициализация отчета.
		ПараметрыОтчета = Новый Структура("Отчет, Настройки, Форматы, ОтправлятьЕслиПустой");
		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, СтрокаОтчет);
		Если Не ИнициализироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ПараметрыДоставки.Персонализирована) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыДоставки.Персонализирована И НЕ ПараметрыОтчета.Персонализирован Тогда
			ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет ''%1'' не может сформирован, так как в его настройках не указан отбор по получателю рассылки.'"),
				ПредставлениеОтчета);
			
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка, ПараметрыОтчета.Ошибки);
			Продолжить;
		КонецЕсли;
	
		// Формирование табличных документов и сохранение в форматы.
		Попытка
			Если ПараметрыОтчета.Персонализирован Тогда
				// В разрезе получателей
				Для Каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
					СформироватьИСохранитьОтчет(
						ПараметрыЖурнала,
						ПараметрыОтчета,
						ДеревоОтчетов,
						ПараметрыДоставки,
						КлючИЗначение.Ключ);
				КонецЦикла;
			Иначе
				// Без персонализации
				СформироватьИСохранитьОтчет(
					ПараметрыЖурнала,
					ПараметрыОтчета,
					ДеревоОтчетов,
					ПараметрыДоставки,
					Неопределено);
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет ''%1'' успешно сформирован'"), ПредставлениеОтчета);
			
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, ТекстСообщения);

			НомерОтчета = НомерОтчета + 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет ''%1'' не сформирован:'"), ПредставлениеОтчета);
			
			ЗаписьЖурнала(ПараметрыЖурнала,, ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	// Проверка на количество сохраненных отчетов.
	Если ДеревоОтчетов.Строки.Найти(3, "Уровень", Истина) = Неопределено Тогда
		ЗаписьЖурнала(ПараметрыЖурнала,
			УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Рассылка отчетов не выполнена, так как отчеты пустые или не сформированы из-за ошибок.'"));
			
		ФайловаяСистема.УдалитьВременныйКаталог(ПараметрыДоставки.КаталогВременныхФайлов);
		Возврат Ложь;
	КонецЕсли;
	
	// Общие отчеты.
	ОбщиеВложения = ПараметрыДоставки.СтрокаОбщихОтчетов.Строки.НайтиСтроки(Новый Структура("Уровень", 3), Истина);
	
	// Отправка личных отчетов (персонализированных).
	Для Каждого СтрокаПолучатель Из ДеревоОтчетов.Строки Цикл
		Если СтрокаПолучатель = ПараметрыДоставки.СтрокаОбщихОтчетов Тогда
			Продолжить; // Пропустить строку дерева общих отчетов.
		КонецЕсли;
		
		// Личные вложения.
		ЛичныеВложения = СтрокаПолучатель.Строки.НайтиСтроки(Новый Структура("Уровень", 3), Истина);
		
		// Проверка на количество сохраненных персональных отчетов.
		Если ЛичныеВложения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Объединение общих и личных вложений.
		ВложенияПолучателя = ОбъединитьМассивы(ОбщиеВложения, ЛичныеВложения);
		
		// Формирование представления отчетов.
		СформироватьПредставлениеОтчетовДляПолучателя(ПараметрыДоставки, СтрокаПолучатель);
		
		// Архивация вложений.
		АрхивацияВложений(ВложенияПолучателя, ПараметрыДоставки, СтрокаПолучатель.Значение);
		
		ПредставлениеПолучателя = Строка(СтрокаПолучатель.Ключ);
		
		// Доставка.
		Попытка
			ОтправитьОтчетыПолучателю(ВложенияПолучателя, ПараметрыДоставки, СтрокаПолучатель);
			РассылкаВыполнена = Истина;
			ПараметрыДоставки.ВыполненаПоЭлектроннойПочте = Истина;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить отчеты получателю ''%1'':'"), ПредставлениеПолучателя);
			
			ЗаписьЖурнала(ПараметрыЖурнала,, ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если РассылкаВыполнена Тогда
			ПараметрыДоставки.Получатели.Удалить(СтрокаПолучатель.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Отправка общих отчетов.
	Если ОбщиеВложения.Количество() > 0 Тогда
		// Представление отчетов.
		СформироватьПредставлениеОтчетовДляПолучателя(ПараметрыДоставки, СтрокаПолучатель);
		
		// Архивация вложений.
		АрхивацияВложений(ОбщиеВложения, ПараметрыДоставки, ПараметрыДоставки.КаталогВременныхФайлов);
		
		// Доставка.
		Если ВыполнитьДоставку(ПараметрыЖурнала, ПараметрыДоставки, ОбщиеВложения) Тогда
			РассылкаВыполнена = Истина;
		КонецЕсли;
	КонецЕсли;

	Если РассылкаВыполнена Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, , НСтр("ru = 'Рассылка выполнена'"));
	Иначе
		ЗаписьЖурнала(ПараметрыЖурнала, , НСтр("ru = 'Рассылка не выполнена'"));
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйКаталог(ПараметрыДоставки.КаталогВременныхФайлов);
	
	// Результат.
	Если ПараметрыЖурнала.Свойство("БылиОшибки") Тогда
		ПараметрыДоставки.БылиОшибки = ПараметрыЖурнала.БылиОшибки;
	КонецЕсли;
	
	Если ПараметрыЖурнала.Свойство("БылиПредупреждения") Тогда
		ПараметрыДоставки.БылиПредупреждения = ПараметрыЖурнала.БылиПредупреждения;
	КонецЕсли;
	
	Возврат РассылкаВыполнена;
КонецФункции

// Для вызова из модулей "РассылкаОтчетовПереопределяемый" и "РассылкаОтчетовПовтИсп".
//   Добавляет формат (в случае его отсутствия) и устанавливает его параметры (если переданы).
//
// Параметры:
//   СписокФорматов - СписокЗначений - список форматов.
//   ФорматСсылка   - Строка, ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка или имя формата.
//   Картинка                - Картинка - необязательный. Картинка формата.
//   ИспользоватьПоУмолчанию - Булево   - необязательный. Признак того, что формат используется по умолчанию.
//
Процедура УстановитьПараметрыФормата(СписокФорматов, ФорматСсылка, Картинка = Неопределено, ИспользоватьПоУмолчанию = Неопределено) Экспорт
	Если ТипЗнч(ФорматСсылка) = Тип("Строка") Тогда
		ФорматСсылка = Перечисления.ФорматыСохраненияОтчетов[ФорматСсылка];
	КонецЕсли;
	ЭлементСписка = СписокФорматов.НайтиПоЗначению(ФорматСсылка);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = СписокФорматов.Добавить(ФорматСсылка, Строка(ФорматСсылка), Ложь, БиблиотекаКартинок.ФорматПустой);
	КонецЕсли;
	Если Картинка <> Неопределено Тогда
		ЭлементСписка.Картинка = Картинка;
	КонецЕсли;
	Если ИспользоватьПоУмолчанию <> Неопределено Тогда
		ЭлементСписка.Пометка = ИспользоватьПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

// Для вызова из модулей "РассылкаОтчетовПереопределяемый" и "РассылкаОтчетовПовтИсп".
//   Добавляет описание типа получателей в соответствующую таблицу.
//
// Параметры:
//   ТаблицаТипов  - ТаблицаЗначений - передается из параметров процедуры "как есть". Содержит информацию о типах.
//   ДоступныеТипы - Массив          - передается из параметров процедуры "как есть". Массив неиспользованных типов.
//   Настройки     - Структура       - предустановленные настройки для регистрации основного типа.
//     Обязательные параметры:
//       * ОсновнойТип - Тип - тип, который будет выступать как основной для описываемых получателей.
//     Необязательные параметры:
//       * Представление - Строка - представление этого типа получателей в интерфейсе.
//       * ВидКИ - СправочникСсылка.ВидыКонтактнойИнформации - основной вид или группа контактной информации
//           для адресов электронной почты этого типа получателей.
//       * ПутьФормыВыбора - Строка - путь к форме выбора.
//       * ДополнительныйТип - Тип - дополнительный тип, который можно выбрать вместе с основным из формы выбора.
//
Процедура ДобавитьЭлементВТаблицуТиповПолучателей(ТаблицаТипов, ДоступныеТипы, Настройки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОсновногоТипа = Метаданные.НайтиПоТипу(Настройки.ОсновнойТип);
	
	// Регистрация использования основного типа.
	ИндексТипа = ДоступныеТипы.Найти(Настройки.ОсновнойТип);
	Если ИндексТипа <> Неопределено Тогда
		ДоступныеТипы.Удалить(ИндексТипа);
	КонецЕсли;
	
	// Идентификаторы объектов метаданных.
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Настройки.ОсновнойТип);
	СтрокаТаблицы = ТаблицаТипов.Найти(ИдентификаторОбъектаМетаданных, "ИдентификаторОбъектаМетаданных");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ТаблицаТипов.Добавить();
		СтрокаТаблицы.ИдентификаторОбъектаМетаданных = ИдентификаторОбъектаМетаданных;
	КонецЕсли;
	
	// Тип получателей
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Настройки.ОсновнойТип);
	
	// Тип получателей: Основной
	СтрокаТаблицы.ОсновнойТип = Новый ОписаниеТипов(МассивТипов);
	
	// Тип получателей: Дополнительный.
	Если Настройки.Свойство("ДополнительныйТип") Тогда
		МассивТипов.Добавить(Настройки.ДополнительныйТип);
		
		// Регистрация дополнительного типа.
		ИндексТипа = ДоступныеТипы.Найти(Настройки.ДополнительныйТип);
		Если ИндексТипа <> Неопределено Тогда
			ДоступныеТипы.Удалить(ИндексТипа);
		КонецЕсли;
	КонецЕсли;
	СтрокаТаблицы.ТипПолучателей = Новый ОписаниеТипов(МассивТипов);
	
	// Представление
	Если Настройки.Свойство("Представление") Тогда
		СтрокаТаблицы.Представление = Настройки.Представление;
	Иначе
		СтрокаТаблицы.Представление = МетаданныеОсновногоТипа.Синоним;
	КонецЕсли;
	
	// Основной вид контактной информации "E-mail" для объекта.
	Если Настройки.Свойство("ВидКИ") И Не Настройки.ВидКИ.ЭтоГруппа Тогда
		СтрокаТаблицы.ОсновнойВидКИ = Настройки.ВидКИ;
		СтрокаТаблицы.ГруппаКИ = Настройки.ВидКИ.Родитель;
	Иначе
		Если Настройки.Свойство("ВидКИ") Тогда
			СтрокаТаблицы.ГруппаКИ = Настройки.ВидКИ;
		Иначе
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
				
				МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
				ИмяГруппыКИ = СтрЗаменить(МетаданныеОсновногоТипа.ПолноеИмя(), ".", "");
				СтрокаТаблицы.ГруппаКИ = МодульУправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени(ИмяГруппыКИ);
				
			КонецЕсли;
			
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.ВидыКонтактнойИнформации ГДЕ Родитель = &Родитель И Тип = &Тип";
		Запрос.УстановитьПараметр("Родитель", СтрокаТаблицы.ГруппаКИ);
		Запрос.Параметры.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТаблицы.ОсновнойВидКИ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Полный путь к форме выбора этого объекта.
	Если Настройки.Свойство("ПутьФормыВыбора") Тогда
		СтрокаТаблицы.ПутьФормыВыбора = Настройки.ПутьФормыВыбора;
	Иначе
		СтрокаТаблицы.ПутьФормыВыбора = МетаданныеОсновногоТипа.ПолноеИмя() +".ФормаВыбора";
	КонецЕсли;
КонецПроцедуры

// Выполняет массив рассылок и размещает результат по адресу АдресРезультата. В файловом
//   режиме вызывается напрямую, в клиент-серверном - через фоновое задание.
//
// Параметры:
//   ПараметрыВыполнения - Структура - выполняемые рассылки и их параметры.
//       * МассивРассылок - Массив из СправочникСсылка.РассылкиОтчетов - выполняемые рассылки.
//       * ПредварительныеНастройки - Структура - параметры см. РассылкаОтчетов.ВыполнитьРассылкуОтчетов.
//   АдресРезультата - Строка - адрес во временном хранилище, по которому будет размещен результат.
//
Процедура ВыполнитьРассылкиВФоновомЗадании(ПараметрыВыполнения, АдресРезультата) Экспорт
	МассивРассылок           = ПараметрыВыполнения.МассивРассылок;
	ПредварительныеНастройки = ПараметрыВыполнения.ПредварительныеНастройки;
	
	// Выбираем все рассылки, включая вложенные, исключая группы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РассылкиОтчетов.Ссылка КАК Рассылка,
	|	РассылкиОтчетов.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА РассылкиОтчетов.Подготовлена = ИСТИНА
	|				И РассылкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Подготовлена,
	|	ЛОЖЬ КАК Выполнена,
	|	ЛОЖЬ КАК СОшибками
	|ИЗ
	|	Справочник.РассылкиОтчетов КАК РассылкиОтчетов
	|ГДЕ
	|	РассылкиОтчетов.Ссылка В ИЕРАРХИИ(&МассивРассылок)
	|	И РассылкиОтчетов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МассивРассылок", МассивРассылок);
	ТаблицаРассылок = Запрос.Выполнить().Выгрузить();
	Подготовленные = ТаблицаРассылок.НайтиСтроки(Новый Структура("Подготовлена", Истина));
	Выполнено = 0;
	СОшибками = 0;
	
	МассивСообщений = Новый Массив;
	Для Каждого СтрокаТаблицы Из Подготовленные Цикл
		ПараметрыЖурнала = Новый Структура("МассивОшибок", Новый Массив);
		
		СтрокаТаблицы.Выполнена = ВыполнитьРассылкуОтчетов(
			СтрокаТаблицы.Рассылка,
			ПараметрыЖурнала,
			ПредварительныеНастройки);
		СтрокаТаблицы.СОшибками = (ПараметрыЖурнала.МассивОшибок.Количество() > 0);
		
		Если СтрокаТаблицы.СОшибками Тогда
			МассивСообщений.Добавить("---" + Символы.ПС + Символы.ПС + СтрокаТаблицы.Представление + ":"); // Заголовок
			Для Каждого Сообщение Из ПараметрыЖурнала.МассивОшибок Цикл
				МассивСообщений.Добавить(Сообщение);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаТаблицы.Выполнена Тогда
			Выполнено = Выполнено + 1;
			Если СтрокаТаблицы.СОшибками Тогда
				СОшибками = СОшибками + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Всего        = ТаблицаРассылок.Количество();
	Подготовлено = Подготовленные.Количество();
	НеВыполнено  = Подготовлено - Выполнено;
	
	Если Всего = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выбранные группы не содержат рассылок отчетов.'");
	ИначеЕсли Всего <= 5 Тогда
		ТекстСообщения = "";
		Для Каждого СтрокаТаблицы Из ТаблицаРассылок Цикл
			Если Не СтрокаТаблицы.Подготовлена Тогда
				ШаблонСообщения = НСтр("ru = 'Рассылка ""%1"" не подготовлена.'");
			ИначеЕсли Не СтрокаТаблицы.Выполнена Тогда
				ШаблонСообщения = НСтр("ru = 'Рассылка ""%1"" не выполнена.'");
			ИначеЕсли СтрокаТаблицы.СОшибками Тогда
				ШаблонСообщения = НСтр("ru = 'Рассылка ""%1"" выполнена с ошибками.'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'Рассылка ""%1"" выполнена.'");
			КонецЕсли;
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаТаблицы.Представление);
			
			Если ТекстСообщения = "" Тогда
				ТекстСообщения = ШаблонСообщения;
			Иначе
				ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС + ШаблонСообщения;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подготовлено рассылок: %1 из %2
			|Выполнено: %3
			|С ошибками: %4
			|Не выполнено: %5'"),
			Формат(Подготовлено, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧН=0; ЧГ=0"),
			Формат(Выполнено,    "ЧН=0; ЧГ=0"),
			Формат(СОшибками,    "ЧН=0; ЧГ=0"),
			Формат(НеВыполнено,  "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Рассылки", ТаблицаРассылок.ВыгрузитьКолонку("Рассылка"));
	Результат.Вставить("Текст", ТекстСообщения);
	Результат.Вставить("Подробно", СтрокаСообщенийПользователю(МассивСообщений));
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ВыполнитьРассылкуОтчетов.
// Формирует отчеты и отправляет их согласно настройкам транспорта (Папка, FILE, EMAIL, FTP);
//
// Параметры:
//   Рассылка - СправочникСсылка.РассылкиОтчетов - выполняемая рассылка отчетов.
//   ПараметрыЖурнала - Структура - параметры записи в журнал регистрации.
//       * ИмяСобытия - Строка - имя события (или группы событий).
//       * Метаданные - ОбъектМетаданных - метаданные для привязки события журнала регистрации.
//       * Данные     - Произвольный - данные для привязки события журнала регистрации.
//   ДополнительныеНастройки - Структура - настройки, которые переопределяют стандартные параметры рассылки.
//       * Получатели - Соответствие - набор получателей и их e-mail адресов.
//           ** Ключ - СправочникСсылка - получатель.
//           ** Значение - Строка - набор e-mail адресов получателя в строке с разделителями.
//
// Возвращаемое значение:
//   Булево - признак успешного выполнения рассылки.
//
Функция ПодготовитьПараметрыИВыполнитьРассылку(Рассылка, ПараметрыЖурнала = Неопределено, ДополнительныеНастройки = Неопределено) Экспорт
	
	Возврат ВыполнитьРассылкуОтчетов(Рассылка, ПараметрыЖурнала, ДополнительныеНастройки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет команды создания рассылок в форму отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, РасширениеФормыОтчета -
//   Отказ - Булево -
//   СтандартнаяОбработка - булево -
//
Процедура ФормаОтчетаДобавитьКоманды(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Рассылки можно добавлять только если есть ссылка варианта (т.е. он внутренний или дополнительный).
	Если Форма.НастройкиОтчета.Внешний Тогда
		Возврат;
	КонецЕсли;
	Если Не ПравоДобавления() Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление команд и кнопок
	Команды = Новый Массив;
	
	КомандаСоздать = Форма.Команды.Добавить("РассылкаОтчетовСоздатьНовую");
	КомандаСоздать.Действие  = "РассылкаОтчетовКлиент.СоздатьНовуюРассылкуИзОтчета";
	КомандаСоздать.Картинка  = БиблиотекаКартинок.РассылкаОтчетов;
	КомандаСоздать.Заголовок = НСтр("ru = 'Создать рассылку отчетов...'");
	КомандаСоздать.Подсказка = НСтр("ru = 'Создать новую рассылку отчетов и добавить в нее отчет с текущими настройками.'");
	Команды.Добавить(КомандаСоздать);
	
	КомандаПрисоединить = Форма.Команды.Добавить("РассылкаОтчетовПрисоединитьКСуществующей");
	КомандаПрисоединить.Действие  = "РассылкаОтчетовКлиент.ПрисоединитьОтчетКСуществующейРассылке";
	КомандаПрисоединить.Заголовок = НСтр("ru = 'Включить в существующую рассылку отчетов...'");
	КомандаПрисоединить.Подсказка = НСтр("ru = 'Присоединить отчет с текущими настройками к существующей рассылке отчетов.'");
	Команды.Добавить(КомандаПрисоединить);
	
	КоличествоРассылокСОтчетом = КоличествоРассылокСОтчетом(Форма.НастройкиОтчета.ВариантСсылка);
	Если КоличествоРассылокСОтчетом > 0 Тогда
		КомандаРассылки = Форма.Команды.Добавить("РассылкаОтчетовОткрытьРассылкиСОтчетом");
		КомандаРассылки.Действие  = "РассылкаОтчетовКлиент.ОткрытьРассылкиСОтчетом";
		КомандаРассылки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Рассылки отчета (%1)'"), 
			КоличествоРассылокСОтчетом);
		КомандаРассылки.Подсказка = НСтр("ru = 'Открыть список рассылок, в которые включен отчет.'");
		Команды.Добавить(КомандаРассылки);
	КонецЕсли;
	
	ОтчетыСервер.ВывестиКоманду(Форма, Команды, "ПодменюОтправить", Ложь, Ложь, "РассылкаОтчетов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Панели администрирования.

// Возвращает Истина если у пользователя есть право на сохранение рассылок отчетов.
Функция ПравоДобавления() Экспорт
	Возврат ТекстОшибкиПроверкиПраваДобавления() = "";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок
//
// Параметры:
//   ИсключенияПоискаСсылок - Массив - 
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.РассылкиОтчетов.Реквизиты.ТипПолучателейРассылки);
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
// Параметры:
//   ЗапросыРазрешений - Массив - 
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РассылкиОтчетов.Ссылка,
	|	РассылкиОтчетов.ИспользоватьFTPРесурс,
	|	РассылкиОтчетов.FTPСервер,
	|	РассылкиОтчетов.FTPКаталог,
	|	РассылкиОтчетов.FTPПорт,
	|	РассылкиОтчетов.ИспользоватьСетевойКаталог,
	|	РассылкиОтчетов.СетевойКаталогWindows,
	|	РассылкиОтчетов.СетевойКаталогLinux
	|ИЗ
	|	Справочник.РассылкиОтчетов КАК РассылкиОтчетов
	|ГДЕ
	|	РассылкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И (РассылкиОтчетов.ИспользоватьСетевойКаталог = ИСТИНА
	|		ИЛИ РассылкиОтчетов.ИспользоватьFTPРесурс = ИСТИНА)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Рассылка = Запрос.Выполнить().Выбрать();
	Пока Рассылка.Следующий() Цикл
		
		ЗапросыРазрешений.Добавить(
			МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
				РазрешенияНаРесурсыСервера(Рассылка), Рассылка.Ссылка));
		
	КонецЦикла;
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел
//
// Параметры:
//  ТекущиеДела - Массив - 
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	Если Не ПравоДобавления() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДела = "ПроблемыСРассылкамиОтчетов";
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено(ИмяДела) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РассылкиОтчетов.Ссылка) КАК Количество
		|ИЗ
		|	РегистрСведений.СостоянияРассылокОтчетов КАК СостоянияРассылокОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РассылкиОтчетов КАК РассылкиОтчетов
		|		ПО СостоянияРассылокОтчетов.Рассылка = РассылкиОтчетов.Ссылка
		|ГДЕ
		|	РассылкиОтчетов.Подготовлена = ИСТИНА
		|	И СостоянияРассылокОтчетов.СОшибками = ИСТИНА
		|	И РассылкиОтчетов.Автор = &Автор";
	Отборы = Новый Структура;
	Отборы.Вставить("ПометкаУдаления", Ложь);
	Отборы.Вставить("Подготовлена", Истина);
	Отборы.Вставить("СОшибками", Истина);
	Отборы.Вставить("ЭтоГруппа", Ложь);
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РассылкиОтчетов.Автор = &Автор", "");
	Иначе
		Отборы.Вставить("Автор", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("Автор", Отборы.Автор);
	КонецЕсли;
	КоличествоПроблем = Запрос.Выполнить().Выгрузить()[0].Количество;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отборы);
	ПараметрыФормы.Вставить("Отображение", "Список");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.РассылкиОтчетов.ПолноеИмя());
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИмяДела + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело.ЕстьДела       = КоличествоПроблем > 0;
		Дело.Представление  = НСтр("ru = 'Проблемы с рассылками отчетов'");
		Дело.Количество     = КоличествоПроблем;
		Дело.Форма          = "Справочник.РассылкиОтчетов.ФормаСписка";
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
	КонецЦикла;
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.РассылкиОтчетов.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
// Параметры:
//   Зависимости - ТаблицаЗначений - 
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.РассылкаОтчетов;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.Параметризуется = Истина;
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.РассылкиОтчетов, Истина);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
//
// Параметры:
//   Объекты - Массив - 
//
Процедура ПриОпределенииОбъектовСНачальнымЗаполнением(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.РассылкиОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение регламентных заданий.

// Запускает рассылку и контролирует результат.
//
// Параметры:
//   Рассылка - СправочникСсылка.РассылкиОтчетов - Выполняемая рассылка отчетов.
//
Процедура ВыполнитьРассылкуПоРасписанию(Рассылка) Экспорт
	
	// Проверки.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаОтчетов);
	
	// Регистрация запуска (запущена, но не выполнена).
	РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьЗапускРассылки(Рассылка);
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.РассылкиОтчетов) Тогда
		ВызватьИсключение
			НСтр("ru = 'У текущего пользователя недостаточно прав для чтения рассылок отчетов.
				|Рекомендуется отключить все рассылки этого пользователя или сменить автора его рассылок (на вкладке ""Расписание"").'");
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ВыполнятьПоРасписанию ИЗ Справочник.РассылкиОтчетов ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ВызватьИсключение
			НСтр("ru = 'У текущего пользователя недостаточно прав для чтения этой рассылки.
				|Рекомендуется сменить автора рассылки (на вкладке ""Расписание"").'");
	КонецЕсли;
	Если Не Выборка.ВыполнятьПоРасписанию Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У рассылки отчетов ""%1"" отключен флажок ""Выполнять по расписанию""
				|Рекомендуется отключить соответствующее регламентное задание или перезаписать эту рассылку.'"),
			Строка(Рассылка));
	КонецЕсли;
	
	// Параметры записи в журнал регистрации.
	ПараметрыЖурнала = Новый Структура("ИмяСобытия, Метаданные, Данные");
	ПараметрыЖурнала.ИмяСобытия = НСтр("ru = 'Рассылка отчетов. Запуск по расписанию'", ОбщегоНазначения.КодОсновногоЯзыка());
	ПараметрыЖурнала.Метаданные = Рассылка.Метаданные();
	ПараметрыЖурнала.Данные     = Рассылка;
	
	// Рассылка
	ВыполнитьРассылкуОтчетов(Рассылка, ПараметрыЖурнала, Новый Структура("ЗапускЗафиксирован", Истина));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Формирует список получателей из табличной части "Получатели" рассылки.
//
// Параметры:
//   Рассылка - СправочникСсылка.РассылкиОтчетов, Структура - Элемент справочника, для которого необходимо сформировать
//              список получателей.
//
// Возвращаемое значение: 
//   Структура - Результат получения списка получателей рассылки.
//       * Получатели - Соответствие - Получатели. См. РассылкаОтчетов.ВыполнитьРассылку, описание к ПараметрыДоставки.Получатели.
//       * Ошибки - Строка - Ошибки, которые возникли в процессе.
//
Функция СформироватьСписокПолучателейРассылки(Рассылка, ПараметрыЖурнала = Неопределено) Экспорт
	
	ВидПочтовогоАдресаПолучателей = Рассылка.ВидПочтовогоАдресаПолучателей;
	
	Если Рассылка.Личная Тогда
		
		ТипПолучателей = ТипЗнч(Рассылка.Автор);
		ПолучателиМетаданные = Метаданные.НайтиПоТипу(ТипПолучателей);
		
		ТаблицаПолучателей = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.Получатели.Реквизиты Цикл
			ТаблицаПолучателей.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		ТаблицаПолучателей.Добавить().Получатель = Рассылка.Автор;
		
	Иначе
		ПолучателиМетаданные = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Рассылка.ТипПолучателейРассылки, Ложь);
		ТипПолучателей = Рассылка.ТипПолучателейРассылки.КлючОбъектаМетаданных.Получить();
		ТаблицаПолучателей = Рассылка.Получатели.Выгрузить();
	КонецЕсли;
	
	СписокПолучателей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если ТипПолучателей = Тип("СправочникСсылка.Пользователи") Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПолучателей.Получатель,
		|	ТаблицаПолучателей.Исключен
		|ПОМЕСТИТЬ втТаблицаПолучателей
		|ИЗ
		|	&ТаблицаПолучателей КАК ТаблицаПолучателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(РассылкиОтчетовПолучатели.Исключен) КАК Исключен,
		|	СоставыГруппПользователей.Пользователь
		|ПОМЕСТИТЬ втПолучатели
		|ИЗ
		|	втТаблицаПолучателей КАК РассылкиОтчетовПолучатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО РассылкиОтчетовПолучатели.Получатель = СоставыГруппПользователей.ГруппаПользователей
		|			И (СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	СоставыГруппПользователей.Пользователь ССЫЛКА Справочник.Пользователи
		|	И СоставыГруппПользователей.Пользователь.ПометкаУдаления = ЛОЖЬ
		|	И СоставыГруппПользователей.Пользователь.Недействителен = ЛОЖЬ
		|	И СоставыГруппПользователей.Пользователь.Служебный = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставыГруппПользователей.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	втПолучатели.Пользователь КАК Получатель,
		|	КонтактнаяИнформацияПользователя.Представление КАК EMail
		|ИЗ
		|	втПолучатели КАК втПолучатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформацияПользователя
		|		ПО втПолучатели.Пользователь = КонтактнаяИнформацияПользователя.Ссылка
		|ГДЕ
		|	втПолучатели.Исключен = ЛОЖЬ
		|	И КонтактнаяИнформацияПользователя.Вид = &ВидПочтовогоАдресаПолучателей";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПолучателей.Получатель,
		|	ТаблицаПолучателей.Исключен
		|ПОМЕСТИТЬ втТаблицаПолучателей
		|ИЗ
		|	&ТаблицаПолучателей КАК ТаблицаПолучателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПолучателиРассылки.Ссылка КАК Получатель,
		|	КонтактнаяИнформацияПолучателя.Представление КАК EMail
		|ИЗ
		|	Справочник.Пользователи КАК ПолучателиРассылки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформацияПолучателя
		|		ПО (КонтактнаяИнформацияПолучателя.Ссылка = ПолучателиРассылки.Ссылка)
		|			И (КонтактнаяИнформацияПолучателя.Вид = &ВидПочтовогоАдресаПолучателей)
		|ГДЕ
		|	ПолучателиРассылки.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				Получатели.Получатель
		|			ИЗ
		|				втТаблицаПолучателей КАК Получатели
		|			ГДЕ
		|				Получатели.Исключен = ЛОЖЬ)
		|	И (НЕ ПолучателиРассылки.Ссылка В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					ИсключенияПолучателей.Получатель
		|				ИЗ
		|					втТаблицаПолучателей КАК ИсключенияПолучателей
		|				ГДЕ
		|					ИсключенияПолучателей.Исключен = ИСТИНА))
		|	И ПолучателиРассылки.ПометкаУдаления = ЛОЖЬ
		|	И &ЭтоНеГруппа";
		
		Если Не ПолучателиМетаданные.Иерархический Тогда
			// Не иерархический
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "В ИЕРАРХИИ", "В");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "");
		ИначеЕсли ПолучателиМетаданные.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
			// Иерархия элементов
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "");
		Иначе
			// Иерархия групп
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "И ПолучателиРассылки.ЭтоГруппа = ЛОЖЬ");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Пользователи", ПолучателиМетаданные.ПолноеИмя());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаПолучателей", ТаблицаПолучателей);
	Если ЗначениеЗаполнено(ВидПочтовогоАдресаПолучателей) Тогда
		Запрос.УстановитьПараметр("ВидПочтовогоАдресаПолучателей", ВидПочтовогоАдресаПолучателей);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Вид = &ВидПочтовогоАдресаПолучателей", ".Тип = &ТипПочтовогоАдреса");
		Запрос.УстановитьПараметр("ТипПочтовогоАдреса", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	ТекстСообщенияОбОшибкеДляЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось сформировать список получателей ""%1"" по причине:'"), Строка(ТипПолучателей));
	
	// Механизм расширения
	Попытка
		СтандартнаяОбработка = Истина;
		РассылкаОтчетовПереопределяемый.ПередФормированиемСпискаПолучателейРассылки(Рассылка, Запрос, СтандартнаяОбработка, СписокПолучателей);
		Если СтандартнаяОбработка <> Истина Тогда
			Возврат СписокПолучателей;
		КонецЕсли;
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала,, ТекстСообщенияОбОшибкеДляЖурналаРегистрации, ИнформацияОбОшибке());
		Возврат СписокПолучателей;
	КонецПопытки;
	
	// Стандартная обработка
	Попытка
		ПолучателиРассылки = Запрос.Выполнить().Выгрузить();
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала,, ТекстСообщенияОбОшибкеДляЖурналаРегистрации, ИнформацияОбОшибке());
		Возврат СписокПолучателей;
	КонецПопытки;
	
	Для Каждого ПолучательРассылки Из ПолучателиРассылки Цикл
		Если Не ЗначениеЗаполнено(ПолучательРассылки.EMail) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийАдрес = СписокПолучателей.Получить(ПолучательРассылки.Получатель);
		ТекущийАдрес = ?(ТекущийАдрес = Неопределено, "", ТекущийАдрес + "; ");
		СписокПолучателей[ПолучательРассылки.Получатель] = ТекущийАдрес + ПолучательРассылки.EMail;
	КонецЦикла;
	
	Если СписокПолучателей.Количество() = 0 Тогда
		ТекстОшибок = НСтр("ru = 'Не удалось сформировать список получателей ""%1"" по одной из возможных причин:
		| - У получателей не заполнен адрес электронной почты ""%2"";
		| - Не заполнен список получателей или получатели помечены на удаление;
		| - Выбраны пустые группы получателей;
		| - Исключены все получатели (исключение имеет наивысший приоритет; участники исключенных групп также исключаются из списка);
		| - Недостаточно прав доступа к справочнику ""%1"".'");
		
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибок, Строка(ТипПолучателей),
			Строка(ВидПочтовогоАдресаПолучателей)), "");
	КонецЕсли;
	
	Возврат СписокПолучателей;
КонецФункции

// Подключает, проверяет и инициализирует отчет по ссылке, используется перед формированием или редактированием
// параметров.
//
// Параметры:
//   ПараметрыОтчета - Структура - Отчет, настройки и результат его инициализации.
//       * Отчет - СправочникСсылка.ВариантыОтчетов - Ссылка отчета.
//       * Настройки - Неопределено, ПользовательскиеНастройкиКомпоновкиДанных, ТаблицаЗначений -
//           Настройки отчета, которые необходимо использовать,
//           подробнее см. процедуру "ЗаписатьНастройкиСтрокиОтчеты" модуля "Справочник.РассылкиОтчетов.ФормаОбъекта".
//   ПерсонализацияВозможна - Булево - Истина, если отчет может быть персонализирован.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - Необязательный. Адрес размещения СКД.
//
// Параметры, изменяемые в процессе работы метода:
//   ПараметрыОтчета - Структура -
//     Результат инициализации:
//       * Инициализирован - Булево - Истина, если инициализация прошла успешно.
//       * Ошибки          - Строка - Текст ошибок.
//     Свойства всех отчетов:
//       * Имя        - Строка - Имя отчета.
//       * ЭтоВариант - Булево - Истина, если поставщик - справочник "ВариантыОтчетов".
//       * СКД        - Булево - Истина, если отчет на базе СКД.
//       * Метаданные - ОбъектМетаданных: Отчет - Метаданные отчета.
//       * Объект     - ОтчетОбъект.<Имя отчета>, ВнешнийОтчет - Объект отчета.
//     Свойства отчетов на базе СКД:
//       * СхемаКД               - СхемаКомпоновкиДанных -
//       * КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных -
//       * НастройкиКД           - НастройкиКомпоновкиДанных -
//       * АдресСхемы            - Строка - Адрес схемы компоновки данных во временном хранилище.
//     Свойства произвольных отчетов:
//       * ДоступныеРеквизиты - Структура - Имя и параметры реквизита.
//           ** <Имя реквизита> - Структура - Параметры реквизита.
//               *** Представление - Строка - Представление реквизита.
//               *** Тип           - ОписаниеТипов - Тип реквизита.
//
// Возвращаемое значение: 
//   Булево - Истина, если инициализация прошла успешно (соответствует ПараметрыОтчета.Инициализирован).
//
Функция ИнициализироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ПерсонализацияВозможна, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	// Проверка повторной инициализации.
	Если ПараметрыОтчета.Свойство("Инициализирован") Тогда
		Возврат ПараметрыОтчета.Инициализирован;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("Инициализирован", Ложь);
	ПараметрыОтчета.Вставить("Ошибки", "");
	ПараметрыОтчета.Вставить("Персонализирован", Ложь);
	ПараметрыОтчета.Вставить("ПерсональныеОтборы", Новый Соответствие);
	ПараметрыОтчета.Вставить("ЭтоВариант", ТипЗнч(ПараметрыОтчета.Отчет) = Тип("СправочникСсылка.ВариантыОтчетов"));
	ПараметрыОтчета.Вставить("СКД", Ложь);
	ПараметрыОтчета.Вставить("ДоступныеРеквизиты", Неопределено);
	ПараметрыОтчета.Вставить("КомпоновщикНастроекКД", Неопределено);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("СсылкаВарианта",              ПараметрыОтчета.Отчет);
	ПараметрыПодключения.Вставить("ИдентификаторФормы",          УникальныйИдентификаторФормы);
	ПараметрыПодключения.Вставить("ПользовательскиеНастройкиКД", ПараметрыОтчета.Настройки);
	Если ТипЗнч(ПараметрыПодключения.ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ПараметрыПодключения.ПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	Попытка
		Подключение = ВариантыОтчетов.ПодключитьОтчетИЗагрузитьНастройки(ПараметрыПодключения);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, Подключение, Истина);
	Исключение
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить и загрузить настройки отчета ""%1"".'"),
			Строка(ПараметрыОтчета.Отчет));
		ЗаписьЖурнала(
			ПараметрыЖурнала,
			УровеньЖурналаРегистрации.Ошибка,
			ПараметрыОтчета.Ошибки,
			ИнформацияОбОшибке());
		Возврат ПараметрыОтчета.Инициализирован;
	КонецПопытки;
	
	// В существующих рассылках формируем только отчеты, готовые к рассылке.
	Если РассылкаОтчетовПовтИсп.ИсключаемыеОтчеты().Найти(Подключение.СсылкаОтчета) <> Неопределено Тогда
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отчет ""%1"" не предназначен для рассылки.
			|Подробнее см. в процедуре ОпределитьИсключаемыеОтчеты модуля РассылкаОтчетовПереопределяемый.'"),
			Строка(Подключение.СсылкаОтчета));
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка, ПараметрыОтчета.Ошибки);
		Возврат Ложь;
	КонецЕсли;
	Если Не Подключение.Успех Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка, Подключение.ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	ПараметрыОтчета.КомпоновщикНастроекКД = Подключение.Объект.КомпоновщикНастроек;
	
	// Определение принадлежности отчета к Системе Компоновки Данных.
	Если ТипЗнч(ПараметрыОтчета.Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ПараметрыОтчета.СКД = Истина;
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Настройки) = Тип("ТаблицаЗначений") Тогда
		ПараметрыОтчета.СКД = Ложь;
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Настройки) = Тип("Структура") Тогда
		ПараметрыОтчета.СКД = Ложь;
	Иначе
		ПараметрыОтчета.СКД = (ПараметрыОтчета.Объект.СхемаКомпоновкиДанных <> Неопределено);
	КонецЕсли;
	
	// Инициализация отчета и заполнение его параметров.
	Если ПараметрыОтчета.СКД Тогда
		
		// Установка персональных отборов.
		Если ПерсонализацияВозможна Тогда
			ПользовательскиеНастройкиКД = ПараметрыОтчета.КомпоновщикНастроекКД.ПользовательскиеНастройки;
			Фильтр = Новый Структура("Использование, Значение", Истина, "[Получатель]");
			Найденные = ОтчетыКлиентСервер.ЭлементыНастроекОтобранные(ПользовательскиеНастройкиКД, Фильтр);
			Для Каждого ПользовательскаяНастройкаКД Из Найденные Цикл
				ИдентификаторКД = ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройкаКД);
				Если ИдентификаторКД <> Неопределено Тогда
					ПараметрыОтчета.ПерсональныеОтборы.Вставить(ИдентификаторКД);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе // Не СКД Отчет.
		
		// Доступные реквизиты отчета
		ПараметрыОтчета.ДоступныеРеквизиты = Новый Структура;
		Для Каждого Реквизит Из ПараметрыОтчета.Метаданные.Реквизиты Цикл
			ПараметрыОтчета.ДоступныеРеквизиты.Вставить(Реквизит.Имя, 
				Новый Структура("Представление, Тип", Реквизит.Представление(), Реквизит.Тип));
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Настройки) Тогда
			
			// Проверка наличия реквизитов.
			// Подготовка соответствий персональных отборов.
			// Установка статичных значений реквизитов.
			Для Каждого ОписаниеНастройки Из ПараметрыОтчета.Настройки Цикл
				Если ТипЗнч(ОписаниеНастройки) = Тип("СтрокаТаблицыЗначений") Тогда
					ИмяРеквизита = ОписаниеНастройки.Реквизит;
				Иначе
					ИмяРеквизита = ОписаниеНастройки.Ключ;
				КонецЕсли;
				ЗначениеНастройки = ОписаниеНастройки.Значение;
				
				// Доступность реквизита
				Если Не ПараметрыОтчета.ДоступныеРеквизиты.Свойство(ИмяРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				
				// Принадлежность к механизму персонализации.
				Если ПерсонализацияВозможна И ЗначениеНастройки = "[Получатель]" Тогда
					// Регистрация поля персонального отбора.
					ПараметрыОтчета.ПерсональныеОтборы.Вставить(ИмяРеквизита);
				Иначе
					// Установка значения реквизита объекта отчета.
					ПараметрыОтчета.Объект[ИмяРеквизита] = ЗначениеНастройки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтчета.Персонализирован = (ПараметрыОтчета.ПерсональныеОтборы.Количество() > 0);
	ПараметрыОтчета.Инициализирован = Истина;
	
	Возврат Истина;
КонецФункции

// Формирует отчет, проверяя что результат пустой.
//
// Параметры:
//   ПараметрыЖурнала - Структура - Параметры записи в журнал регистрации. См. ЗаписьЖурнала().
//   ПараметрыОтчета  - см. ИнициализироватьОтчет(), возвращаемое значение.
//   Получатель       - СправочникСсылка - Ссылка получателя.
//
// Возвращаемое значение: 
//   Структура - Результат формирования отчета.
//       * ТабДок - ТабличныйДокумент - Табличный документ.
//       * Пустой - Булево - Истина, если отчет не содержал ни одного значения параметра.
//
Функция СформироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, Получатель = Неопределено)
	Результат = Новый Структура("ТабДок, СФормирован, Пустой", Новый ТабличныйДокумент, Ложь, Истина);
	
	Если Не ПараметрыОтчета.Свойство("Инициализирован") Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ''%1'' не инициализирован'"), Строка(ПараметрыОтчета.Отчет)));
		Возврат Результат;
	КонецЕсли;
	
	// Настройки подключения отчета.
	ПараметрыФормирования = Новый Структура;
	
	// Заполнение персонализированных данных получателей.
	Если Получатель <> Неопределено И ПараметрыОтчета.Свойство("ПерсональныеОтборы") Тогда
		Если ПараметрыОтчета.СКД Тогда
			ПользовательскиеНастройкиКД = ПараметрыОтчета.КомпоновщикНастроекКД.ПользовательскиеНастройки;
			Для Каждого КлючИЗначение Из ПараметрыОтчета.ПерсональныеОтборы Цикл
				Настройка = ПользовательскиеНастройкиКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
				Если ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Настройка.ПравоеЗначение = Получатель;
				ИначеЕсли ТипЗнч(Настройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Настройка.Значение = Получатель;
				КонецЕсли;
			КонецЦикла;
			ПараметрыФормирования.Вставить("ПользовательскиеНастройкиКД", ПользовательскиеНастройкиКД);
		Иначе
			Для Каждого КлючИЗначение Из ПараметрыОтчета.ПерсональныеОтборы Цикл
				ПараметрыОтчета.Объект[КлючИЗначение.Ключ] = Получатель;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("Подключение", ПараметрыОтчета);
	Формирование = ВариантыОтчетов.СформироватьОтчет(ПараметрыФормирования, Истина, Не ПараметрыОтчета.ОтправлятьЕслиПустой);
	
	Если Не Формирование.Успех Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет ""%1"":'"),
			Строка(ПараметрыОтчета.Отчет)), Формирование.ТекстОшибки);
		Результат.ТабДок = Неопределено;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Сформирован = Истина;
	Результат.ТабДок = Формирование.ТабличныйДокумент;
	Если ПараметрыОтчета.ОтправлятьЕслиПустой Тогда
		Результат.Пустой = Ложь;
	Иначе
		Результат.Пустой = Формирование.Пустой;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выполняет транспортировку вложений для всех способов доставки.
//
// Параметры:
//   Автор             - СправочникСсылка - Автор рассылки.
//   ПараметрыДоставки - Структура        - см. ВыполнитьРассылку().
//   Вложения          - Соответствие     - см. ДобавитьОтчетыВоВложения().
//
// Возвращаемое значение: 
//   Структура - Результат доставки.
//       * Доставка  - Строка - Представление способа доставки.
//       * Выполнена - Булево - Истина, если доставка выполнена хотя бы одним из способов.
//
Функция ВыполнитьДоставку(ПараметрыЖурнала, ПараметрыДоставки, Вложения) Экспорт
	Результат = Ложь;
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Отчеты не доставлены'");
	РежимТестирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДоставки, "РежимТестирования", Ложь);
	
	////////////////////////////////////////////////////////////////////////////
	// В сетевой каталог.
	
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		
		СетевойКаталогСервера = ПараметрыДоставки.СетевойКаталогWindows;
		СистемнаяИнфо = Новый СистемнаяИнформация;
		ТипПлатформыСервера = СистемнаяИнфо.ТипПлатформы;		
		
		Если ТипПлатформыСервера = ТипПлатформы.Linux_x86
			Или ТипПлатформыСервера = ТипПлатформы.Linux_x86_64 Тогда
			СетевойКаталогСервера = ПараметрыДоставки.СетевойКаталогLinux;
		КонецЕсли;
		
		Попытка
			Для Каждого Вложение Из Вложения Цикл
				КопироватьФайл(Вложение.Значение, СетевойКаталогСервера + Вложение.Ключ);
				Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
					ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
						ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
						Вложение.Значение,
						ПараметрыДоставки.СетевойКаталогWindows + Вложение.Ключ);
				КонецЕсли;
			КонецЦикла;
			Результат = Истина;
			ПараметрыДоставки.ВыполненаВСетевойКаталог = Истина;
			
			Если РежимТестирования Тогда // Удалить все, что создали.
				Для Каждого Вложение Из Вложения Цикл
					УдалитьФайлы(СетевойКаталогСервера + Вложение.Ключ);
				КонецЦикла;
			КонецЕсли;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// На FTP ресурс.
	
	Если ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
		
		Цель = "ftp://"+ ПараметрыДоставки.Сервер +":"+ Формат(ПараметрыДоставки.Порт, "ЧН=0; ЧГ=0") + ПараметрыДоставки.Каталог;
		
		Попытка
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("ftp");
			Иначе
				Прокси = Неопределено;
			КонецЕсли;
			Если ПараметрыДоставки.Свойство("Пароль") Тогда
				Пароль = ПараметрыДоставки.Пароль;
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				ДанныеИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыДоставки.Владелец, "FTPПароль");
				УстановитьПривилегированныйРежим(Ложь);
				Пароль = ?(ЗначениеЗаполнено(ДанныеИзХранилища), ДанныеИзХранилища, "");
			КонецЕсли;
			Соединение = Новый FTPСоединение(
				ПараметрыДоставки.Сервер,
				ПараметрыДоставки.Порт,
				ПараметрыДоставки.Логин,
				Пароль,
				Прокси,
				ПараметрыДоставки.ПассивноеСоединение,
				15);
			Соединение.УстановитьТекущийКаталог(ПараметрыДоставки.Каталог);
			Для Каждого Вложение Из Вложения Цикл
				Соединение.Записать(Вложение.Значение, ПараметрыДоставки.Каталог + Вложение.Ключ);
				Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
					ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
						ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
						Вложение.Значение,
						Цель + Вложение.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Результат = Истина;
			ПараметрыДоставки.ВыполненаНаFTP = Истина;
			
			Если РежимТестирования Тогда // Удалить все, что создали.
				Для Каждого Вложение Из Вложения Цикл
					Соединение.Удалить(ПараметрыДоставки.Каталог + Вложение.Ключ);
				КонецЦикла;
			КонецЕсли;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// В папку.
	
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
			МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
			Попытка
				МодульРаботаСФайламиСлужебный.ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения);
				Результат = Истина;
				ПараметрыДоставки.ВыполненаВПапку = Истина;
			Исключение
				ЗаписьЖурнала(ПараметрыЖурнала, ,
					ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// По электронной почте.
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		
		Если ПараметрыДоставки.ТолькоУведомить Тогда
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно отправить уведомление о рассылке по электронной почте:'");
			ВложенияПисьма = Новый Соответствие;
		Иначе
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно отправить отчет по электронной почте:'");
			ВложенияПисьма = Вложения;
		КонецЕсли;
		
		Попытка
			ОтправитьОтчетыПолучателю(ВложенияПисьма, ПараметрыДоставки);
			Если Не ПараметрыДоставки.ТолькоУведомить Тогда
				Результат = Истина;
			КонецЕсли;
			Если Результат = Истина Тогда
				ПараметрыДоставки.ВыполненаПоЭлектроннойПочте = Истина;
			КонецЕсли;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает имя пользователя программы по ссылке справочника "Пользователи".
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - Ссылка пользователя.
//
// Возвращаемое значение:
//   Строка - Имя пользователя программы.
//
Функция ИмяПользователяИБ(Пользователь) Экспорт
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПользовательИБ.Имя;
КонецФункции

// Создает запись в журнале регистрации и сообщениях пользователю;
//   Поддерживает передачу информации об ошибке.
//
// Параметры:
//   ПараметрыЖурнала - Структура - Параметры записи в журнал регистрации, где:
//       * ИмяСобытия   - Строка           - Имя события (или группы событий).
//       * Метаданные   - ОбъектМетаданных - Метаданные для привязки события журнала регистрации.
//       * Данные       - Произвольный     - Данные для привязки события журнала регистрации.
//       * МассивОшибок - Массив           - Сообщения пользователю.
//   УровеньЖурнала - УровеньЖурналаРегистрации - Важность сообщения для администратора.
//       Определяется автоматически на основании типа параметра "ОписаниеПроблемы":
//       Когда тип = ИнформацияОбОшибке то Ошибка,
//       когда тип = Строка то Предупреждение,
//       в противном случае Информация.
//   Текст - Строка - Краткое описание проблемы.
//   ОписаниеПроблемы - ИнформацияОбОшибке, Строка - Описание возникшей проблемы, которое добавляется после текста.
//       Пользователю выводится краткое представление ошибки, а в журнал записывается подробное представление ошибки.
//
Процедура ЗаписьЖурнала(ПараметрыЖурнала, Знач УровеньЖурнала = Неопределено, Знач Текст = "", Знач ОписаниеПроблемы = Неопределено) Экспорт
	
	Если ПараметрыЖурнала = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ОписаниеПроблемы) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли ТипЗнч(ОписаниеПроблемы) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
		ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
	ИначеЕсли УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
	КонецЕсли;
	
	ЗаписатьВЖурнал = ЗначениеЗаполнено(ПараметрыЖурнала.Данные);
	
	ТекстДляЖурнала      = Текст;
	ТекстДляПользователя = Текст;
	Если ТипЗнч(ОписаниеПроблемы) = Тип("ИнформацияОбОшибке") Тогда
		Если ЗаписатьВЖурнал Тогда
			ТекстДляЖурнала = ТекстДляЖурнала + Символы.ПС + ПодробноеПредставлениеОшибки(ОписаниеПроблемы);
		КонецЕсли;	
		ТекстДляПользователя = ТекстДляПользователя + Символы.ПС + КраткоеПредставлениеОшибки(ОписаниеПроблемы);
	ИначеЕсли ТипЗнч(ОписаниеПроблемы) = Тип("Строка") Тогда
		Если ЗаписатьВЖурнал Тогда
			ТекстДляЖурнала = ТекстДляЖурнала + Символы.ПС + ОписаниеПроблемы;
		КонецЕсли;	
		ТекстДляПользователя = ТекстДляПользователя + Символы.ПС + ОписаниеПроблемы;
	КонецЕсли;
	
	// Журнал регистрации.
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(ПараметрыЖурнала.ИмяСобытия, УровеньЖурнала, ПараметрыЖурнала.Метаданные, 
			ПараметрыЖурнала.Данные, СокрЛП(ТекстДляЖурнала));
	КонецЕсли;
	
	// Сообщение пользователю.
	ТекстДляПользователя = СокрЛП(ТекстДляПользователя);
	Если (УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка) Или (УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстДляПользователя;
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Если ПараметрыЖурнала.Свойство("МассивОшибок") Тогда
			ПараметрыЖурнала.МассивОшибок.Добавить(Сообщение);
		Иначе
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив разрешений по данным рассылки отчетов.
Функция РазрешенияНаРесурсыСервера(Рассылка) Экспорт
	Разрешения = Новый Массив;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Если Рассылка.ИспользоватьСетевойКаталог Тогда
		Если ЗначениеЗаполнено(Рассылка.СетевойКаталогWindows) Тогда
			Элемент = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы(
				Рассылка.СетевойКаталогWindows,
				Истина,
				Истина,
				НСтр("ru = 'Сетевой каталог для публикации отчетов с сервера Windows.'"));
			Разрешения.Добавить(Элемент);
		КонецЕсли;
		Если ЗначениеЗаполнено(Рассылка.СетевойКаталогLinux) Тогда
			Элемент = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы(
				Рассылка.СетевойКаталогLinux,
				Истина,
				Истина,
				НСтр("ru = 'Сетевой каталог для публикации отчетов с сервера Linux.'"));
			Разрешения.Добавить(Элемент);
		КонецЕсли;
	КонецЕсли;
	Если Рассылка.ИспользоватьFTPРесурс Тогда
		Если ЗначениеЗаполнено(Рассылка.FTPСервер) Тогда
			Элемент = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"FTP",
				Рассылка.FTPСервер + Рассылка.FTPКаталог,
				Рассылка.FTPПорт,
				НСтр("ru = 'FTP ресурс для публикации отчетов.'"));
			Разрешения.Добавить(Элемент);
		КонецЕсли;
	КонецЕсли;
	Возврат Разрешения;
КонецФункции

Функция ПараметрыЖурналаРегистрации(Рассылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Состояния.ПоследнийЗапускНачало,
	|	Состояния.ПоследнийЗапускЗавершение,
	|	Состояния.НомерСеанса
	|ИЗ
	|	РегистрСведений.СостоянияРассылокОтчетов КАК Состояния
	|ГДЕ
	|	Состояния.Рассылка = &Рассылка";
	Запрос.УстановитьПараметр("Рассылка", Рассылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачала", Выборка.ПоследнийЗапускНачало);
	Результат.Вставить("ДатаОкончания", Выборка.ПоследнийЗапускЗавершение);
	// Ограничение интервала не более 30 минут, т.к. номера сеансов могут переиспользоваться.
	Если Не ЗначениеЗаполнено(Результат.ДатаОкончания) Или Результат.ДатаОкончания < Результат.ДатаНачала Тогда
		Результат.ДатаОкончания = Результат.ДатаНачала + 30 * 60; 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Выборка.НомерСеанса) Тогда
		Результат.Вставить("Данные", Рассылка);
	Иначе
		Сеансы = Новый СписокЗначений;
		Сеансы.Добавить(Выборка.НомерСеанса);
		Результат.Вставить("Сеанс", Сеансы);
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Помимо формирования отчетов выполняет персонализацию отчетов по списку получателей
//   и формирует отчеты в разрезах получателей (если это необходимо).
//
// Параметры:
//   ПараметрыЖурнала - Структура - Параметры записи в журнал регистрации.
//       * Префикс    - Строка           - Префикс для имени события журнала регистрации.
//       * Метаданные - ОбъектМетаданных - Метаданные для записи в журнал регистрации.
//       * Данные     - Произвольный     - Данные для записи в журнал регистрации.
//   ПараметрыОтчета   - Структура        - См. ВыполнитьРассылку(), параметр ТаблицаОтчетов.
//   ДеревоОтчетов     - ДеревоЗначений   - Отчеты и результат формирования.
//   ПараметрыДоставки - Структура        - См. ВыполнитьРассылку(), параметр ПараметрыДоставки.
//   Получатель        - СправочникСсылка - Ссылка получателя.
//
// Результат выполнения записывается в ДеревоОтчетов.
// Ошибки записываются в журнал регистрации и в сообщения сеанса пользователя.
//
Процедура СформироватьИСохранитьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ДеревоОтчетов, ПараметрыДоставки, ПолучательСсылка)
	
	// Определение корневой строки дерева, соответствующей получателю.
	// 1 - Получатели 
	//   Ключ      - Ссылка
	//   Значение  - каталог получателя.
	//   Настройки - представление сформированных отчетов.
	СтрокаПолучатель = ОпределитьСтрокуДереваДляПолучателя(ДеревоОтчетов, ПолучательСсылка, ПараметрыДоставки);
	КаталогПолучателя = СтрокаПолучатель.Значение;
	
	// Формирование отчета для получателя.
	Результат = СформироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ПолучательСсылка);
	
	// Проверка результата
	Если Не Результат.Сформирован Или (Результат.Пустой И Не ПараметрыОтчета.ОтправлятьЕслиПустой) Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрация промежуточного результата.
	// 2 - Табличные документы получателей.
	//   Ключ      - Имя отчета
	//   Значение  - Табличный документ.
	//   Настройки - ............. все параметры отчета .................
	СтрокаОтчет = СтрокаПолучатель.Строки.Добавить();
	СтрокаОтчет.Уровень   = 2;
	СтрокаОтчет.Ключ      = Строка(ПараметрыОтчета.Отчет);
	СтрокаОтчет.Значение  = Результат.ТабДок;
	СтрокаОтчет.Настройки = ПараметрыОтчета;
	
	ПредставлениеОтчета = СокрЛП(СтрокаОтчет.Ключ);// + " ([ПредставлениеФорматов])";
	
	// Сохранение табличного документа в форматы.
	ПредставлениеФорматов = "";
	Для Каждого Формат Из ПараметрыОтчета.Форматы Цикл
		
		ПараметрыФормата = ПараметрыДоставки.ПараметрыФорматов.Получить(Формат);
		
		Если ПараметрыФормата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяФайла = КаталогПолучателя + ПривестиИмяФайла(
			СтрокаОтчет.Ключ + " (" + ПараметрыФормата.Имя + ")"
			+ ?(ПараметрыФормата.Расширение = Неопределено, "", ПараметрыФормата.Расширение), ПараметрыДоставки.ТранслитерироватьИменаФайлов);
		
		НайтиСвободноеИмяФайла(ПолноеИмяФайла);
		
		СтандартнаяОбработка = Истина;
		
		// Механизм расширения
		РассылкаОтчетовПереопределяемый.ПередСохранениемТабличногоДокументаВФормат(
			СтандартнаяОбработка,
			СтрокаОтчет.Значение,
			Формат,
			ПолноеИмяФайла);
		
		// Сохранение отчета встроенными средствами подсистемы.
		Если СтандартнаяОбработка = Истина Тогда
			ЗаголовокОшибки = НСтр("ru = 'Ошибка записи отчета ''%1'' в формат ''%2'':'");
			
			Если ПараметрыФормата.ТипФайла = Неопределено Тогда
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОшибки, СтрокаОтчет.Ключ, ПараметрыФормата.Имя),
					НСтр("ru = 'Формат не поддерживается'"));
				Продолжить;
			КонецЕсли;
			
			ДокументРезультат = СтрокаОтчет.Значение; // ТабличныйДокумент
			
			Попытка
				ДокументРезультат.Записать(ПолноеИмяФайла, ПараметрыФормата.ТипФайла);
			Исключение
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОшибки, СтрокаОтчет.Ключ, ПараметрыФормата.Имя),
					ИнформацияОбОшибке());
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		// Проверки и регистрация результата.
		ВременныйФайл = Новый Файл(ПолноеИмяФайла);
		Если Не ВременныйФайл.Существует() Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Файл ''%3'' не существует.'"),
				СтрокаОтчет.Ключ, ПараметрыФормата.Имя, ВременныйФайл.ПолноеИмя));
			Продолжить;
		КонецЕсли;
		
		// Регистрация конечного результата - сохраненного отчета во временном каталоге.
		// 3 - Файлы получателей
		//   Ключ      - имя файла
		//   Значение  - полный путь к файлу.
		//   Настройки - настройки файла.
		СтрокаФайл = СтрокаОтчет.Строки.Добавить();
		СтрокаФайл.Уровень = 3;
		СтрокаФайл.Ключ      = ВременныйФайл.Имя;
		СтрокаФайл.Значение  = ВременныйФайл.ПолноеИмя;
		
		СтрокаФайл.Настройки = Новый Структура("ФайлСКаталогом, ИмяФайла, ПолноеИмяФайла, ИмяКаталога, ПолноеИмяКаталога, 
			|Формат, Имя, Расширение, ТипФайла, Ссылка");
		
		СтрокаФайл.Настройки.Формат = Формат;
		ЗаполнитьЗначенияСвойств(СтрокаФайл.Настройки, ПараметрыФормата, "Имя, Расширение, ТипФайла");
		
		СтрокаФайл.Настройки.ИмяФайла          = ВременныйФайл.Имя;
		СтрокаФайл.Настройки.ПолноеИмяФайла    = ВременныйФайл.ПолноеИмя;
		СтрокаФайл.Настройки.ИмяКаталога       = ВременныйФайл.ИмяБезРасширения + "_files";
		СтрокаФайл.Настройки.ПолноеИмяКаталога = ВременныйФайл.Путь + СтрокаФайл.Настройки.ИмяКаталога + "\";
		
		КаталогФайла = Новый Файл(СтрокаФайл.Настройки.ПолноеИмяКаталога);
		
		СтрокаФайл.Настройки.ФайлСКаталогом = (КаталогФайла.Существует() И КаталогФайла.ЭтоКаталог());
		
		Если СтрокаФайл.Настройки.ФайлСКаталогом И Не ПараметрыДоставки.Архивировать Тогда
			// Каталог вместе с файлом архивируются, а вместо файла отправляется архив файла с каталогом.
			ИмяАрхива       = ВременныйФайл.ИмяБезРасширения + ".zip";
			ПолноеИмяАрхива = КаталогПолучателя + ИмяАрхива;
			
			РежимСохранения = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
			РежимОбработки  = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
			
			ЗаписьZipФайла = Новый ЗаписьZipФайла(ПолноеИмяАрхива);
			ЗаписьZipФайла.Добавить(СтрокаФайл.Настройки.ПолноеИмяФайла,    РежимСохранения, РежимОбработки);
			ЗаписьZipФайла.Добавить(СтрокаФайл.Настройки.ПолноеИмяКаталога, РежимСохранения, РежимОбработки);
			ЗаписьZipФайла.Записать();
			
			СтрокаФайл.Ключ     = ИмяАрхива;
			СтрокаФайл.Значение = ПолноеИмяАрхива;
		КонецЕсли;
		
		КаталогФайла = Неопределено;
		ВременныйФайл = Неопределено;
		
		ПредставлениеФорматов = ПредставлениеФорматов 
			+ ?(ПредставлениеФорматов = "", "", ", ") 
			// Открывающий тег для ссылок (позже полные пути к файлам будут заменены на ссылки на конечных ресурсах).
			+ ?(ПараметрыДоставки.ДобавлятьСсылки = "КФорматам", "<a href = '"+ СтрокаФайл.Значение +"'>", "")
			// имя формата
			+ ПараметрыФормата.Имя
			// закрывающий тег для ссылок
			+ ?(ПараметрыДоставки.ДобавлятьСсылки = "КФорматам", "</a>", "");
			
		//
		Если ПараметрыДоставки.ДобавлятьСсылки = "ПослеОтчетов" Тогда
			ПредставлениеОтчета = ПредставлениеОтчета + Символы.ПС + "<" + СтрокаФайл.Значение + ">";
		КонецЕсли;
		
	КонецЦикла;
	
	// Представление конкретного отчета.
	ПредставлениеОтчета = СтрЗаменить(ПредставлениеОтчета, "[ПредставлениеФорматов]", ПредставлениеФорматов);
	СтрокаОтчет.Настройки.Вставить("ПредставлениеВПисьме", ПредставлениеОтчета);
	
КонецПроцедуры

// Вспомогательная процедура функции "ВыполнитьРассылку" - заполняет значения по умолчанию для параметров, 
//   которые не были переданы явно.
//   Так же подготавливает и заполняет параметры, необходимые для рассылки.
//
// Параметры и возвращаемое значение:
//   См. ВыполнитьРассылку().
//
Функция ПроверитьИДозаполнитьПараметрыВыполнения(ТаблицаОтчетов, ПараметрыДоставки, НаименованиеРассылки, ПараметрыЖурнала)
	// Параметры записи в журнал регистрации.
	Если ТипЗнч(ПараметрыЖурнала) <> Тип("Структура") Тогда
		ПараметрыЖурнала = Новый Структура;
	КонецЕсли;
	Если Не ПараметрыЖурнала.Свойство("ИмяСобытия") Тогда
		ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Запуск по требованию'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	Если Не ПараметрыЖурнала.Свойство("Данные") Тогда
		ПараметрыЖурнала.Вставить("Данные", НаименованиеРассылки);
	КонецЕсли;
	Если Не ПараметрыЖурнала.Свойство("Метаданные") Тогда
		ПараметрыЖурнала.Вставить("Метаданные", Неопределено);
		ТипДанных = ТипЗнч(ПараметрыЖурнала.Данные);
		Если ТипДанных <> Тип("Структура") И ОбщегоНазначения.ЭтоСсылка(ТипДанных) Тогда
			ПараметрыЖурнала.Метаданные = ПараметрыЖурнала.Данные.Метаданные();
		КонецЕсли;
	КонецЕсли;
	
	// Проверка прав доступа.
	Если Не ПравоВывода(ПараметрыЖурнала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоступностьОтчетов = ВариантыОтчетов.ДоступностьОтчетов(ТаблицаОтчетов.ВыгрузитьКолонку("Отчет"));
	Недоступные = ДоступностьОтчетов.Скопировать(Новый Структура("Доступен", Ложь));
	Если Недоступные.Количество() > 0 Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В рассылке есть недоступные отчеты (%1):%2'"),
			Недоступные.Количество(),
			Символы.ПС + Символы.Таб + СтрСоединить(Недоступные.ВыгрузитьКолонку("Представление"), Символы.ПС + Символы.Таб)));
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("Рассылка", СокрЛП(Строка(НаименованиеРассылки)));
	ПараметрыДоставки.Вставить("ДатаВыполнения", ТекущаяДатаСеанса());
	ПараметрыДоставки.Вставить("БылиОшибки",                   Ложь);
	ПараметрыДоставки.Вставить("БылиПредупреждения",           Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВПапку",              Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВСетевойКаталог",     Ложь);
	ПараметрыДоставки.Вставить("ВыполненаНаFTP",               Ложь);
	ПараметрыДоставки.Вставить("ВыполненаПоЭлектроннойПочте",  Ложь);
	ПараметрыДоставки.Вставить("ВыполненныеСпособыПубликации", "");
	
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		Если Не ЗначениеЗаполнено(ПараметрыДоставки.Папка) Тогда
			ПараметрыДоставки.ИспользоватьПапку = Ложь;
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
				НСтр("ru = 'Папка не заполнена, доставка в папку отключена'"));
		Иначе
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
				МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
				ПравоДоступа = МодульРаботаСФайламиСлужебный.ПравоДобавленияФайловВПапку(ПараметрыДоставки.Папка);
			Иначе
				ПравоДоступа = Истина;
			КонецЕсли;
			Если Не ПравоДоступа Тогда
				УстановитьПривилегированныйРежим(Истина);
				ПредставлениеПапки = Строка(ПараметрыДоставки.Папка);
				УстановитьПривилегированныйРежим(Ложь);
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Недостаточно прав для создания файлов в папке ""%1"".'"),
					ПредставлениеПапки));
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		Если Не ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогWindows) 
			Или Не ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогLinux) Тогда
			
			Если ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогWindows) Тогда
				ЗначениеПодстановки = НСтр("ru = 'Linux'");
			ИначеЕсли ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогLinux) Тогда
				ЗначениеПодстановки = НСтр("ru = 'Windows'");
			Иначе
				ЗначениеПодстановки = НСтр("ru = 'Windows и Linux'");
			КонецЕсли;
			
			ПараметрыДоставки.ИспользоватьСетевойКаталог = Ложь;
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сетевой каталог %1 не выбран, доставка в сетевой каталог отключена'"),
				ЗначениеПодстановки));
			
		Иначе
			
			ПараметрыДоставки.СетевойКаталогWindows = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ПараметрыДоставки.СетевойКаталогWindows);
			ПараметрыДоставки.СетевойКаталогLinux = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ПараметрыДоставки.СетевойКаталогLinux);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьFTPРесурс И Не ЗначениеЗаполнено(ПараметрыДоставки.Сервер) Тогда
		ПараметрыДоставки.ИспользоватьFTPРесурс = Ложь;
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'FTP сервер не заполнен, доставка в папку на FTP ресурс отключена'"));
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту И Не ЗначениеЗаполнено(ПараметрыДоставки.УчетнаяЗапись) Тогда
		ПараметрыДоставки.ИспользоватьЭлектроннуюПочту = Ложь;
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Учетная запись не выбрана, доставка по электронной почте отключена'"));
	КонецЕсли;
	
	Если Не ПараметрыДоставки.Свойство("Персонализирована") Тогда
		ПараметрыДоставки.Вставить("Персонализирована", Ложь);
	КонецЕсли;
	
	Если ПараметрыДоставки.Персонализирована Тогда
		Если Не ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				НСтр("ru = 'Персонализированная рассылка может быть отправлена только по электронной почте'"));
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыДоставки.ИспользоватьПапку          = Ложь;
		ПараметрыДоставки.ИспользоватьСетевойКаталог = Ложь;
		ПараметрыДоставки.ИспользоватьFTPРесурс      = Ложь;
		ПараметрыДоставки.Вставить("ТолькоУведомить", Ложь);
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		// Соединение с почтовым сервером поднимается дольше всего.
		Если Не ПараметрыДоставки.Свойство("Соединение") Тогда
			ПараметрыДоставки.Вставить("Соединение", Неопределено);
		КонецЕсли;
		
		// Уведомления о доставке по электронной почте.
		Если Не ПараметрыДоставки.Свойство("ТолькоУведомить") Тогда
			ПараметрыДоставки.Вставить("ТолькоУведомить", Ложь);
		КонецЕсли;
		
		Если ПараметрыДоставки.ТолькоУведомить
			И Не ПараметрыДоставки.ИспользоватьПапку
			И Не ПараметрыДоставки.ИспользоватьСетевойКаталог
			И Не ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
				НСтр("ru = 'Использование уведомлений по электронной почте возможно только совместно с другими способами доставки'"));
			Возврат Ложь;
		КонецЕсли;
		
		// Параметры письма.
		Если Не ПараметрыДоставки.Свойство("СкрытыеКопии") Тогда
			ПараметрыДоставки.Вставить("СкрытыеКопии", Ложь);
		КонецЕсли;
		Если Не ПараметрыДоставки.Свойство("ПараметрыПисьма") Тогда
			ПараметрыДоставки.Вставить("ПараметрыПисьма", Новый Структура);
		КонецЕсли;
		
		ПараметрыПисьма = ПараметрыДоставки.ПараметрыПисьма;
		
		ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
		
		// Тип текста почтового сообщения.
		Если Не ПараметрыПисьма.Свойство("ТипТекста") Или Не ЗначениеЗаполнено(ПараметрыПисьма.ТипТекста) Тогда
			ПараметрыПисьма.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.ПростойТекст);
		КонецЕсли;
		
		ПараметрыДоставки.Вставить("ПисьмоВФорматеHTML", ПараметрыПисьма.ТипТекста = "HTML" Или ПараметрыПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML);
		
		// Для обратной совместимости.
		Если ПараметрыПисьма.Свойство("Вложения") Тогда
			ПараметрыПисьма.Вставить("Картинки", ПараметрыПисьма.Вложения);
		КонецЕсли;
		
		// Шаблон темы
		Если Не ПараметрыДоставки.Свойство("ШаблонТемы") Или Не ЗначениеЗаполнено(ПараметрыДоставки.ШаблонТемы) Тогда
			ПараметрыДоставки.Вставить("ШаблонТемы", ШаблонТемы());
		КонецЕсли;
		
		// Шаблон сообщения
		Если Не ПараметрыДоставки.Свойство("ШаблонТекста") Или Не ЗначениеЗаполнено(ПараметрыДоставки.ШаблонТекста) Тогда
			ПараметрыДоставки.Вставить("ШаблонТекста", ШаблонТекста());
			Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
				Документ = Новый ФорматированныйДокумент;
				Документ.Добавить(ПараметрыДоставки.ШаблонТекста, ТипЭлементаФорматированногоДокумента.Текст);
				Документ.ПолучитьHTML(ПараметрыДоставки.ШаблонТекста, Новый Структура);
			КонецЕсли;
		КонецЕсли;
		
		// Удаление лишних элементов стиля.
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			СтильЛев = СтрНайти(ПараметрыДоставки.ШаблонТекста, "<style");
			СтильПрав = СтрНайти(ПараметрыДоставки.ШаблонТекста, "</style>");
			Если СтильЛев > 0 И СтильПрав > СтильЛев Тогда
				ПараметрыДоставки.ШаблонТекста = Лев(ПараметрыДоставки.ШаблонТекста, СтильЛев - 1) + Сред(ПараметрыДоставки.ШаблонТекста, СтильПрав + 8);
			КонецЕсли;
		КонецЕсли;
		
		// Состав значений для подстановки.
		СтруктураЗаполненияШаблонов = Новый Структура("НаименованиеРассылки, Автор, ЗаголовокСистемы, ДатаВыполнения");
		СтруктураЗаполненияШаблонов.НаименованиеРассылки = ПараметрыДоставки.Рассылка;
		СтруктураЗаполненияШаблонов.Автор                = ПараметрыДоставки.Автор;
		СтруктураЗаполненияШаблонов.ЗаголовокСистемы     = ИмяЭтойИнформационнойБазы();
		СтруктураЗаполненияШаблонов.ДатаВыполнения       = ПараметрыДоставки.ДатаВыполнения;
		Если Не ПараметрыДоставки.Персонализирована Тогда
			СтруктураЗаполненияШаблонов.Вставить("Получатель", "");
		КонецЕсли;
		
		// Шаблон темы
		ПараметрыДоставки.ШаблонТемы = РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(
			ПараметрыДоставки.ШаблонТемы, 
			СтруктураЗаполненияШаблонов);
		
		// Шаблон сообщения
		ПараметрыДоставки.ШаблонТекста = РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(
			ПараметрыДоставки.ШаблонТекста,
			СтруктураЗаполненияШаблонов);
		
		// Признаки необходимости заполнения шаблонов (кэш проверок).
		ПараметрыДоставки.Вставить(
			"ЗаполнитьПолучателяВШаблонеТемы",
			СтрНайти(ПараметрыДоставки.ШаблонТемы, "[Получатель]") <> 0);
		ПараметрыДоставки.Вставить(
			"ЗаполнитьПолучателяВШаблонеСообщения",
			СтрНайти(ПараметрыДоставки.ШаблонТекста, "[Получатель]") <> 0);
		ПараметрыДоставки.Вставить(
			"ЗаполнитьСформированныеОтчетыВШаблонеСообщения",
			СтрНайти(ПараметрыДоставки.ШаблонТекста, "[СформированныеОтчеты]") <> 0);
		ПараметрыДоставки.Вставить(
			"ЗаполнитьСпособДоставкиВШаблонеСообщения",
			СтрНайти(ПараметрыДоставки.ШаблонТекста, "[СпособДоставки]") <> 0);
		
		// Представление отчетов.
		ПараметрыДоставки.Вставить("ПредставлениеОтчетовПолучателя", "");
	КонецЕсли;
	
	// Каталог временных файлов.
	ПараметрыДоставки.Вставить("КаталогВременныхФайлов", ФайловаяСистема.СоздатьВременныйКаталог("RP"));
	
	// Соответствие каталогов временных файлов получателей.
	ПараметрыДоставки.Вставить("НастройкиПолучателей", Новый Соответствие);
	
	// Параметры архивации: флажок и пароль архива.
	Если Не ПараметрыДоставки.Свойство("Архивировать") Тогда
		ПараметрыДоставки.Вставить("Архивировать", Ложь);
		ПараметрыДоставки.Вставить("ПарольАрхива", "");
	ИначеЕсли Не ПараметрыДоставки.Свойство("ПарольАрхива") Тогда
		ПараметрыДоставки.Вставить("ПарольАрхива", "");
	КонецЕсли;
	
	// Имя архива (удаление запрещенных символов, заполнение шаблона) и расширение.
	Если ПараметрыДоставки.Архивировать Тогда
		Если Не ПараметрыДоставки.Свойство("ИмяАрхива") Или Не ЗначениеЗаполнено(ПараметрыДоставки.ИмяАрхива) Тогда
			ПараметрыДоставки.Вставить("ИмяАрхива", ШаблонИмениАрхива());
		КонецЕсли;
		Структура = Новый Структура("НаименованиеРассылки, ДатаВыполнения", ПараметрыДоставки.Рассылка, ТекущаяДатаСеанса());
		ИмяАрхива = РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(ПараметрыДоставки.ИмяАрхива, Структура);
		ПараметрыДоставки.ИмяАрхива = ПривестиИмяФайла(ИмяАрхива, ПараметрыДоставки.ТранслитерироватьИменаФайлов);
		Если НРег(Прав(ПараметрыДоставки.ИмяАрхива, 4)) <> ".zip" Тогда
			ПараметрыДоставки.ИмяАрхива = ПараметрыДоставки.ИмяАрхива +".zip";
		КонецЕсли;
	КонецЕсли;
	
	// Параметры форматов.
	ПараметрыДоставки.Вставить("ПараметрыФорматов", Новый Соответствие);
	Для Каждого ФорматМД Из Метаданные.Перечисления.ФорматыСохраненияОтчетов.ЗначенияПеречисления Цикл
		Формат = Перечисления.ФорматыСохраненияОтчетов[ФорматМД.Имя];
		ПараметрыФормата = ПараметрыЗаписиТабличногоДокументаВФормат(Формат);
		ПараметрыФормата.Вставить("Имя", ФорматМД.Имя);
		ПараметрыДоставки.ПараметрыФорматов.Вставить(Формат, ПараметрыФормата);
	КонецЦикла;
	
	// Параметры транслитерации имен файлов.
	Если Не ПараметрыДоставки.Свойство("ТранслитерироватьИменаФайлов") Тогда
		ПараметрыДоставки.Вставить("ТранслитерироватьИменаФайлов", Ложь);
	КонецЕсли;
	
	// Параметры добавления ссылок на конечные файлы в письмо.
	ПараметрыДоставки.Вставить("ДобавлятьСсылки", "");
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту 
		И (ПараметрыДоставки.ИспользоватьПапку
			Или ПараметрыДоставки.ИспользоватьСетевойКаталог
			Или ПараметрыДоставки.ИспользоватьFTPРесурс)
		И ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		
		Если ПараметрыДоставки.Архивировать Тогда
			ПараметрыДоставки.ДобавлятьСсылки = "КАрхиву";
		ИначеЕсли ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ПараметрыДоставки.ДобавлятьСсылки = "КФорматам";
		Иначе
			ПараметрыДоставки.ДобавлятьСсылки = "ПослеОтчетов";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Возвращает шаблон темы по умолчанию для доставки по электронной почте.
Функция ШаблонТемы() Экспорт
	Возврат НСтр("ru = '[НаименованиеРассылки] от [ДатаВыполнения(ДЛФ=''D'')]'");
КонецФункции

// Возвращает шаблон тела сообщения по умолчанию для доставки по электронной почте.
Функция ШаблонТекста() Экспорт
	Возврат НСтр(
		"ru = 'Сформированы отчеты:
		|
		|[СформированныеОтчеты]
		|
		|[СпособДоставки]
		|
		|[ЗаголовокСистемы]
		|[ДатаВыполнения(ДЛФ=''DD'')]'");
КонецФункции

// Возвращает шаблон наименования архива по умолчанию.
Функция ШаблонИмениАрхива() Экспорт
	// Для формата даты локализация не требуется.
	Возврат НСтр("ru = '[НаименованиеРассылки]_[ДатаВыполнения(ДФ=''yyyy-MM-dd'')]'");
КонецФункции

// Формирует список рассылки из списка получателей, подготавливает все параметры письма 
//   и передает управление подсистеме "РаботаСПочтовымиСообщениями".
//   Для контроля за выполнением рекомендуется вызывать в конструкции "Попытка ... Исключение".
//
// Параметры:
//   Вложения          - Соответствие - См. СохранитьОтчетыВФорматы(), параметр Результат.
//   ПараметрыДоставки - см. ВыполнитьРассылку(), параметр ПараметрыДоставки.
//   СтрокаПолучатель  - Настройки получателя:
//       - Неопределено         - Используется весь список получателей из "ПараметрыДоставки.Получатели".
//       - СтрокаДереваЗначений - Используется свойство строки "Получатель".
//
Процедура ОтправитьОтчетыПолучателю(Вложения, ПараметрыДоставки, СтрокаПолучатель = Неопределено)
	Получатель = ?(СтрокаПолучатель = Неопределено, Неопределено, СтрокаПолучатель.Ключ);
	ПараметрыПисьма = ПараметрыДоставки.ПараметрыПисьма;
	
	// Вложения - отчеты
	ПараметрыПисьма.Вставить("Вложения", ПреобразоватьВСоответствие(Вложения, "Ключ", "Значение"));
	
	// Шаблоны тема и тела
	ШаблонТемы = ПараметрыДоставки.ШаблонТемы;
	ШаблонТекста = ПараметрыДоставки.ШаблонТекста;
	
	// Вставка сформированных отчетов в шаблон сообщения.
	Если ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Символы.ПС,
				Символы.ПС + "<br>");
		КонецЕсли;
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "[СформированныеОтчеты]", ПараметрыДоставки.ПредставлениеОтчетовПолучателя);
	КонецЕсли;
	
	// Способ доставки заполняется ранее (за пределами этой процедуры).
	Если ПараметрыДоставки.ЗаполнитьСпособДоставкиВШаблонеСообщения Тогда
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "[СпособДоставки]", РассылкаОтчетовКлиентСервер.ПредставлениеСпособовДоставки(ПараметрыДоставки));
	КонецЕсли;
	
	// Тема и тело сообщения
	ПараметрыПисьма.Вставить("Тема", ШаблонТемы);
	ПараметрыПисьма.Вставить("Тело", ШаблонТекста);
	
	// Тема и тело сообщения
	КлючАдресаДоставки = ?(ПараметрыДоставки.СкрытыеКопии, "СкрытыеКопии", "Кому");
	
	Если Получатель = Неопределено Тогда
		Если ПараметрыДоставки.Получатели.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Доставка всем получателям
		Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеТемы Или ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеСообщения Тогда
			// Шаблоны персонализированы - доставка каждому получателю.
			Письма = Новый Массив;
			Для Каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
				// Тема и тело сообщения
				Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеТемы Тогда
					ПараметрыПисьма.Тема = СтрЗаменить(ШаблонТемы, "[Получатель]", Строка(КлючИЗначение.Ключ));
				КонецЕсли;
				Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеСообщения Тогда
					ПараметрыПисьма.Тело = СтрЗаменить(ШаблонТекста, "[Получатель]", Строка(КлючИЗначение.Ключ));
				КонецЕсли;
				
				// Получатель
				ПараметрыПисьма.Вставить(КлючАдресаДоставки, КлючИЗначение.Значение);
				
				// Отправляем письмо
				Письма.Добавить(ПодготовитьПисьмо(ПараметрыДоставки, ПараметрыПисьма));
			КонецЦикла;
			РаботаСПочтовымиСообщениями.ОтправитьПисьма(ПараметрыДоставки.УчетнаяЗапись, Письма);
		Иначе
			// Шаблоны не персонализированы - склеивание E-Mail адресов получателей и совместная доставка.
			Кому = "";
			Для Каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
				Кому = Кому + ?(Кому = "", "", ", ") + КлючИЗначение.Значение;
			КонецЦикла;
			
			ПараметрыПисьма.Вставить(КлючАдресаДоставки, Кому);
			
			// Отправляем письмо
			ОтправитьПочтовоеСообщение(ПараметрыДоставки, ПараметрыПисьма);
		КонецЕсли;
	Иначе
		// Доставка конкретному получателю.
		
		// Тема и тело сообщения
		Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеТемы Тогда
			ПараметрыПисьма.Тема = СтрЗаменить(ШаблонТемы, "[Получатель]", Строка(Получатель));
		КонецЕсли;
		Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеСообщения Тогда
			ПараметрыПисьма.Тело = СтрЗаменить(ШаблонТекста, "[Получатель]", Строка(Получатель));
		КонецЕсли;
		
		// Получатель
		ПараметрыПисьма.Вставить(КлючАдресаДоставки, ПараметрыДоставки.Получатели[Получатель]);
		
		// Отправляем письмо
		ОтправитьПочтовоеСообщение(ПараметрыДоставки, ПараметрыПисьма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПочтовоеСообщение(ПараметрыДоставки, ПараметрыПисьма)
	
	Письмо = ПодготовитьПисьмо(ПараметрыДоставки, ПараметрыПисьма);
	РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ПараметрыДоставки.УчетнаяЗапись, Письмо);
	
КонецПроцедуры
	
Функция ПодготовитьПисьмо(ПараметрыДоставки, ПараметрыПисьма)
	
	Если ПараметрыПисьма.Свойство("Картинки")
		И ПараметрыПисьма.Картинки <> Неопределено
		И ПараметрыПисьма.Картинки.Количество() > 0 Тогда
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьHTML(ПараметрыПисьма.Тело, ПараметрыПисьма.Картинки);
		ПараметрыПисьма.Тело = ФорматированныйДокумент;
	КонецЕсли;
	
	Возврат РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ПараметрыДоставки.УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции

// Преобразует коллекцию в соответствие.
Функция ПреобразоватьВСоответствие(Коллекция, ИмяКлюча, ИмяЗначения)
	Если ТипЗнч(Коллекция) = Тип("Соответствие") Тогда
		Возврат Новый Соответствие(Новый ФиксированноеСоответствие(Коллекция));
	КонецЕсли;
	Результат = Новый Соответствие;
	Для Каждого Элемент Из Коллекция Цикл
		Результат.Вставить(Элемент[ИмяКлюча], Элемент[ИмяЗначения]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Объединяет массивы, возвращая результат объединения.
Функция ОбъединитьМассивы(Массив1, Массив2)
	Массив = Новый Массив;
	Для Каждого ЭлементМассива Из Массив1 Цикл
		Массив.Добавить(ЭлементМассива);
	КонецЦикла;
	Для Каждого ЭлементМассива Из Массив2 Цикл
		Массив.Добавить(ЭлементМассива);
	КонецЦикла;
	Возврат Массив;
КонецФункции

// Выполняет архивацию вложений в соответствии с параметрами доставки.
//
// Параметры:
//   Вложения - Соответствие, СтрокаДереваЗначений - См. СоздатьДеревоОтчетов(), возвращаемое значение, 3й уровень.
//   ПараметрыДоставки - см. ВыполнитьРассылку(), параметр ПараметрыДоставки.
//   КаталогВременныхФайлов - Строка - Каталог, в который будет выполнена архивация.
//
Процедура АрхивацияВложений(Вложения, ПараметрыДоставки, КаталогВременныхФайлов)
	Если Не ПараметрыДоставки.Архивировать Тогда
		Возврат;
	КонецЕсли;
	
	// Каталог вместе с файлом архивируются, а имя файла меняется на имя архива.
	ПолноеИмяФайла = КаталогВременныхФайлов + ПараметрыДоставки.ИмяАрхива;
	
	РежимСохранения = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	РежимОбработки  = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ПолноеИмяФайла, ПараметрыДоставки.ПарольАрхива);
	
	Для Каждого Вложение Из Вложения Цикл
		ЗаписьZipФайла.Добавить(Вложение.Значение, РежимСохранения, РежимОбработки);
		Если Вложение.Настройки.ФайлСКаталогом = Истина Тогда
			ЗаписьZipФайла.Добавить(Вложение.Настройки.ПолноеИмяКаталога, РежимСохранения, РежимОбработки);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьZipФайла.Записать();
	
	Вложения = Новый Соответствие;
	Вложения.Вставить(ПараметрыДоставки.ИмяАрхива, ПолноеИмяФайла);
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		Если ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = 
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя 
				+ Символы.ПС 
				+ Символы.ПС
				+ НСтр("ru = 'Файлы отчетов запакованы в архив'")
				+ " ";
		КонецЕсли;
		
		Если ПараметрыДоставки.ДобавлятьСсылки = "КАрхиву" Тогда
			// Способ доставки подразумевает добавление ссылок.
			Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СокрЛП(
					ПараметрыДоставки.ПредставлениеОтчетовПолучателя
					+"<a href = '"+ ПолноеИмяФайла +"'>"+ ПараметрыДоставки.ИмяАрхива +"</a>");
			Иначе
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СокрЛП(
					ПараметрыДоставки.ПредставлениеОтчетовПолучателя
					+""""+ ПараметрыДоставки.ИмяАрхива +""":"+ Символы.ПС +"<"+ ПолноеИмяФайла +">");
			КонецЕсли;
		ИначеЕсли ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
			// Доставка только по почте
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СокрЛП(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя
				+""""+ ПараметрыДоставки.ИмяАрхива +"""");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры сохранения табличного документа в формат.
//
// Параметры:
//   Формат - ПеречислениеСсылка.ФорматыСохраненияОтчетов - Формат, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//   Структура - Результат - Структура - Параметры записи.
//       * Расширение - Строка - Расширение, с которым можно сохранить файл.
//       * ТипФайла - ТипФайлаТабличногоДокумента - Формат сохранения табличного документа.
//           Используется для определения параметра <ТипФайлаТаблицы> метода "ТабличныйДокумент.Записать".
//
Функция ПараметрыЗаписиТабличногоДокументаВФормат(Формат)
	Результат = Новый Структура("Расширение, ТипФайла");
	Если Формат = Перечисления.ФорматыСохраненияОтчетов.XLSX Тогда
		Результат.Расширение = ".xlsx";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.XLS Тогда
		Результат.Расширение = ".xls";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.XLS;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.ODS Тогда
		Результат.Расширение = ".ods";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.ODS;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.MXL Тогда
		Результат.Расширение = ".mxl";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.MXL;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.PDF Тогда
		Результат.Расширение = ".pdf";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.PDF;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.HTML Тогда
		Результат.Расширение = ".html";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.HTML;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.HTML4 Тогда
		Результат.Расширение = ".html";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.HTML4;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.DOCX Тогда
		Результат.Расширение = ".docx";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.DOCX;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.TXT Тогда
		Результат.Расширение = ".txt";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.TXT;
	
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.ANSITXT Тогда
		Результат.Расширение = ".txt";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT;
		
	Иначе 
		// "Рыба" для всех форматов, добавленных при внедрении, обработчик сохранения
		// которых должен находиться в переопределяемом модуле.
		Результат.Расширение = Неопределено;
		Результат.ТипФайла = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует недопустимые символы файлов в похожие допустимые.
//   Работает только с именем файла, путь не поддерживается.
//
// Параметры:
//   ИсходноеИмяФайла - Строка - Имя файла, из которого следует удалить недопустимые символы.
//
// Возвращаемое значение:
//   Строка - Результат - Строка - Результат преобразования.
//
Функция ПривестиИмяФайла(ИсходноеИмяФайла, ТранслитерироватьИменаФайлов)
	
	Результат = Лев(СокрЛП(ИсходноеИмяФайла), 255);
	
	СоответствиеЗамен = Новый Соответствие;
	
	// Стандартные не поддерживаемые символы.
	СоответствиеЗамен.Вставить("""", "'");
	СоответствиеЗамен.Вставить("/", "_");
	СоответствиеЗамен.Вставить("\", "_");
	СоответствиеЗамен.Вставить(":", "_");
	СоответствиеЗамен.Вставить(";", "_");
	СоответствиеЗамен.Вставить("|", "_");
	СоответствиеЗамен.Вставить("=", "_");
	СоответствиеЗамен.Вставить("?", "_");
	СоответствиеЗамен.Вставить("*", "_");
	СоответствиеЗамен.Вставить("<", "_");
	СоответствиеЗамен.Вставить(">", "_");
	
	// Символы, не поддерживаемые устаревшими ОС.
	СоответствиеЗамен.Вставить("[", "");
	СоответствиеЗамен.Вставить("]", "");
	СоответствиеЗамен.Вставить(",", "");
	СоответствиеЗамен.Вставить("{", "");
	СоответствиеЗамен.Вставить("}", "");
	
	Для Каждого КлючИЗначение Из СоответствиеЗамен Цикл
		Результат = СтрЗаменить(Результат, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ТранслитерироватьИменаФайлов Тогда
		Результат = СтроковыеФункции.СтрокаЛатиницей(Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Дерево значений, необходимое для формирования и доставки отчетов.
Функция СоздатьДеревоОтчетов()
	// Структура дерева по уровням вложенности:
	//
	// 1 - Получатели:
	//   Ключ      - Ссылка.
	//   Значение  - Каталог получателя.
	//
	// 2 - Табличные документы получателей:
	//   Ключ      - Имя отчета.
	//   Значение  - Табличный документ.
	//   Настройки - Все параметры отчета...
	//
	// 3 - Файлы получателей:
	//   Ключ      - Имя файла.
	//   Значение  - Полный путь к файлу.
	//   Настройки - ФайлСКаталогом, ИмяФайла, ПолноеИмяФайла, ИмяКаталога, ПолноеИмяКаталога, Формат, Имя, Расширение, ТипФайла.
	
	ДеревоОтчетов = Новый ДеревоЗначений;
	ДеревоОтчетов.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ДеревоОтчетов.Колонки.Добавить("Ключ");
	ДеревоОтчетов.Колонки.Добавить("Значение");
	ДеревоОтчетов.Колонки.Добавить("Настройки", Новый ОписаниеТипов("Структура"));
	
	Возврат ДеревоОтчетов;
КонецФункции

// Проверяет право текущего пользователя на вывод информации. Если прав нет - производится запись в журнал регистрации.
//
// Параметры:
//   ПараметрыЖурнала - Структура - 
// 
// Возвращаемое значение:
//   Булево - 
//
Функция ПравоВывода(ПараметрыЖурнала)
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	Если Не ПравоВывода Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У пользователя ''%1'' недостаточно прав на вывод информации'"),
			Пользователи.ТекущийПользователь()));
	КонецЕсли;
	Возврат ПравоВывода;
КонецФункции

// Преобразует массив сообщений пользователю в одну строку.
Функция СтрокаСообщенийПользователю(Ошибки = Неопределено, СмЖурналРегистрации = Истина) Экспорт
	Если Ошибки = Неопределено Тогда
		Ошибки = ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;
	
	Отступ = Символы.ПС + Символы.ПС;
	
	ВсеОшибки = "";
	Для Каждого Ошибка Из Ошибки Цикл
		ВсеОшибки = СокрЛП(ВсеОшибки + Отступ + ?(ТипЗнч(Ошибка) = Тип("Строка"), Ошибка, Ошибка.Текст));
	КонецЦикла;
	Если ВсеОшибки <> "" И СмЖурналРегистрации Тогда
		ВсеОшибки = ВсеОшибки + Отступ + "---" + Отступ + НСтр("ru = 'Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат ВсеОшибки;
КонецФункции

// Если файл существует - добавляет суффикс в имя файла.
//
// Параметры:
//   ПолноеИмяФайла - Строка - Имя файла, с которого надо начать поиск.
//
Процедура НайтиСвободноеИмяФайла(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	// Установить шаблон имени файла для подстановки различных суффиксов.
	ШаблонИмени = "";
	ДлинаИмени = СтрДлина(ПолноеИмяФайла);
	КодСлэша = КодСимвола("/");
	КодОбратногоСлэша = КодСимвола("\");
	КодТочки = КодСимвола(".");
	Для ОбратныйИндекс = 1 По ДлинаИмени Цикл
		Индекс = ДлинаИмени - ОбратныйИндекс + 1;
		Код = КодСимвола(ПолноеИмяФайла, Индекс);
		Если Код = КодТочки Тогда
			ШаблонИмени = Лев(ПолноеИмяФайла, Индекс - 1) + "<шаблон>" + Сред(ПолноеИмяФайла, Индекс);
			Прервать;
		ИначеЕсли Код = КодСлэша Или Код = КодОбратногоСлэша Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ШаблонИмени = "" Тогда
		ШаблонИмени = ПолноеИмяФайла + "<шаблон>";
	КонецЕсли;
	
	Индекс = 0;
	Пока Файл.Существует() Цикл
		Индекс = Индекс + 1;
		ПолноеИмяФайла = СтрЗаменить(ШаблонИмени, "<шаблон>", " ("+ Формат(Индекс, "ЧГ=") +")");
		Файл = Новый Файл(ПолноеИмяФайла);
	КонецЦикла;
КонецПроцедуры

// Создает корневую строку дерева для получателя (в случае ее отсутствия) и заполняет ее параметрами по умолчанию.
//
// Параметры:
//   ДеревоОтчетов     - ДеревоЗначений - См. СоздатьДеревоОтчетов(), возвращаемое значение, 1й уровень.
//   ПолучательСсылка  - СправочникСсылка, Неопределено - Ссылка получателя.
//   ПараметрыДоставки - см. ВыполнитьРассылку(), параметр ПараметрыДоставки.
//
// Возвращаемое значение: 
//   СтрокаДереваЗначений - См. СоздатьДеревоОтчетов(), возвращаемое значение, 1й уровень.
//
Функция ОпределитьСтрокуДереваДляПолучателя(ДеревоОтчетов, ПолучательСсылка, ПараметрыДоставки)
	
	СтрокаПолучатель = ДеревоОтчетов.Строки.Найти(ПолучательСсылка, "Ключ", Ложь);
	Если СтрокаПолучатель = Неопределено Тогда
		
		КаталогПолучателя = ПараметрыДоставки.КаталогВременныхФайлов;
		Если ПолучательСсылка <> Неопределено Тогда
			КаталогПолучателя = КаталогПолучателя 
				+ ПривестиИмяФайла(Строка(ПолучательСсылка), ПараметрыДоставки.ТранслитерироватьИменаФайлов)
				+ " (" + Строка(ПолучательСсылка.УникальныйИдентификатор()) + ")\";
			СоздатьКаталог(КаталогПолучателя);
		КонецЕсли;
		
		СтрокаПолучатель = ДеревоОтчетов.Строки.Добавить();
		СтрокаПолучатель.Уровень  = 1;
		СтрокаПолучатель.Ключ     = ПолучательСсылка;
		СтрокаПолучатель.Значение = КаталогПолучателя;
		
	КонецЕсли;
	
	Возврат СтрокаПолучатель;
	
КонецФункции

// Формирует представление отчетов для получателя.
Процедура СформироватьПредставлениеОтчетовДляПолучателя(ПараметрыДоставки, СтрокаПолучатель)
	
	СформированныеОтчеты = "";
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту И ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		
		Разделитель = Символы.ПС;
		Если ПараметрыДоставки.ДобавлятьСсылки = "ПослеОтчетов" Тогда
			Разделитель = Разделитель + Символы.ПС;
		КонецЕсли;
		
		Индекс = 0;
		
		Для Каждого СтрокаОтчет Из ПараметрыДоставки.СтрокаОбщихОтчетов.Строки Цикл
			Индекс = Индекс + 1;
			СформированныеОтчеты = СформированныеОтчеты 
			+ Разделитель 
			+ Формат(Индекс, "ЧГ=") 
			+ ". " 
			+ СтрокаОтчет.Настройки.ПредставлениеВПисьме;
		КонецЦикла;
		
		Если СтрокаПолучатель <> Неопределено И СтрокаПолучатель <> ПараметрыДоставки.СтрокаОбщихОтчетов Тогда
			Для Каждого СтрокаОтчет Из СтрокаПолучатель.Строки Цикл
				Индекс = Индекс + 1;
				СформированныеОтчеты = СформированныеОтчеты 
				+ Разделитель 
				+ Формат(Индекс, "ЧГ=") 
				+ ". " 
				+ СтрокаОтчет.Настройки.ПредставлениеВПисьме;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("ПредставлениеОтчетовПолучателя", СокрЛП(СформированныеОтчеты));
	
КонецПроцедуры

// Проверяет наличие внешних наборов данных.
//
// Параметры:
//   НаборыДанных - НаборыДанныхМакетаКомпоновкиДанных - Коллекция проверяемых наборов данных.
//
// Возвращаемое значение: 
//   Булево - Истина если есть внешние наборы данных.
//
Функция ЕстьВнешнийНаборДанных(НаборыДанных)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			
			Возврат Истина;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			Если ЕстьВнешнийНаборДанных(НаборДанных.Элементы) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция КоличествоРассылокСОтчетом(ВариантОтчета)
	
	Если Не ЗначениеЗаполнено(ВариантОтчета) Или ТипЗнч(ВариантОтчета) <> Тип("СправочникСсылка.ВариантыОтчетов") 
		Или ВариантОтчета.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Отчеты.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.РассылкиОтчетов.Отчеты КАК Отчеты
		|ГДЕ
		|	Отчеты.Отчет = &ВариантОтчета");
		
	Запрос.УстановитьПараметр("ВариантОтчета", ВариантОтчета);
	Возврат Запрос.Выполнить().Выгрузить()[0].Количество;
	
КонецФункции	

// Проверяет права и формирует текст ошибки.
Функция ТекстОшибкиПроверкиПраваДобавления() Экспорт
	Если Не ПравоДоступа("Вывод", Метаданные) Тогда
		Возврат НСтр("ru = 'Нет прав на вывод информации.'");
	КонецЕсли;
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.РассылкиОтчетов) Тогда
		Возврат НСтр("ru = 'Нет прав на рассылки отчетов.'");
	КонецЕсли;
	Если Не РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
		Возврат НСтр("ru = 'Нет прав на отправку писем или нет доступных учетных записей.'");
	КонецЕсли;
	Возврат "";
КонецФункции

// Возвращает список значений перечисления "ФорматыСохраненияОтчетов".
//
// Возвращаемое значение: 
//   СписокФорматов - СписокЗначений - Список форматов, с пометками на системных форматах по умолчанию, где:
//       * Значение      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - Ссылка на описываемый формат.
//       * Представление - Строка - Пользовательское представление описываемого формата.
//       * Пометка       - Булево - Признак использования как формата по умолчанию.
//       * Картинка      - Картинка - Картинка формата.
//
Функция СписокФорматов() Экспорт
	СписокФорматов = Новый СписокЗначений;
	
	УстановитьПараметрыФормата(СписокФорматов, "HTML4", БиблиотекаКартинок.ФорматHTML, Истина);
	УстановитьПараметрыФормата(СписокФорматов, "PDF"  , БиблиотекаКартинок.ФорматPDF);
	УстановитьПараметрыФормата(СписокФорматов, "XLSX" , БиблиотекаКартинок.ФорматExcel2007);
	УстановитьПараметрыФормата(СписокФорматов, "XLS"  , БиблиотекаКартинок.ФорматExcel);
	УстановитьПараметрыФормата(СписокФорматов, "ODS"  , БиблиотекаКартинок.ФорматOpenOfficeCalc);
	УстановитьПараметрыФормата(СписокФорматов, "MXL"  , БиблиотекаКартинок.ФорматMXL);
	УстановитьПараметрыФормата(СписокФорматов, "DOCX" , БиблиотекаКартинок.ФорматWord2007);
	УстановитьПараметрыФормата(СписокФорматов, "TXT"    , БиблиотекаКартинок.ФорматTXT);
	УстановитьПараметрыФормата(СписокФорматов, "ANSITXT", БиблиотекаКартинок.ФорматTXT);
	
	РассылкаОтчетовПереопределяемый.ПереопределитьПараметрыФорматов(СписокФорматов);
	
	// Оставшиеся форматы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Форматы.Ссылка
	|ИЗ
	|	Перечисление.ФорматыСохраненияОтчетов КАК Форматы
	|ГДЕ
	|	(НЕ Форматы.Ссылка В (&МассивФорматов))";
	Запрос.УстановитьПараметр("МассивФорматов", СписокФорматов.ВыгрузитьЗначения());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УстановитьПараметрыФормата(СписокФорматов, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокФорматов;
КонецФункции

// Получает пустое значение для поиска по таблице "Отчеты" или "ФорматыОтчетов" справочника "РассылкиОтчетов".
//
// Возвращаемое значение:
//   - СправочникСсылка.ДополнительныеОтчетыИОбработки - 
//   - СправочникСсылка.ВариантыОтчетов - 
//
Функция ПустоеЗначениеОтчета() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.ФорматыОтчетов.Реквизиты.Отчет.Тип.ПривестиЗначение();
КонецФункции

// Получает заголовок системы, а если он не задан - синоним метаданных конфигурации.
Функция ИмяЭтойИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.ЗаголовокСистемы.Получить();
	Возврат ?(ПустаяСтрока(Результат), Метаданные.Синоним, Результат);
	
КонецФункции

Процедура ОтключитьРассылкиПередУдалениемТипаПолучателейРассылки(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РассылкиОтчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РассылкиОтчетов КАК РассылкиОтчетов
		|ГДЕ
		|	РассылкиОтчетов.ТипПолучателейРассылки = &ТипПолучателейРассылки";
	Запрос.УстановитьПараметр("ТипПолучателейРассылки", Источник.Ссылка);
	Записи = Запрос.Выполнить().Выбрать();
	Пока Записи.Следующий() Цикл
		РассылкаОбъект = Записи.Ссылка.ПолучитьОбъект();
		Если РассылкаОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РассылкаОбъект.ТипПолучателейРассылки = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
		РассылкаОбъект.Подготовлена = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РассылкаОбъект);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
