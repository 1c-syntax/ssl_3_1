///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ИспользуетсяИнтерактивныйРежимКриптографии(МенеджерКриптографии) Экспорт
	
	Если Не ЭлектроннаяПодписьСлужебныйКлиентСервер.ИнтерактивныйРежимДоступен() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МенеджерКриптографии.ИспользованиеИнтерактивногоРежима = ИспользованиеИнтерактивногоРежимаКриптографииИспользовать() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Продолжение процедуры ДатаПодписания.
Процедура ДатаПодписанияПослеЧтенияВБуферДвоичныхДанных(БуферДанныхПодписи, Контекст) Экспорт
	
	ДатаПодписания = ЭлектроннаяПодписьСлужебныйКлиентСервер.ДатаПодписанияУниверсальная(БуферДанныхПодписи);
	
	Если ДатаПодписания = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Контекст.ПривестиКЧасовомуПоясуСеанса Тогда
		ДатаПодписания = ДатаПодписания + (ОбщегоНазначенияКлиент.ДатаСеанса()
			- ОбщегоНазначенияКлиент.ДатаУниверсальная());
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ДатаПодписания);
	
КонецПроцедуры

// Продолжение процедуры НайтиДействительныеЛичныеСертификаты.
Процедура НайтиДействительныеЛичныеСертификаты(Оповещение, Отбор = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", Оповещение);
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Если Не Отбор.Свойство("ПроверятьСрокДействия") Тогда
		Отбор.Вставить("ПроверятьСрокДействия", Истина);
	КонецЕсли;
	
	Если Не Отбор.Свойство("ТолькоСертификатыСЗаполненнойПрограммой") Тогда
		Отбор.Вставить("ТолькоСертификатыСЗаполненнойПрограммой", Истина);
	КонецЕсли;
	
	Если Не Отбор.Свойство("ВключатьСертификатыСПустымПользователем") Тогда
		Отбор.Вставить("ВключатьСертификатыСПустымПользователем", Истина);
	КонецЕсли;
	
	Если Не Отбор.Свойство("Организация") Тогда
		Отбор.Вставить("Организация", Неопределено);
	КонецЕсли;

	ПараметрыОповещения.Вставить("Отбор",                 Отбор);
	
	Оповещение = Новый ОписаниеОповещения("НайтиДействительныеЛичныеСертификатыПослеПолученияПодписейНаКлиенте", ЭтотОбъект, ПараметрыОповещения);
	ПолучитьСвойстваСертификатовНаКлиенте(Оповещение, Не Отбор.ПроверятьСрокДействия, Истина);
	
КонецПроцедуры

// Продолжение процедуры НайтиДействительныеЛичныеСертификаты.
Процедура НайтиДействительныеЛичныеСертификатыПослеПолученияПодписейНаКлиенте(Результат, ДополнительныеПараметры) Экспорт

	ЛичныеСертификаты = ЭлектроннаяПодписьСлужебныйВызовСервера.ЛичныеСертификаты(Результат.СвойстваСертификатовНаКлиенте, ДополнительныеПараметры.Отбор);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ЛичныеСертификаты);
	
КонецПроцедуры

// Продолжение процедуры НайтиУстановленныеПрограммы.
Процедура НайтиУстановленныеПрограммы(Оповещение, ОписаниеПрограмм, ПроверятьНаСервере) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Программы",             ЭлектроннаяПодписьСлужебныйВызовСервера.ЗаполнитьСписокПрограммДляПоиска(ОписаниеПрограмм));
	ПараметрыОповещения.Вставить("ОповещениеОЗавершении", Оповещение);
	Если ПроверятьНаСервере = Неопределено Тогда
		ПроверятьНаСервере = ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере()
		                 Или ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере();
	КонецЕсли;
	ПараметрыОповещения.Вставить("ПроверятьНаСервере",    ПроверятьНаСервере);
	
	Оповещение = Новый ОписаниеОповещения("НайтиУстановленныеПрограммыПослеПодключенияРасширения", ЭтотОбъект, ПараметрыОповещения);
	
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры НайтиУстановленныеПрограммы.
Процедура НайтиУстановленныеПрограммыПослеПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Индекс",                -1);
	Контекст.Вставить("Программы",             ДополнительныеПараметры.Программы);
	Контекст.Вставить("ПроверятьНаСервере",    ДополнительныеПараметры.ПроверятьНаСервере);
	Контекст.Вставить("ОповещениеОЗавершении", ДополнительныеПараметры.ОповещениеОЗавершении);
	
	НайтиУстановленныеПрограммыЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры НайтиУстановленныеПрограммы.
Процедура НайтиУстановленныеПрограммыЦиклНачало(Контекст)
	
	Если Контекст.Программы.Количество() <= Контекст.Индекс + 1 Тогда
		// После цикла.
		ОповещениеОЗавершении = Контекст.ОповещениеОЗавершении;
		Если Контекст.ПроверятьНаСервере Тогда
			Контекст.Вставить("ОповещениеОЗавершении", Неопределено);
			ЭлектроннаяПодписьСлужебныйВызовСервера.НайтиУстановленныеПрограммы(Контекст);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Контекст.Программы);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	ОписаниеПрограммы = Контекст.Программы.Получить(Контекст.Индекс);
	
	Контекст.Вставить("ОписаниеПрограммы", ОписаниеПрограммы);
	
	ОписанияПрограмм = Новый Массив;
	ОписанияПрограмм.Добавить(Контекст.ОписаниеПрограммы);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписанияПрограмм",   ОписанияПрограмм);
	ПараметрыВыполнения.Вставить("Индекс",             -1);
	ПараметрыВыполнения.Вставить("ПоказатьОшибку",     Ложь);
	ПараметрыВыполнения.Вставить("СвойстваОшибки",     Новый Структура("Ошибки", Новый Массив));
	ПараметрыВыполнения.Вставить("ЭтоLinux",           Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент());
	ПараметрыВыполнения.Вставить("Менеджер",           Неопределено);
	ПараметрыВыполнения.Вставить("ИнтерактивныйРежим", Ложь);
	ПараметрыВыполнения.Вставить("Оповещение", Новый ОписаниеОповещения(
		"НайтиУстановленныеПрограммыЦиклПродолжение", ЭтотОбъект, Контекст));
	
	Контекст.Вставить("ПараметрыВыполнения",
		Новый Структура("СвойстваОшибки", ПараметрыВыполнения.СвойстваОшибки));
	
	СоздатьМенеджерКриптографииЦиклНачало(ПараметрыВыполнения);
	
КонецПроцедуры

// Продолжение процедуры НайтиУстановленныеПрограммы.
Процедура НайтиУстановленныеПрограммыЦиклПродолжение(Менеджер, Контекст) Экспорт
	
	ОписаниеПрограммы = Контекст.ОписаниеПрограммы;
	Ошибки            = Контекст.ПараметрыВыполнения.СвойстваОшибки.Ошибки;
	
	Если Менеджер <> Неопределено Тогда
		ОбновитьЗначение(ОписаниеПрограммы.РезультатПроверкиНаКлиенте, "");
		ОбновитьЗначение(ОписаниеПрограммы.Установлена, Истина);
		НайтиУстановленныеПрограммыЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Для каждого Ошибка Из Ошибки Цикл
		Прервать;
	КонецЦикла;
	
	Если Ошибка.НеУказанПуть Тогда
		ОбновитьЗначение(ОписаниеПрограммы.РезультатПроверкиНаКлиенте, НСтр("ru = 'Не указан путь к программе.'"));
	Иначе
		ТекстОшибки = НСтр("ru = 'Не установлена на компьютере.'") + " " + Ошибка.Описание;
		ОбновитьЗначение(ОписаниеПрограммы.РезультатПроверкиНаКлиенте, ТекстОшибки);
	КонецЕсли;
	ОбновитьЗначение(ОписаниеПрограммы.Установлена, Ложь);
	
	НайтиУстановленныеПрограммыЦиклНачало(Контекст);
	
КонецПроцедуры

// Для процедуры НайтиУстановленныеПрограммы.
Процедура ОбновитьЗначение(СтароеЗначение, НовоеЗначение)
	
	Если СтароеЗначение <> НовоеЗначение Тогда
		СтароеЗначение = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра данных сертификата.
//
// Параметры:
//  ДанныеСертификата - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат.
//                    - СертификатКриптографии - имеющийся сертификат.
//                    - ДвоичныеДанные - двоичные данные сертификата.
//                    - Строка - адрес временного хранилища содержащий ДвоичныеДанные сертификата.
//                    - Строка - отпечаток сертификата для поиска во всех хранилищах.
//
//  ОткрытьДанные     - Булево - открыть данные сертификата, а не форму элемента справочника.
//                      Если передана не ссылка на элемент справочника и элемент справочника
//                      не удалось найти по отпечатку, тогда будут открыты данные сертификата.
//
Процедура ОткрытьСертификат(ДанныеСертификата, ОткрытьДанные = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеСертификата", ДанныеСертификата);
	Контекст.Вставить("ОткрытьДанные", ОткрытьДанные);
	Контекст.Вставить("АдресСертификата", Неопределено);
	
	Если ТипЗнч(ДанныеСертификата) = Тип("СертификатКриптографии") Тогда
		ДанныеСертификата.НачатьВыгрузку(Новый ОписаниеОповещения(
			"ОткрытьСертификатПослеВыгрузкиСертификата", ЭтотОбъект, Контекст));
	Иначе
		ОткрытьСертификатПродолжение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьСертификат.
Процедура ОткрытьСертификатПослеВыгрузкиСертификата(ВыгруженныеДанные, Контекст) Экспорт
	
	Контекст.АдресСертификата = ПоместитьВоВременноеХранилище(ВыгруженныеДанные);
	
	ОткрытьСертификатПродолжение(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОткрытьСертификат.
Процедура ОткрытьСертификатПродолжение(Контекст)
	
	Если Контекст.АдресСертификата <> Неопределено Тогда
		// Сертификат подготовлен.
		
	ИначеЕсли ТипЗнч(Контекст.ДанныеСертификата) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		Ссылка = Контекст.ДанныеСертификата;
		
	ИначеЕсли ТипЗнч(Контекст.ДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
		Контекст.АдресСертификата = ПоместитьВоВременноеХранилище(Контекст.ДанныеСертификата);
		
	ИначеЕсли ТипЗнч(Контекст.ДанныеСертификата) <> Тип("Строка") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове процедуры ОткрытьСертификат общего модуля ЭлектроннаяПодписьКлиент:
			           |Некорректное значение параметра ДанныеСертификата ""%1"".'"),
			Строка(Контекст.ДанныеСертификата));
		
	ИначеЕсли ЭтоАдресВременногоХранилища(Контекст.ДанныеСертификата) Тогда
		Контекст.АдресСертификата = Контекст.ДанныеСертификата;
	Иначе
		Отпечаток = Контекст.ДанныеСертификата;
	КонецЕсли;
	
	Если Не Контекст.ОткрытьДанные Тогда
		Если Ссылка = Неопределено Тогда
			Ссылка = ЭлектроннаяПодписьСлужебныйВызовСервера.СсылкаНаСертификат(Отпечаток, Контекст.АдресСертификата);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ПоказатьЗначение(, Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.Вставить("Ссылка", Ссылка);
	Контекст.Вставить("Отпечаток", Отпечаток);
	
	Если Контекст.АдресСертификата = Неопределено
	   И Ссылка = Неопределено Тогда
		
		ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
			"ОткрытьСертификатПослеПоискаСертификата", ЭтотОбъект, Контекст), Отпечаток, Ложь);
	Иначе
		ОткрытьСертификатЗавершение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьСертификат.
Процедура ОткрытьСертификатПослеПоискаСертификата(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СертификатКриптографии") Тогда
		Результат.НачатьВыгрузку(Новый ОписаниеОповещения(
			"ОткрытьСертификатПослеВыгрузкиНайденногоСертификата", ЭтотОбъект, Контекст));
	Иначе
		ОткрытьСертификатЗавершение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьСертификат.
Процедура ОткрытьСертификатПослеВыгрузкиНайденногоСертификата(ВыгруженныеДанные, Контекст) Экспорт
	
	Контекст.АдресСертификата = ПоместитьВоВременноеХранилище(ВыгруженныеДанные);
	
	ОткрытьСертификатЗавершение(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОткрытьСертификат.
Процедура ОткрытьСертификатЗавершение(Контекст)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",           Контекст.Ссылка);
	ПараметрыФормы.Вставить("АдресСертификата", Контекст.АдресСертификата);
	ПараметрыФормы.Вставить("Отпечаток",        Контекст.Отпечаток);
	
	ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	
КонецПроцедуры

// Сохраняет сертификат в файл на диск.
// 
// Параметры:
//   Оповещение - ОписаниеОповещения - вызывается после сохранения.
//              - Неопределено - продолжение не требуется.
//
//   Сертификат - СертификатКриптографии - сертификат.
//              - ДвоичныеДанные - двоичные данные сертификата.
//              - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//
Процедура СохранитьСертификат(Оповещение, Сертификат, ИмяФайлаБезРасширения = "") Экспорт
	
	Контекст =  Новый Структура;
	Контекст.Вставить("Оповещение",            Оповещение);
	Контекст.Вставить("Сертификат",            Сертификат);
	Контекст.Вставить("ИмяФайлаБезРасширения", ИмяФайлаБезРасширения);
	Контекст.Вставить("АдресСертификата",      Неопределено);
	
	Если ТипЗнч(Контекст.Сертификат) = Тип("СертификатКриптографии") Тогда
		Контекст.Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
			"СохранитьСертификатПослеВыгрузкиСертификата", ЭтотОбъект, Контекст));
	Иначе
		СохранитьСертификатПродолжение(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СохранитьСертификат.
Процедура СохранитьСертификатПослеВыгрузкиСертификата(ВыгруженныеДанные, Контекст) Экспорт
	
	Контекст.АдресСертификата = ПоместитьВоВременноеХранилище(ВыгруженныеДанные, Новый УникальныйИдентификатор);
	СохранитьСертификатПродолжение(Контекст);
	
КонецПроцедуры

// Продолжение процедуры СохранитьСертификат.
Процедура СохранитьСертификатПродолжение(Контекст)
	
	Если Контекст.АдресСертификата <> Неопределено Тогда
		// Сертификат подготовлен.
		
	ИначеЕсли ТипЗнч(Контекст.Сертификат) = Тип("ДвоичныеДанные") Тогда
		Контекст.АдресСертификата = ПоместитьВоВременноеХранилище(Контекст.Сертификат, Новый УникальныйИдентификатор);
		Контекст.Вставить("ОчищатьХранилище", Истина);
	ИначеЕсли ТипЗнч(Контекст.Сертификат) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(Контекст.Сертификат) Тогда
		
		Контекст.АдресСертификата = Контекст.Сертификат;
	Иначе
		Если Контекст.Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контекст.ИмяФайлаБезРасширения) Тогда
		Контекст.ИмяФайлаБезРасширения = ЭлектроннаяПодписьСлужебныйВызовСервера.ПредставлениеСубъекта(Контекст.АдресСертификата);
	КонецЕсли;
	
	ИмяФайла = ПодготовитьСтрокуДляИмениФайла(Контекст.ИмяФайлаБезРасширения) + ".cer";
	Оповещение = Новый ОписаниеОповещения("СохранитьСертификатПослеПолученияФайлов", ЭтотОбъект, Контекст);
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения сертификата'");
	ПараметрыСохранения.Диалог.Фильтр    = НСтр("ru = 'Файлы сертификатов (*.cer)|*.cer|Все файлы (*.*)|*.*'");
	
	ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, Контекст.АдресСертификата, ИмяФайла, ПараметрыСохранения);
	
КонецПроцедуры

// Продолжение процедуры СохранитьСертификат.
Процедура СохранитьСертификатПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы = Неопределено
	 Или ПолученныеФайлы.Количество() = 0 Тогда
		
		ЕстьПолученныеФайлы = Ложь;
	Иначе
		ЕстьПолученныеФайлы = Истина;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сертификат сохранен в файл:'"),,
			ПолученныеФайлы[0].Имя);
	КонецЕсли;
	
	Если Контекст.Свойство("ОчищатьХранилище") Тогда
		УдалитьИзВременногоХранилища(Контекст.АдресСертификата);
	КонецЕсли;
	
	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, ЕстьПолученныеФайлы);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет подпись на диск
Процедура СохранитьПодпись(АдресПодписи) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("СохранитьПодписьПослеПолученияФайла", ЭтотОбъект, Неопределено);
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы электронных подписей (*.%1)|*.%1|Все файлы (*.*)|*.*'"),
		ЭлектроннаяПодписьКлиент.ПерсональныеНастройки().РасширениеДляФайловПодписи);
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Фильтр = Фильтр;
	ПараметрыСохранения.Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
	
	ФайловаяСистемаКлиент.СохранитьФайл(Оповещение, АдресПодписи, "", ПараметрыСохранения);
	
КонецПроцедуры

// Продолжение процедуры СохранитьПодпись.
Процедура СохранитьПодписьПослеПолученияФайла(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы = Неопределено
	 Или ПолученныеФайлы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Электронная подпись сохранена в файл:'"),,
		ПолученныеФайлы[0].Имя);
	
КонецПроцедуры

// Находит сертификат на компьютере по строке отпечатка.
//
// Параметры:
//   Оповещение - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//     СертификатКриптографии - найденный сертификат.
//     Неопределено           - сертификат не найден в хранилище.
//     Строка                 - текст ошибки создания менеджера криптографии (или другая ошибка).
//     Структура              - описание ошибки в виде структуры.
//
//   Отпечаток              - Строка - Base64 кодированный отпечаток сертификата.
//   ТолькоВЛичномХранилище - Булево - если Истина, тогда искать в личном хранилище, иначе везде.
//                          - ТипХранилищаСертификатовКриптографии - указанный тип хранилища.
//
//   ПоказатьОшибку - Булево - показать ошибку создания менеджера криптографии.
//                  - Неопределено - не показывать ошибку и вернуть структуру ошибки,
//                    в том числе добавить свойство СертификатНеНайден.
//
//   Программа  - Неопределено - искать с помощью любой программы.
//              - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - искать
//                   с помощью указанной программы.
//              - МенеджерКриптографии - инициализированный менеджер криптографии,
//                   который нужно использовать для поиска.
//
Процедура ПолучитьСертификатПоОтпечатку(Оповещение, Отпечаток, ТолькоВЛичномХранилище,
			ПоказатьОшибку = Истина, Программа = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",             Оповещение);
	Контекст.Вставить("Отпечаток",              Отпечаток);
	Контекст.Вставить("ТолькоВЛичномХранилище", ТолькоВЛичномХранилище);
	Контекст.Вставить("ПоказатьОшибку",         ПоказатьОшибку);
	
	Если ТипЗнч(Программа) = Тип("МенеджерКриптографии") Тогда
		ПолучитьСертификатПоОтпечаткуПослеСозданияМенеджераКриптографии(Программа, Контекст);
	Иначе
		СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПолучитьСертификатПоОтпечаткуПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
			"ПолучениеСертификатов", ПоказатьОшибку, Программа);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСертификатПоОтпечатку.
Процедура ПолучитьСертификатПоОтпечаткуПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
	КонецЕсли;
	Контекст.Вставить("МенеджерКриптографии", Результат);
	
	ТипХранилища = ЭлектроннаяПодписьСлужебныйКлиентСервер.ТипХранилищаДляПоискаСертификата(
		Контекст.ТолькоВЛичномХранилище);
	
	Попытка
		Контекст.Вставить("ДвоичныеДанныеОтпечатка", Base64Значение(Контекст.Отпечаток));
	Исключение
		Если Контекст.ПоказатьОшибку = Истина Тогда
			ВызватьИсключение;
		КонецЕсли;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПолучитьСертификатПоОтпечаткуЗавершение(Неопределено, ПредставлениеОшибки, Контекст);
		Возврат;
	КонецПопытки;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		Новый ОписаниеОповещения(
			"ПолучитьСертификатПоОтпечаткуПослеПолученияХранилища", ЭтотОбъект, Контекст,
			"ПолучитьСертификатПоОтпечаткуПослеОшибкиПолученияХранилища", ЭтотОбъект),
		ТипХранилища);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСертификатПоОтпечатку.
Процедура ПолучитьСертификатПоОтпечаткуПослеОшибкиПолученияХранилища(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	Если Контекст.ПоказатьОшибку = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ПолучитьСертификатПоОтпечаткуЗавершение(Неопределено, ПредставлениеОшибки, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСертификатПоОтпечатку.
Процедура ПолучитьСертификатПоОтпечаткуПослеПолученияХранилища(ХранилищеСертификатовКриптографии, Контекст) Экспорт
	
	ХранилищеСертификатовКриптографии.НачатьПоискПоОтпечатку(Новый ОписаниеОповещения(
			"ПолучитьСертификатПоОтпечаткуПослеПоиска", ЭтотОбъект, Контекст,
			"ПолучитьСертификатПоОтпечаткуПослеОшибкиПоиска", ЭтотОбъект),
		Контекст.ДвоичныеДанныеОтпечатка);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСертификатПоОтпечатку.
Процедура ПолучитьСертификатПоОтпечаткуПослеОшибкиПоиска(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	Если Контекст.ПоказатьОшибку = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ПолучитьСертификатПоОтпечаткуЗавершение(Неопределено, ПредставлениеОшибки, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСертификатПоОтпечатку.
Процедура ПолучитьСертификатПоОтпечаткуПослеПоиска(Сертификат, Контекст) Экспорт
	
	ПолучитьСертификатПоОтпечаткуЗавершение(Сертификат, "", Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСертификатПоОтпечатку.
Процедура ПолучитьСертификатПоОтпечаткуЗавершение(Сертификат, ПредставлениеОшибки, Контекст)
	
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Сертификат);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сертификат не найден на компьютере по причине:
			           |%1'"),
			ПредставлениеОшибки);
	Иначе
		ТекстОшибки = НСтр("ru = 'Сертификат не найден на компьютере.'");
	КонецЕсли;
	
	Если Контекст.ПоказатьОшибку = Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
		Если Не ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			Результат.Вставить("СертификатНеНайден");
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
		Результат = Неопределено;
	Иначе
		Результат = ПредставлениеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры


// Получает отпечатки сертификатов пользователя ОС на компьютере.
//
// Параметры:
//  Оповещение     - ОписаниеОповещение - вызывается для передачи возвращаемого значение:
//                   * Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//                   * Строка - текст ошибки создания менеджера криптографии (или другая ошибка).
//
//  ТолькоЛичные   - Булево - Если Ложь, то к личным сертификатам добавляются сертификаты получателей.
//
//  ПоказатьОшибку - Булево - показать ошибку создания менеджера криптографии.
//
Процедура ПолучитьОтпечаткиСертификатов(Оповещение, ТолькоЛичные, ПоказатьОшибку = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",     Оповещение);
	Контекст.Вставить("ТолькоЛичные",   ТолькоЛичные);
	Контекст.Вставить("ПоказатьОшибку", ПоказатьОшибку = Истина);
	
	ПолучитьСвойстваСертификатовНаКлиенте(Новый ОписаниеОповещения(
			"ПолучитьОтпечаткиСертификатовПослеВыполнения", ЭтотОбъект, Контекст),
		ТолькоЛичные, Ложь, Истина, ПоказатьОшибку);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьОтпечаткиСертификатов.
Процедура ПолучитьОтпечаткиСертификатовПослеВыполнения(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат.ОшибкаПолученияСертификатовНаКлиенте) Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат.ОшибкаПолученияСертификатовНаКлиенте);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат.СвойстваСертификатовНаКлиенте);
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ДобавкаВремени() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ДатаСеанса() - ОбщегоНазначенияКлиент.ДатаУниверсальная();
	
КонецФункции

// Проверяет действительность подписи и сертификата.
// Сертификат всегда проверяется на сервере, если администратор
// настроил проверку электронных подписей на сервере.
//
// Параметры:
//   Оповещение           - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//     Булево       - Истина, если проверка выполнена успешно.
//     Строка       - описание ошибки проверки подписи.
//     Неопределено - не удалось получить менеджер криптографии (когда не указан).
//
//   ИсходныеДанные       - ДвоичныеДанные - двоичные данные, которые были подписаны.
//                          Математическая проверка выполняется на стороне клиента, даже когда
//                          администратор настроил проверку электронных подписей на сервере,
//                          если указан менеджер криптографии или его удалось получить без ошибки.
//                          Это повышает производительность, а также безопасность когда проверяется
//                          подпись в расшифрованном файле (он не будет передан на сервер).
//                        - Строка - адрес временного хранилища, содержащего исходные двоичные данные.
//
//   Подпись              - ДвоичныеДанные - двоичные данные электронной подписи.
//                        - Строка         - адрес временного хранилища, содержащего двоичные данные.
//
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии по-умолчанию
//                          (менеджер первой программы в списке, как настроил администратор).
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии.
//
//   НаДату               - Дата - проверить сертификат на указанную дату,
//                          если дату не удалось извлечь из подписи автоматически.
//                          Если параметр не заполнен, тогда проверять на текущую дату,
//                          если дату не удалось извлечь из подписи автоматически.
//
//   ПоказатьОшибку       - Булево - показать ошибку создания менеджера криптографии (когда не указан).
//
Процедура ПроверитьПодпись(Оповещение, ИсходныеДанные, Подпись, МенеджерКриптографии = Неопределено, НаДату = Неопределено, ПоказатьОшибку = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",     Оповещение);
	Контекст.Вставить("ИсходныеДанные", ИсходныеДанные);
	Контекст.Вставить("Подпись",        Подпись);
	Контекст.Вставить("НаДату",         НаДату);
	Контекст.Вставить("ПроверятьНаСервере",
		ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере());
	
	Если МенеджерКриптографии = Неопределено Тогда
		СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
				"ПроверитьПодписьПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
				"ПроверкаПодписи", ПоказатьОшибку И Не Контекст.ПроверятьНаСервере И Не ИспользоватьЭлектроннуюПодписьВМоделиСервиса());
	Иначе
		ПроверитьПодписьПослеСозданияМенеджераКриптографии(МенеджерКриптографии, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если Результат = "СервисКриптографии" Тогда
		ПроверитьПодписьВМоделиСервиса(Контекст);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
		МенеджерКриптографии = Результат;
	Иначе
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Если Не ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		// Проверка подписи и сертификата на стороне клиента.
		Если МенеджерКриптографии = Неопределено Тогда
			
			Если ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
				ПроверитьПодписьВМоделиСервиса(Контекст);
			Иначе
				ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(Контекст.ИсходныеДанные) = Тип("Строка")
		   И ЭтоАдресВременногоХранилища(Контекст.ИсходныеДанные) Тогда
			
			Контекст.ИсходныеДанные = ПолучитьИзВременногоХранилища(Контекст.ИсходныеДанные);
		КонецЕсли;
		
		Контекст.Вставить("ПроверитьСертификатНаКлиенте");
		
		ПроверитьПодписьНаКлиенте(Контекст);
		Возврат;
	КонецЕсли;
	
	Если МенеджерКриптографии <> Неопределено
	   И Не (  ТипЗнч(Контекст.ИсходныеДанные) = Тип("Строка")
	         И ЭтоАдресВременногоХранилища(Контекст.ИсходныеДанные)) Тогда
		// Математическая проверка подписи на стороне клиента для повышения производительности и
		// безопасности в случае, когда ИсходныеДанные являются результатом расшифровки секретного файла.
		
		// Сертификат проверяется и на сервере и на клиенте.
		ПроверитьПодписьНаКлиенте(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		// Проверка подписи и сертификата в модели сервиса.
		ПроверитьПодписьВМоделиСервиса(Контекст);
	Иначе
		// Проверка подписи и сертификата на сервере.
		Если ТипЗнч(Контекст.ИсходныеДанные) = Тип("Строка")
		   И ЭтоАдресВременногоХранилища(Контекст.ИсходныеДанные) Тогда
			
			АдресИсходныхДанных = Контекст.ИсходныеДанные;
			
		ИначеЕсли ТипЗнч(Контекст.ИсходныеДанные) = Тип("ДвоичныеДанные") Тогда
			АдресИсходныхДанных = ПоместитьВоВременноеХранилище(Контекст.ИсходныеДанные);
		КонецЕсли;
		
		Если ТипЗнч(Контекст.Подпись) = Тип("Строка")
		   И ЭтоАдресВременногоХранилища(Контекст.Подпись) Тогда
			
			АдресПодписи = Контекст.Подпись;
			
		ИначеЕсли ТипЗнч(Контекст.Подпись) = Тип("ДвоичныеДанные") Тогда
			АдресПодписи = ПоместитьВоВременноеХранилище(Контекст.Подпись);
		КонецЕсли;
		
		ОписаниеОшибки = "";
		Результат = ЭлектроннаяПодписьСлужебныйВызовСервера.ПроверитьПодпись(
			АдресИсходныхДанных, АдресПодписи, ОписаниеОшибки);
		
		Если Результат <> Истина Тогда
			Результат = ОписаниеОшибки;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиенте(Контекст)
	
	Подпись = Контекст.Подпись;
	
	Если ТипЗнч(Подпись) = Тип("Строка") И ЭтоАдресВременногоХранилища(Подпись) Тогда
		Подпись = ПолучитьИзВременногоХранилища(Подпись);
	КонецЕсли;
	
	Контекст.Вставить("ДанныеПодписи", Подпись);
	
	ЭтоXMLDSig = (ТипЗнч(Контекст) = Тип("Структура")
	            И ТипЗнч(Контекст.ИсходныеДанные) = Тип("Структура")
	            И Контекст.ИсходныеДанные.Свойство("ПараметрыXMLDSig"));
	
	ЭтоCMS = (ТипЗнч(Контекст) = Тип("Структура")
	            И ТипЗнч(Контекст.ИсходныеДанные) = Тип("Структура")
	            И Контекст.ИсходныеДанные.Свойство("ПараметрыCMS"));
	
	Если ЭтоXMLDSig Тогда
		
		ОповещениеУспех = Новый ОписаниеОповещения(
			"ПроверитьПодписьНаКлиентеПослеПроверкиПодписиXMLDSig", ЭтотОбъект, Контекст);
		
		ОповещениеОшибка = Новый ОписаниеОповещения(
			"ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписиXMLDSig", ЭтотОбъект, Контекст);
		
		Оповещения = Новый Структура;
		Оповещения.Вставить("Успех", ОповещениеУспех);
		Оповещения.Вставить("Ошибка", ОповещениеОшибка);
		
		НачатьИнициализациюСертификатаКриптографииДляПроверкиПодписиXMLDSig(
			Оповещения,
			Контекст.ИсходныеДанные.КонвертSOAP,
			Контекст.ИсходныеДанные.ПараметрыXMLDSig,
			Контекст.МенеджерКриптографии);
		
	ИначеЕсли ЭтоCMS Тогда
		
		ОповещениеУспех = Новый ОписаниеОповещения(
			"ПроверитьПодписьНаКлиентеПослеПроверкиПодписиXMLDSig", ЭтотОбъект, Контекст);
		
		ОповещениеОшибка = Новый ОписаниеОповещения(
			"ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписиXMLDSig", ЭтотОбъект, Контекст);
		
		Оповещения = Новый Структура;
		Оповещения.Вставить("Успех", ОповещениеУспех);
		Оповещения.Вставить("Ошибка", ОповещениеОшибка);
		
		НачатьИнициализациюСертификатаКриптографииДляПроверкиПодписиCMS(
			Оповещения,
			Контекст.ИсходныеДанные.Данные,
			Контекст.ИсходныеДанные.ПараметрыCMS,
			Контекст.МенеджерКриптографии);
		
	Иначе
		Контекст.МенеджерКриптографии.НачатьПроверкуПодписи(Новый ОписаниеОповещения(
			"ПроверитьПодписьНаКлиентеПослеПроверкиПодписи", ЭтотОбъект, Контекст,
			"ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи", ЭтотОбъект),
			Контекст.ИсходныеДанные, Контекст.ДанныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписиXMLDSig(ТекстОшибки, Контекст) Экспорт
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ТекстОшибки);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеПроверкиПодписиXMLDSig(Данные, Контекст) Экспорт
	
	Если Контекст.Свойство("ПроверитьСертификатНаКлиенте") Тогда
		МенеджерКриптографии = Контекст.МенеджерКриптографии;
	Иначе
		// Проверка сертификата на сервере и на клиенте.
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	ПроверитьСертификат(Контекст.Оповещение, Данные.Сертификат, МенеджерКриптографии, Данные.ДатаПодписания);
	
КонецПроцедуры


// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = ?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ТекстОшибки);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеПроверкиПодписи(Сертификат, Контекст) Экспорт
	
	Если Сертификат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение,
			НСтр("ru = 'Сертификат не найден в данных подписи.'"));
		Возврат;
	КонецЕсли;
	
	Если Контекст.Свойство("ПроверитьСертификатНаКлиенте") Тогда
		МенеджерКриптографии = Контекст.МенеджерКриптографии;
	Иначе
		// Проверка сертификата на сервере и на клиенте.
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("Сертификат",           Сертификат);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ЭлектроннаяПодписьКлиент.ДатаПодписания(
		Новый ОписаниеОповещения("ПроверитьПодписьНаКлиентеПослеПолученияДатыПодписания", ЭтотОбъект, Контекст),
		Контекст.ДанныеПодписи);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеПолученияДатыПодписания(ДатаПодписания, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПодписания) Тогда
		ДатаПодписания = Контекст.НаДату;
	КонецЕсли;
	
	ПроверитьСертификат(Контекст.Оповещение, Контекст.Сертификат, Контекст.МенеджерКриптографии, ДатаПодписания);
	
КонецПроцедуры

// Проверяет действительность сертификата криптографии.
//
// Параметры:
//   Оповещение           - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//     Булево       - Истина, если проверка выполнена успешно.
//     Строка       - описание ошибки проверки сертификата.
//     Неопределено - не удалось получить менеджер криптографии (когда не указан).
//
//   Сертификат           - СертификатКриптографии - сертификат.
//                        - ДвоичныеДанные - двоичные данные сертификата.
//                        - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//
//   МенеджерКриптографии - Неопределено - получить менеджер криптографии автоматически.
//                        - МенеджерКриптографии - использовать указанный менеджер криптографии
//                          (проверка на сервере не будет выполнена).
//
//   НаДату               - Дата - проверить сертификат на указанную дату.
//                          Если параметр не указан или указана пустая дата, тогда проверять на текущую.
//
//   ПоказатьОшибку       - Булево - показать ошибку создания менеджера криптографии (когда не указан).
//
Процедура ПроверитьСертификат(Оповещение, Сертификат, МенеджерКриптографии = Неопределено, НаДату = Неопределено, ПоказатьОшибку = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",              Оповещение);
	Контекст.Вставить("Сертификат",              Сертификат);
	Контекст.Вставить("МенеджерКриптографии",    МенеджерКриптографии);
	Контекст.Вставить("НаДату",                  НаДату);
	Контекст.Вставить("ПоказатьОшибку",          ПоказатьОшибку);
	Контекст.Вставить("ОписаниеОшибкиНаКлиенте", Неопределено);
	Контекст.Вставить("ОписаниеОшибкиНаСервере", Неопределено);
	
	Если Контекст.МенеджерКриптографии = Неопределено
	   И ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		
		// Проверка на сервере перед проверкой на клиенте.
		Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
			
			Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
				"ПроверитьСертификатПослеВыгрузкиСертификата", ЭтотОбъект, Контекст));
		Иначе
			ПроверитьСертификатПослеВыгрузкиСертификата(Сертификат, Контекст);
		КонецЕсли;
	Иначе
		// Когда менеджер криптографии указан, тогда проверка выполняется только на клиенте.
		ПроверитьСертификатНаКлиенте(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатПослеВыгрузкиСертификата(Сертификат, Контекст) Экспорт
	
	// Проверка сертификата на сервере.
	Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат);
	Иначе
		АдресСертификата = Сертификат;
	КонецЕсли;
	
	Если ЭлектроннаяПодписьСлужебныйВызовСервера.ПроверитьСертификат(АдресСертификата,
			Контекст.ОписаниеОшибкиНаСервере, Контекст.НаДату) Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
	Иначе
		ПроверитьСертификатНаКлиенте(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатНаКлиенте(Контекст)
	
	Если Контекст.МенеджерКриптографии = Неопределено Тогда
		СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
				"ПроверитьСертификатПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
			"ПроверкаСертификата",
			Контекст.ПоказатьОшибку
				И Контекст.ОписаниеОшибкиНаСервере = Неопределено
				И Не ИспользоватьЭлектроннуюПодписьВМоделиСервиса());
	Иначе
		Если Контекст.МенеджерКриптографии = "СервисКриптографии" Тогда
			ПроверитьСертификатВМоделиСервиса(Контекст);
		Иначе
			ПроверитьСертификатПослеСозданияМенеджераКриптографии(Контекст.МенеджерКриптографии, Контекст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		Если ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
			ПроверитьСертификатВМоделиСервиса(Контекст);
		Иначе
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.ОписаниеОшибкиНаСервере);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии = Результат;
	
	СертификатДляПроверки = Контекст.Сертификат;
	
	Если ТипЗнч(СертификатДляПроверки) = Тип("Строка") Тогда
		СертификатДляПроверки = ПолучитьИзВременногоХранилища(СертификатДляПроверки);
	КонецЕсли;
	
	Если ТипЗнч(СертификатДляПроверки) = Тип("ДвоичныеДанные") Тогда
		СертификатКриптографии = Новый СертификатКриптографии;
		СертификатКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
				"ПроверитьСертификатПослеИнициализацииСертификата", ЭтотОбъект, Контекст),
			СертификатДляПроверки);
	Иначе
		ПроверитьСертификатПослеИнициализацииСертификата(СертификатДляПроверки, Контекст)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт
	
	РежимыПроверкиСертификата = ЭлектроннаяПодписьСлужебныйКлиентСервер.РежимыПроверкиСертификата(
		ЗначениеЗаполнено(Контекст.НаДату));
	
	Контекст.Вставить("СертификатКриптографии", СертификатКриптографии);
	
	Контекст.МенеджерКриптографии.НачатьПроверкуСертификата(Новый ОписаниеОповещения(
		"ПроверитьСертификатНаКлиентеПослеПроверки", ЭтотОбъект, Контекст,
		"ПроверитьСертификатНаКлиентеПослеОшибкиПроверки", ЭтотОбъект),
		Контекст.СертификатКриптографии, РежимыПроверкиСертификата);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатНаКлиентеПослеОшибкиПроверки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
	Контекст.ОписаниеОшибкиНаКлиенте = ОписаниеОшибки;
	
	Если ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		ПроверитьСертификатВМоделиСервиса(Контекст);
	Иначе
		ПроверитьСертификатПослеНеуспешнойПроверки(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатНаКлиентеПослеПроверки(Контекст) Экспорт
	
	ОшибкаПросрочки = ЭлектроннаяПодписьСлужебныйКлиентСервер.СертификатПросрочен(
		Контекст.СертификатКриптографии, Контекст.НаДату, ДобавкаВремени());
	
	Если ЗначениеЗаполнено(ОшибкаПросрочки) Тогда
		ПроверитьСертификатНаКлиентеПослеОшибкиПроверки(ОшибкаПросрочки, Ложь, Контекст);
	Иначе
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
//
// Параметры:
//   Контекст - Структура - со свойствами:
//     * Сертификат - СертификатКриптографии - .
//
Процедура ПроверитьСертификатВМоделиСервиса(Контекст)
	
	Если ТипЗнч(Контекст.Сертификат) = Тип("СертификатКриптографии") Тогда
		Контекст.Сертификат.НачатьВыгрузку(Новый ОписаниеОповещения(
			"ПроверитьСертификатВМоделиСервисаПослеВыгрузкиСертификата", ЭтотОбъект, Контекст));
	Иначе
		ПроверитьСертификатВМоделиСервисаПослеВыгрузкиСертификата(Контекст.Сертификат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатВМоделиСервисаПослеВыгрузкиСертификата(Сертификат, Контекст) Экспорт
	
	Если ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		ДанныеСертификата = Сертификат;
	Иначе
		ДанныеСертификата = ПолучитьИзВременногоХранилища(Сертификат);
	КонецЕсли;
	
	МодульСервисКриптографииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииКлиент");
	МодульСервисКриптографииКлиент.ПроверитьСертификат(Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПроверкиВМоделиСервиса", ЭтотОбъект, Контекст), ДанныеСертификата);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатПослеПроверкиВМоделиСервиса(Результат, Контекст) Экспорт
	
	Если Не Результат.Выполнено Тогда
		Контекст.ОписаниеОшибкиНаСервере = КраткоеПредставлениеОшибки(Результат.ИнформацияОбОшибке);
		ПроверитьСертификатПослеНеуспешнойПроверки(Контекст);
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Действителен Тогда
		Контекст.ОписаниеОшибкиНаСервере =
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ТекстОшибкиСервисаСертификатНедействителен();
		ПроверитьСертификатПослеНеуспешнойПроверки(Контекст);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьСертификат.
Процедура ПроверитьСертификатПослеНеуспешнойПроверки(Контекст)
	
	Если Контекст.ОписаниеОшибкиНаКлиенте <> Неопределено
	   И Контекст.ОписаниеОшибкиНаСервере <> Неопределено Тогда
		
		Результат =
			  НСтр("ru = 'НА СЕРВЕРЕ:'")
			+ Символы.ПС + Символы.ПС + Контекст.ОписаниеОшибкиНаСервере
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'НА КОМПЬЮТЕРЕ:'")
			+ Символы.ПС + Символы.ПС + Контекст.ОписаниеОшибкиНаКлиенте;
			
	ИначеЕсли Контекст.ОписаниеОшибкиНаКлиенте <> Неопределено Тогда
		Результат = Контекст.ОписаниеОшибкиНаКлиенте;
	Иначе
		Результат = Контекст.ОписаниеОшибкиНаСервере;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры


// Создает и возвращает менеджер криптографии (на клиенте) для указанной программы.
//
// Параметры:
//  Оповещение     - ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//    МенеджерКриптографии - инициализированный менеджер криптографии.
//    Строка - описание ошибки при создании менеджера криптографии.
//    Структура - если ПоказатьОшибку = Неопределено. Содержит ошибки обращения к программам.
//      * ОписаниеОшибки   - Строка - описание ошибки, когда оно возвращается строкой.
//      * ЗаголовокОшибки  - Строка - заголовок ошибки, который соответствует операции.
//      * Описание         - Строка - описание общей ошибки.
//      * Общая            - Булево - если Истина, то содержит описание ошибки для всех программ,
//                               иначе альтернативное описание массиву Ошибки.
//      * КАдминистратору  - Булево - для исправления общей ошибки требуются права администратора.
//      * Ошибки           - Массив - содержит структуры описания ошибок программ со свойствами:
//           * Программа       - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования.
//           * Описание        - Строка - содержит представление ошибки.
//           * ИзИсключения    - Булево - описание содержит краткое представление информации об ошибке.
//           * НеУказанПуть    - Булево - описание содержит ошибку о неуказанном пути для ОС Linux.
//           * КАдминистратору - Булево - для исправления ошибки требуются права администратора.
//
//  Операция       - Строка - если не пустая, то должна содержать одну из строк, которые определяют
//                   операцию для вставки в описание ошибки: Подписание, ПроверкаПодписи, Шифрование,
//                   Расшифровка, ПроверкаСертификата, ПолучениеСертификатов.
//
//  ПоказатьОшибку - Булево - если Истина, тогда будет открыта форма ОшибкаОбращенияКПрограмме
//                   из которой можно перейти к списку установленных программ
//                   в форму персональных настроек на страницу "Установленные программы",
//                   в которой можно увидеть почему программу не удалось задействовать,
//                   а также открыть инструкцию по установке.
//                 - Неопределено - вернуть все ошибки обращения к программам (см. выше).
//
//  Программа      - Неопределено - возвращает менеджер криптографии первой
//                   программы из справочника для которой удалось его создать.
//                 - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа
//                   для которой нужно создать и вернуть менеджер криптографии.
//  ИнтерактивныйРежим - Булево - если Истина, тогда менеджер криптографии будет создан
//                       в режиме использования интерактивного режима криптографии
//                       (установка свойства ПарольДоступаКЗакрытомуКлючу будет запрещена).
//
Процедура СоздатьМенеджерКриптографии(Оповещение, Операция, ПоказатьОшибку = Истина, Программа = Неопределено, ИнтерактивныйРежим = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",     Оповещение);
	Контекст.Вставить("Операция",       Операция);
	Контекст.Вставить("ПоказатьОшибку", ПоказатьОшибку);
	Контекст.Вставить("Программа",      Программа);
	Контекст.Вставить("ИнтерактивныйРежим", ИнтерактивныйРежим);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	ЗаголовокФормы = НСтр("ru = 'Требуется программа электронной подписи и шифрования'");
	Операция       = Контекст.Операция;
	
	Если Операция = "Подписание" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось подписать данные по причине:'");
		
	ИначеЕсли Операция = "ПроверкаПодписи" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось проверить подпись по причине:'");
		
	ИначеЕсли Операция = "Шифрование" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось зашифровать данные по причине:'");
		
	ИначеЕсли Операция = "Расшифровка" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось расшифровать данные по причине:'");
		
	ИначеЕсли Операция = "ПроверкаСертификата" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось проверить сертификат по причине:'");
		
	ИначеЕсли Операция = "ПолучениеСертификатов" Тогда
		ЗаголовокОшибки = НСтр("ru = 'Не удалось получить сертификаты по причине:'");
		
	ИначеЕсли Операция = Null И Контекст.ПоказатьОшибку <> Истина Тогда
		ЗаголовокОшибки = "";
		
	ИначеЕсли Операция <> "" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в функции МенеджерКриптографии.
			           |Неверное значение параметра Операция ""%1"".'"), Операция);
	Иначе
		ЗаголовокОшибки = НСтр("ru = 'Не удалось выполнить операцию по причине:'");
	КонецЕсли;
	
	СвойстваОшибки = Новый Структура;
	СвойстваОшибки.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	СвойстваОшибки.Вставить("Общая", Ложь);
	СвойстваОшибки.Вставить("КАдминистратору", Ложь);
	
	Если Не Подключено Тогда
		ТекстОшибки =
			НСтр("ru = 'В браузере требуется установить расширение
			           |для работы с электронной подписью и шифрованием.'");
		
		СвойстваОшибки.Вставить("Описание", ТекстОшибки);
		СвойстваОшибки.Вставить("Общая",  Истина);
		СвойстваОшибки.Вставить("Ошибки", Новый Массив);
		СвойстваОшибки.Вставить("Расширение", Истина);
		
		СвойстваОшибки.Вставить("ОписаниеОшибки", СокрЛП(ЗаголовокОшибки + Символы.ПС + ТекстОшибки));
		Если Контекст.ПоказатьОшибку = Неопределено Тогда
			ОписаниеОшибки = СвойстваОшибки;
		Иначе
			ОписаниеОшибки = СвойстваОшибки.ОписаниеОшибки;
		КонецЕсли;
		Если Контекст.ПоказатьОшибку = Истина Тогда
			ПоказатьОшибкуОбращенияКПрограмме(
				ЗаголовокФормы, ЗаголовокОшибки, СвойстваОшибки, Новый Структура);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ЗаголовокФормы",  ЗаголовокФормы);
	Контекст.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	Контекст.Вставить("СвойстваОшибки",  СвойстваОшибки);
	// Здесь проверяется что это Linux или macOS клиент.
	Контекст.Вставить("ЭтоLinux", Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент());
	
	СвойстваОшибки.Вставить("Ошибки", Новый Массив);
	
	ОписанияПрограмм = ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографииОписанияПрограмм(
		Контекст.Программа, СвойстваОшибки.Ошибки, ЭлектроннаяПодписьКлиент.ОбщиеНастройки().ОписанияПрограмм);
	
	Контекст.Вставить("Менеджер", Неопределено);
	
	Если ОписанияПрограмм = Неопределено
	 Или ОписанияПрограмм.Количество() = 0 Тогда
		
		СоздатьМенеджерКриптографииПослеЦикла(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ОписанияПрограмм",  ОписанияПрограмм);
	Контекст.Вставить("Индекс", -1);
	
	СоздатьМенеджерКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклНачало(Контекст) Экспорт
	
	Если Контекст.ОписанияПрограмм.Количество() <= Контекст.Индекс + 1 Тогда
		СоздатьМенеджерКриптографииПослеЦикла(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("ОписаниеПрограммы", Контекст.ОписанияПрограмм[Контекст.Индекс]);
	
	СвойстваПрограммы = ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографииСвойстваПрограммы(
		Контекст.ОписаниеПрограммы,
		Контекст.ЭтоLinux,
		Контекст.СвойстваОшибки.Ошибки,
		Ложь,
		ЭлектроннаяПодписьКлиент.ПерсональныеНастройки().ПутиКПрограммамЭлектроннойПодписиИШифрования);
	
	Если СвойстваПрограммы = Неопределено Тогда
		СоздатьМенеджерКриптографииЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СвойстваПрограммы", СвойстваПрограммы);
	
	СредстваКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииЦиклПослеПолученияИнформации", ЭтотОбъект, Контекст,
			"СоздатьМенеджерКриптографииЦиклПослеОшибкиПолученияИнформации", ЭтотОбъект),
		Контекст.СвойстваПрограммы.ИмяПрограммы,
		Контекст.СвойстваПрограммы.ПутьКПрограмме,
		Контекст.СвойстваПрограммы.ТипПрограммы);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеОшибкиПолученияИнформации(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеПолученияИнформации(ИнформацияМодуля, Контекст) Экспорт
	
	Если ИнформацияМодуля = Неопределено Тогда
		ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографииПрограммаНеНайдена(
			Контекст.ОписаниеПрограммы, Контекст.СвойстваОшибки.Ошибки, Ложь);
		
		Контекст.Менеджер = Неопределено;
		СоздатьМенеджерКриптографииЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Если Не Контекст.ЭтоLinux Тогда
		ИмяПрограммыПолученное = ИнформацияМодуля.Имя;
		
		ИмяПрограммыСовпадает = ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографииИмяПрограммыСовпадает(
			Контекст.ОписаниеПрограммы, ИмяПрограммыПолученное, Контекст.СвойстваОшибки.Ошибки, Ложь);
		
		Если Не ИмяПрограммыСовпадает Тогда
			Контекст.Менеджер = Неопределено;
			СоздатьМенеджерКриптографииЦиклНачало(Контекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.Менеджер = Новый МенеджерКриптографии;
	
	Если Не Контекст.ИнтерактивныйРежим
	 Или Не ЭлектроннаяПодписьСлужебныйКлиентСервер.ИнтерактивныйРежимДоступен() Тогда
		
		Контекст.Менеджер.НачатьИнициализацию(Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииЦиклПослеИнициализации", ЭтотОбъект, Контекст,
				"СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации", ЭтотОбъект),
			Контекст.СвойстваПрограммы.ИмяПрограммы,
			Контекст.СвойстваПрограммы.ПутьКПрограмме,
			Контекст.СвойстваПрограммы.ТипПрограммы);
	Иначе
		Контекст.Менеджер.НачатьИнициализацию(Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииЦиклПослеИнициализации", ЭтотОбъект, Контекст,
				"СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации", ЭтотОбъект),
			Контекст.СвойстваПрограммы.ИмяПрограммы,
			Контекст.СвойстваПрограммы.ПутьКПрограмме,
			Контекст.СвойстваПрограммы.ТипПрограммы,
			ИспользованиеИнтерактивногоРежимаКриптографииИспользовать());
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Контекст.Менеджер = Неопределено;
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографииДобавитьОшибку(
		Контекст.СвойстваОшибки.Ошибки,
		Контекст.ОписаниеПрограммы.Ссылка,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
		Ложь, Истина, Истина);
	
	СоздатьМенеджерКриптографииЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеИнициализации(Неопределен, Контекст) Экспорт
	
	АлгоритмыУстановлены = ЭлектроннаяПодписьСлужебныйКлиентСервер.МенеджерКриптографииАлгоритмыУстановлены(
		Контекст.ОписаниеПрограммы,
		Контекст.Менеджер,
		Контекст.СвойстваОшибки.Ошибки);
	
	Если Не АлгоритмыУстановлены Тогда
		СоздатьМенеджерКриптографииЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	// Требуемый менеджер криптографии получен.
	СоздатьМенеджерКриптографииПослеЦикла(Контекст);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииПослеЦикла(Контекст)
	
	Если Контекст.Менеджер <> Неопределено Или Не Контекст.Свойство("ЗаголовокОшибки") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Менеджер);
		Возврат;
	КонецЕсли;
	
	СвойстваОшибки = Контекст.СвойстваОшибки;
	
	Если СвойстваОшибки.Ошибки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не предусмотрено использование ни одной программы.'");
		СвойстваОшибки.Вставить("Описание", ТекстОшибки);
		СвойстваОшибки.Общая = Истина;
		СвойстваОшибки.КАдминистратору = Истина;
		Если Не СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ЭтоПолноправныйПользователь Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + НСтр("ru = 'Обратитесь к администратору.'");
		КонецЕсли;
		СвойстваОшибки.Вставить("Инструкция", Истина);
		СвойстваОшибки.Вставить("НастройкаПрограмм", Истина);
	Иначе
		Если Контекст.Программа <> Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Программа ""%1"" не доступна или не установлена на компьютере по причине:
				           |%2'"),
				Контекст.Программа,
				СвойстваОшибки.Ошибки[0].Описание);
		Иначе
			ТекстОшибки = НСтр("ru = 'Ни одна из программ не доступна или не установлена на компьютере.'");
			Для Каждого Ошибка Из СвойстваОшибки.Ошибки Цикл
				ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Программу ""%1"" не удалось использовать по причине:
						           |%2'"),
						Ошибка.Программа,
						Ошибка.Описание);
			КонецЦикла;
		КонецЕсли;
		СвойстваОшибки.Вставить("Описание", ТекстОшибки);
	КонецЕсли;
	
	СвойстваОшибки.Вставить("ОписаниеОшибки", Контекст.ЗаголовокОшибки + Символы.ПС + ТекстОшибки);
	Если Контекст.ПоказатьОшибку = Неопределено Тогда
		ОписаниеОшибки = СвойстваОшибки;
	Иначе
		ОписаниеОшибки = СвойстваОшибки.ОписаниеОшибки;
	КонецЕсли;
	
	Если Контекст.ПоказатьОшибку = Истина Тогда
		ПоказатьОшибкуОбращенияКПрограмме(
			Контекст.ЗаголовокФормы, Контекст.ЗаголовокОшибки, СвойстваОшибки, Новый Структура);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ОписаниеОшибки);
	
КонецПроцедуры


// Только для внутреннего назначения.
//
// Параметры:
//  ПараметрыСоздания - Структура - со свойствами:
//   * ВЛичныйСписок    - Булево - если не указано, значит Ложь.
//                        Если Истина, то реквизит Пользователь будет заполнено текущим пользователем.
//   * Организация      - СправочникСсылка.Организации - значение по умолчанию.
//   * СкрытьЗаявление  - Булево - не предлагать создать заявление на выпуск сертификата.
//   * СоздатьЗаявление - Булево - сразу открыть форму создания заявления на выпуск сертификата.
//
Процедура ДобавитьСертификат(ПараметрыСоздания = Неопределено, ОбработчикЗавершения = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыСоздания) <> Тип("Структура") Тогда
		ПараметрыСоздания = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("ВЛичныйСписок") Тогда
		ПараметрыСоздания.Вставить("ВЛичныйСписок", Ложь);
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("Организация") Тогда
		ПараметрыСоздания.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("СертификатОснование") Тогда
		ПараметрыСоздания.Вставить("СертификатОснование", Неопределено);
	КонецЕсли;
	
	ПараметрыСоздания.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Если ПараметрыСоздания.Свойство("СоздатьЗаявление") И ПараметрыСоздания.СоздатьЗаявление = Истина Тогда
		ДобавитьСертификатПослеВыбораНазначения("ЗаявлениеНаВыпускСертификата", ПараметрыСоздания);
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСоздания.Свойство("СкрытьЗаявление") Тогда
		ПараметрыСоздания.Вставить("СкрытьЗаявление", Истина);
	КонецЕсли;
	
	Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ДобавлениеСертификата",
		Новый Структура("СкрытьЗаявление", ПараметрыСоздания.СкрытьЗаявление),,,,,
		Новый ОписаниеОповещения("ДобавитьСертификатПослеВыбораНазначения", ЭтотОбъект, ПараметрыСоздания));
	
	Если Форма = Неопределено Тогда
		ДобавитьСертификатПослеВыбораНазначения("ДляПодписанияШифрованияИРасшифровки", ПараметрыСоздания);
	КонецЕсли;
	
КонецПроцедуры


// Только для внутреннего назначения.
Процедура ДобавитьСертификатПослеВыбораНазначения(Назначение, ПараметрыСоздания) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если Назначение = "ЗаявлениеНаВыпускСертификата" Тогда
		ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", ПараметрыСоздания.ВЛичныйСписок);
		ПараметрыФормы.Вставить("Организация", ПараметрыСоздания.Организация);
		ПараметрыФормы.Вставить("СертификатОснование", ПараметрыСоздания.СертификатОснование);
		ИмяФормы = "Обработка.ЗаявлениеНаВыпускНовогоКвалифицированногоСертификата.Форма.Форма";
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, , , , , ПараметрыСоздания.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	
	Если Назначение = "ТолькоДляШифрованияИзФайла" Тогда
		ДобавитьСертификатТолькоДляШифрованияИзФайла(ПараметрыСоздания);
		Возврат;
	КонецЕсли;
	
	Если Назначение <> "ТолькоДляШифрования" Тогда
		ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Неопределено);
		
		Если Назначение = "ДляШифрованияИРасшифровки" Тогда
			ПараметрыФормы.Вставить("ДляШифрованияИРасшифровки", Истина);
		
		ИначеЕсли Назначение <> "ДляПодписанияШифрованияИРасшифровки" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ДобавлениеВСписок", Истина);
		ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", ПараметрыСоздания.ВЛичныйСписок);
		ПараметрыФормы.Вставить("Организация", ПараметрыСоздания.Организация);
		ВыборСертификатаДляПодписанияИлиРасшифровки(ПараметрыФормы, , ПараметрыСоздания.ОбработчикЗавершения);
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыСоздания", ПараметрыСоздания);
	
	ПолучитьСвойстваСертификатовНаКлиенте(Новый ОписаниеОповещения(
			"ДобавитьСертификатПослеПолученияСвойствСертификатовНаКлиенте", ЭтотОбъект, Контекст),
		Ложь, Ложь);
	
КонецПроцедуры

// Продолжение процедуры ДобавитьСертификатПослеВыбораНазначения.
Процедура ДобавитьСертификатПослеПолученияСвойствСертификатовНаКлиенте(Результат, Контекст) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СвойстваСертификатовНаКлиенте",        Результат.СвойстваСертификатовНаКлиенте);
	ПараметрыФормы.Вставить("ОшибкаПолученияСертификатовНаКлиенте", Результат.ОшибкаПолученияСертификатовНаКлиенте);
	
	Если Контекст.ПараметрыСоздания.Свойство("ВЛичныйСписок") Тогда
		ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", Контекст.ПараметрыСоздания.ВЛичныйСписок);
	КонецЕсли;
	Если Контекст.ПараметрыСоздания.Свойство("Организация") Тогда
		ПараметрыФормы.Вставить("Организация", Контекст.ПараметрыСоздания.Организация);
	КонецЕсли;
	
	ОбработчикЗавершения = Неопределено;
	Контекст.ПараметрыСоздания.Свойство("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ДобавлениеСертификатаДляШифрования",
		ПараметрыФормы, , , , , ОбработчикЗавершения);
	
КонецПроцедуры


// Только для внутреннего назначения.
Процедура ПолучитьСвойстваСертификатовНаКлиенте(Оповещение, Личные, БезОтбора, ТолькоОтпечатки = Ложь, ПоказатьОшибку = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаПолученияСертификатовНаКлиенте", Новый Структура);
	Результат.Вставить("СвойстваСертификатовНаКлиенте", ?(ТолькоОтпечатки, Новый Соответствие, Новый Массив));
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",      Оповещение);
	Контекст.Вставить("Личные",          Личные);
	Контекст.Вставить("БезОтбора",       БезОтбора);
	Контекст.Вставить("ТолькоОтпечатки", ТолькоОтпечатки);
	Контекст.Вставить("Результат",       Результат);
	
	СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПолучитьСвойстваСертификатовНаКлиентеПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"ПолучениеСертификатов", ПоказатьОшибку);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСвойстваСертификатовНаКлиенте.
Процедура ПолучитьСвойстваСертификатовНаКлиентеПослеСозданияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		Контекст.Результат.ОшибкаПолученияСертификатовНаКлиенте = МенеджерКриптографии;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Контекст.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		Новый ОписаниеОповещения(
			"ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияПерсональногоХранилища", ЭтотОбъект, Контекст),
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСвойстваСертификатовНаКлиенте.
Процедура ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияПерсональногоХранилища(Хранилище, Контекст) Экспорт
	
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения(
		"ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсехПерсональныхСертификатов", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСвойстваСертификатовНаКлиенте.
Процедура ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсехПерсональныхСертификатов(Массив, Контекст) Экспорт
	
	Контекст.Вставить("МассивСертификатов", Массив);
	
	Если Контекст.Личные Тогда
		ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсех(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		Новый ОписаниеОповещения(
			"ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияХранилищаПолучателей", ЭтотОбъект, Контекст),
		ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСвойстваСертификатовНаКлиенте.
Процедура ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияХранилищаПолучателей(Хранилище, Контекст) Экспорт
	
	Хранилище.НачатьПолучениеВсех(Новый ОписаниеОповещения(
		"ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсехСертификатовПолучателей", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСвойстваСертификатовНаКлиенте.
//
// Параметры:
//   Контекст - Структура - со свойствами:
//     * МассивСертификатов - Массив - .
//
Процедура ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсехСертификатовПолучателей(Массив, Контекст) Экспорт
	
	Для каждого Сертификат Из Массив Цикл
		Контекст.МассивСертификатов.Добавить(Сертификат);
	КонецЦикла;
	
	ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсех(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьСвойстваСертификатовНаКлиенте.
Процедура ПолучитьСвойстваСертификатовНаКлиентеПослеПолученияВсех(Контекст)
	
	ПараметрыДобавленияСвойств = Новый Структура("ТолькоОтпечатки, МодульЛокализации",
		Контекст.ТолькоОтпечатки, МодульЛокализации());
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьСвойстваСертификатов(
		Контекст.Результат.СвойстваСертификатовНаКлиенте,
		Контекст.МассивСертификатов,
		Контекст.БезОтбора,
		ДобавкаВремени(),
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		ПараметрыДобавленияСвойств);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);
	
КонецПроцедуры


// Только для внутреннего назначения.
Процедура ДобавитьСертификатТолькоДляШифрованияИзФайла(ПараметрыСоздания) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСертификатТолькоДляШифрованияИзФайлаПослеПомещенияФайлов",
		ЭтотОбъект, ПараметрыСоздания);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите файл сертификата (только для шифрования)'");
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Сертификат X.509 (*.cer;*.crt)|*.cer;*.crt|Все файлы (*.*)|*.*'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

// Продолжение процедуры ДобавитьСертификатТолькоДляШифрованияИзФайла.
Процедура ДобавитьСертификатТолькоДляШифрованияИзФайлаПослеПомещенияФайлов(ПомещенныйФайл, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСертификатТолькоДляШифрованияИзФайлаПослеПомещенияФайла(ПомещенныйФайл.Хранение, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ДобавитьСертификатТолькоДляШифрованияИзФайла.
Процедура ДобавитьСертификатТолькоДляШифрованияИзФайлаПослеПомещенияФайла(Адрес, Контекст)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресДанныхСертификата", Адрес);
	ПараметрыФормы.Вставить("ЛичныйСписокПриДобавлении", Контекст.ВЛичныйСписок);
	ПараметрыФормы.Вставить("Организация",               Контекст.Организация);
	Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ДобавлениеСертификатаДляШифрования",
		ПараметрыФормы, , , , , Контекст.ОбработчикЗавершения);
	
	Если Форма = Неопределено Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'"));
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Открыта() Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Открыть", НСтр("ru = 'Открыть'"));
		Кнопки.Добавить("Отмена",  НСтр("ru = 'Отмена'"));
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ДобавитьСертификатТолькоДляШифрованияИзФайлаПослеПредупрежденияОСуществующем",
				ЭтотОбъект, Форма.Сертификат),
			НСтр("ru = 'Сертификат уже добавлен.'"), Кнопки);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ДобавитьСертификатТолькоДляШифрованияИзФайла.
Процедура ДобавитьСертификатТолькоДляШифрованияИзФайлаПослеПредупрежденияОСуществующем(Ответ, Сертификат) Экспорт
	
	Если Ответ <> "Открыть" Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьСертификат(Сертификат);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура ПоказатьОшибкуОбращенияКПрограмме(ЗаголовокФормы, ЗаголовокОшибки, ОшибкаНаКлиенте, ОшибкаНаСервере,
				ДополнительныеПараметры = Неопределено, ОбработкаПродолжения = Неопределено) Экспорт
	
	Если ТипЗнч(ОшибкаНаКлиенте) <> Тип("Структура") Тогда
		ВызватьИсключение
			НСтр("ru = 'Для процедуры ПоказатьОшибкуОбращенияКПрограмме
			           |указан некорректный тип параметра ОшибкаНаКлиенте.'");
	КонецЕсли;
	
	Если ТипЗнч(ОшибкаНаСервере) <> Тип("Структура") Тогда
		ВызватьИсключение
			НСтр("ru = 'Для процедуры ПоказатьОшибкуОбращенияКПрограмме
			           |указан некорректный тип параметра ОшибкаНаСервере.'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьИнструкцию",                Ложь);
	ПараметрыФормы.Вставить("ПоказатьПереходКНастройкеПрограмм", Ложь);
	ПараметрыФормы.Вставить("ПоказатьУстановкуРасширения",       Ложь);
	ПараметрыФормы.Вставить("НеподписанныеДанные");
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы",  ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	
	ПараметрыФормы.Вставить("ОшибкаНаКлиенте", ОшибкаНаКлиенте);
	ПараметрыФормы.Вставить("ОшибкаНаСервере", ОшибкаНаСервере);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыФормы", ПараметрыФормы);
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"ПоказатьОшибкуОбращенияКПрограммеПослеПодключенияРасширения", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПоказатьОшибкуОбращенияКПрограмме.
Процедура ПоказатьОшибкуОбращенияКПрограммеПослеПодключенияРасширения(Подключено, Контекст) Экспорт
	
	Контекст.ПараметрыФормы.Вставить("РасширениеПодключено", Подключено);
	
	ОткрытьФорму("Справочник.ПрограммыЭлектроннойПодписиИШифрования.Форма.ОшибкаОбращенияКПрограмме",
		Контекст.ПараметрыФормы,,,, , Контекст.ОбработкаПродолжения);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля = Неопределено) Экспорт
	
	ФормаПередачаПараметров().УстановитьПарольСертификата(СертификатСсылка, Пароль, ПояснениеПароля);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОткрытьНовуюФорму(ВидФормы, КлиентскиеПараметры, СерверныеПараметры, ОбработкаЗавершения) Экспорт
	
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	
	СерверныеПараметры.Вставить("БезПодтверждения", Ложь);
	
	Если СерверныеПараметры.Свойство("ОтборСертификатов")
	   И ТипЗнч(СерверныеПараметры.ОтборСертификатов) = Тип("Массив")
	   И СерверныеПараметры.ОтборСертификатов.Количество() = 1
	   И ОписаниеДанных.Свойство("БезПодтверждения")
	   И ОписаниеДанных.БезПодтверждения Тогда
		
		СерверныеПараметры.Вставить("БезПодтверждения", Истина);
	КонецЕсли;
	
	Если СерверныеПараметры.Свойство("НаборСертификатов")
	   И ОписаниеДанных.Свойство("БезПодтверждения")
	   И ОписаниеДанных.БезПодтверждения Тогда
		
		СерверныеПараметры.Вставить("БезПодтверждения", Истина);
	КонецЕсли;
	
	НастроитьПредставлениеДанных(КлиентскиеПараметры, СерверныеПараметры);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВидФормы",            ВидФормы);
	Контекст.Вставить("КлиентскиеПараметры", КлиентскиеПараметры);
	Контекст.Вставить("СерверныеПараметры",  СерверныеПараметры);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ПолучитьОтпечаткиСертификатовНаКлиенте(Новый ОписаниеОповещения(
		"ОткрытьНовуюФормуЗавершение", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ОткрытьНовуюФорму.
Процедура ОткрытьНовуюФормуЗавершение(ОтпечаткиСертификатовНаКлиенте, Контекст) Экспорт
	
	Контекст.СерверныеПараметры.Вставить("ОтпечаткиСертификатовНаКлиенте",
		ОтпечаткиСертификатовНаКлиенте);
	
	ФормаПередачаПараметров().ОткрытьНовуюФорму(
		Контекст.ВидФормы,
		Контекст.СерверныеПараметры,
		Контекст.КлиентскиеПараметры,
		Контекст.ОбработкаЗавершения);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбновитьФормуПередПовторнымИспользованием(Форма, КлиентскиеПараметры) Экспорт
	
	СерверныеПараметры  = Новый Структура;
	НастроитьПредставлениеДанных(КлиентскиеПараметры, СерверныеПараметры);
	
	Форма.ПредставлениеДанных  = СерверныеПараметры.ПредставлениеДанных;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура НастроитьПредставлениеДанных(КлиентскиеПараметры, СерверныеПараметры) Экспорт
	
	ОписаниеДанных = КлиентскиеПараметры.ОписаниеДанных;
	
	Если ОписаниеДанных.Свойство("СписокПредставлений") Тогда
		СписокПредставлений = ОписаниеДанных.СписокПредставлений;
	Иначе
		СписокПредставлений = Новый Массив;
		
		Если ОписаниеДанных.Свойство("Данные")
		 Или ОписаниеДанных.Свойство("Объект") Тогда
			
			ЗаполнитьСписокПредставлений(СписокПредставлений, ОписаниеДанных);
		Иначе
			Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
				ЗаполнитьСписокПредставлений(СписокПредставлений, ЭлементДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСписокПредставлений = Новый СписокЗначений;
	
	Для каждого ЭлементСписка Из СписокПредставлений Цикл
		Если ТипЗнч(ЭлементСписка) = Тип("Строка") Тогда
			Представление = ЭлементСписка.Представление;
			Значение = Неопределено;
		ИначеЕсли ТипЗнч(ЭлементСписка) = Тип("Структура") Тогда
			Представление = ЭлементСписка.Представление;
			Значение = ЭлементСписка.Значение;
		Иначе // Ссылка
			Представление = "";
			Значение = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Представление = ЭлементСписка.Представление;
		Иначе
			Представление = Строка(ЭлементСписка.Значение);
		КонецЕсли;
		ТекущийСписокПредставлений.Добавить(Значение, Представление);
	КонецЦикла;
	
	Если ТекущийСписокПредставлений.Количество() > 1 Тогда
		СерверныеПараметры.Вставить("ПредставлениеДанныхОткрывается", Истина);
		СерверныеПараметры.Вставить("ПредставлениеДанных", СтрЗаменить(
			ОписаниеДанных.ПредставлениеНабора, "%1", ОписаниеДанных.НаборДанных.Количество()));
	Иначе
		СерверныеПараметры.Вставить("ПредставлениеДанныхОткрывается",
			ТипЗнч(ТекущийСписокПредставлений[0].Значение) = Тип("ОписаниеОповещения")
			Или ЗначениеЗаполнено(ТекущийСписокПредставлений[0].Значение));
		
		СерверныеПараметры.Вставить("ПредставлениеДанных",
			ТекущийСписокПредставлений[0].Представление);
	КонецЕсли;
	
	КлиентскиеПараметры.Вставить("ТекущийСписокПредставлений", ТекущийСписокПредставлений);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура НачалоВыбораСертификатаПриУстановленномОтборе(Форма) Экспорт
	
	ДоступныеСертификаты = "";
	НедоступныеСертификаты = "";
	
	Текст = НСтр("ru = 'Сертификаты, которые могут быть использованы для этой операции ограничены.'");
	
	Для каждого ЭлементСписка Из Форма.ОтборСертификатов Цикл
		Если Форма.СертификатСписокВыбора.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			НедоступныеСертификаты = НедоступныеСертификаты + Символы.ПС + Строка(ЭлементСписка.Значение);
		Иначе
			ДоступныеСертификаты = ДоступныеСертификаты + Символы.ПС + Строка(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
		Заголовок = НСтр("ru = 'Следующие разрешенные сертификаты доступны для выбора:'");
		Текст = Текст + Символы.ПС + Символы.ПС + Заголовок + Символы.ПС + СокрЛП(ДоступныеСертификаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НедоступныеСертификаты) Тогда
		Если ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере() Тогда
			Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
				Заголовок = НСтр("ru = 'Следующие разрешенные сертификаты не найдены ни на компьютере, ни на сервере:'");
			Иначе
				Заголовок = НСтр("ru = 'Ни один из следующих разрешенных сертификатов не найден ни на компьютере, ни на сервере:'");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДоступныеСертификаты) Тогда
				Заголовок = НСтр("ru = 'Следующие разрешенные сертификаты не найдены на компьютере:'");
			Иначе
				Заголовок = НСтр("ru = 'Ни один из следующих разрешенных сертификатов не найден на компьютере:'");
			КонецЕсли;
		КонецЕсли;
		Текст = Текст + Символы.ПС + Символы.ПС + Заголовок + Символы.ПС + СокрЛП(НедоступныеСертификаты);
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыборСертификатаДляПодписанияИлиРасшифровки(СерверныеПараметры, ВладелецНовойФормы = Неопределено, ОбработчикЗавершения = Неопределено) Экспорт
	
	Если ВладелецНовойФормы = Неопределено Тогда
		ВладелецНовойФормы = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СерверныеПараметры", СерверныеПараметры);
	Контекст.Вставить("ВладелецНовойФормы", ВладелецНовойФормы);
	Контекст.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ПолучитьСвойстваСертификатовНаКлиенте(Новый ОписаниеОповещения(
		"ВыборСертификатаДляПодписанияИлиРасшифровкиПродолжение", ЭтотОбъект, Контекст), Истина, Ложь);
	
КонецПроцедуры

// Продолжение процедуры ВыборСертификатаДляПодписанияИлиРасшифровки.
Процедура ВыборСертификатаДляПодписанияИлиРасшифровкиПродолжение(Результат, Контекст) Экспорт
	
	Контекст.СерверныеПараметры.Вставить("СвойстваСертификатовНаКлиенте",
		Результат.СвойстваСертификатовНаКлиенте);
	
	Контекст.СерверныеПараметры.Вставить("ОшибкаПолученияСертификатовНаКлиенте",
		Результат.ОшибкаПолученияСертификатовНаКлиенте);
	
	ФормаПередачаПараметров().ОткрытьНовуюФорму("ВыборСертификатаДляПодписанияИлиРасшифровки",
		Контекст.СерверныеПараметры, , Контекст.ОбработчикЗавершения, Контекст.ВладелецНовойФормы);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры) Экспорт
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("ЗаголовокФормы");
	СерверныеПараметры.Вставить("ПроверкаПриВыборе");
	СерверныеПараметры.Вставить("ПараметрыДополнительныхПроверок");
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		УказанКонтекстДругойОперации = Ложь;
		Если ДополнительныеПараметры.Свойство("КонтекстОперации")
			И ТипЗнч(ДополнительныеПараметры.КонтекстОперации) = Тип("ФормаКлиентскогоПриложения") Тогда
			
			Если Не ДополнительныеПараметры.Свойство("БезПодтверждения") Тогда
				ДополнительныеПараметры.Вставить("БезПодтверждения");
			КонецЕсли;
			
			УказанКонтекстДругойОперации = Истина;
			ДополнительныеПараметры.БезПодтверждения = Истина;
			
		ИначеЕсли ДополнительныеПараметры.Свойство("НеПоказыватьРезультаты") Тогда
			ДополнительныеПараметры.НеПоказыватьРезультаты = Ложь;
		КонецЕсли;
		
		КлиентскиеПараметры = ДополнительныеПараметры;
		Если УказанКонтекстДругойОперации Тогда
			КлиентскиеПараметры.Вставить("УказанКонтекстДругойОперации");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СерверныеПараметры, ДополнительныеПараметры);
		
	Иначе
		КлиентскиеПараметры = Новый Структура;
	КонецЕсли;
	
	СерверныеПараметры.Вставить("Сертификат", Сертификат);
	
	ВладелецФормы = Неопределено;
	КлиентскиеПараметры.Свойство("ВладелецФормы", ВладелецФормы);
	
	ОбработкаЗавершения = Неопределено;
	КлиентскиеПараметры.Свойство("ОбработкаЗавершения", ОбработкаЗавершения);
	
	ФормаПередачаПараметров().ОткрытьНовуюФорму("ПроверкаСертификата",
		СерверныеПараметры, КлиентскиеПараметры, ОбработкаЗавершения, ВладелецФормы);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура СтандартноеЗавершение(Успех, КлиентскиеПараметры) Экспорт
	
	КлиентскиеПараметры.ОписаниеДанных.Вставить("Успех", Успех = Истина);
	КлиентскиеПараметры.ОписаниеДанных.Вставить("Отказ", Успех = Неопределено);
	
	Если КлиентскиеПараметры.ОбработкаРезультата <> Неопределено Тогда
		
		ОбработкаРезультата = КлиентскиеПараметры.ОбработкаРезультата;
		КлиентскиеПараметры.ОбработкаРезультата = Неопределено;
		ВыполнитьОбработкуОповещения(ОбработкаРезультата, КлиентскиеПараметры.ОписаниеДанных);
		
	КонецЕсли;
	
КонецПроцедуры


// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьПодписьИзФайла.
Процедура ДобавитьПодписьИзФайлаПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если Контекст.ПроверитьМенеджерКриптографииНаКлиенте
	   И ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		
		ПоказатьОшибкуОбращенияКПрограмме(
			НСтр("ru = 'Требуется программа электронной подписи и шифрования'"),
			"", Результат, Контекст.ФормаДобавления.МенеджерКриптографииНаСервереОписаниеОшибки);
	Иначе
		Контекст.ФормаДобавления.Открыть();
		Если Контекст.ФормаДобавления.Открыта() Тогда
			Контекст.ФормаДобавления.ОбновитьОтображениеДанных();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Контекст.ОбработкаРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Контекст.ОписаниеДанных);
	КонецЕсли;
	
КонецПроцедуры


// Предлагает пользователю выбрать подписи для сохранения вместе с данными объекта.
//
// Общий подход к обработке значений свойств с типом ОписаниеОповещения в параметре ОписаниеДанных.
//  При выполнении обработки оповещения в нее передается структура параметров, в которой всегда есть
//  свойство "Оповещение" типа ОписаниеОповещения, обработку которого нужно выполнить для продолжения.
//  Кроме того, в структуре всегда есть свойство ОписаниеДанных, полученное при вызове процедуры.
//  При вызове оповещения в качестве значения должна передаваться структура. Если в процессе асинхронного
//  выполнения возникает ошибка, тогда в эту структуру нужно вставить свойство ОписаниеОшибки типа Строка.
// 
// Параметры:
//  ОписаниеДанных - Структура - со свойствами:
//    * ЗаголовокДанных     - Строка - заголовок элемента данных, например Файл.
//    * ПоказатьКомментарий - Булево - (необязательный) - разрешает ввод комментария в форме
//                              добавления подписей. Если не указан, значит Ложь.
//    * Представление      - Ссылка, Строка - (необязательный), если не указан, тогда
//                                представление вычисляется по значению свойства Объект.
//    * Объект             - Ссылка - ссылка на объект с табличной частью ЭлектронныеПодписи,
//                              из которой нужно получить список подписей.
//    * --// --             - Строка - адрес временного хранилища массива подписей с составом свойств,
//                              как возвращает процедура ДобавитьПодписьИзФайла.
//    * Данные             - ОписаниеОповещения - обработчик сохранения данных и получения полного имени
//                              файла с путем (после его сохранения), возвращаемое в свойстве ПолноеИмяФайла
//                              типа Строка для сохранения электронных подписей (см. выше общий подход).
//                              Если расширение для работы с файлами не подключено, то нужно вернуть
//                              имя файла без пути.
//                              Если свойство не будет вставлено или заполнено - это считается отказом
//                              от продолжения и будет вызвана ОбработкаРезультата с результатом Ложь.
//
//                              Для пакетного запроса разрешений у пользователя веб-клиента на сохранение файла данных
//                              и подписей, нужно вставить параметр ОбработкаЗапросаРазрешений типа ОписаниеОповещения.
//                              В процедуру будет передана Структура с параметрами:
//                              * Вызовы               - Массив - с описанием вызовов для сохранения подписей.
//                              * ОбработкаПродолжения - ОписаниеОповещения - оповещение, которое нужно выполнить
//                                                       после запроса разрешений, - параметры процедуры как у
//                                                       оповещения для метода НачатьЗапросРазрешенияПользователя.
//                                                       Если разрешение не получено, значит все отменено.
//
//  ОбработкаРезультата - ОписаниеОповещения - необязательный параметр.
//     В результат передается параметр:
//     * Булево - Истина, если все прошло успешно.
//
Процедура СохранитьДанныеВместеСПодписью(ОписаниеДанных, ОбработкаРезультата = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеДанных", ОписаниеДанных);
	Контекст.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	
	ПерсональныеНастройки = ЭлектроннаяПодписьКлиент.ПерсональныеНастройки();
	СохранятьВсеПодписи = ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	СохранятьСертификатВместеСПодписью = ПерсональныеНастройки.СохранятьСертификатВместеСПодписью;
	
	СерверныеПараметры = Новый Структура;
	СерверныеПараметры.Вставить("ЗаголовокДанных",     НСтр("ru = 'Данные'"));
	СерверныеПараметры.Вставить("ПоказатьКомментарий", Ложь);
	ЗаполнитьЗначенияСвойств(СерверныеПараметры, ОписаниеДанных);
	
	Контекст.Вставить("СохранятьСертификатВместеСПодписью", СохранятьСертификатВместеСПодписью);
	
	СерверныеПараметры.Вставить("СохранятьВсеПодписи", СохранятьВсеПодписи);
	СерверныеПараметры.Вставить("Объект", ОписаниеДанных.Объект);
	
	КлиентскиеПараметры = Новый Структура;
	КлиентскиеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
	НастроитьПредставлениеДанных(КлиентскиеПараметры, СерверныеПараметры);
	
	ФормаСохранения = ОткрытьФорму("ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью", СерверныеПараметры,,,,,
		Новый ОписаниеОповещения("СохранитьДанныеВместеСПодписьюПослеВыбораПодписей", ЭтотОбъект, Контекст));
	
	Завершить = Ложь;
	Контекст.Вставить("Форма", ФормаСохранения);
	
	Если ФормаСохранения = Неопределено Тогда
		Завершить = Истина;
	Иначе
		ФормаСохранения.КлиентскиеПараметры = КлиентскиеПараметры;
		
		Если СохранятьВсеПодписи Тогда
			СохранитьДанныеВместеСПодписьюПослеВыбораПодписей(ФормаСохранения.ТаблицаПодписей, Контекст);
			Возврат;
			
		ИначеЕсли Не ФормаСохранения.Открыта() Тогда
			Завершить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Завершить И Контекст.ОбработкаРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюПослеВыбораПодписей(КоллекцияПодписей, Контекст) Экспорт
	
	Если ТипЗнч(КоллекцияПодписей) <> Тип("ДанныеФормыКоллекция") Тогда
		Если Контекст.ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("КоллекцияПодписей", КоллекцияПодписей);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеДанных", Контекст.ОписаниеДанных);
	ПараметрыВыполнения.Вставить("Оповещение", Новый ОписаниеОповещения(
		"СохранитьДанныеВместеСПодписьюПослеСохраненияФайлаДанных", ЭтотОбъект, Контекст));
	
	Попытка
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеДанных.Данные, ПараметрыВыполнения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СохранитьДанныеВместеСПодписьюПослеСохраненияФайлаДанных(
			Новый Структура("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке)), Контекст);
	КонецПопытки;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюПослеСохраненияФайлаДанных(Результат, Контекст) Экспорт
	
	Если Результат.Свойство("ОписаниеОшибки") Тогда
		Ошибка = Новый Структура("ОписаниеОшибки",
			НСтр("ru = 'При записи файла возникла ошибка:'") + Символы.ПС + Результат.ОписаниеОшибки);
		
		ПоказатьОшибкуОбращенияКПрограмме(
			НСтр("ru = 'Не удалось сохранить подписи вместе с файлом'"), "", Ошибка, Новый Структура);
		Возврат;
		
	ИначеЕсли Не Результат.Свойство("ПолноеИмяФайла")
		Или ТипЗнч(Результат.ПолноеИмяФайла) <> Тип("Строка")
		Или ПустаяСтрока(Результат.ПолноеИмяФайла) Тогда
		
		Если Контекст.ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ОбработкаЗапросаРазрешений") Тогда
		Контекст.Вставить("ОбработкаЗапросаРазрешений", Результат.ОбработкаЗапросаРазрешений);
	КонецЕсли;
	
	Контекст.Вставить("ПолноеИмяФайла", Результат.ПолноеИмяФайла);
	Контекст.Вставить("СоставИмениФайлаДанных",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Контекст.ПолноеИмяФайла));
	
	Если ЗначениеЗаполнено(Контекст.СоставИмениФайлаДанных.Путь) Тогда
		ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Новый ОписаниеОповещения(
			"СохранитьДанныеВместеСПодписьюПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст));
	Иначе
		СохранитьДанныеВместеСПодписьюПослеПодключенияРасширенияРаботыСФайлами(Ложь, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюПослеПодключенияРасширенияРаботыСФайлами(Подключено, Контекст) Экспорт
	
	Контекст.Вставить("Подключено", Подключено);
	
	Контекст.Вставить("РасширениеДляФайловПодписи",
		ЭлектроннаяПодписьКлиент.ПерсональныеНастройки().РасширениеДляФайловПодписи);
	
	Если Контекст.Подключено Тогда
		Контекст.Вставить("ПолучаемыеФайлы", Новый Массив);
		Контекст.Вставить("ПутьКФайлам", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			Контекст.СоставИмениФайлаДанных.Путь));
	КонецЕсли;
	
	Контекст.Вставить("ИменаФайлов", Новый Соответствие);
	Контекст.ИменаФайлов.Вставить(Контекст.СоставИмениФайлаДанных.Имя, Истина);
	
	Контекст.Вставить("Индекс", -1);
	
	СохранитьДанныеВместеСПодписьюЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюЦиклНачало(Контекст)
	
	Если Контекст.КоллекцияПодписей.Количество() <= Контекст.Индекс + 1 Тогда
		СохранитьДанныеВместеСПодписьюПослеЦикла(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("ОписаниеПодписи", Контекст.КоллекцияПодписей[Контекст.Индекс]);
	
	Если Не Контекст.ОписаниеПодписи.Пометка Тогда
		СохранитьДанныеВместеСПодписьюЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ИмяФайлаПодписи", Контекст.ОписаниеПодписи.ИмяФайлаПодписи);
	
	Если ПустаяСтрока(Контекст.ИмяФайлаПодписи) Тогда 
		Контекст.ИмяФайлаПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаПодписи(Контекст.СоставИмениФайлаДанных.ИмяБезРасширения,
			Строка(Контекст.ОписаниеПодписи.КомуВыданСертификат), Контекст.РасширениеДляФайловПодписи);
	Иначе
		Контекст.ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Контекст.ИмяФайлаПодписи);
	КонецЕсли;
	
	СоставИмениФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Контекст.ИмяФайлаПодписи);
	Контекст.Вставить("ИмяФайлаПодписиБезРасширения", СоставИмениФайлаПодписи.ИмяБезРасширения);
	
	Контекст.Вставить("Счетчик", 1);
	
	СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклНачало(Контекст)
	
	Контекст.Счетчик = Контекст.Счетчик + 1;
	
	Если Контекст.Подключено Тогда
		Контекст.Вставить("ПолноеИмяФайлаПодписи", Контекст.ПутьКФайлам + Контекст.ИмяФайлаПодписи);
	Иначе
		Контекст.Вставить("ПолноеИмяФайлаПодписи", Контекст.ИмяФайлаПодписи);
	КонецЕсли;
	
	Если Контекст.ИменаФайлов[Контекст.ИмяФайлаПодписи] <> Неопределено Тогда
		СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла(Истина, Контекст);
		
	ИначеЕсли Контекст.Подключено Тогда
		Файл = Новый Файл(Контекст.ПолноеИмяФайлаПодписи);
		Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
			"СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла", ЭтотОбъект, Контекст));
	Иначе
		СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла(Ложь, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла(Существует, Контекст) Экспорт
	
	Если Не Существует Тогда
		СохранитьДанныеВместеСПодписьюЦиклПослеВнутреннегоЦикла(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ИмяФайлаПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаПодписи(Контекст.ИмяФайлаПодписиБезРасширения,
		"(" + Строка(Контекст.Счетчик) + ")", Контекст.РасширениеДляФайловПодписи, Ложь);
	
	СохранитьДанныеВместеСПодписьюЦиклВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюЦиклПослеВнутреннегоЦикла(Контекст)
	
	СоставИмениФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Контекст.ПолноеИмяФайлаПодписи);
	Контекст.ИменаФайлов.Вставить(СоставИмениФайлаПодписи.Имя, Ложь);
	
	Если Контекст.Подключено Тогда
		Описание = Новый ОписаниеПередаваемогоФайла(СоставИмениФайлаПодписи.Имя, Контекст.ОписаниеПодписи.АдресПодписи);
		Контекст.ПолучаемыеФайлы.Добавить(Описание);
	Иначе
		// Сохранение Файла из базы данных на диск.
		ПолучитьФайл(Контекст.ОписаниеПодписи.АдресПодписи, СоставИмениФайлаПодписи.Имя);
	КонецЕсли;
	
	Если Контекст.СохранятьСертификатВместеСПодписью Тогда
		СохранитьДанныеСертификатаВместеСПодписьюЦиклНачало(Контекст);
	Иначе
		СохранитьДанныеВместеСПодписьюЦиклНачало(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклНачало(Контекст)
	
	Если Контекст.Подключено Тогда
		Контекст.Вставить("ПолноеИмяФайлаСертификата", Контекст.ПутьКФайлам + Контекст.ИмяФайлаСертификата);
	Иначе
		Контекст.Вставить("ПолноеИмяФайлаСертификата", Контекст.ИмяФайлаСертификата);
	КонецЕсли;
	
	Если Контекст.ИменаФайлов[Контекст.ИмяФайлаСертификата] <> Неопределено Тогда
		СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла(Истина, Контекст);
		
	ИначеЕсли Контекст.Подключено Тогда
		Файл = Новый Файл(Контекст.ПолноеИмяФайлаСертификата);
		Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
			"СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла", ЭтотОбъект, Контекст));
	Иначе
		СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла(Ложь, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклПослеПроверкиСуществованияФайла(Существует, Контекст) Экспорт
	
	Если Не Существует Тогда
		СохранитьДанныеСертификатаВместеСПодписьюЦиклПослеВнутреннегоЦикла(Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ИмяФайлаСертификата = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаСертификата(Контекст.ИмяФайлаСертификатаБезРасширения,
		"(" + Строка(Контекст.Счетчик) + ")", Контекст.ОписаниеПодписи.РасширениеСертификата, Ложь);
	
	СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеСертификатаВместеСПодписьюЦиклНачало(Контекст)
	
	Контекст.Вставить("ИмяФайлаСертификата", "");
	
	Контекст.ИмяФайлаСертификата = ЭлектроннаяПодписьСлужебныйКлиентСервер.ИмяФайлаСертификата(Контекст.СоставИмениФайлаДанных.ИмяБезРасширения,
		Строка(Контекст.ОписаниеПодписи.КомуВыданСертификат), Контекст.ОписаниеПодписи.РасширениеСертификата);
	
	СоставИмениФайлаСертификата  = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Контекст.ИмяФайлаСертификата);
	Контекст.Вставить("ИмяФайлаСертификатаБезРасширения", СоставИмениФайлаСертификата.ИмяБезРасширения);
	
	СохранитьДанныеСертификатаВместеСПодписьюЦиклВнутреннийЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеСертификатаВместеСПодписьюЦиклПослеВнутреннегоЦикла(Контекст)
	
	СоставИмениФайлаСертификата = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Контекст.ПолноеИмяФайлаСертификата);
	Контекст.ИменаФайлов.Вставить(СоставИмениФайлаСертификата.Имя, Ложь);
	
	Если Контекст.Подключено Тогда
		Описание = Новый ОписаниеПередаваемогоФайла(СоставИмениФайлаСертификата.Имя, Контекст.ОписаниеПодписи.АдресСертификата);
		Контекст.ПолучаемыеФайлы.Добавить(Описание);
	Иначе
		// Сохранение Файла из базы данных на диск.
		ПолучитьФайл(Контекст.ОписаниеПодписи.АдресСертификата, СоставИмениФайлаСертификата.Имя);
	КонецЕсли;
	
	СохранитьДанныеВместеСПодписьюЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюПослеЦикла(Контекст)
	
	Если Не Контекст.Подключено Тогда
		Если Контекст.ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Сохранение Файла из базы данных на диск.
	Если Контекст.ПолучаемыеФайлы.Количество() > 0 Тогда
		Контекст.Вставить("ПолучаемыеФайлы", Контекст.ПолучаемыеФайлы);
		
		Вызовы = Новый Массив;
		Вызов = Новый Массив;
		Вызов.Добавить("НачатьПолучениеФайлов");
		Вызов.Добавить(Контекст.ПолучаемыеФайлы);
		Вызов.Добавить(Контекст.ПутьКФайлам);
		Вызов.Добавить(Ложь);
		Вызовы.Добавить(Вызов);
		
		ОбработкаПродолжения = Новый ОписаниеОповещения(
			"СохранитьДанныеВместеСПодписьюПослеПолученияРазрешений", ЭтотОбъект, Контекст);
		
		Если Контекст.Свойство("ОбработкаЗапросаРазрешений") Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("Вызовы", Вызовы);
			ПараметрыВыполнения.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗапросаРазрешений, ПараметрыВыполнения);
		Иначе
			НачатьЗапросРазрешенияПользователя(ОбработкаПродолжения, Вызовы);
		КонецЕсли;
	Иначе
		СохранитьДанныеВместеСПодписьюПослеПолученияРазрешений(Ложь, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюПослеПолученияРазрешений(РазрешенияПолучены, Контекст) Экспорт
	
	Если Не РазрешенияПолучены
	   И Контекст.ПолучаемыеФайлы.Количество() > 0
	   И Контекст.Свойство("ОбработкаЗапросаРазрешений") Тогда
		
		// Файл данных не был получен - отчет не требуется.
		Если Контекст.ОбработкаРезультата <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Ложь);
		КонецЕсли;
		
	ИначеЕсли РазрешенияПолучены Тогда
		
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ПараметрыСохранения.Диалог.Каталог = Контекст.ПутьКФайлам;
		ФайловаяСистемаКлиент.СохранитьФайлы(Новый ОписаниеОповещения(
			"СохранитьДанныеВместеСПодписьюПослеПолученияФайлов", ЭтотОбъект, Контекст), 
			Контекст.ПолучаемыеФайлы, ПараметрыСохранения);		
	Иначе
		СохранитьДанныеВместеСПодписьюПослеПолученияФайлов(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
//
// Параметры:
//   ПолученныеФайлы - Массив из ОписаниеПередаваемогоФайла - .
//
Процедура СохранитьДанныеВместеСПодписьюПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	ИменаПолученныхФайлов = Новый Соответствие;
	ИменаПолученныхФайлов.Вставить(Контекст.СоставИмениФайлаДанных.Имя, Истина);
	
	Если ТипЗнч(ПолученныеФайлы) = Тип("Массив") Тогда
		Для каждого ПолученныйФайл Из ПолученныеФайлы Цикл
			СоставИмениФайлаПодписи = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолученныйФайл.Имя);
			ИменаПолученныхФайлов.Вставить(СоставИмениФайлаПодписи.Имя, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Текст = НСтр("ru = 'Папка с файлами:'") + Символы.ПС;
	Текст = Текст + Контекст.ПутьКФайлам;
	Текст = Текст + Символы.ПС + Символы.ПС;
	
	Текст = Текст + НСтр("ru = 'Файлы:'") + Символы.ПС;
	
	Для Каждого КлючИЗначение Из ИменаПолученныхФайлов Цикл
		Текст = Текст + КлючИЗначение.Ключ + Символы.ПС;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Текст", Текст);
	ПараметрыФормы.Вставить("ПапкаСФайлами", Контекст.СоставИмениФайлаДанных.Путь);
	
	ОткрытьФорму("ОбщаяФорма.ОтчетОСохраненииФайловЭлектронныхПодписей", ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("СохранитьДанныеВместеСПодписьюПослеЗакрытияОтчета", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью.
Процедура СохранитьДанныеВместеСПодписьюПослеЗакрытияОтчета(Результат, Контекст) Экспорт
	
	Если Контекст.ОбработкаРезультата <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаРезультата, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОткрытьИнструкциюПоРаботеСПрограммами() Экспорт
	
	Раздел = "БухгалтерскийИНалоговыйУчет";
	ЭлектроннаяПодписьКлиентПереопределяемый.ПриОпределенииРазделаСтатьиНаИТС(Раздел);
	
	Если Раздел = "УчетВГосударственныхУчреждениях" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/bmk/bud/digsig");
	Иначе
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/bmk/comm/digsig");
	КонецЕсли;
	
КонецПроцедуры

// Показывает диалог установки расширения для работы с электронной подписью и шифрованием.
//
// Параметры:
//   БезВопроса           - Булево - если указано Истина, тогда вопроса показано не будет.
//                                   Требуется, если пользователь нажал на кнопку Установить расширение.
//
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ТекстВопроса         - Строка - Текст вопроса.
//   ЗаголовокВопроса     - Строка - Заголовок вопроса.
//
// Значение первого параметра, возвращаемого в обработчик вызывающего кода:
//   РасширениеУстановлено
//       * Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
//       * Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
//       * Неопределено - Пользователь отказался от установки.
//
Процедура УстановитьРасширение(БезВопроса, ОбработчикРезультата = Неопределено, ТекстВопроса = "", ЗаголовокВопроса = "") Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",       ОбработчикРезультата);
	Контекст.Вставить("ТекстВопроса",     ТекстВопроса);
	Контекст.Вставить("ЗаголовокВопроса", ЗаголовокВопроса);
	Контекст.Вставить("БезВопроса",       БезВопроса);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"УстановитьРасширениеПослеПроверкиПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьРасширение.
Процедура УстановитьРасширениеПослеПроверкиПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
		Возврат;
	КонецЕсли;
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"УстановитьРасширениеПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьРасширение.
Процедура УстановитьРасширениеПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	Если Подключено Тогда
		Если Контекст.Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеОтвета", ЭтотОбъект, Контекст);
	
	Если Контекст.БезВопроса Тогда
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокВопроса", Контекст.ЗаголовокВопроса);
	ПараметрыФормы.Вставить("ТекстВопроса",     Контекст.ТекстВопроса);
	
	ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСКриптографией",
		ПараметрыФормы,,,,, Обработчик);
	
КонецПроцедуры

// Продолжение процедуры УстановитьРасширение.
Процедура УстановитьРасширениеПослеОтвета(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
			"УстановитьРасширениеПослеУстановкиРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	Иначе
		Если Контекст.Оповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УстановитьРасширение.
Процедура УстановитьРасширениеПослеУстановкиРасширенияРаботыСКриптографией(Контекст) Экспорт
	
	НачатьПодключениеРасширенияРаботыСКриптографией(Новый ОписаниеОповещения(
		"УстановитьРасширениеПослеПодключенияУстановленногоРасширенияРаботыСКриптографией", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры УстановитьРасширение.
Процедура УстановитьРасширениеПослеПодключенияУстановленногоРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	Если Подключено Тогда
		Оповестить("Установка_РасширениеРаботыСКриптографией");
	КонецЕсли;
	
	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Подключено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции управляемых форм.

// Только для внутреннего использования.
Процедура ПродолжитьОткрытиеНачало(Оповещение, Форма, КлиентскиеПараметры, Шифрование = Ложь, Расшифровка = Ложь) Экспорт
	
	Если Не Шифрование Тогда
		ВходныеПараметры = Неопределено;
		КлиентскиеПараметры.ОписаниеДанных.Свойство("ПараметрыДополнительныхДействий", ВходныеПараметры);
		ВыходныеПараметры = Форма.ВыходныеПараметрыДополнительныхДействий;
		Форма.ВыходныеПараметрыДополнительныхДействий = Неопределено;
		ЭлектроннаяПодписьКлиентПереопределяемый.ПередНачаломОперации(
			?(Расшифровка, "Расшифровка", "Подписание"), ВходныеПараметры, ВыходныеПараметры);
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("ОшибкаНаСервере", Новый Структура);
	
	Если ЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере() Тогда
		Если Не ЗначениеЗаполнено(Форма.МенеджерКриптографииНаСервереОписаниеОшибки) Тогда
			ВыполнитьОбработкуОповещения(Оповещение, Истина);
			Возврат;
		КонецЕсли;
		Контекст.ОшибкаНаСервере = Форма.МенеджерКриптографииНаСервереОписаниеОшибки;
	КонецЕсли;
	
	СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПродолжитьОткрытиеНачалоПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"ПолучениеСертификатов", Неопределено);
	
КонецПроцедуры

// Продолжение процедуры ПродолжитьОткрытиеНачало.
Процедура ПродолжитьОткрытиеНачалоПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") И Не ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		
		ПоказатьОшибкуОбращенияКПрограмме(
			НСтр("ru = 'Требуется программа электронной подписи и шифрования'"),
			"", Результат, Контекст.ОшибкаНаСервере);
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Истина);
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура ПолучитьОтпечаткиСертификатовНаКлиенте(Оповещение) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение", Оповещение);
	
	СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
			"ПолучитьОтпечаткиСертификатовНаКлиентеПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
		"ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьОтпечаткиСертификатовНаКлиенте.
Процедура ПолучитьОтпечаткиСертификатовНаКлиентеПослеСозданияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Новый Массив);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		Новый ОписаниеОповещения(
			"ПолучитьОтпечаткиСертификатовНаКлиентеПослеПолученияХранилища", ЭтотОбъект, Контекст),
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьОтпечаткиСертификатовНаКлиенте.
Процедура ПолучитьОтпечаткиСертификатовНаКлиентеПослеПолученияХранилища(ХранилищеСертификатовКриптографии, Контекст) Экспорт
	
	ХранилищеСертификатовКриптографии.НачатьПолучениеВсех(Новый ОписаниеОповещения(
		"ПолучитьОтпечаткиСертификатовНаКлиентеПослеПолученияВсех", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПолучитьОтпечаткиСертификатовНаКлиенте.
Процедура ПолучитьОтпечаткиСертификатовНаКлиентеПослеПолученияВсех(МассивСертификатов, Контекст) Экспорт
	
	ОтпечаткиСертификатовНаКлиенте = Новый Массив;
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.ДобавитьОтпечаткиСертификатов(ОтпечаткиСертификатовНаКлиенте,
		МассивСертификатов, ДобавкаВремени(), ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ОтпечаткиСертификатовНаКлиенте);
	
КонецПроцедуры


// Только для внутреннего использования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - .
//
Процедура ОбработатьПарольВФорме(Форма, ВнутренниеДанные, СвойстваПароля, ДополнительныеПараметры = Неопределено, НовыйПароль = Null) Экспорт
	
	Если ТипЗнч(СвойстваПароля) <> Тип("Структура") Тогда
		СвойстваПароля = Новый Структура;
		СвойстваПароля.Вставить("Значение", Неопределено);
		СвойстваПароля.Вставить("ОбработкаПоясненияПароля", Неопределено);
		// Свойство ПарольПроверен разрешает запоминание без проверки.
		// Включается когда указан НовыйПароль и при успешном выполнении операции. 
		СвойстваПароля.Вставить("ПарольПроверен", Ложь);
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Сертификат", Форма.Сертификат);
	ДополнительныеПараметры.Вставить("УсиленнаяЗащитаЗакрытогоКлюча",
		Форма.СертификатУсиленнаяЗащитаЗакрытогоКлюча);
	
	Если Не ДополнительныеПараметры.Свойство("ПриУстановкеПароляИзДругойОперации") Тогда
		ДополнительныеПараметры.Вставить("ПриУстановкеПароляИзДругойОперации", Ложь);
	КонецЕсли;

	Если Не ДополнительныеПараметры.Свойство("ПриИзмененииРеквизитаПароль") Тогда
		ДополнительныеПараметры.Вставить("ПриИзмененииРеквизитаПароль", Ложь);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ПриИзмененииРеквизитаЗапомнитьПароль") Тогда
		ДополнительныеПараметры.Вставить("ПриИзмененииРеквизитаЗапомнитьПароль", Ложь);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ПриУспешномВыполненииОперации") Тогда
		ДополнительныеПараметры.Вставить("ПриУспешномВыполненииОперации", Ложь);
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ПриИзмененииСвойствСертификата") Тогда
		ДополнительныеПараметры.Вставить("ПриИзмененииСвойствСертификата", Ложь);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
	ДополнительныеПараметры.Вставить("ПарольУстановленПрограммно", Ложь);
	ДополнительныеПараметры.Вставить("ПояснениеПароля");
	
	ОбработатьПароль(ВнутренниеДанные, Форма.Пароль, СвойстваПароля, Форма.ЗапомнитьПароль,
		ДополнительныеПараметры, НовыйПароль);
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти("Страницы") = Неопределено
	 Или Элементы.Найти("СтраницаПояснениеУсиленногоПароля") = Неопределено
	 Или Элементы.Найти("СтраницаЗапоминаниеПароля") = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеСвойства = Новый Структура("ВыполнятьВМоделиСервиса", Ложь);
	ЗаполнитьЗначенияСвойств(ТекущиеСвойства, Форма);
	
	ЭлементПароль = Элементы.Пароль; // ПолеФормы
	Если ТекущиеСвойства.ВыполнятьВМоделиСервиса
	   И ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		
		ЭлементПароль.Доступность = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПояснениеУсиленногоПароля;
		Элементы.ПояснениеУсиленногоПароля.Подсказка =
			НСтр("ru = 'Облачный сервис вышлет одноразовый пароль по SMS или E-Mail,
			           |который нужно будет ввести после получения.'");
		
	ИначеЕсли ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча Тогда
		ЭлементПароль.Доступность = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПояснениеУсиленногоПароля;
		Элементы.ПояснениеУсиленногоПароля.Подсказка =
			НСтр("ru = 'Пароль запрашивает программа электронной подписи, а не программа 1С:Предприятие,
			           |так как для выбранного сертификата указана усиленная защита закрытого ключа.'");
	Иначе
		Если ДополнительныеПараметры.ПарольУстановленПрограммно Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПояснениеУстановленногоПароля;
			ПояснениеПароля = ДополнительныеПараметры.ПояснениеПароля;
			
			
			Элементы.ПояснениеУстановленногоПароля.Заголовок   = ПояснениеПароля.ТекстПояснения;
			Элементы.ПояснениеУстановленногоПароля.Гиперссылка = ПояснениеПароля.ПояснениеГиперссылка;
			
			ЭлементПояснениеУстановленногоПароляРасширеннаяПодсказка = Элементы.ПояснениеУстановленногоПароляРасширеннаяПодсказка; // ПолеФормы
			ЭлементПояснениеУстановленногоПароляРасширеннаяПодсказка.Заголовок = ПояснениеПароля.ТекстПодсказки;
			СвойстваПароля.ОбработкаПоясненияПароля = ПояснениеПароля.ОбработкаДействия;
			ЭлементПароль.Доступность = Истина;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗапоминаниеПароля;
			ЭлементПароль.Доступность = Не ДополнительныеПараметры.ПарольВПамяти;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПарольУказан",
		    ДополнительныеПараметры.ПарольУстановленПрограммно
		Или ДополнительныеПараметры.ПарольВПамяти
		Или ДополнительныеПараметры.ПриУстановкеПароляИзДругойОперации);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПояснениеУстановленногоПароляНажатие(Форма, Элемент, СвойстваПароля) Экспорт
	
	Если ТипЗнч(СвойстваПароля.ОбработкаПоясненияПароля) = Тип("ОписаниеОповещения") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Сертификат", Форма.Сертификат);
		Результат.Вставить("Действие", "ПояснениеНажатие");
		ВыполнитьОбработкуОповещения(СвойстваПароля.ОбработкаПоясненияПароля, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПояснениеУстановленногоПароляОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылка,
			СтандартнаяОбработка, СвойстваПароля) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(СвойстваПароля.ОбработкаПоясненияПароля) = Тип("ОписаниеОповещения") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Сертификат", Форма.Сертификат);
		Результат.Вставить("Действие", НавигационнаяСсылка);
		ВыполнитьОбработкуОповещения(СвойстваПароля.ОбработкаПоясненияПароля, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПредставлениеДанныхНажатие(Форма, Элемент, СтандартнаяОбработка, ТекущийСписокПредставлений) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущийСписокПредставлений.Количество() > 1 Тогда
		СписокПредставленийДанных = Новый Массив;
		Для Каждого ЭлементСписка Из ТекущийСписокПредставлений Цикл
			СписокПредставленийДанных.Добавить(ЭлементСписка.Представление);
		КонецЦикла;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокПредставленийДанных", СписокПредставленийДанных);
		ПараметрыФормы.Вставить("ПредставлениеДанных", Форма.ПредставлениеДанных);
		НоваяФорма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПросмотрДанных",
			ПараметрыФормы, Элемент);
		Если НоваяФорма = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НоваяФорма.УстановитьСписокПредставлений(ТекущийСписокПредставлений, Неопределено);
	Иначе
		Значение = ТекущийСписокПредставлений[0].Значение;
		Если ТипЗнч(Значение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(Значение);
		Иначе
			ПоказатьЗначение(, Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - .
//
Функция ПолноеПредставлениеДанных(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ЭлементПредставлениеДанных = Элементы.ПредставлениеДанных; // ПолеФормы
	Если Элементы.ПредставлениеДанных.ПоложениеЗаголовка <> ПоложениеЗаголовкаЭлементаФормы.Нет
	   И ЗначениеЗаполнено(ЭлементПредставлениеДанных.Заголовок) Тогда
	
		Возврат ЭлементПредставлениеДанных.Заголовок + ": " + Форма.ПредставлениеДанных;
	Иначе
		Возврат Форма.ПредставлениеДанных;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования.
Процедура СертификатПодборИзСпискаВыбора(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст = "" И Форма.СертификатСписокВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для каждого ЭлементСписка Из Форма.СертификатСписокВыбора Цикл
		Если СтрНайти(ВРег(ЭлементСписка.Представление), ВРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Только для внутреннего использования.
Процедура ВыполнитьНаСтороне(Оповещение, Операция, СторонаВыполнения, ПараметрыВыполнения) Экспорт
	
	Контекст = Новый Структура("ОписаниеДанных, Форма, ИдентификаторФормы, ЗначениеПароля,
		|СертификатВерен, СертификатАдрес, ТекущийСписокПредставлений, ПолноеПредставлениеДанных");
	
	ЗаполнитьЗначенияСвойств(Контекст, ПараметрыВыполнения);
	
	Контекст.Вставить("Оповещение",       Оповещение);
	Контекст.Вставить("Операция",         Операция); // Подписание, Шифрование, Расшифровка.
	Контекст.Вставить("НаСторонеКлиента", СторонаВыполнения = "НаСторонеКлиента");
	
	Если Контекст.НаСторонеКлиента Тогда
		Если Контекст.Операция = "Шифрование" И ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
			Контекст.Вставить("МенеджерКриптографии", "СервисКриптографии");
			ВыполнитьНаСторонеВМоделиСервиса(Null, Контекст);
		ИначеЕсли (Контекст.Операция = "Расшифровка" Или Контекст.Операция = "Подписание")
			И ИспользоватьЭлектроннуюПодписьВМоделиСервиса()
			И Контекст.Форма.ВыполнятьВМоделиСервиса Тогда
				Контекст.Вставить("МенеджерКриптографии", "СервисКриптографии");
				ВыполнитьНаСторонеВМоделиСервиса(Null, Контекст);
		Иначе
			СоздатьМенеджерКриптографии(Новый ОписаниеОповещения(
					"ВыполнитьНаСторонеПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст),
				Null, Неопределено, Контекст.Форма.СертификатПрограмма, Контекст.Форма.СертификатУсиленнаяЗащитаЗакрытогоКлюча);
		КонецЕсли;
	Иначе
		ВыполнитьНаСторонеЦиклЗапуск(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Новый Структура("Ошибка", Результат));
		Возврат;
	КонецЕсли;
	Контекст.Вставить("МенеджерКриптографии", Результат);
	
	// Если личный сертификат шифрования не используется, тогда его не нужно искать.
	Если Контекст.Операция <> "Шифрование"
	 Или ЗначениеЗаполнено(Контекст.Форма.СертификатОтпечаток) Тогда
		
		ПолучитьСертификатПоОтпечатку(Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеПослеПоискаСертификата", ЭтотОбъект, Контекст),
			Контекст.Форма.СертификатОтпечаток, Истина, Неопределено, Контекст.Форма.СертификатПрограмма);
	Иначе
		ВыполнитьНаСторонеПослеПоискаСертификата(Null, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
//
// Параметры:
//   Контекст - Структура - со свойствами:
//     * СертификатКриптографии - СертификатКриптографии - .
//
Процедура ВыполнитьНаСторонеПослеПоискаСертификата(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СертификатКриптографии") И Результат <> Null Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Новый Структура("Ошибка", Результат));
		Возврат;
	КонецЕсли;
	Контекст.Вставить("СертификатКриптографии", Результат);
	
	Если Контекст.Операция = "Подписание" Тогда
		Если Не ИспользуетсяИнтерактивныйРежимКриптографии(Контекст.МенеджерКриптографии) Тогда
			Контекст.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Контекст.ЗначениеПароля;
		КонецЕсли;
		Контекст.Удалить("ЗначениеПароля");
		Контекст.СертификатКриптографии.НачатьВыгрузку(Новый ОписаниеОповещения(
			"ВыполнитьНаСторонеПослеВыгрузкиСертификата", ЭтотОбъект, Контекст));
		
	ИначеЕсли Контекст.Операция = "Шифрование" Тогда
		СвойстваСертификатов = Контекст.ОписаниеДанных.СертификатыШифрования;
		Если ТипЗнч(СвойстваСертификатов) = Тип("Строка") Тогда
			СвойстваСертификатов = ПолучитьИзВременногоХранилища(СвойстваСертификатов);
		КонецЕсли;
		Контекст.Вставить("Индекс", -1);
		Контекст.Вставить("СвойстваСертификатов", СвойстваСертификатов);
		Контекст.Вставить("СертификатыШифрования", Новый Массив);
		ВыполнитьНаСторонеПодготовкаСертификатовЦиклНачало(Контекст);
		Возврат;
	Иначе
		Если Не ИспользуетсяИнтерактивныйРежимКриптографии(Контекст.МенеджерКриптографии) Тогда
			Контекст.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Контекст.ЗначениеПароля;
		КонецЕсли;
		Контекст.Удалить("ЗначениеПароля");
		ВыполнитьНаСторонеЦиклЗапуск(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
//
// Параметры:
//   Контекст - Структура - .
//
Процедура ВыполнитьНаСторонеПодготовкаСертификатовЦиклНачало(Контекст)
	
	Если Контекст.СвойстваСертификатов.Количество() <= Контекст.Индекс + 1 Тогда
		ВыполнитьНаСторонеЦиклЗапуск(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	
	СертификатКриптографии = Новый СертификатКриптографии;
	СертификатКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
			"ВыполнитьНаСторонеПодготовкаСертификатовПослеИнициализацииСертификата", ЭтотОбъект, Контекст),
		Контекст.СвойстваСертификатов[Контекст.Индекс].Сертификат);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
//
// Параметры:
//   Контекст - Структура - со свойствами:
//     * СертификатыШифрования - Массив - .
//
Процедура ВыполнитьНаСторонеПодготовкаСертификатовПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт
	
	Контекст.СертификатыШифрования.Добавить(СертификатКриптографии);
	
	ВыполнитьНаСторонеПодготовкаСертификатовЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеПослеВыгрузкиСертификата(ВыгруженныеДанные, Контекст) Экспорт
	
	Контекст.Вставить("СвойстваСертификата", ЭлектроннаяПодписьКлиент.СвойстваСертификата(
		Контекст.СертификатКриптографии));
	Контекст.СвойстваСертификата.Вставить("ДвоичныеДанные", ВыгруженныеДанные);
	
	ВыполнитьНаСторонеЦиклЗапуск(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклЗапуск(Контекст)
	
	Контекст.Вставить("ОперацияНачалась", Ложь);
	
	Если Контекст.ОписаниеДанных.Свойство("Данные") Тогда
		ЭлементыДанных = Новый Массив;
		ЭлементыДанных.Добавить(Контекст.ОписаниеДанных);
	Иначе
		ЭлементыДанных = Контекст.ОписаниеДанных.НаборДанных;
	КонецЕсли;
	
	Контекст.Вставить("ЭлементыДанных", ЭлементыДанных);
	Контекст.Вставить("Индекс", -1);
	
	ВыполнитьНаСторонеЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклНачало(Контекст)
	
	Если Контекст.ЭлементыДанных.Количество() <= Контекст.Индекс + 1 Тогда
		ВыполнитьНаСторонеПослеЦикла(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("ЭлементДанных", Контекст.ЭлементыДанных[Контекст.Индекс]);
	
	Если Не Контекст.ОписаниеДанных.Свойство("Данные") Тогда
		Контекст.ОписаниеДанных.Вставить("ТекущийЭлементНабораДанных", Контекст.ЭлементДанных);
	КонецЕсли;
	
	Если Контекст.Операция = "Подписание"
	   И Контекст.ЭлементДанных.Свойство("СвойстваПодписи")
	 Или Контекст.Операция = "Шифрование"
	   И Контекст.ЭлементДанных.Свойство("ЗашифрованныеДанные")
	 Или Контекст.Операция = "Расшифровка"
	   И Контекст.ЭлементДанных.Свойство("РасшифрованныеДанные") Тогда
		
		ВыполнитьНаСторонеЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеИзОписанияДанных(Новый ОписаниеОповещения(
			"ВыполнитьНаСторонеЦиклПослеПолученияДанных", ЭтотОбъект, Контекст),
		Контекст.Форма, Контекст.ОписаниеДанных, Контекст.ЭлементДанных.Данные, Контекст.НаСторонеКлиента);
	
КонецПроцедуры


// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеОперацииНаКлиентеXMLDSig(КонвертSOAP, Контекст) Экспорт
	
	Контекст.ОперацияНачалась = Истина;
	
	СвойстваПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваПодписи(КонвертSOAP,
		Контекст.СвойстваСертификата,
		Контекст.Форма.Комментарий,
		ПользователиКлиент.АвторизованныйПользователь());
	
	Если Контекст.СертификатВерен <> Неопределено Тогда
		СвойстваПодписи.ДатаПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
		СвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПодписи;
		СвойстваПодписи.ПодписьВерна = Контекст.СертификатВерен;
	КонецЕсли;
	
	ВыполнитьНаСторонеЦиклПослеПодписания(СвойстваПодписи, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеОшибкиОперацииНаКлиентеXMLDSig(ТекстОшибки, Контекст) Экспорт
	
	ОшибкаНаКлиенте = Новый Структура("ОписаниеОшибки", ТекстОшибки);
	ОшибкаНаКлиенте.Вставить("Инструкция", Истина);
	
	ВыполнитьНаСторонеПослеЦикла(ОшибкаНаКлиенте, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеПолученияДанных(Результат, Контекст) Экспорт
	
	ЭтоXMLDSig = (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ПараметрыXMLDSig"));
	ЭтоCMS     = (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ПараметрыCMS"));
	
	Если ТипЗнч(Результат) = Тип("Структура")
	   И Не ЭтоXMLDSig
	   И Не ЭтоCMS Тогда
		
		Ошибка = Новый Структура("ОписаниеОшибки",
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗаголовокОшибкиПолученияДанных(Контекст.Операция)
			+ Символы.ПС + Результат.ОписаниеОшибки);
		ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
		Возврат;
	КонецЕсли;
	Данные = Результат;
	
	Если Контекст.НаСторонеКлиента Тогда
		МенеджерКриптографии = Контекст.МенеджерКриптографии;
		
		Если ЭтоXMLDSig Тогда
			
			Если Контекст.Операция <> "Подписание" Тогда
				Ошибка = Новый Структура("ОписаниеОшибки",
					ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗаголовокОшибкиПолученияДанных(Контекст.Операция)
					+ Символы.ПС + НСтр("ru = 'Внешняя компонента XMLDSig может использоваться только для подписания.'"));
				ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
				Возврат;
			КонецЕсли;
			
			ОповещениеУспех = Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеЦиклПослеОперацииНаКлиентеXMLDSig", ЭтотОбъект, Контекст);
			
			ОповещениеОшибка = Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеЦиклПослеОшибкиОперацииНаКлиентеXMLDSig", ЭтотОбъект, Контекст);
			
			Оповещения = Новый Структура;
			Оповещения.Вставить("Успех", ОповещениеУспех);
			Оповещения.Вставить("Ошибка", ОповещениеОшибка);
			
			НачатьВыгрузкуСертификатаКриптографииДляПодписанияXMLDSig(
				Оповещения,
				Результат.КонвертSOAP,
				Результат.ПараметрыXMLDSig,
				Контекст.СертификатКриптографии,
				Контекст.МенеджерКриптографии);
		
		ИначеЕсли ЭтоCMS Тогда
			Если Контекст.Операция <> "Подписание" Тогда
				Ошибка = Новый Структура("ОписаниеОшибки",
					ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗаголовокОшибкиПолученияДанных(Контекст.Операция)
					+ Символы.ПС + НСтр("ru = 'Внешняя компонента XMLDSig может использоваться только для подписания.'"));
				ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
				Возврат;
			КонецЕсли;
			
			ОповещениеУспех = Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеЦиклПослеОперацииНаКлиентеXMLDSig", ЭтотОбъект, Контекст);
			
			ОповещениеОшибка = Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеЦиклПослеОшибкиОперацииНаКлиентеXMLDSig", ЭтотОбъект, Контекст);
			
			Оповещения = Новый Структура;
			Оповещения.Вставить("Успех", ОповещениеУспех);
			Оповещения.Вставить("Ошибка", ОповещениеОшибка);
			
			НачатьВыгрузкуСертификатаКриптографииДляПодписанияCMS(
				Оповещения,
				Результат.Данные,
				Результат.ПараметрыCMS,
				Контекст.СертификатКриптографии,
				Контекст.МенеджерКриптографии);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеЦиклПослеОперацииНаКлиенте", ЭтотОбъект, Контекст,
				"ВыполнитьНаСторонеЦиклПослеОшибкиОперацииНаКлиенте", ЭтотОбъект);
			
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("Операция", Контекст.ОписаниеДанных.Операция);
			ПараметрыОперации.Вставить("ЗаголовокДанных", Контекст.ОписаниеДанных.ЗаголовокДанных);
			
			Если Контекст.Операция = "Подписание" Тогда
				
				Если МенеджерКриптографии = "СервисКриптографии" Тогда
					СертификатДляПодписи = ПолучитьИзВременногоХранилища(Контекст.ОписаниеДанных.ВыбранныйСертификат.Данные);
					МодульСервисКриптографииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииКлиент");
					МодульСервисКриптографииКлиент.Подписать(Оповещение, Данные, СертификатДляПодписи, , ПараметрыОперации);
				Иначе
					МенеджерКриптографии.НачатьПодписывание(Оповещение, Данные, Контекст.СертификатКриптографии);
				КонецЕсли;
				
			ИначеЕсли Контекст.Операция = "Шифрование" Тогда
				
				Если МенеджерКриптографии = "СервисКриптографии" Тогда
					МодульСервисКриптографииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииКлиент");
					МодульСервисКриптографииКлиент.Зашифровать(Оповещение, Данные, Контекст.СертификатыШифрования, , ПараметрыОперации);
				Иначе
					МенеджерКриптографии.НачатьШифрование(Оповещение, Данные, Контекст.СертификатыШифрования);
				КонецЕсли;
				
			Иначе
				
				Если МенеджерКриптографии = "СервисКриптографии" Тогда
					МодульСервисКриптографииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииКлиент");
					МодульСервисКриптографииКлиент.Расшифровать(Оповещение, Данные, , ПараметрыОперации);
				Иначе
					МенеджерКриптографии.НачатьРасшифровку(Оповещение, Данные);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементДанныхДляСервера = Новый Структура;
	ЭлементДанныхДляСервера.Вставить("Данные", Данные);
	
	ПараметрыДляСервера = Новый Структура;
	ПараметрыДляСервера.Вставить("Операция", Контекст.Операция);
	ПараметрыДляСервера.Вставить("ИдентификаторФормы",  Контекст.ИдентификаторФормы);
	ПараметрыДляСервера.Вставить("СертификатВерен",     Контекст.СертификатВерен);
	ПараметрыДляСервера.Вставить("СертификатПрограмма", Контекст.Форма.СертификатПрограмма);
	ПараметрыДляСервера.Вставить("СертификатОтпечаток", Контекст.Форма.СертификатОтпечаток);
	ПараметрыДляСервера.Вставить("ЭлементДанныхДляСервера", ЭлементДанныхДляСервера);
	
	ОшибкаНаСервере = Новый Структура;
	АдресРезультата = Неопределено;
	
	Если Контекст.Операция = "Подписание" Тогда
		ПараметрыДляСервера.Вставить("Комментарий",    Контекст.Форма.Комментарий);
		ПараметрыДляСервера.Вставить("ЗначениеПароля", Контекст.ЗначениеПароля);
		
		Если Контекст.ЭлементДанных.Свойство("Объект")
		   И Не ТипЗнч(Контекст.ЭлементДанных.Объект) = Тип("ОписаниеОповещения") Тогда
			
			ЭлементДанныхДляСервера.Вставить("Объект", Контекст.ЭлементДанных.Объект);
			
			Если Контекст.ЭлементДанных.Свойство("ВерсияОбъекта") Тогда
				ЭлементДанныхДляСервера.Свойство("ВерсияОбъекта", Контекст.ЭлементДанных.ВерсияОбъекта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Контекст.Операция = "Шифрование" Тогда
		ПараметрыДляСервера.Вставить("АдресСертификатов", Контекст.ОписаниеДанных.СертификатыШифрования);
	Иначе // Расшифровка.
		ПараметрыДляСервера.Вставить("ЗначениеПароля", Контекст.ЗначениеПароля);
	КонецЕсли;
	
	Успех = ЭлектроннаяПодписьСлужебныйВызовСервера.ВыполнитьНаСторонеСервера(ПараметрыДляСервера,
		АдресРезультата, Контекст.ОперацияНачалась, ОшибкаНаСервере);
	
	Если Не Успех Тогда
		ВыполнитьНаСторонеПослеЦикла(ОшибкаНаСервере, Контекст);
		
	ИначеЕсли Контекст.Операция = "Подписание" Тогда
		ВыполнитьНаСторонеЦиклПослеПодписания(АдресРезультата, Контекст);
		
	ИначеЕсли Контекст.Операция = "Шифрование" Тогда
		ВыполнитьНаСторонеЦиклПослеШифрования(АдресРезультата, Контекст);
	Иначе // Расшифровка.
		ВыполнитьНаСторонеЦиклПослеРасшифровки(АдресРезультата, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеОшибкиОперацииНаКлиенте(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОшибкаНаКлиенте = Новый Структура("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	ОшибкаНаКлиенте.Вставить("Инструкция", Истина);
	
	ВыполнитьНаСторонеПослеЦикла(ОшибкаНаКлиенте, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеОперацииНаКлиенте(ДвоичныеДанные, Контекст) Экспорт
	
	Если Контекст.Свойство("МенеджерКриптографии") И Контекст.МенеджерКриптографии = "СервисКриптографии" Тогда
		
		Если Не ДвоичныеДанные.Выполнено Тогда
			ОшибкаНаКлиенте = Новый Структура("ОписаниеОшибки", ДвоичныеДанные.ИнформацияОбОшибке.Описание);
			ВыполнитьНаСторонеПослеЦикла(ОшибкаНаКлиенте, Контекст);
			Возврат;
		КонецЕсли;
		
		Если Контекст.Операция = "Подписание" Тогда
			ДвоичныеДанные = ДвоичныеДанные.Подпись;
		ИначеЕсли Контекст.Операция = "Шифрование" Тогда
			ДвоичныеДанные = ДвоичныеДанные.ЗашифрованныеДанные;
		Иначе
			ДвоичныеДанные = ДвоичныеДанные.РасшифрованныеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Если Контекст.Операция = "Подписание"
	   И ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(ДвоичныеДанные, ОписаниеОшибки)
	 Или Контекст.Операция = "Шифрование"
	   И ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеЗашифрованныеДанные(ДвоичныеДанные, ОписаниеОшибки) Тогда

		ОшибкаНаКлиенте = Новый Структура("ОписаниеОшибки", ОписаниеОшибки);
		ВыполнитьНаСторонеПослеЦикла(ОшибкаНаКлиенте, Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.ОперацияНачалась = Истина;
	
	Если Контекст.Операция = "Подписание" Тогда
		СвойстваПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваПодписи(ДвоичныеДанные,
			Контекст.СвойстваСертификата,
			Контекст.Форма.Комментарий,
			ПользователиКлиент.АвторизованныйПользователь());
		
		Если Контекст.СертификатВерен <> Неопределено Тогда
			СвойстваПодписи.ДатаПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
			СвойстваПодписи.ДатаПроверкиПодписи = СвойстваПодписи.ДатаПодписи;
			СвойстваПодписи.ПодписьВерна = Контекст.СертификатВерен;
		КонецЕсли;
		ВыполнитьНаСторонеЦиклПослеПодписания(СвойстваПодписи, Контекст);
		
	ИначеЕсли Контекст.Операция = "Шифрование" Тогда
		ВыполнитьНаСторонеЦиклПослеШифрования(ДвоичныеДанные, Контекст);
	Иначе
		ВыполнитьНаСторонеЦиклПослеРасшифровки(ДвоичныеДанные, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеПодписания(СвойстваПодписи, Контекст)
	
	ЭлементДанных = Контекст.ЭлементДанных;
	ЭлементДанных.Вставить("СвойстваПодписи", СвойстваПодписи);
	
	Если Не ЭлементДанных.Свойство("Объект") Тогда
		ЭлектроннаяПодписьСлужебныйВызовСервера.ЗарегистрироватьПодписаниеДанныхВЖурнале(
			СвойстваТекущегоЭлементаДанных(Контекст, СвойстваПодписи));
		ВыполнитьНаСторонеЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных.Объект) <> Тип("ОписаниеОповещения") Тогда
		Если Контекст.НаСторонеКлиента Тогда
			ВерсияОбъекта = Неопределено;
			ЭлементДанных.Свойство("ВерсияОбъекта", ВерсияОбъекта);
			ПредставлениеОшибки = ЭлектроннаяПодписьСлужебныйВызовСервера.ДобавитьПодпись(
				ЭлементДанных.Объект, СвойстваПодписи, Контекст.ИдентификаторФормы, ВерсияОбъекта);
			Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
				ЭлементДанных.Удалить("СвойстваПодписи");
				ОшибкаНаКлиенте = Новый Структура("ОписаниеОшибки", ПредставлениеОшибки);
				ВыполнитьНаСторонеПослеЦикла(ОшибкаНаКлиенте, Контекст);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ОповеститьОбИзменении(ЭлементДанных.Объект);
		ВыполнитьНаСторонеЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебныйВызовСервера.ЗарегистрироватьПодписаниеДанныхВЖурнале(
		СвойстваТекущегоЭлементаДанных(Контекст, СвойстваПодписи));
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеДанных", Контекст.ОписаниеДанных);
	ПараметрыВыполнения.Вставить("Оповещение", Новый ОписаниеОповещения(
		"ВыполнитьНаСторонеЦиклПослеЗаписиПодписи", ЭтотОбъект, Контекст));
	
	Попытка
		ВыполнитьОбработкуОповещения(ЭлементДанных.Объект, ПараметрыВыполнения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВыполнитьНаСторонеЦиклПослеЗаписиПодписи(Новый Структура("ОписаниеОшибки",
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке)), Контекст);
	КонецПопытки;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеЗаписиПодписи(Результат, Контекст) Экспорт
	
	Если Результат.Свойство("ОписаниеОшибки") Тогда
		Контекст.ЭлементДанных.Удалить("СвойстваПодписи");
		Ошибка = Новый Структура("ОписаниеОшибки",
			НСтр("ru = 'При записи подписи возникла ошибка:'") + Символы.ПС + Результат.ОписаниеОшибки);
		ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
		Возврат;
	КонецЕсли;
	
	ВыполнитьНаСторонеЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеШифрования(ЗашифрованныеДанные, Контекст)
	
	ЭлементДанных = Контекст.ЭлементДанных;
	ЭлементДанных.Вставить("ЗашифрованныеДанные", ЗашифрованныеДанные);
	
	Если Не ЭлементДанных.Свойство("РазмещениеРезультата")
	 Или ТипЗнч(ЭлементДанных.РазмещениеРезультата) <> Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьНаСторонеЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеДанных", Контекст.ОписаниеДанных);
	ПараметрыВыполнения.Вставить("Оповещение", Новый ОписаниеОповещения(
		"ВыполнитьНаСторонеЦиклПослеЗаписиЗашифрованныхДанных", ЭтотОбъект, Контекст));
	
	Попытка
		ВыполнитьОбработкуОповещения(ЭлементДанных.РазмещениеРезультата, ПараметрыВыполнения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВыполнитьНаСторонеЦиклПослеЗаписиЗашифрованныхДанных(Новый Структура("ОписаниеОшибки",
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке)), Контекст);
	КонецПопытки;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеЗаписиЗашифрованныхДанных(Результат, Контекст) Экспорт
	
	Если Результат.Свойство("ОписаниеОшибки") Тогда
		Контекст.ЭлементДанных.Удалить("ЗашифрованныеДанные");
		Ошибка = Новый Структура("ОписаниеОшибки",
			НСтр("ru = 'При записи зашифрованных данных возникла ошибка:'")
			+ Символы.ПС + Результат.ОписаниеОшибки);
		ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
		Возврат;
	КонецЕсли;
	
	ВыполнитьНаСторонеЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеРасшифровки(РасшифрованныеДанные, Контекст)
	
	ЭлементДанных = Контекст.ЭлементДанных;
	ЭлементДанных.Вставить("РасшифрованныеДанные", РасшифрованныеДанные);
	
	Если Не ЭлементДанных.Свойство("РазмещениеРезультата")
	 Или ТипЗнч(ЭлементДанных.РазмещениеРезультата) <> Тип("ОписаниеОповещения") Тогда
	
		ВыполнитьНаСторонеЦиклНачало(Контекст);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеДанных", Контекст.ОписаниеДанных);
	ПараметрыВыполнения.Вставить("Оповещение", Новый ОписаниеОповещения(
		"ВыполнитьНаСторонеЦиклПослеЗаписиРасшифрованныхДанных", ЭтотОбъект, Контекст));
	
	Попытка
		ВыполнитьОбработкуОповещения(ЭлементДанных.РазмещениеРезультата, ПараметрыВыполнения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВыполнитьНаСторонеЦиклПослеЗаписиЗашифрованныхДанных(Новый Структура("ОписаниеОшибки",
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке)), Контекст);
	КонецПопытки;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеЦиклПослеЗаписиРасшифрованныхДанных(Результат, Контекст) Экспорт
	
	Если Результат.Свойство("ОписаниеОшибки") Тогда
		Контекст.ЭлементДанных.Удалить("РасшифрованныеДанные");
		Ошибка = Новый Структура("ОписаниеОшибки",
			НСтр("ru = 'При записи расшифрованных данных возникла ошибка:'")
			+ Символы.ПС + Результат.ОписаниеОшибки);
		ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
		Возврат;
	КонецЕсли;
	
	ВыполнитьНаСторонеЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст)
	
	Результат = Новый Структура;
	Если Ошибка <> Неопределено Тогда
		Результат.Вставить("Ошибка", Ошибка);
	КонецЕсли;
	
	Если Контекст.ОперацияНачалась Тогда
		Результат.Вставить("ОперацияНачалась");
		
		Если Не Результат.Свойство("Ошибка") И Контекст.Индекс > 0 Тогда
			Результат.Вставить("ЕстьОбработанныеЭлементыДанных");
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры


// Только для внутреннего использования.
Функция СвойстваТекущегоЭлементаДанных(ПараметрыВыполнения, СвойстваПодписи = Неопределено) Экспорт
	
	Если ПараметрыВыполнения.ОписаниеДанных.Свойство("Данные")
	 Или Не ПараметрыВыполнения.ОписаниеДанных.Свойство("ТекущийЭлементНабораДанных") Тогда
		
		ПредставлениеЭлементаДанных = ПараметрыВыполнения.ТекущийСписокПредставлений[0].Значение;
	Иначе
		ПредставлениеЭлементаДанных = ПараметрыВыполнения.ТекущийСписокПредставлений[
			ПараметрыВыполнения.ОписаниеДанных.НаборДанных.Найти(
				ПараметрыВыполнения.ОписаниеДанных.ТекущийЭлементНабораДанных)].Значение;
	КонецЕсли;
	
	Если ТипЗнч(ПредставлениеЭлементаДанных) = Тип("ОписаниеОповещения") Тогда
		ПредставлениеЭлементаДанных = ПараметрыВыполнения.ПолноеПредставлениеДанных;
	КонецЕсли;
	
	Если СвойстваПодписи = Неопределено Тогда
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Сертификат",  ПараметрыВыполнения.СертификатАдрес);
		СвойстваПодписи.Вставить("ДатаПодписи", '00010101');
	КонецЕсли;
	
	СвойстваЭлементаДанных = Новый Структура;
	
	СвойстваЭлементаДанных.Вставить("СвойстваПодписи",     СвойстваПодписи);
	СвойстваЭлементаДанных.Вставить("ПредставлениеДанных", ПредставлениеЭлементаДанных);
	
	Возврат СвойстваЭлементаДанных;
	
КонецФункции

// Только для внутреннего использования.
Процедура ПолучитьДанныеИзОписанияДанных(Оповещение, Форма, ОписаниеДанных, ИсточникДанных, ДляСтороныКлиента) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("Оповещение", Оповещение);
	Контекст.Вставить("ДляСтороныКлиента", ДляСтороныКлиента);
	
	Если ТипЗнч(ИсточникДанных) = Тип("ОписаниеОповещения") Тогда
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОписаниеДанных", ОписаниеДанных);
		ПараметрыВыполнения.Вставить("Оповещение",  Новый ОписаниеОповещения(
			"ПолучитьДанныеИзОписанияДанныхПродолжение", ЭтотОбъект, Контекст));
		
		Попытка
			ВыполнитьОбработкуОповещения(ИсточникДанных, ПараметрыВыполнения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = Новый Структура("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			ПолучитьДанныеИзОписанияДанныхПродолжение(Результат, Контекст);
		КонецПопытки;
	Иначе
		ПолучитьДанныеИзОписанияДанныхПродолжение(Новый Структура("Данные", ИсточникДанных), Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПолучитьДанныеИзОписанияДанных.
Процедура ПолучитьДанныеИзОписанияДанныхПродолжение(Результат, Контекст) Экспорт
	
	ЭтоXMLDSig = (ТипЗнч(Результат) = Тип("Структура")
	            И Результат.Свойство("Данные")
	            И ТипЗнч(Результат.Данные) = Тип("Структура")
	            И Результат.Данные.Свойство("ПараметрыXMLDSig"));
	
	ЭтоCMS = (ТипЗнч(Результат) = Тип("Структура")
	       И Результат.Свойство("Данные")
	       И ТипЗнч(Результат.Данные) = Тип("Структура")
	       И Результат.Данные.Свойство("ПараметрыCMS"));
	
	Если ТипЗнч(Результат) <> Тип("Структура")
	 Или Не Результат.Свойство("Данные")
	 Или ТипЗнч(Результат.Данные) <> Тип("ДвоичныеДанные")
	   И ТипЗнч(Результат.Данные) <> Тип("Строка")
	   И Не ЭтоXMLDSig
	   И Не ЭтоCMS Тогда
		
		Если ТипЗнч(Результат) <> Тип("Структура") Или Не Результат.Свойство("ОписаниеОшибки") Тогда
			Ошибка = Новый Структура("ОписаниеОшибки", НСтр("ru = 'Некорректный тип данных.'"));
		Иначе
			Ошибка = Новый Структура("ОписаниеОшибки", Результат.ОписаниеОшибки);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Ошибка);
		Возврат;
	КонецЕсли;
	
	Данные = Результат.Данные;
	
	Если Контекст.ДляСтороныКлиента Тогда
		// Для стороны клиента требуются двоичные данные или путь к файлу.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные")
		 Или ЭтоXMLDSig
		 Или ЭтоCMS Тогда
			
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Данные);
			
		ИначеЕсли ЭтоАдресВременногоХранилища(Данные) Тогда
			Попытка
				ТекущийРезультат = ПолучитьИзВременногоХранилища(Данные);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекущийРезультат = Новый Структура("ОписаниеОшибки",
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, ТекущийРезультат);
			
		Иначе // Путь к файлу
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Данные);
		КонецЕсли;
	Иначе
		// Для стороны сервера требуется адрес двоичных данных во временном хранилище.
		
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные")
		 Или ЭтоXMLDSig
		 Или ЭтоCMS Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение,
				ПоместитьВоВременноеХранилище(Данные, Контекст.Форма.УникальныйИдентификатор));
		
		ИначеЕсли ЭтоАдресВременногоХранилища(Данные) Тогда
			ВыполнитьОбработкуОповещения(Контекст.Оповещение, Данные);
			
		Иначе // Путь к файлу
			Попытка
				ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
				ПараметрыЗагрузки.ИдентификаторФормы = Контекст.Форма.УникальныйИдентификатор;
				ПараметрыЗагрузки.Интерактивно = Ложь;
				ФайловаяСистемаКлиент.ЗагрузитьФайл(Новый ОписаниеОповещения(
					"ПолучитьДанныеИзОписанияДанныхЗавершение", ЭтотОбъект, Контекст,
					"ПолучитьДанныеИзОписанияДанныхЗавершениеПоОшибке", ЭтотОбъект),
					ПараметрыЗагрузки, Данные); 
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекущийРезультат = Новый Структура("ОписаниеОшибки",
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				ВыполнитьОбработкуОповещения(Контекст.Оповещение, ТекущийРезультат);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПолучитьДанныеИзОписанияДанных.
Процедура ПолучитьДанныеИзОписанияДанныхЗавершениеПоОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьДанныеИзОписанияДанных.
Процедура ПолучитьДанныеИзОписанияДанныхЗавершение(ПомещенныеФайлы, Контекст) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Результат = Новый Структура("ОписаниеОшибки",
			НСтр("ru = 'Передача данных отменена пользователем.'"));
	Иначе
		Результат = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПродлитьХранениеКонтекстаОперации(ОписаниеДанных) Экспорт
	
	ФормаПередачаПараметров().ПродлитьХранениеКонтекстаОперации(ОписаниеДанных.КонтекстОперации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с XMLDSig

// Начинает подписание XML сообщения.
//
// Параметры:
//  ОповещенияПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания сообщения.
//  КонвертSOAP - Строка - Шаблон подписываемого сообщения.
//  СертификатКриптографии - СертификатКриптографии - .
//  МенеджерКриптографии - МенеджерКриптографии.
//
Процедура НачатьВыгрузкуСертификатаКриптографииДляПодписанияXMLDSig(ОповещенияПриЗавершении, КонвертSOAP, ДанныеАлгоритмаПодписания, СертификатКриптографии, МенеджерКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Режим",                   "РежимПодписание");
	Контекст.Вставить("ТипПодписи",              "XMLDSig");
	Контекст.Вставить("ОповещенияПриЗавершении", ОповещенияПриЗавершении);
	Контекст.Вставить("УстанавливатьКомпоненту", Истина);
	
	Контекст.Вставить("КонвертSOAP", КонвертSOAP);
	
	Контекст.Вставить("ДанныеАлгоритмаПодписания",    ДанныеАлгоритмаПодписания);
	Контекст.Вставить("СертификатКриптографии",       СертификатКриптографии);
	Контекст.Вставить("СертификатКриптографииBase64", Неопределено);
	Контекст.Вставить("МенеджерКриптографии",         МенеджерКриптографии);
	
	Контекст.Вставить("ТипКриптопровайдера", Неопределено);
	Контекст.Вставить("ИмяКриптопровайдера", Неопределено);
	Контекст.Вставить("ПутьКриптопровайдера", Неопределено);
	
	СертификатКриптографии.НачатьВыгрузку(
		Новый ОписаниеОповещения("НачатьПодписание_ПослеВыгрузкиСертификатаКриптографии", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Начинает подписание XML сообщения.
//
// Параметры:
//  ОповещенияПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания сообщения.
//  КонвертSOAP - Строка - Шаблон подписываемого сообщения.
//  ДанныеАлгоритмаПодписания - Структура со свойствами:
//  МенеджерКриптографии - МенеджерКриптографии.
//
Процедура НачатьИнициализациюСертификатаКриптографииДляПроверкиПодписиXMLDSig(ОповещенияПриЗавершении, КонвертSOAP, ДанныеАлгоритмаПодписания, МенеджерКриптографии)
	
	СертификатКриптографииBase64 = ЭлектроннаяПодписьСлужебныйКлиентСервер.НайтиВXML(КонвертSOAP, "wsse:BinarySecurityToken");
	ДвоичныеДанные = Base64Значение(СертификатКриптографииBase64);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Режим",                   "РежимПроверка");
	Контекст.Вставить("ТипПодписи",              "XMLDSig");
	Контекст.Вставить("ОповещенияПриЗавершении", ОповещенияПриЗавершении);
	Контекст.Вставить("УстанавливатьКомпоненту", Истина);
	
	Контекст.Вставить("КонвертSOAP", КонвертSOAP);
	
	Контекст.Вставить("ДанныеАлгоритмаПодписания", ДанныеАлгоритмаПодписания);
	Контекст.Вставить("СертификатКриптографии",    Новый СертификатКриптографии);
	Контекст.Вставить("СертификатКриптографииBase64", СертификатКриптографииBase64);
	Контекст.Вставить("МенеджерКриптографии",      МенеджерКриптографии);
	
	Контекст.Вставить("ТипКриптопровайдера",  Неопределено);
	Контекст.Вставить("ИмяКриптопровайдера",  Неопределено);
	Контекст.Вставить("ПутьКриптопровайдера", Неопределено);
	
	Контекст.СертификатКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
			"НачатьПроверкуПодписиПослеИнициализацииСертификата", ЭтотОбъект, Контекст),
		ДвоичныеДанные);
	
КонецПроцедуры

// Начинает подписание CMS сообщения.
//
// Параметры:
//  ОповещенияПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания сообщения.
//  КонвертSOAP - Строка - Шаблон подписываемого сообщения.
//  СертификатКриптографии - СертификатКриптографии -.
//  МенеджерКриптографии - МенеджерКриптографии.
//
Процедура НачатьВыгрузкуСертификатаКриптографииДляПодписанияCMS(ОповещенияПриЗавершении, Данные, ПараметрыCMS, СертификатКриптографии, МенеджерКриптографии)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Режим",                   "РежимПодписание");
	Контекст.Вставить("ТипПодписи",              "CMS");
	Контекст.Вставить("ОповещенияПриЗавершении", ОповещенияПриЗавершении);
	Контекст.Вставить("УстанавливатьКомпоненту", Истина);
	
	Контекст.Вставить("Данные", Данные);
	
	Контекст.Вставить("ПараметрыCMS",                 ПараметрыCMS);
	Контекст.Вставить("СертификатКриптографии",       СертификатКриптографии);
	Контекст.Вставить("СертификатКриптографииBase64", Неопределено);
	Контекст.Вставить("МенеджерКриптографии",         МенеджерКриптографии);
	
	Контекст.Вставить("ТипКриптопровайдера", Неопределено);
	Контекст.Вставить("ИмяКриптопровайдера", Неопределено);
	Контекст.Вставить("ПутьКриптопровайдера", Неопределено);
	
	СертификатКриптографии.НачатьВыгрузку(
		Новый ОписаниеОповещения("НачатьПодписаниеCMS_ПослеВыгрузкиСертификатаКриптографии", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Начинает проверку подписи CMS сообщения.
//
// Параметры:
//  ОповещенияПриЗавершении - ОписаниеОповещения - процедура, которая будет вызвана после подписания сообщения.
//  КонвертSOAP - Строка - Шаблон подписываемого сообщения.
//  ДанныеАлгоритмаПодписания - Структура со свойствами:
//  МенеджерКриптографии - МенеджерКриптографии.
//
Процедура НачатьИнициализациюСертификатаКриптографииДляПроверкиПодписиCMS(ОповещенияПриЗавершении, КонвертSOAP, ДанныеАлгоритмаПодписания, МенеджерКриптографии)
	
	ВызватьИсключение НСтр("ru = 'Проверка подписи CMS не поддерживается в компоненте XMLDSig.'");
	
КонецПроцедуры

Процедура НачатьПроверкуПодписиПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт
	
	Контекст.СертификатКриптографии = СертификатКриптографии;
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для подписания XML необходима установка компоненты XMLDSig'");
	
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(
		Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, Контекст),
		"XMLDSignAddIn",
		"Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Макет.КомпонентаXMLDSig",
		ПараметрыПодключения);
	
КонецПроцедуры

Процедура ПослеПодключенияКомпоненты(Результат, Контекст) Экспорт
	
	Если Результат.Подключено Тогда
		Контекст.Вставить("ОбъектКомпоненты", Результат.ПодключаемыйМодуль);
		Контекст.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(
			Новый ОписаниеОповещения("ПослеПолученияИнформацииМодуляКриптографии", ЭтотОбъект, Контекст));
	Иначе
		
		Если ПустаяСтрока(Результат.ОписаниеОшибки) Тогда 
			
			// Пользователь отказался от установки.
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Операция невозможна. Требуется установка компоненты XMLDSig.'"));
				
		Иначе 
			
			// Установка не удалась, описание ошибки в Результат.ОписаниеОшибки.
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Операция невозможна. %1'"), Результат.ОписаниеОшибки));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуляКриптографии, Контекст) Экспорт
	
	ИмяКриптопровайдера = ИнформацияМодуляКриптографии.Имя;
	ОписаниеПрограммы = ЭлектроннаяПодписьСлужебныйКлиентСервер.ОписаниеПрограммыПоИмениКриптопровайдера(
		ИмяКриптопровайдера, ЭлектроннаяПодписьКлиент.ОбщиеНастройки().ОписанияПрограмм);
	
	Если ОписаниеПрограммы = Неопределено Тогда
		ЗавершитьОперациюСОшибкой(Контекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось определить тип криптопровайдера %1'"),
				ИнформацияМодуляКриптографии.Имя));
		Возврат;
	КонецЕсли;
	
	Контекст.ТипКриптопровайдера = ОписаниеПрограммы.ТипПрограммы;
	Контекст.ИмяКриптопровайдера = ИмяКриптопровайдера;
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ПутьКПрограмме = "";
	Иначе
		ПерсональныеНастройки = ЭлектроннаяПодписьКлиент.ПерсональныеНастройки();
		ПутьКПрограмме = ПерсональныеНастройки.ПутиКПрограммамЭлектроннойПодписиИШифрования.Получить(
			ОписаниеПрограммы.Ссылка);
	КонецЕсли;
	Контекст.ПутьКриптопровайдера = ПутьКПрограмме;
	
	Контекст.ОбъектКомпоненты.НачатьУстановкуПутьККриптопровайдеру(
		Новый ОписаниеОповещения("ПослеУстановкиСвойстваКомпонентыПутьККриптопровайдеру", ЭтотОбъект, Контекст),
		Контекст.ПутьКриптопровайдера);
		
КонецПроцедуры

Процедура ПослеУстановкиСвойстваКомпонентыПутьККриптопровайдеру(Контекст) Экспорт
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Контекст.ОбъектКомпоненты.НачатьУстановкуЗапретитьПользовательскийИнтерфейс(
			Новый ОписаниеОповещения("ПослеУстановкиСвойстваЗапретитьПользовательскийИнтерфейс", ЭтотОбъект, Контекст),
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ИнтерактивныйРежимДоступен()
			И Не ИспользуетсяИнтерактивныйРежимКриптографии(Контекст.МенеджерКриптографии));
	Иначе
		ПослеУстановкиСвойстваЗапретитьПользовательскийИнтерфейс(Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеУстановкиСвойстваЗапретитьПользовательскийИнтерфейс(Контекст) Экспорт
	
	Если Контекст.ТипПодписи = "XMLDSig" Тогда
		
		Если Контекст.Режим = "РежимПроверка" Тогда
			НачатьПроверкуПодписиXMLDSig(Контекст);
			
		ИначеЕсли Контекст.Режим = "РежимПодписание" Тогда
			НачатьПодписаниеXMLDSig(Контекст);
		Иначе
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Не установлен режим работы компоненты XMLDSig.'"));
		КонецЕсли;
		
	ИначеЕсли Контекст.ТипПодписи = "CMS" Тогда
		
		Если Контекст.Режим = "РежимПроверка" Тогда
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Проверка подписи CMS не поддерживается в компоненте XMLDSig.'"));
		ИначеЕсли Контекст.Режим = "РежимПодписание" Тогда
			НачатьПодписаниеCMS(Контекст);
		Иначе
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Не установлен режим работы компоненты XMLDSig.'"));
		КонецЕсли;
		
	Иначе
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Не установлен тип подписи компоненты XMLDSig.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодписание_ПослеВыгрузкиСертификатаКриптографии(ДвоичныеДанныеСертификата, Контекст) Экспорт
	
	СертификатКриптографииBase64 = ОтформатироватьСтрокуBase64(Base64Строка(ДвоичныеДанныеСертификата));
	
	Контекст.КонвертSOAP = СтрЗаменить(
		Контекст.КонвертSOAP,
		"%BinarySecurityToken%",
		СертификатКриптографииBase64);
	
	Контекст.СертификатКриптографииBase64 = СертификатКриптографииBase64;
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для подписания XML необходима установка компоненты XMLDSig'");
	
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(
		Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, Контекст),
		"XMLDSignAddIn",
		"Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Макет.КомпонентаXMLDSig",
		ПараметрыПодключения);
	
КонецПроцедуры

Процедура НачатьПодписаниеCMS_ПослеВыгрузкиСертификатаКриптографии(ДвоичныеДанныеСертификата, Контекст) Экспорт
	
	СертификатКриптографииBase64 = ОтформатироватьСтрокуBase64(Base64Строка(ДвоичныеДанныеСертификата));
	
	Контекст.СертификатКриптографииBase64 = СертификатКриптографииBase64;
	
	ПараметрыПодключения = ОбщегоНазначенияКлиент.ПараметрыПодключенияКомпоненты();
	ПараметрыПодключения.ТекстПояснения = НСтр("ru = 'Для подписания CMS необходима установка компоненты XMLDSig'");
	
	ОбщегоНазначенияКлиент.ПодключитьКомпонентуИзМакета(
		Новый ОписаниеОповещения("ПослеПодключенияКомпоненты", ЭтотОбъект, Контекст),
		"XMLDSignAddIn",
		"Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Макет.КомпонентаXMLDSig",
		ПараметрыПодключения);
	
КонецПроцедуры

Процедура НачатьПодписаниеCMS(Контекст)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подписание_ПослеВыполненияCMSSign", ЭтотОбъект, Контекст,
		"Подписание_ПослеВыполненияCMSSign_Ошибка", ЭтотОбъект);
	
	ПараметрыCMSSign = ЭлектроннаяПодписьСлужебныйКлиентСервер.ПараметрыКомпонентыCMSSign(Контекст.ПараметрыCMS, Контекст.Данные);
	
	Попытка
		Контекст.ОбъектКомпоненты.НачатьВызовCMSSign(
			ОписаниеОповещения,
			ПараметрыCMSSign.Данные,
			Контекст.СертификатКриптографииBase64,
			Контекст.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу,
			ПараметрыCMSSign.ТипПодписи,
			ПараметрыCMSSign.Открепленная,
			ПараметрыCMSSign.ВключениеСертификатовВПодпись,
			ПараметрыCMSSign.ТипВходныхДанных);
	Исключение
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода CMSSign компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияCMSSign_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода CMSSign компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияCMSSign(SignatureValue, Параметры, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(SignatureValue) Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода CMSSign произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Успех, Base64Значение(SignatureValue));
	
КонецПроцедуры

Процедура НачатьПодписаниеXMLDSig(Контекст)
	
	Попытка
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подписание_ПослеВыполненияGetSignOIDFromCert", ЭтотОбъект, Контекст,
			"Подписание_ПослеВыполненияGetSignOIDFromCert_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовGetSignOIDFromCert(
			ОписаниеОповещения,
			Контекст.СертификатКриптографииBase64);
	Исключение
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияGetSignOIDFromCert_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияGetSignOIDFromCert(OIDАлгоритмаПодписи, Параметры, Контекст) Экспорт
	
	Если OIDАлгоритмаПодписи = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода GetSignOIDFromCert произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	OIDАлгоритмовПодписи     = СтрРазделить(Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаПодписи,     Символы.ПС);
	OIDАлгоритмовХеширования = СтрРазделить(Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаХеширования, Символы.ПС);
	АлгоритмыПодписи         = СтрРазделить(Контекст.ДанныеАлгоритмаПодписания.АлгоритмПодписи,         Символы.ПС);
	АлгоритмыХеширования     = СтрРазделить(Контекст.ДанныеАлгоритмаПодписания.АлгоритмХеширования,     Символы.ПС);
	
	Контекст.ДанныеАлгоритмаПодписания.Вставить("OIDВыбранногоАлгоритмаПодписи",     Неопределено);
	Контекст.ДанныеАлгоритмаПодписания.Вставить("OIDВыбранногоАлгоритмаХеширования", Неопределено);
	Контекст.ДанныеАлгоритмаПодписания.Вставить("ВыбранныйАлгоритмПодписи",          Неопределено);
	Контекст.ДанныеАлгоритмаПодписания.Вставить("ВыбранныйАлгоритмХеширования",      Неопределено);
	Для Индекс = 0 По OIDАлгоритмовПодписи.Количество() - 1 Цикл
		
		Если OIDАлгоритмаПодписи = OIDАлгоритмовПодписи[Индекс] Тогда
			
			Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаПодписи     = OIDАлгоритмовПодписи[Индекс];
			Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаХеширования = OIDАлгоритмовХеширования[Индекс];
			Контекст.ДанныеАлгоритмаПодписания.ВыбранныйАлгоритмПодписи          = АлгоритмыПодписи[Индекс];
			Контекст.ДанныеАлгоритмаПодписания.ВыбранныйАлгоритмХеширования      = АлгоритмыХеширования[Индекс];
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаПодписи) Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Алгоритм подписи сертификата криптографии отличается от алгоритма %1.'"),
				Контекст.ДанныеАлгоритмаПодписания.ИмяАлгоритмаПодписи));
		
	Иначе
		
		Контекст.КонвертSOAP = СтрЗаменить(Контекст.КонвертSOAP, "%SignatureMethod%", Контекст.ДанныеАлгоритмаПодписания.ВыбранныйАлгоритмПодписи);
		Контекст.КонвертSOAP = СтрЗаменить(Контекст.КонвертSOAP, "%DigestMethod%",    Контекст.ДанныеАлгоритмаПодписания.ВыбранныйАлгоритмХеширования);
		
		Попытка
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"Подписание_ПослеВыполненияC14N_ПодписываемыйТег", ЭтотОбъект, Контекст,
				"Подписание_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка", ЭтотОбъект);
			
			Контекст.ОбъектКомпоненты.НачатьВызовC14N(
				ОписаниеОповещения,
				Контекст.КонвертSOAP,
				Контекст.ДанныеАлгоритмаПодписания.XPathПодписываемыйТег);
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_ПодписываемыйТег(КаноникализированныйТекстXML, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXML = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подписание_ПослеВыполненияHash_ПодписываемыйТег", ЭтотОбъект, Контекст,
			"Подписание_ПослеВыполненияHash_ПодписываемыйТег_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовHash(
			ОписаниеОповещения,
			КаноникализированныйТекстXML,
			Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаХеширования,
			Контекст.ТипКриптопровайдера);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияHash_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияHash_ПодписываемыйТег(DigestValue, Параметры, Контекст) Экспорт
	
	Если DigestValue = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода Hash произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.КонвертSOAP = СтрЗаменить(Контекст.КонвертSOAP, "%DigestValue%", DigestValue);
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Подписание_ПослеВыполненияC14N_SignedInfo", ЭтотОбъект, Контекст,
			"Подписание_ПослеВыполненияC14N_SignedInfo_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовC14N(
			ОписаниеОповещения,
			Контекст.КонвертSOAP,
			Контекст.ДанныеАлгоритмаПодписания.XPathSignedInfo);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_SignedInfo_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияC14N_SignedInfo(КаноникализированныйТекстXMLSignedInfo, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXMLSignedInfo = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Контекст.ОбъектКомпоненты.НачатьВызовSign(
			Новый ОписаниеОповещения("Подписание_ПослеВыполненияSign", ЭтотОбъект, Контекст),
			КаноникализированныйТекстXMLSignedInfo,
			Контекст.СертификатКриптографииBase64,
			Контекст.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Sign компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Подписание_ПослеВыполненияSign(SignatureValue, Параметры, Контекст) Экспорт
	
	Если SignatureValue = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода Sign произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	КонвертSOAP = СтрЗаменить(Контекст.КонвертSOAP, "%SignatureValue%", SignatureValue);
	ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Успех, КонвертSOAP);
	
КонецПроцедуры

Процедура НачатьПроверкуПодписиXMLDSig(Контекст)
	
	Попытка
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Проверка_ПослеВыполненияGetSignOIDFromCert", ЭтотОбъект, Контекст,
			"Проверка_ПослеВыполненияGetSignOIDFromCert_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовGetSignOIDFromCert(
			ОписаниеОповещения,
			Контекст.СертификатКриптографииBase64);
	Исключение
		ЗавершитьОперациюСОшибкой(Контекст,
			НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияGetSignOIDFromCert_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода GetSignOIDFromCert компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияGetSignOIDFromCert(OIDАлгоритмаПодписи, Параметры, Контекст) Экспорт
	
	Если OIDАлгоритмаПодписи = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода GetSignOIDFromCert произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	OIDАлгоритмовПодписи     = СтрРазделить(Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаПодписи, Символы.ПС);
	OIDАлгоритмовХеширования = СтрРазделить(Контекст.ДанныеАлгоритмаПодписания.OIDАлгоритмаХеширования, Символы.ПС);
	
	Контекст.ДанныеАлгоритмаПодписания.Вставить("OIDВыбранногоАлгоритмаПодписи",     Неопределено);
	Контекст.ДанныеАлгоритмаПодписания.Вставить("OIDВыбранногоАлгоритмаХеширования", Неопределено);
	Для Индекс = 0 По OIDАлгоритмовПодписи.Количество() - 1 Цикл
		Если OIDАлгоритмаПодписи = OIDАлгоритмовПодписи[Индекс] Тогда
			Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаПодписи     = OIDАлгоритмовПодписи[Индекс];
			Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаХеширования = OIDАлгоритмовХеширования[Индекс];
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаПодписи) Тогда
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	Иначе
		
		Попытка
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"Проверка_ПослеВыполненияC14N_SignedInfo", ЭтотОбъект, Контекст,
				"Проверка_ПослеВыполненияC14N_SignedInfo_Ошибка", ЭтотОбъект);
			
			Контекст.ОбъектКомпоненты.НачатьВызовC14N(
				ОписаниеОповещения,
				Контекст.КонвертSOAP,
				Контекст.ДанныеАлгоритмаПодписания.XPathSignedInfo);
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_SignedInfo_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_SignedInfo(КаноникализированныйТекстXMLSignedInfo, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXMLSignedInfo = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	SignatureValue               = ЭлектроннаяПодписьСлужебныйКлиентСервер.НайтиВXML(Контекст.КонвертSOAP, "SignatureValue");
	СертификатКриптографииBase64 = ЭлектроннаяПодписьСлужебныйКлиентСервер.НайтиВXML(Контекст.КонвертSOAP, "wsse:BinarySecurityToken");
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Проверка_ПослеВыполненияVerifySign", ЭтотОбъект, Контекст,
			"Проверка_ПослеВыполненияVerifySign_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовVerifySign(
			ОписаниеОповещения,
			КаноникализированныйТекстXMLSignedInfo,
			SignatureValue,
			СертификатКриптографииBase64,
			Контекст.ТипКриптопровайдера);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода VerifySign компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияVerifySign_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода VerifySign компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияVerifySign(ПодписьВерна, Параметры, Контекст) Экспорт
	
	Если ПодписьВерна = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода VerifySign произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Если Не ПодписьВерна Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Подпись не верна (SignatureValue некорректно.'"));
		
	Иначе
		
		Попытка
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"Проверка_ПослеВыполненияC14N_ПодписываемыйТег", ЭтотОбъект, Контекст,
				"Проверка_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка", ЭтотОбъект);
			
			Контекст.ОбъектКомпоненты.НачатьВызовC14N(
				ОписаниеОповещения,
				Контекст.КонвертSOAP,
				Контекст.ДанныеАлгоритмаПодписания.XPathПодписываемыйТег);
			
		Исключение
			
			ЗавершитьОперациюСОшибкой(
				Контекст,
				НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода C14N компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияC14N_ПодписываемыйТег(КаноникализированныйТекстXMLПодписываемыйТег, Параметры, Контекст) Экспорт
	
	Если КаноникализированныйТекстXMLПодписываемыйТег = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода C14N произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Проверка_ПослеВыполненияHash_ПодписываемыйТег", ЭтотОбъект, Контекст,
			"Проверка_ПослеВыполненияHash_ПодписываемыйТег_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовHash(
			ОписаниеОповещения,
			КаноникализированныйТекстXMLПодписываемыйТег,
			Контекст.ДанныеАлгоритмаПодписания.OIDВыбранногоАлгоритмаХеширования,
			Контекст.ТипКриптопровайдера);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияHash_ПодписываемыйТег_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода Hash компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияHash_ПодписываемыйТег(HashValue, Параметры, Контекст) Экспорт
	
	Если HashValue = Неопределено Тогда
		НачатьПолучениеТекстаОшибки(НСтр("ru = 'При выполнении метода Hash произошла ошибка:'"), Контекст);
		Возврат;
	КонецЕсли;
	
	DigestValue = ЭлектроннаяПодписьСлужебныйКлиентСервер.НайтиВXML(Контекст.КонвертSOAP, "DigestValue");
	
	ПодписьВерна = (DigestValue = HashValue);
	
	Если Не ПодписьВерна Тогда
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Подпись не верна (SignatureValue корректно, отличается DigestValue).'"));
		
	Иначе
		
		ДвоичныеДанные = Base64Значение(Контекст.СертификатКриптографииBase64);
		
		ЭлектроннаяПодписьКлиент.ДатаПодписания(
			Новый ОписаниеОповещения("Проверка_ПослеВыполненияHash_ПодписываемыйТегПослеПолученияДатыПодписания", ЭтотОбъект, Контекст), ДвоичныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Проверка_ПослеВыполненияHash_ПодписываемыйТегПослеПолученияДатыПодписания(ДатаПодписания, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПодписания) Тогда
		ДатаПодписания = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Сертификат", Контекст.СертификатКриптографии);
	ВозвращаемоеЗначение.Вставить("ДатаПодписания", ДатаПодписания);
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Успех, ВозвращаемоеЗначение);
	
КонецПроцедуры


Процедура НачатьПолучениеТекстаОшибки(НачалоОписанияТекстаОшибки, Контекст)
	
	Попытка
		
		Контекст.Вставить("НачалоОписанияТекстаОшибки", НачалоОписанияТекстаОшибки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВыполненияGetLastError", ЭтотОбъект, Контекст,
			"ПослеВыполненияGetLastError_Ошибка", ЭтотОбъект);
		
		Контекст.ОбъектКомпоненты.НачатьВызовGetLastError(ОписаниеОповещения);
		
	Исключение
		
		ЗавершитьОперациюСОшибкой(
			Контекст,
			НСтр("ru = 'Ошибка вызова метода GetLastError компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПослеВыполненияGetLastError_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		НСтр("ru = 'Ошибка вызова метода GetLastError компоненты XMLDSig.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

Процедура ПослеВыполненияGetLastError(ТекстОшибки, Параметры, Контекст) Экспорт
	
	ЗавершитьОперациюСОшибкой(
		Контекст,
		Контекст.НачалоОписанияТекстаОшибки + Символы.ПС + ТекстОшибки);
	
КонецПроцедуры

// Форматирует строку в формате base64, удаляя символы перевода строки и возврата каретки.
//
// Параметры:
//  СтрокаBase64 - Строка - строка, которая подлежит преобразования.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция ОтформатироватьСтрокуBase64(СтрокаBase64)
	
	Значение = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	Значение = СтрЗаменить(Значение, Символы.ПС, "");
	
	Возврат Значение;
	
КонецФункции

Процедура ЗавершитьОперациюСОшибкой(Контекст, ТекстОшибки)
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещенияПриЗавершении.Ошибка, ТекстОшибки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция МодульЛокализации()
	
	Возврат ?(СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ЭлектроннаяПодпись.ОбщиеНастройки.ЗаявлениеНаВыпускСертификатаДоступно,
		ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьЛокализацияКлиентСервер"),
		Неопределено);
	
КонецФункции

// Для процедур УстановитьПарольСертификата, ОткрытьНовуюФорму, ВыборСертификатаДляПодписанияИлиРасшифровки,
// ПроверитьСертификатСправочника.
//
Функция ФормаПередачаПараметров()
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	Форма = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования"].Получить("ФормаПередачаПараметров");
	
	Если Форма = Неопределено Тогда
		Форма = ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПередачаПараметров");
		ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыЭлектроннойПодписиИШифрования"].Вставить("ФормаПередачаПараметров", Форма);
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции

// Для процедуры ОбработатьПарольВФорме.
Процедура ОбработатьПароль(ВнутренниеДанные, РеквизитПароль, СвойстваПароля,
			РеквизитЗапомнитьПароль, ДополнительныеПараметры, НовыйПароль = Null)
	
	Сертификат = ДополнительныеПараметры.Сертификат;
	
	ХранилищеПаролей = ВнутренниеДанные.Получить("ХранилищеПаролей");
	Если ХранилищеПаролей = Неопределено Тогда
		ХранилищеПаролей = Новый Соответствие;
		ВнутренниеДанные.Вставить("ХранилищеПаролей", ХранилищеПаролей);
	КонецЕсли;
	
	УстановленныеПароли = ВнутренниеДанные.Получить("УстановленныеПароли");
	Если УстановленныеПароли = Неопределено Тогда
		УстановленныеПароли = Новый Соответствие;
		ВнутренниеДанные.Вставить("УстановленныеПароли", УстановленныеПароли);
		ВнутренниеДанные.Вставить("ПоясненияУстановленныхПаролей", Новый Соответствие);
	КонецЕсли;
	
	УстановленныйПароль = УстановленныеПароли.Получить(Сертификат);
	ДополнительныеПараметры.Вставить("ПарольУстановленПрограммно", УстановленныйПароль <> Неопределено);
	Если УстановленныйПароль <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ПояснениеПароля",
			ВнутренниеДанные.Получить("ПоясненияУстановленныхПаролей").Получить(Сертификат));
	КонецЕсли;
	
	Если ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча Тогда
		СвойстваПароля.Значение = "";
		СвойстваПароля.ПарольПроверен = Ложь;
		РеквизитПароль = "";
		Значение = ХранилищеПаролей.Получить(Сертификат);
		Если Значение <> Неопределено Тогда
			ХранилищеПаролей.Удалить(Сертификат);
			Значение = Неопределено;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
		
		Возврат;
	КонецЕсли;
	
	Пароль = ХранилищеПаролей.Получить(Сертификат);
	ДополнительныеПараметры.Вставить("ПарольВПамяти", Пароль <> Неопределено);
	
	Если ДополнительныеПараметры.ПриУстановкеПароляИзДругойОперации Тогда
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриИзмененииРеквизитаПароль Тогда
		Если РеквизитПароль = "****************" Тогда
			Возврат;
		КонецЕсли;
		СвойстваПароля.Значение = РеквизитПароль;
		СвойстваПароля.ПарольПроверен = Ложь;
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриИзмененииРеквизитаЗапомнитьПароль Тогда
		Если Не РеквизитЗапомнитьПароль Тогда
			Значение = ХранилищеПаролей.Получить(Сертификат);
			Если Значение <> Неопределено Тогда
				ХранилищеПаролей.Удалить(Сертификат);
				Значение = Неопределено;
			КонецЕсли;
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
			
		ИначеЕсли СвойстваПароля.ПарольПроверен Тогда
			ХранилищеПаролей.Вставить(Сертификат, СвойстваПароля.Значение);
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриУспешномВыполненииОперации Тогда
		Если РеквизитЗапомнитьПароль
		   И НЕ ДополнительныеПараметры.ПарольУстановленПрограммно Тогда
			
			ХранилищеПаролей.Вставить(Сертификат, СвойстваПароля.Значение);
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Истина);
			СвойстваПароля.ПарольПроверен = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПарольУстановленПрограммно Тогда
		Если НовыйПароль <> Null Тогда
			СвойстваПароля.Значение = Строка(НовыйПароль);
		Иначе
			СвойстваПароля.Значение = Строка(УстановленныйПароль);
		КонецЕсли;
		СвойстваПароля.ПарольПроверен = Ложь;
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		
		Возврат;
	КонецЕсли;
	
	Если НовыйПароль <> Null Тогда
		// Установка нового пароля к новому сертификату.
		Если НовыйПароль <> Неопределено Тогда
			СвойстваПароля.Значение = Строка(НовыйПароль);
			СвойстваПароля.ПарольПроверен = Истина;
			НовыйПароль = "";
			Если ХранилищеПаролей.Получить(Сертификат) <> Неопределено Или РеквизитЗапомнитьПароль Тогда
				ХранилищеПаролей.Вставить(Сертификат, СвойстваПароля.Значение);
				ДополнительныеПараметры.Вставить("ПарольВПамяти", Истина);
			КонецЕсли;
		ИначеЕсли ХранилищеПаролей.Получить(Сертификат) <> Неопределено Тогда
			// Удаление сохраненного пароля из хранилища.
			РеквизитЗапомнитьПароль = Ложь;
			ХранилищеПаролей.Удалить(Сертификат);
			ДополнительныеПараметры.Вставить("ПарольВПамяти", Ложь);
		КонецЕсли;
		РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПриИзмененииСвойствСертификата Тогда
		Возврат;
	КонецЕсли;
	
	// Получение пароля из хранилища.
	Значение = ХранилищеПаролей.Получить(Сертификат);
	ДополнительныеПараметры.Вставить("ПарольВПамяти", Значение <> Неопределено);
	РеквизитЗапомнитьПароль = ДополнительныеПараметры.ПарольВПамяти;
	СвойстваПароля.Значение = Строка(Значение);
	СвойстваПароля.ПарольПроверен = ДополнительныеПараметры.ПарольВПамяти;
	Значение = Неопределено;
	РеквизитПароль = ?(СвойстваПароля.Значение <> "", "****************", "");
	
КонецПроцедуры

// Для процедуры НастроитьПредставлениеДанных.
Процедура ЗаполнитьСписокПредставлений(СписокПредставлений, ЭлементДанных)
	
	ЭлементСписка = Новый Структура("Значение, Представление", Неопределено, "");
	СписокПредставлений.Добавить(ЭлементСписка);
	
	Если ЭлементДанных.Свойство("Представление")
	   И ТипЗнч(ЭлементДанных.Представление) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭлементСписка, ЭлементДанных.Представление);
		Возврат;
	КонецЕсли;
	
	Если ЭлементДанных.Свойство("Представление")
	   И ТипЗнч(ЭлементДанных.Представление) <> Тип("Строка") Тогда
	
		ЭлементСписка.Значение = ЭлементДанных.Представление;
		
	ИначеЕсли ЭлементДанных.Свойство("Объект")
	        И ТипЗнч(ЭлементДанных.Объект) <> Тип("ОписаниеОповещения") Тогда
		
		ЭлементСписка.Значение = ЭлементДанных.Объект;
	КонецЕсли;
	
	Если ЭлементДанных.Свойство("Представление") Тогда
		ЭлементСписка.Представление = ЭлементДанных.Представление;
	КонецЕсли;
	
КонецПроцедуры

// Для процедур СохранитьСертификатПродолжение, СохранитьЗапросНаСертификатПослеУстановкиРасширения.

// Готовит строку для использования в качестве имени файла.
Функция ПодготовитьСтрокуДляИмениФайла(Строка, ЗаменаПробела = Неопределено)
	
	ЗаменаСимволов = Новый Соответствие;
	ЗаменаСимволов.Вставить("\", " ");
	ЗаменаСимволов.Вставить("/", " ");
	ЗаменаСимволов.Вставить("*", " ");
	ЗаменаСимволов.Вставить("<", " ");
	ЗаменаСимволов.Вставить(">", " ");
	ЗаменаСимволов.Вставить("|", " ");
	ЗаменаСимволов.Вставить(":", "");
	ЗаменаСимволов.Вставить("""", "");
	ЗаменаСимволов.Вставить("?", "");
	ЗаменаСимволов.Вставить(Символы.ВК, "");
	ЗаменаСимволов.Вставить(Символы.ПС, " ");
	ЗаменаСимволов.Вставить(Символы.Таб, " ");
	ЗаменаСимволов.Вставить(Символы.НПП, " ");
	// замена символов кавычек
	ЗаменаСимволов.Вставить(Символ(171), "");
	ЗаменаСимволов.Вставить(Символ(187), "");
	ЗаменаСимволов.Вставить(Символ(8195), "");
	ЗаменаСимволов.Вставить(Символ(8194), "");
	ЗаменаСимволов.Вставить(Символ(8216), "");
	ЗаменаСимволов.Вставить(Символ(8218), "");
	ЗаменаСимволов.Вставить(Символ(8217), "");
	ЗаменаСимволов.Вставить(Символ(8220), "");
	ЗаменаСимволов.Вставить(Символ(8222), "");
	ЗаменаСимволов.Вставить(Символ(8221), "");
	
	СтрокаПодготовленная = "";
	
	КоличествоСимволов = СтрДлина(Строка);
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		Символ = Сред(Строка, НомерСимвола, 1);
		Если ЗаменаСимволов[Символ] <> Неопределено Тогда
			Символ = ЗаменаСимволов[Символ];
		КонецЕсли;
		СтрокаПодготовленная = СтрокаПодготовленная + Символ;
	КонецЦикла;
	
	Если ЗаменаПробела <> Неопределено Тогда
		СтрокаПодготовленная = СтрЗаменить(ЗаменаПробела, " ", ЗаменаПробела);
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаПодготовленная);
	
КонецФункции

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьВМоделиСервиса(Контекст)
	
	Если Не ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		
		Если ТипЗнч(Контекст.ИсходныеДанные) = Тип("Строка")
			И ЭтоАдресВременногоХранилища(Контекст.ИсходныеДанные) Тогда
			Контекст.ИсходныеДанные = ПолучитьИзВременногоХранилища(Контекст.ИсходныеДанные);
		КонецЕсли;
		
		Контекст.Вставить("ПроверитьСертификатНаКлиенте");
		
		ПроверитьПодписьНаКлиентеВМоделиСервиса(Контекст);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеВМоделиСервиса(Контекст)
	
	Подпись = Контекст.Подпись;
	
	Если ТипЗнч(Подпись) = Тип("Строка") И ЭтоАдресВременногоХранилища(Подпись) Тогда
		Подпись = ПолучитьИзВременногоХранилища(Подпись);
	КонецЕсли;
	
	Контекст.Вставить("ДанныеПодписи", Подпись);
	Контекст.Вставить("МенеджерКриптографии", "СервисКриптографии");
	
	МодульСервисКриптографииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииКлиент");
	МодульСервисКриптографииКлиент.ПроверитьПодпись(Новый ОписаниеОповещения(
		"ПроверитьПодписьНаКлиентеПослеПроверкиПодписиВМоделиСервиса", ЭтотОбъект, Контекст,
		"ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи", ЭтотОбъект),
		Контекст.ДанныеПодписи,
		Контекст.ИсходныеДанные);
		
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеПроверкиПодписиВМоделиСервиса(Результат, Контекст) Экспорт
	
	Если Не Результат.Выполнено Тогда
		ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи(Результат.ИнформацияОбОшибке, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ПодписьДействительна Тогда
		ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи(
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ТекстОшибкиСервисаПодписьНедействительна(),
				Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	МодульСервисКриптографииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииКлиент");
	МодульСервисКриптографииКлиент.ПолучитьСертификатыИзПодписи(Новый ОписаниеОповещения(
		"ПроверитьПодписьНаКлиентеПослеПолученияСертификатовВМоделиСервиса", ЭтотОбъект, Контекст,
		"ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи", ЭтотОбъект),
		Контекст.ДанныеПодписи);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПодпись.
Процедура ПроверитьПодписьНаКлиентеПослеПолученияСертификатовВМоделиСервиса(Результат, Контекст) Экспорт
	
	Если Не Результат.Выполнено Тогда
		ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи(Результат.ИнформацияОбОшибке, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Сертификаты = Результат.Сертификаты;
	Попытка
		Если Сертификаты.Количество() = 1 Тогда
			Сертификат = Сертификаты[0];
		ИначеЕсли Сертификаты.Количество() > 1 Тогда
			Сертификат = ЭлектроннаяПодписьСлужебныйВызовСервера.СертификатыПоПорядкуДоКорневого(Сертификаты)[0];
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПроверитьПодписьНаКлиентеПослеОшибкиПроверкиПодписи(ИнформацияОбОшибке, Ложь, Контекст);
		Возврат;
	КонецПопытки;
	
	ПроверитьПодписьНаКлиентеПослеПроверкиПодписи(Сертификат, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеВМоделиСервиса(Результат, Контекст)
	
	Контекст.Вставить("СертификатКриптографии", Результат);
	
	Если Контекст.Операция = "Подписание" Тогда
		СертификатПодписи = Контекст.ОписаниеДанных.ВыбранныйСертификат;
		СертификатПодписи.Отпечаток = Base64Значение(СертификатПодписи.Отпечаток);
		МодульХранилищеСертификатовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ХранилищеСертификатовКлиент");
		МодульХранилищеСертификатовКлиент.НайтиСертификат(Новый ОписаниеОповещения(
				"ВыполнитьНаСторонеПослеВыгрузкиСертификатаВМоделиСервиса", ЭтотОбъект, Контекст), СертификатПодписи);
		
	ИначеЕсли Контекст.Операция = "Шифрование" Тогда
		СвойстваСертификатов = Контекст.ОписаниеДанных.СертификатыШифрования;
		Если ТипЗнч(СвойстваСертификатов) = Тип("Строка") Тогда
			СвойстваСертификатов = ПолучитьИзВременногоХранилища(СвойстваСертификатов);
		КонецЕсли;
		Контекст.Вставить("Индекс", -1);
		Контекст.Вставить("СвойстваСертификатов", СвойстваСертификатов);
		Контекст.Вставить("СертификатыШифрования", Новый Массив);
		ВыполнитьНаСторонеПодготовкаСертификатовВМоделиСервисаЦиклНачало(Контекст);
		Возврат;
	Иначе
		ВыполнитьНаСторонеЦиклЗапуск(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеПодготовкаСертификатовВМоделиСервисаЦиклНачало(Контекст)
	
	Если Контекст.СвойстваСертификатов.Количество() <= Контекст.Индекс + 1 Тогда
		ВыполнитьНаСторонеЦиклЗапуск(Контекст);
		Возврат;
	КонецЕсли;
	Контекст.Индекс = Контекст.Индекс + 1;
	
	ВыполнитьНаСторонеПодготовкаСертификатовПослеИнициализацииСертификатаВМоделиСервиса(
		Контекст.СвойстваСертификатов[Контекст.Индекс].Сертификат, Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеПодготовкаСертификатовПослеИнициализацииСертификатаВМоделиСервиса(СертификатКриптографии, Контекст)
	
	Контекст.СертификатыШифрования.Добавить(СертификатКриптографии);
	
	ВыполнитьНаСторонеПодготовкаСертификатовВМоделиСервисаЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ВыполнитьНаСтороне.
Процедура ВыполнитьНаСторонеПослеВыгрузкиСертификатаВМоделиСервиса(РезультатПоиска, Контекст) Экспорт
	
	Если Не РезультатПоиска.Выполнено Тогда
		Ошибка = Новый Структура("ОписаниеОшибки",
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗаголовокОшибкиПолученияДанных(Контекст.Операция) + Символы.ПС
				+ РезультатПоиска.ОписаниеОшибки.Описание);
		ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РезультатПоиска.Сертификат) Тогда
		Ошибка = Новый Структура("ОписаниеОшибки",
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗаголовокОшибкиПолученияДанных(Контекст.Операция) + Символы.ПС
				+ НСтр("ru = 'Сертификат отсутствует в облачном сервисе (возможно удален).'"));
		ВыполнитьНаСторонеПослеЦикла(Ошибка, Контекст);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СвойстваСертификата", ЭлектроннаяПодписьКлиент.СвойстваСертификата(
		РезультатПоиска.Сертификат));
	Контекст.СвойстваСертификата.Вставить("ДвоичныеДанные", РезультатПоиска.Сертификат.Сертификат);
	
	ВыполнитьНаСторонеЦиклЗапуск(Контекст);
	
КонецПроцедуры

Функция ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Возврат МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользованиеИнтерактивногоРежимаКриптографииИспользовать()
	
	Возврат Вычислить("ИспользованиеИнтерактивногоРежимаКриптографии.Использовать");
	
КонецФункции

#Область ДобавлениеСертификата

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
Процедура ДобавитьСертификатПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии")
		И Результат.Общая Тогда
		
		Контекст.Вставить("ОшибкаНаКлиенте", Результат);
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
		СообщитьОбОшибкеДобавленияСертификата(Контекст);
		
		Возврат;
		
	КонецЕсли;
	
	СертификатКриптографии = Новый СертификатКриптографии;
	СертификатКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
		"ДобавитьСертификатПослеИнициализацииСертификата", ЭтотОбъект, Контекст),
		Контекст.ДанныеСертификата);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
Процедура ДобавитьСертификатПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт
	
	Контекст.Вставить("СертификатКриптографии", СертификатКриптографии);
	
	Контекст.Вставить("ОписаниеОшибки", "");
	Контекст.Вставить("ОшибкаНаКлиенте", Новый Структура);
	
	Контекст.ОшибкаНаКлиенте.Вставить("ОписаниеОшибки", "");
	Контекст.ОшибкаНаКлиенте.Вставить("Ошибки", Новый Массив);
	
	Контекст.Вставить("ОписанияПрограмм", ЭлектроннаяПодписьКлиент.ОбщиеНастройки().ОписанияПрограмм);
	Контекст.Вставить("ОписаниеПрограммы", Неопределено);
	Контекст.Вставить("Индекс", -1);
	
	ДобавитьСертификатЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
Процедура ДобавитьСертификатЦиклНачало(Контекст)
	
	Если Контекст.ОписанияПрограмм.Количество() <= Контекст.Индекс + 1 Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
		СообщитьОбОшибкеДобавленияСертификата(Контекст);
		
		Возврат;
		
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.ОписаниеПрограммы = Контекст.ОписанияПрограмм[Контекст.Индекс];
	
	СоздатьМенеджерКриптографии(Новый ОписаниеОповещения("ДобавитьСертификатЦиклПослеСозданияМенеджераКриптографии",
		ЭтотОбъект, Контекст), "", Неопределено, Контекст.ОписаниеПрограммы.Ссылка,
		Контекст.ДополнительныеПараметры.УсиленнаяЗащитаЗакрытогоКлюча);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
// 
// Параметры:
//   Контекст - Структура - со свойствами:
//     * ОшибкаНаКлиенте - Структура - со свойствами:
//         ** Ошибки - Массив -.
//
Процедура ДобавитьСертификатЦиклПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("МенеджерКриптографии") Тогда
		
		Если Результат.Ошибки.Количество() > 0 Тогда
			Контекст.ОшибкаНаКлиенте.Ошибки.Добавить(Результат.Ошибки[0]);
		КонецЕсли;
		
		ДобавитьСертификатЦиклНачало(Контекст);
		Возврат;
		
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", Результат);
	Если Не ИспользуетсяИнтерактивныйРежимКриптографии(Контекст.МенеджерКриптографии) Тогда
		Контекст.МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Контекст.ПарольСертификата;
	КонецЕсли;
	
	Если Контекст.ДляШифрования = Истина Тогда
		Контекст.МенеджерКриптографии.НачатьШифрование(Новый ОписаниеОповещения(
			"ДобавитьСертификатЦиклПослеШифрования", ЭтотОбъект, Контекст,
			"ДобавитьСертификатЦиклПослеОшибкиШифрования", ЭтотОбъект),
			Контекст.ДанныеСертификата, Контекст.СертификатКриптографии);
	Иначе
		Контекст.МенеджерКриптографии.НачатьПодписывание(Новый ОписаниеОповещения(
			"ДобавитьСертификатЦиклПослеПодписания", ЭтотОбъект, Контекст,
			"ДобавитьСертификатЦиклПослеОшибкиПодписания", ЭтотОбъект),
			Контекст.ДанныеСертификата, Контекст.СертификатКриптографии);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
Процедура ДобавитьСертификатЦиклПослеШифрования(ЗашифрованныеДанные, Контекст) Экспорт
	
	Контекст.МенеджерКриптографии.НачатьРасшифровку(Новый ОписаниеОповещения(
		"ДобавитьСертификатЦиклПослеРасшифровки", ЭтотОбъект, Контекст,
		"ДобавитьСертификатЦиклПослеОшибкиРасшифровки", ЭтотОбъект),
		ЗашифрованныеДанные);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
// 
// Параметры:
//   Контекст - Структура - со свойствами:
//     * ОшибкаНаКлиенте - Структура - со свойствами:
//         ** Ошибки - Массив -.
//
Процедура ДобавитьСертификатЦиклПослеОшибкиШифрования(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ТекущаяОшибка = Новый Структура;
	ТекущаяОшибка.Вставить("Описание", ПредставлениеОшибки);
	ТекущаяОшибка.Вставить("Инструкция", Истина);
	ТекущаяОшибка.Вставить("НастройкаПрограмм", Истина);
	
	Контекст.ОшибкаНаКлиенте.Ошибки.Добавить(ТекущаяОшибка);
	
	Контекст.ОшибкаНаКлиенте.ОписаниеОшибки = Контекст.ОшибкаНаКлиенте.ОписаниеОшибки + Символы.ПС + Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось пройти проверку шифрования с помощью программы %1 по причине:
		|%2'"), Контекст.ОписаниеПрограммы.Наименование, ПредставлениеОшибки);
		
	ДобавитьСертификатЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
// 
// Параметры:
//   Контекст - Структура - .
//
Процедура ДобавитьСертификатЦиклПослеПодписания(ДанныеПодписи, Контекст) Экспорт
	
	ИнформацияОбОшибке = Неопределено;
	ПредставлениеОшибки = "";
	Попытка
		ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеДанныеПодписи(ДанныеПодписи, ПредставлениеОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
		
		ЗаполнитьОшибкуПодписания(Контекст.ОшибкаНаКлиенте, Контекст.ОписаниеОшибки, Контекст.ОписаниеПрограммы,
			ПредставлениеОшибки, ИнформацияОбОшибке = Неопределено);
			
		ДобавитьСертификатЦиклНачало(Контекст);
		Возврат;
		
	КонецЕсли;
	
	Контекст.ДополнительныеПараметры.Программа = Контекст.ОписаниеПрограммы.Ссылка;
	Попытка
		Сертификат = ЭлектроннаяПодписьСлужебныйВызовСервера.ЗаписатьСертификатВСправочник(
			Контекст.ДанныеСертификата, Контекст.ДополнительныеПараметры);
	Исключение
		
		Сертификат = Неопределено;
		Контекст.ЗаголовокФормы = НСтр("ru = 'Ошибка добавления сертификата'");
		Контекст.ЗаголовокОшибки = НСтр("ru = 'Не удалось добавить сертификат по причине:'");
		Контекст.ОшибкаНаКлиенте.Ошибки = Новый Массив;
		Контекст.ОшибкаНаКлиенте.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СообщитьОбОшибкеДобавленияСертификата(Контекст);
		
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Сертификат);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
Процедура ДобавитьСертификатЦиклПослеОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьОшибкуПодписания(Контекст.ОшибкаНаКлиенте, Контекст.ОписаниеОшибки, Контекст.ОписаниеПрограммы,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Ложь);
	
	ДобавитьСертификатЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
// 
// Параметры:
//   Контекст - Структура - .
//
Процедура ДобавитьСертификатЦиклПослеРасшифровки(РасшифрованныеДанные, Контекст) Экспорт
	
	ПредставлениеОшибки = "";
	Попытка
		ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеРасшифрованныеДанные(РасшифрованныеДанные, ПредставлениеОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
		
		ЗаполнитьОшибкуРасшифровки(Контекст.ОшибкаНаКлиенте, Контекст.ОписаниеОшибки,
			Контекст.ОписаниеПрограммы, ПредставлениеОшибки);
		
		ДобавитьСертификатЦиклНачало(Контекст);
		Возврат;
		
	КонецЕсли;
	
	Контекст.ДополнительныеПараметры.Программа = Контекст.ОписаниеПрограммы.Ссылка;
	Попытка
		Сертификат = ЭлектроннаяПодписьСлужебныйВызовСервера.ЗаписатьСертификатВСправочник(
			Контекст.ДанныеСертификата, Контекст.ДополнительныеПараметры);
	Исключение
		
		Сертификат = Неопределено;
		Контекст.ЗаголовокФормы = НСтр("ru = 'Ошибка добавления сертификата'");
		Контекст.ЗаголовокОшибки = НСтр("ru = 'Не удалось добавить сертификат по причине:'");
		Контекст.ОшибкаНаКлиенте.Ошибки = Новый Массив;
		Контекст.ОшибкаНаКлиенте.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СообщитьОбОшибкеДобавленияСертификата(Контекст);
		
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Сертификат);
	
КонецПроцедуры

// Продолжение процедуры ЭлектроннаяПодписьКлиент.ДобавитьСертификат.
Процедура ДобавитьСертификатЦиклПослеОшибкиРасшифровки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьОшибкуРасшифровки(Контекст.ОшибкаНаКлиенте, Контекст.ОписаниеОшибки,
		Контекст.ОписаниеПрограммы, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ДобавитьСертификатЦиклНачало(Контекст);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеДобавленияСертификата(КонтекстДобавления)
	
	ОшибкаНаКлиенте = ?(КонтекстДобавления.Свойство("ОшибкаНаКлиенте"),
		КонтекстДобавления.ОшибкаНаКлиенте, Новый Структура);
	ОшибкаНаСервере = ?(КонтекстДобавления.Свойство("ОшибкаНаСервере"),
		КонтекстДобавления.ОшибкаНаСервере, Новый Структура);
	
	ПоказатьОшибкуОбращенияКПрограмме(КонтекстДобавления.ЗаголовокФормы,
		КонтекстДобавления.ЗаголовокОшибки, ОшибкаНаКлиенте, ОшибкаНаСервере, Новый Структура);
	
КонецПроцедуры


// Параметры:
//   Ошибка - Структура - со свойствами:
//     * Ошибки - Массив - .
//
Процедура ЗаполнитьОшибкуПодписания(Ошибка, ОписаниеОшибки, ОписаниеПрограммы, ПредставлениеОшибки, ПустыеДанные)
	
	ТекущаяОшибка = Новый Структура;
	ТекущаяОшибка.Вставить("Описание", ПредставлениеОшибки);
	
	Если Не ПустыеДанные Тогда
		ТекущаяОшибка.Вставить("НастройкаПрограмм", Истина);
		ТекущаяОшибка.Вставить("Инструкция", Истина);
	КонецЕсли;
	
	Ошибка.Ошибки.Добавить(ТекущаяОшибка);
	
	Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки + Символы.ПС + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось пройти проверку подписания с помощью программы %1 по причине:
		           |%2'"),
		ОписаниеПрограммы.Наименование,
		ПредставлениеОшибки);
	
КонецПроцедуры

// Параметры:
//   Ошибка - Структура - со свойствами:
//     * Ошибки - Массив - .
//
Процедура ЗаполнитьОшибкуРасшифровки(Ошибка, ОписаниеОшибки, ОписаниеПрограммы, ПредставлениеОшибки)
	
	ТекущаяОшибка = Новый Структура;
	ТекущаяОшибка.Вставить("Описание", ПредставлениеОшибки);
	ТекущаяОшибка.Вставить("Инструкция", Истина);
	ТекущаяОшибка.Вставить("НастройкаПрограмм", Истина);
	
	Ошибка.Ошибки.Добавить(ТекущаяОшибка);
	
	Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки + Символы.ПС + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось пройти проверку расшифровки с помощью программы %1 по причине:
		           |%2'"),
		ОписаниеПрограммы.Наименование,
		ПредставлениеОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти