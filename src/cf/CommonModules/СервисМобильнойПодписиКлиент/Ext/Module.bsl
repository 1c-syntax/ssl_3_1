///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавить подписанта.
// 
// Параметры:
//  ПараметрыПодписанта - Структура:
//    * ОГРН - Строка - (необязательный)
//    * ИНН - Строка 
//    * ИННФЛ - Строка
//    * Имя - Строка 
//    * Отчество - Строка
//    * Фамилия - Строка
//    * НомерТелефона - Строка 
//    * Должность - Строка - (необязательный)
//    * Организация - ОпределяемыйТип.Организация
//    * НаименованиеОрганизации - Строка - (необязательный)
//    * ФизическоеЛицо - ОпределяемыйТип.ФизическоеЛицо - (необязательный)
//    * Наименование - Строка - (необязательный) рассчитывается автоматически
//  ВладелецФормы - ФормаКлиентскогоПриложения - владелец формы
//  ОбработкаЗавершения - Неопределено, ОписаниеОповещения - обработка завершения, 
//                        в которую возвращается результат - ссылка на подписанта или текст ошибки.
//
Процедура ДобавитьПодписанта(ПараметрыПодписанта, ВладелецФормы = Неопределено, ОбработкаЗавершения = Неопределено) Экспорт
	
	ПараметрыФормы = СервисМобильнойПодписиКлиентСервер.ПараметрыПодписанта();
	Если ТипЗнч(ПараметрыПодписанта) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыПодписанта);
	КонецЕсли;
	ОткрытьФорму("Справочник.ПодписантыСервисаМобильнойПодписи.Форма.ДобавлениеПодписанта",
		ПараметрыФормы, ВладелецФормы,,,,ОбработкаЗавершения);
		
КонецПроцедуры

// Открывает информацию о документе, отправленном на подписание.
// 
// Параметры:
//  ДанныеПодписи - Структура:
//    * ИдентификаторПодписи - УникальныйИдентификатор - идентификатор, присвоенный документу при отправке в сервис.
//
Процедура ОткрытьПодпись(ДанныеПодписи) Экспорт
	
	Если Не ДанныеПодписи.Свойство("ИдентификаторПодписи") Или Не ЗначениеЗаполнено(ДанныеПодписи.ИдентификаторПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначения = Тип("РегистрСведенийКлючЗаписи.СервисМобильнойПодписиСтатусы");
	Параметры = Новый Массив;
	Параметры.Добавить(Новый Структура("ИдентификаторДокумента", ДанныеПодписи.ИдентификаторПодписи));
	
	КлючЗаписи = Новый(ТипЗначения, Параметры);
	ОткрытьФорму("РегистрСведений.СервисМобильнойПодписиСтатусы.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписи));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяФормыОтправкиНаПодписание() Экспорт
	
	Возврат "Справочник.ПодписантыСервисаМобильнойПодписи.Форма.ОтправитьНаПодписание";
	
КонецФункции 

Процедура ПроверитьОжидаемуюПодпись(Оповещение, Данные, ИдентификаторПодписи, ПараметрыПроверкиПодписи) Экспорт
	
	Результат = СервисМобильнойПодписиСлужебныйВызовСервера.РезультатПроверкиОжидаемойПодписи(Данные, ИдентификаторПодписи, ПараметрыПроверкиПодписи);
	СвойстваЗаписаннойПодписи = Неопределено;
	Если Результат.Свойство("ЗаписаннаяПодпись", СвойстваЗаписаннойПодписи) Тогда
		ЗаполнитьЗначенияСвойств(Оповещение.ДополнительныеПараметры.СтрокаПодписи, Результат);
		Оповещение.ДополнительныеПараметры.СтрокаПодписи.АдресПодписи = ПоместитьВоВременноеХранилище(
			Результат.Подпись, Оповещение.ДополнительныеПараметры.Форма.УникальныйИдентификатор);
		Оповещение.ДополнительныеПараметры.СтрокаПодписи.АдресСертификата = ПоместитьВоВременноеХранилище(
			Результат.Сертификат, Оповещение.ДополнительныеПараметры.Форма.УникальныйИдентификатор);
		Оповещение.ДополнительныеПараметры.СтрокаПодписи.ПорядковыйНомер = СвойстваЗаписаннойПодписи.ПорядковыйНомер;
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Данные, Результат.Подпись,,,ПараметрыПроверкиПодписи);
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Оповещение, Результат);
	
КонецПроцедуры

Процедура ПодписатьДанныеВСервисе(Оповещение, КонтекстПодписания, ПараметрыПодписания = Неопределено) Экспорт
	
	ОписаниеДанных = КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных;
	Подписант = ОписаниеДанных.ВыбранныйПодписант;
	
	НаборДанных = Новый Массив;
	
	Если ОписаниеДанных.Свойство("СписокПредставлений") Тогда
		СписокПредставлений = ОписаниеДанных.СписокПредставлений;
	Иначе
		СписокПредставлений = Новый Массив;
		
		Если ОписаниеДанных.Свойство("Данные")
			Или ОписаниеДанных.Свойство("Объект") Тогда
			
			ЗаполнитьСписокПредставлений(СписокПредставлений, ОписаниеДанных);
		Иначе
			Для каждого ЭлементДанных Из ОписаниеДанных.НаборДанных Цикл
				ЗаполнитьСписокПредставлений(СписокПредставлений, ЭлементДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеДанных.Свойство("Данные") Или ОписаниеДанных.Свойство("Объект") Тогда
		Структура = Новый Структура;
		Структура.Вставить("Данные", ОписаниеДанных.Данные);
		Если ТипЗнч(СписокПредставлений[0].Представление) = Тип("Структура") Тогда
			Структура.Вставить("Представление", СписокПредставлений[0].Представление.Представление);
		Иначе
			Структура.Вставить("Представление", СписокПредставлений[0].Представление);
		КонецЕсли;
		НаборДанных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Структура);
	Иначе
		Индекс = 0;
		Для Каждого Элемент Из ОписаниеДанных.НаборДанных Цикл
			Структура = Новый Структура;
			Структура.Вставить("Данные", Элемент.Данные);
			Если ТипЗнч(СписокПредставлений[Индекс].Представление) = Тип("Структура") Тогда
				Структура.Вставить("Представление", СписокПредставлений[Индекс].Представление.Представление);
			Иначе
				Структура.Вставить("Представление", СписокПредставлений[Индекс].Представление);
			КонецЕсли;
			НаборДанных.Добавить(Структура);
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("КонтекстПодписания", КонтекстПодписания);
	ПараметрыВыполнения.Вставить("ОповещениеОПодписанииВСервисе", Оповещение);
	
	ДлительнаяОперация = СервисМобильнойПодписиСлужебныйВызовСервера.ПодписатьДанныеВСервисе(
		КонтекстПодписания.ПараметрыВыполнения.ИдентификаторФормы, НаборДанных, Подписант, ПараметрыПодписания);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОтправкиНаПодписанияДанныхВСервис", ЭтотОбъект, ПараметрыВыполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(КонтекстПодписания.ПараметрыВыполнения.Форма);
	ПараметрыОжидания.Заголовок = НСтр("ru='Отправка документов на подписание в приложение ""Моя подпись"" от ФНС'");
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПодписантПриОткрытии(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Подписант) Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьПодписантаВФорме(Форма, Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписантПриСоздании(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДобавитьПодписантаВФорме(Форма, Элемент);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПодписантаВФорме(Форма, Элемент)
	ПараметрыПодписанта = СервисМобильнойПодписиКлиентСервер.ПараметрыПодписанта();
	Если ЗначениеЗаполнено(Форма.ПараметрыПодписанта) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПодписанта, Форма.ПараметрыПодписанта);
	КонецЕсли;
	ДобавитьПодписанта(ПараметрыПодписанта, Элемент, Новый ОписаниеОповещения("ПослеСозданияПодписанта", ЭтотОбъект, Форма));
КонецПроцедуры

Процедура ПослеСозданияПодписанта(Результат, Форма) Экспорт
	Форма.Подписант = Результат;
КонецПроцедуры

Процедура ЗаполнитьСписокПредставлений(СписокПредставлений, ЭлементДанных)
	
	ЭлементСписка = Новый Структура("Значение, Представление", Неопределено, "", "");
	СписокПредставлений.Добавить(ЭлементСписка);
	
	Если ЭлементДанных.Свойство("Представление")
	   И ТипЗнч(ЭлементДанных.Представление) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭлементСписка, ЭлементДанных.Представление);
		
	ИначеЕсли ЭлементДанных.Свойство("Представление")
	   И ТипЗнч(ЭлементДанных.Представление) <> Тип("Строка") Тогда
	
		ЭлементСписка.Значение = ЭлементДанных.Представление;
		
	ИначеЕсли ЭлементДанных.Свойство("Объект")
	        И ТипЗнч(ЭлементДанных.Объект) <> Тип("ОписаниеОповещения") Тогда
		
		ЭлементСписка.Значение = ЭлементДанных.Объект;
	КонецЕсли;
	
	Если ЭлементДанных.Свойство("Представление") Тогда
		ЭлементСписка.Представление = ЭлементДанных.Представление;
	Иначе
		ИмяФайла = Строка(ЭлементСписка.Значение);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		Файл = Новый Файл(ИмяФайла);
		Расширение = Файл.Расширение;
		Если Не ЗначениеЗаполнено(Расширение) Тогда
			Расширение = "bin";
		КонецЕсли;
		ДлинаИмени = 250 - СтрДлина(Расширение) - 1;
		ИмяБезРасширения = Лев(Файл.ИмяБезРасширения, ДлинаИмени);
		ИмяФайла = ИмяБезРасширения + "." + Расширение;
		ЭлементСписка.Вставить("Представление", ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Обработать ошибку взаимодействия с сервисом мобильной подписи.
// 
// Параметры:
//  Ошибка - см. ЭлектроннаяПодписьСлужебныйПовтИсп.КлассификаторОшибокКриптографии
//  Контекст - см. МашиночитаемыеДоверенностиФНССлужебныйКлиент.КонтекстДляОбработкиОшибкиРР
//
Процедура ОбработатьОшибкуВзаимодействияРР(Ошибка, Контекст) Экспорт
	
	Если Контекст.ОповещениеОЗавершении <> Неопределено Тогда
		
		Результат = РезультатОбработкиОшибкиВзаимодействияРР();
		Результат.Ошибка = Ошибка;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Результат);
		
	Иначе
		
		ОткрытьФормуРасширенногоПредставленияОшибки(Контекст.ЗаголовокПредупреждения, Ошибка, Контекст.Форма);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФормуРасширенногоПредставленияОшибки(Заголовок, Знач Ошибка, Форма, Оповещение = Неопределено) Экспорт
	
	ПараметрыФормы = ПараметрыРасширенногоПредставленияОшибки();
	ПараметрыФормы.ЗаголовокПредупреждения = Заголовок;
	ПараметрыФормы.ТекстОшибки = Ошибка.ТекстОшибки;
	ПараметрыФормы.ОписаниеОшибки = СтрШаблон("%1: %2", Заголовок, Ошибка.ТекстОшибки);
	ПараметрыФормы.ПоказатьТребуетсяПомощь = Истина;
	ПараметрыФормы.ПоказатьИнструкцию = Истина;
	
	ОшибкаПоКлассификатору = ЭлектроннаяПодписьСлужебныйКлиент.ОшибкаПоКлассификатору(Ошибка.ТекстОшибки);
	
	Если ОшибкаПоКлассификатору = Неопределено Тогда
		Ошибка.Вставить("Причина", "");
		Ошибка.Вставить("Решение", "");
	Иначе
		Ошибка.Вставить("Причина", ОшибкаПоКлассификатору.Причина);
		Ошибка.Вставить("Решение", ОшибкаПоКлассификатору.Решение);
	КонецЕсли;
	
	ПараметрыФормы.ДополнительныеДанные.Вставить("ДополнительныеДанныеПроверок", Ошибка);

	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьФормуРасширенногоПредставленияОшибки(ПараметрыФормы, Форма, Оповещение);
	
КонецПроцедуры

Функция РезультатОбработкиОшибкиВзаимодействияРР()
	Возврат Новый Структура("Ошибка");
КонецФункции

Функция ПараметрыРасширенногоПредставленияОшибки()
	Параметры = Новый Структура;
	Параметры.Вставить("ЗаголовокПредупреждения", "");
	Параметры.Вставить("ТекстОшибкиКлиент", "");
	Параметры.Вставить("ДополнительныеДанные", Новый Структура);
	Параметры.Вставить("ОписаниеОшибки", "");
	Параметры.Вставить("ПоказатьИнструкцию", Ложь);
	Параметры.Вставить("ПоказатьПереходКНастройкеПрограмм", Ложь);
	Параметры.Вставить("ПоказатьТребуетсяПомощь", Ложь);
	Параметры.Вставить("ПоказатьУстановкуРасширения", Ложь);
	Параметры.Вставить("ТекстОшибкиСервер", "");
	Параметры.Вставить("ТекстОшибки", "");
	Параметры.Вставить("ИнформацияДляПоддержки", "");
	Возврат Параметры;
КонецФункции

Процедура ПослеОтправкиНаПодписанияДанныхВСервис(Результат, Контекст) Экспорт
	
	РезультатВыполнения = Новый Структура;
	
	Если Результат = Неопределено Тогда
		Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.Вставить("Отказ", Истина);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОПодписанииВСервисе, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ИнформацияОбОшибке = Результат.ИнформацияОбОшибке;
		ОбработатьОшибку(Контекст, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке), РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	НаборДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ТипЗнч(НаборДанных) = Тип("Структура") Тогда
		ОбработатьОшибку(Контекст, НаборДанных.ТекстОшибки, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДокументов = Новый Массив;
	Для Каждого Данные Из НаборДанных Цикл
		ИдентификаторыДокументов.Добавить(Данные.ИдентификаторДокумента);
	КонецЦикла;
	
	Контекст.Вставить("НаборДанных", НаборДанных);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияРезультатовПодписания", ЭтотОбъект, Контекст);
	
	ОткрытьФорму("Справочник.ПодписантыСервисаМобильнойПодписи.Форма.ПолучениеПодписей", 
		Новый Структура("ИдентификаторыДокументов, Подписант", ИдентификаторыДокументов),
		Контекст.КонтекстПодписания.ПараметрыВыполнения.Форма,,,,ОписаниеОповещения);
		
КонецПроцедуры
	
Процедура ПослеПолученияРезультатовПодписания(Результат, Контекст) Экспорт
	
	РезультатВыполнения = Новый Структура;
	
	Если Результат = Неопределено Тогда
		Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.Вставить("Отказ", Истина);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОПодписанииВСервисе, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ОперацияНачалась", Истина);
		
	Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.Вставить("ОперацияНачалась");
	Ошибка = Новый Массив;
	
	Если Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.Свойство("Данные") Тогда
		
		СвойстваПодписи = Результат.Получить(Контекст.НаборДанных[0].ИдентификаторДокумента);
		Если СвойстваПодписи <> Неопределено И Не ЗначениеЗаполнено(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов) Тогда
			ДобавитьСвойстваПодписиВОписаниеДанных(
				Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных,
			СвойстваПодписи, Контекст, РезультатВыполнения);
			РезультатВыполнения.Вставить("ЕстьОбработанныеЭлементыДанных");
		ИначеЕсли ЗначениеЗаполнено(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов) Тогда
			Ошибка.Добавить(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов);
		КонецЕсли;
		
	Иначе
		Индекс = 0;
		Для Каждого Элемент Из Контекст.НаборДанных Цикл
			СвойстваПодписи = Результат.Получить(Элемент.ИдентификаторДокумента);
			Если СвойстваПодписи <> Неопределено И Не ЗначениеЗаполнено(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов) Тогда
				ДобавитьСвойстваПодписиВОписаниеДанных(
					Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.НаборДанных[Индекс],
					СвойстваПодписи, Контекст, РезультатВыполнения);
					РезультатВыполнения.Вставить("ЕстьОбработанныеЭлементыДанных");
					Индекс = Индекс + 1;
			ИначеЕсли СвойстваПодписи <> Неопределено И ЗначениеЗаполнено(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов) Тогда
				Если Ошибка.Найти(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов) = Неопределено Тогда
					Ошибка.Добавить(СвойстваПодписи.ОшибкаПроверкиДополнительныхАтрибутов);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Ошибка.Количество() > 0 Тогда
		РезультатВыполнения.Вставить("Ошибка", СтрСоединить(Ошибка, "Символы.ПС"));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОПодписанииВСервисе, РезультатВыполнения);
	
КонецПроцедуры

Процедура ДобавитьСвойстваПодписиВОписаниеДанных(ЭлементДанных, СвойстваПодписи, Контекст, РезультатВыполнения)
	
	ЭлементДанных.Вставить("СвойстваПодписи", СвойстваПодписи);

	Если ТипЗнч(ЭлементДанных.Объект) <> Тип("ОписаниеОповещения") Тогда
		
		ВерсияОбъекта = Неопределено;
		ЭлементДанных.Свойство("ВерсияОбъекта", ВерсияОбъекта);
		
		// СтандартныеПодсистемы.МашиночитаемыеДоверенности
		
		Если ЗначениеЗаполнено(Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.ВыбраннаяДоверенность)
			И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.МашиночитаемыеДоверенности") Тогда
			
			МодульМашиночитаемыеДоверенностиФНССлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"МашиночитаемыеДоверенностиФНССлужебныйКлиент");
			РезультатПроверкиПодписиПоМЧД = МодульМашиночитаемыеДоверенностиФНССлужебныйКлиент.РезультатПроверкиПодписиПоМЧД(
				Контекст.КонтекстПодписания.ПараметрыВыполнения.ОписаниеДанных.ВыбраннаяДоверенность, ЭлементДанных.Объект,
			СвойстваПодписи.Сертификат, Неопределено, Неопределено);
			Если ЗначениеЗаполнено(РезультатПроверкиПодписиПоМЧД) Тогда
				СвойстваПодписи.Вставить("РезультатПроверкиПодписиПоМЧД", РезультатПроверкиПодписиПоМЧД);
			КонецЕсли;
			
		КонецЕсли;
		
		// Конец СтандартныеПодсистемы.МашиночитаемыеДоверенности
		
		ПредставлениеОшибки = ЭлектроннаяПодписьСлужебныйВызовСервера.ДобавитьПодпись(
			ЭлементДанных.Объект, СвойстваПодписи, Контекст.КонтекстПодписания.ИдентификаторФормы, ВерсияОбъекта);
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			ЭлементДанных.Удалить("СвойстваПодписи");
			ОбработатьОшибку(Контекст, ПредставлениеОшибки, РезультатВыполнения);
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибку(Контекст, Ошибка, РезультатВыполнения)
	РезультатВыполнения.Вставить("Ошибка", Ошибка);
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОПодписанииВСервисе, РезультатВыполнения);
КонецПроцедуры

#КонецОбласти
