///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "УдалениеПомеченныхОбъектовСлужебный.ВключитьУдалениеПомеченныхОбъектов";
	Обработчик.РежимВыполнения = "Оперативно";

КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Зависимость = Настройки.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеПомеченных;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьУдалениеПомеченныхОбъектов;
	Зависимость.ВключатьПриВключенииФункциональнойОпции = Ложь;

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	ШаблоныЗаданий.Добавить("УдалениеПомеченных");
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОтключениеПроверкиИспользованияУдаляемыхОбъектов.Имя);
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.УдаляемыеОбъекты);
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.НеудаленныеОбъекты);
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт

	ПодключенныеОбъекты = Новый Массив;
	УдалениеПомеченныхОбъектовПереопределяемый.ПриОпределенииОбъектовСКомандойПоказатьПомеченные(ПодключенныеОбъекты);
	Для Каждого ПодключенныйОбъект Из ПодключенныеОбъекты Цикл

		Источник = Источники.Строки.Найти(ПодключенныйОбъект, "Метаданные");
		Если Источник <> Неопределено Тогда

			Команда = Команды.Добавить();
			Команда.Вид = "ОтображениеПомеченныхНаУдаление";
			Команда.Важность = "СмТакже";
			Команда.Представление = НСтр("ru = 'Показать помеченные на удаление'");
			Команда.РежимЗаписи = "НеЗаписывать";
			Команда.ВидимостьВФормах = "ФормаСписка";
			Команда.МножественныйВыбор = Ложь;
			Команда.Обработчик = "УдалениеПомеченныхОбъектовКлиент.ВыполнитьПодключаемуюКомандуПоказатьПомеченныеНаУдаление";
			Команда.ТолькоВоВсехДействиях = Истина;
			Команда.ЗначениеПометки = "ПараметрыУдаленияПомеченных.%Источник%.ЗначениеПометки";
			Команда.Порядок = 20;

			Если Пользователи.ЭтоПолноправныйПользователь() Тогда
				Команда = Команды.Добавить();
				Команда.Вид = "ПерейтиКПомеченнымНаУдаление";
				Команда.Важность = "СмТакже";
				Команда.Представление = НСтр("ru = 'Перейти к помеченным на удаление'");
				Команда.РежимЗаписи = "НеЗаписывать";
				Команда.ВидимостьВФормах = "ФормаСписка";
				Команда.МножественныйВыбор = Ложь;
				Команда.Обработчик = "УдалениеПомеченныхОбъектовКлиент.ВыполнитьПодключаемуюКомандуПерейтиКПомеченным";
				Команда.ТолькоВоВсехДействиях = Истина;
				Команда.Порядок = 20;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт

	Если ВидыПодключаемыхКоманд.Найти("ОтображениеПомеченныхНаУдаление", "Имя") = Неопределено Тогда

		Вид = ВидыПодключаемыхКоманд.Добавить();
		Вид.Имя         = "ОтображениеПомеченныхНаУдаление";
		Вид.ИмяПодменю  = "Сервис";
		Вид.Заголовок   = НСтр("ru = 'Сервис'");
		Вид.Порядок     = 80;
		Вид.Картинка    = БиблиотекаКартинок.ПодменюСервис;
		Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;

	КонецЕсли;

	Если ВидыПодключаемыхКоманд.Найти("ПерейтиКПомеченнымНаУдаление", "Имя") = Неопределено Тогда

		Вид = ВидыПодключаемыхКоманд.Добавить();
		Вид.Имя         = "ПерейтиКПомеченнымНаУдаление";
		Вид.ИмяПодменю  = "Сервис";
		Вид.Заголовок   = НСтр("ru = 'Сервис'");
		Вид.Порядок     = 80;
		Вид.Картинка    = БиблиотекаКартинок.ПодменюСервис;
		Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;

	КонецЕсли;

КонецПроцедуры

// Параметры:
//   ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ISNULL(КОЛИЧЕСТВО(НеудаленныеОбъекты.Объект),0) КАК Всего
		|ИЗ
		|	РегистрСведений.НеудаленныеОбъекты КАК НеудаленныеОбъекты
		|ГДЕ
		|	НеудаленныеОбъекты.КоличествоПопыток > 3";
	
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоНеудаленныхОбъектов = РезультатЗапроса.Выбрать();
	КоличествоНеудаленныхОбъектов.Следующий();
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Подсистема = Метаданные.Подсистемы.Найти("Администрирование");
	Если Подсистема = Неопределено
		Или Не ПравоДоступа("Просмотр", Подсистема)
		Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта("Обработка.УдалениеПомеченных");
	Иначе
		Разделы = Новый Массив;
		Разделы.Добавить(Подсистема);
	КонецЕсли;

	ИдентификаторЗадания = "НеудаленныеОбъекты";
	Для каждого Раздел Из Разделы Цикл
	
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторЗадания;
		Дело.ЕстьДела       = КоличествоНеудаленныхОбъектов.Всего > 0;
		Дело.Представление  = НСтр("ru = 'Неудалившиеся объекты'");
		Дело.Количество     = КоличествоНеудаленныхОбъектов.Всего;
		Дело.Форма          = "РегистрСведений.НеудаленныеОбъекты.ФормаСписка";
		Дело.Владелец       = Раздел;
	
	КонецЦикла;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ВыполняетсяУдалениеОбъектов",
		"УдалениеПомеченныхОбъектовСлужебный.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Параметры:
//  ИмяПараметра - Строка
//  УстановленныеПараметры - Массив из Строка
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ВыполняетсяУдалениеОбъектов" Тогда
		ПараметрыСеанса.ВыполняетсяУдалениеОбъектов = Ложь;
		УстановленныеПараметры.Добавить("ВыполняетсяУдалениеОбъектов");
	КонецЕсли;
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	Типы.Добавить(Метаданные.РегистрыСведений.НеудаленныеОбъекты);
	Типы.Добавить(Метаданные.РегистрыСведений.УдаляемыеОбъекты);
	Типы.Добавить(Метаданные.Константы.ПроверятьИспользованиеУдаляемыхОбъектов);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписок

Процедура ЗапретитьИспользованиеУдаляемыхОбъектовВСправочникахПриЗаписи(Источник, Отказ) Экспорт
	ЗапретитьИспользованиеУдаляемыхОбъектов(Источник, Отказ);
КонецПроцедуры

Процедура ЗапретитьИспользованиеУдаляемыхОбъектовВНаборахЗаписейПриЗаписи(Источник, Отказ, Замещение) Экспорт
	ЗапретитьИспользованиеУдаляемыхОбъектов(Источник, Отказ);
КонецПроцедуры

Процедура ЗапретитьИспользованиеУдаляемыхОбъектовВНаборахРегистровРасчетаПриЗаписи(Источник, Отказ, Замещение) Экспорт
	ЗапретитьИспользованиеУдаляемыхОбъектов(Источник, Отказ);
КонецПроцедуры

Процедура ЗапретитьИспользованиеУдаляемыхОбъектовВКонстантахПриЗаписи(Источник, Отказ) Экспорт
	ЗапретитьИспользованиеУдаляемыхОбъектов(Источник, Отказ);
КонецПроцедуры

Процедура ЗапретитьИспользованиеУдаляемыхОбъектовВДокументахПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ЗапретитьИспользованиеУдаляемыхОбъектов(Источник, Отказ);
КонецПроцедуры

#КонецОбласти

Функция ДопустимыеРежимыУдаления() Экспорт
	
	ДопустимыеРежимы = Новый Массив;
	ДопустимыеРежимы.Добавить("Стандартный");
	ДопустимыеРежимы.Добавить("Монопольный");
	ДопустимыеРежимы.Добавить("Упрощенный");
	Возврат ДопустимыеРежимы;

КонецФункции

// Обработчик обновления на версию 2.4.1.1.
//
//
Процедура ВключитьУдалениеПомеченныхОбъектов() Экспорт
	Константы.ИспользоватьУдалениеПомеченныхОбъектов.Установить(Истина);
КонецПроцедуры

// Точка входа регламентного задания.
//
Процедура УдалениеПомеченныхПоРасписанию() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеПомеченных);
	УдаляемыеОбъекты = УдалениеПомеченныхОбъектов.ПомеченныеНаУдаление(,Истина);
	УдалитьПомеченныеОбъектыСлужебный(
		УдаляемыеОбъекты,
		"Стандартный",
		Неопределено,
		Истина);

КонецПроцедуры

// Возвращает Истина, если переданный тип является просты
// 
// Параметры:
//   Тип - Тип
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоПростойТип(Тип) Экспорт
	Возврат (Тип = Неопределено Или Тип = Тип("Строка") Или Тип = Тип("Число") Или Тип = Тип("Булево") Или Тип = Тип(
		"Дата"));
КонецФункции

// Формирует список объектов метаданных, в которых разрешено наличие битых ссылок.
// Результат кешируется.
// 
//
// Возвращаемое значение:
//   Массив из ОбъектМетаданных
//
Функция ИсключенияПоискаСсылокРазрешающихУдаление() Экспорт
	Возврат УдалениеПомеченныхПовтИсп.ИсключенияПоискаСсылокРазрешающихУдаление();
КонецФункции

// Снимает блокировку с объектов по истечении времени жизни сеанса удаления объектов.
// Для прекращения контроля использования удаляемых объектов при аварийном завершении сеанса удаления объектов.
// 
Процедура ПроверкаАктивностиСеансаУдаленияОбъектов() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтключениеПроверкиИспользованияУдаляемыхОбъектов);

	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПроверятьИспользованиеУдаляемыхОбъектов() Тогда
		Возврат;	
	КонецЕсли;

	ВремяЖизниБлокировки = ВремяЖизниБлокировки();
	ВремяСнятияБлокировки = ТекущаяДатаСеанса() - ВремяЖизниБлокировки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдаляемыеОбъекты.ИдентификаторСеанса КАК ИдентификаторСеанса,
		|   УдаляемыеОбъекты.ВремяБлокировки КАК ВремяБлокировки
		|ИЗ
		|	РегистрСведений.УдаляемыеОбъекты КАК УдаляемыеОбъекты";
	
	Запрос.УстановитьПараметр("ВремяСнятияБлокировки", ВремяСнятияБлокировки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			Если ВыборкаДетальныеЗаписи.ВремяБлокировки <= ВремяСнятияБлокировки
					ИЛИ ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ВыборкаДетальныеЗаписи.ИдентификаторСеанса) = Неопределено Тогда
				СнятьБлокировкуИспользованияУдаляемыхОбъектов(ВыборкаДетальныеЗаписи.ИдентификаторСеанса);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление помеченных'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru='Не удалось отключить проверку удаляемых объектов по причине:'")
					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Возвращает число секунд, в течение которых должна держаться блокировка использования удаляемого объекта
// 
// Возвращаемое значение:
//   Число
//
Функция ВремяЖизниБлокировки() Экспорт
	
	Перем ВремяЖизниБлокировки;
	
	ВремяЖизниБлокировки = 3 * 60 * 60;
	Возврат ВремяЖизниБлокировки;

КонецФункции

// Формирует строковый ключ для сохранения настроек отображения помеченных на удаления.
//
// Параметры:
//   ИмяФормы - Строка - имя формы
//   ИмяСписка - Строка - имя списка
//
// Возвращаемое значение:
//   Строка
//
Функция КлючНастроек(ИмяФормы, ИмяСписка) Экспорт
	
	Ключ = "ПоказыватьПомеченныеНаУдаление/"+ИмяФормы+"/"+ИмяСписка;
	Возврат Ключ;
	
КонецФункции

// Формирует дополнительную информацию о типе.
// 
// Параметры:
//   Тип - Тип
//   КешИнформацииОТипах - Соответствие
//
// Возвращаемое значение:
//   Структура:
//   * ПолноеИмя - Строка
//   * ПредставлениеЭлемента - Строка 
//   * ПредставлениеСписка - Строка
//   * Вид -Строка
//   * Ссылочный - Булево
//   * Технический -Булево
//   * Разделенный -Булево
//   * Иерархический -Булево
//   * ТекстЗапросаПоИерархии - Строка 
//   * ЕстьПодчиненные -Булево
//   * ТекстЗапросаПоПодчиненным - Строка 
//   * ЕстьПредопределенные - Булево
//   * Предопределенные - Массив из ЛюбаяСсылка
//
Функция ИнформацияОТипе(Тип, КешИнформацииОТипах) Экспорт
	Информация = КешИнформацииОТипах.Получить(Тип); // Кэш.
	Если Информация <> Неопределено Тогда
		Возврат Информация;
	КонецЕсли;

	МодельСервиса = ОбщегоНазначения.РазделениеВключено();

	Информация = Новый Структура("ПолноеИмя, ПредставлениеЭлемента, ПредставлениеСписка,
								 |Вид, Ссылочный, Технический, Разделенный,
								 |Иерархический, ТекстЗапросаПоИерархии,
								 |ЕстьПодчиненные, ТекстЗапросаПоПодчиненным, 
								 |ЕстьПредопределенные, Предопределенные");
	
	// Поиск объекта метаданных.
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	
	// Заполнение базовой информации.
	Информация.ПолноеИмя = ВРег(ОбъектМетаданных.ПолноеИмя());
	
	// Представления: элемента и списка.
	Информация.ПредставлениеЭлемента = ОбщегоНазначения.ПредставлениеОбъекта(ОбъектМетаданных);
	Информация.ПредставлениеСписка = ОбщегоНазначения.ПредставлениеСписка(ОбъектМетаданных);
	
	// Вид и его свойства.
	Информация.Вид = Лев(Информация.ПолноеИмя, СтрНайти(Информация.ПолноеИмя, ".") - 1);
	ЭтоСправочник = Ложь;
	ЭтоДокумент = Ложь;
	ЭтоПеречисление = Ложь;
	ЭтоПланВидовХарактеристик = Ложь;
	ЭтоПланСчетов = Ложь;
	ЭтоПланВидовРасчета = Ложь;
	ЭтоБизнесПроцесс = Ложь;
	ЭтоЗадача = Ложь;
	ЭтоПланОбмена = Ложь;
	Если Информация.Вид = "СПРАВОЧНИК" Тогда
		ЭтоСправочник = Истина;
	ИначеЕсли Информация.Вид = "ДОКУМЕНТ" Тогда
		ЭтоДокумент = Истина;
	ИначеЕсли Информация.Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		ЭтоПеречисление = Истина;
	ИначеЕсли Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		ЭтоПланВидовХарактеристик = Истина;
	ИначеЕсли Информация.Вид = "ПЛАНСЧЕТОВ" Тогда
		ЭтоПланСчетов = Истина;
	ИначеЕсли Информация.Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		ЭтоПланВидовРасчета = Истина;
	ИначеЕсли Информация.Вид = "БИЗНЕСПРОЦЕСС" Тогда
		ЭтоБизнесПроцесс = Истина;
	ИначеЕсли Информация.Вид = "ЗАДАЧА" Тогда
		ЭтоЗадача = Истина;
	ИначеЕсли Информация.Вид = "ПЛАНОБМЕНА" Тогда
		ЭтоПланОбмена = Истина;
	КонецЕсли;

	Информация.Ссылочный = (ЭтоСправочник Или ЭтоДокумент Или ЭтоПеречисление Или ЭтоПланВидовХарактеристик
		Или ЭтоПланСчетов Или ЭтоПланВидовРасчета Или ЭтоБизнесПроцесс Или ЭтоЗадача Или ЭтоПланОбмена);
	Если ЭтоСправочник Или ЭтоПланВидовХарактеристик Тогда
		Информация.Иерархический = ОбъектМетаданных.Иерархический;
	Иначе
		Информация.Иерархический = ЭтоПланСчетов;
	КонецЕсли;
	Если Информация.Иерархический Тогда
		ШаблонЗапроса = "ВЫБРАТЬ Ссылка, ПометкаУдаления ИЗ &ПолноеИмя ГДЕ Родитель = &УдаляемыйСсылка";
		Информация.ТекстЗапросаПоИерархии = СтрЗаменить(ШаблонЗапроса, "&ПолноеИмя", Информация.ПолноеИмя);
	КонецЕсли;

	Информация.ЕстьПодчиненные = Ложь;
	Информация.ТекстЗапросаПоПодчиненным = "";
	Если ЭтоСправочник Или ЭтоПланВидовХарактеристик Или ЭтоПланОбмена Или ЭтоПланСчетов Или ЭтоПланВидовРасчета Тогда

		ШаблонЗапроса = "ВЫБРАТЬ Ссылка, ПометкаУдаления ИЗ #Таблица ГДЕ Владелец = &УдаляемыйСсылка";
		ТекстЗапроса = "";

		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Если Не Справочник.Владельцы.Содержит(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			Если Информация.ЕстьПодчиненные = Ложь Тогда
				Информация.ЕстьПодчиненные = Истина;
			Иначе
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "#Таблица", "Справочник." + Справочник.Имя);
		КонецЦикла;

		Информация.ТекстЗапросаПоПодчиненным = ТекстЗапроса;
	КонецЕсли;

	Информация.Технический = ЭтоТехническийОбъект(Информация.ПолноеИмя);
	Если МодельСервиса Тогда

		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			ЭтоРазделенныйОбъектМетаданных = МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных);
		Иначе
			ЭтоРазделенныйОбъектМетаданных = Ложь;
		КонецЕсли;
		Информация.Разделенный = ЭтоРазделенныйОбъектМетаданных;

	КонецЕсли;

	Если ЭтоСправочник Или ЭтоПланВидовХарактеристик Или ЭтоПланСчетов Или ЭтоПланВидовРасчета Тогда
		ТекстЗапроса = "ВЫБРАТЬ Ссылка ИЗ &ИмяТаблицы ГДЕ Предопределенный И ПометкаУдаления";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", Информация.ПолноеИмя);
		Запрос = Новый Запрос(ТекстЗапроса);
		Информация.Предопределенные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Информация.ЕстьПредопределенные = Информация.Предопределенные.Количество() > 0;
	Иначе
		Информация.ЕстьПредопределенные = Ложь;
	КонецЕсли;

	КешИнформацииОТипах.Вставить(Тип, Информация);

	Возврат Информация;
КонецФункции

Функция ОбъединениеТаблиц(Таблица1, Таблица2, СохранятьПорядок = Ложь) Экспорт
	Если СохранятьПорядок ИЛИ Таблица1.Количество() >= Таблица2.Количество() Тогда
		Приемник = Таблица1.Скопировать();
		Источник = Таблица2;
	Иначе
		Приемник = Таблица2.Скопировать();
		Источник = Таблица1;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), Элемент);
	КонецЦикла;

	Возврат Приемник;
КонецФункции

Функция ОбъединениеМассивов(Массив1, Массив2) Экспорт
	Если Массив1.Количество() > Массив2.Количество() Тогда
		Приемник = Новый Массив(Новый ФиксированныйМассив(Массив1));
		Источник = Массив2;
	Иначе
		Приемник = Новый Массив(Новый ФиксированныйМассив(Массив2));
		Источник = Массив1;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Приемник;
КонецФункции

// Параметры:
//   Настройки - ТаблицаЗначений:
//   * Реквизит - Строка
//   * Метаданные - Строка
//
// Возвращаемое значение:
//   Число
//
Функция ЧислоДополнительныхРеквизитов(Настройки) Экспорт
	Результат = 0;
	ПромежуточнаяТаблица = Настройки.Скопировать( , "Метаданные,Реквизит");
	ПромежуточнаяТаблица.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
	ПромежуточнаяТаблица.ЗаполнитьЗначения(1, "Счетчик");
	ПромежуточнаяТаблица.Свернуть("Метаданные", "Счетчик");
	ПромежуточнаяТаблица.Сортировать("Счетчик Убыв");

	Если ПромежуточнаяТаблица.Количество() > 0 Тогда
		Результат = ПромежуточнаяТаблица[0].Счетчик;
	КонецЕсли;

	Возврат Результат;
КонецФункции

#Область ОбработчикиКомандФормыУдаленияПомеченных

Функция ПомеченныеНаУдаление(ОтборМетаданных, Настройки, ДеревоПомеченныхНаУдаление) Экспорт
	ПомеченныеНаУдаление = УдалениеПомеченныхОбъектов.ПомеченныеНаУдаление(ОтборМетаданных);
	Отмеченные = УдаляемыеОбъектыИзДанныхФормы(ДеревоПомеченныхНаУдаление);
	Возврат ДеревоПомеченныхНаУдаление(ПомеченныеНаУдаление, Настройки, Отмеченные);
КонецФункции

// Параметры:
//   ТаблицаДействий - ТаблицаЗначений
//
// Возвращаемое значение:
//   см. РезультатОбработкиУдаляемыхОбъектов
//
Функция ВыполнитьОбработкуПричинНеудаления(ТаблицаДействий) Экспорт
	Результат = РезультатОбработкиУдаляемыхОбъектов();

	ПарыЗамен = Новый Соответствие;
	ОчередьПометкиКУдалению = Новый Массив;

	Для Каждого Действие Из ТаблицаДействий Цикл
		
		Если Действие.Действие <> "ЗаменитьСсылку" 
			И (Не ЗначениеЗаполнено(Действие.Источник.ВерсияДанных) 
				ИЛИ Не ЗначениеЗаполнено(Действие.ОбнаруженныйСсылка)
				ИЛИ Не ЗначениеЗаполнено(Значение(Действие.ОбнаруженныйСсылка, "ВерсияДанных"))) Тогда
				
			Продолжить;
		КонецЕсли;

		Если Действие.Действие = "Удалить" Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие.ОбнаруженныйСсылка, "ПометкаУдаления") Тогда
				СтрокаРезультата = Результат.Добавить();
				СтрокаРезультата.УдаляемыйСсылка = Действие.ОбнаруженныйСсылка;
				СтрокаРезультата.ТребуетсяУдаление = Истина;
			Иначе
				ОчередьПометкиКУдалению.Добавить(Действие.ОбнаруженныйСсылка);
			КонецЕсли;
		ИначеЕсли Действие.Действие = "ЗаменитьСсылку" Тогда
			ПарыЗамен.Вставить(Действие.Источник, Действие.ПараметрДействия);
		Иначе
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.УдаляемыйСсылка = Действие.ОбнаруженныйСсылка;
		КонецЕсли;
	КонецЦикла;

	Если ОчередьПометкиКУдалению.Количество() > 0 Тогда
		Результат = ОбъединениеТаблиц(
			Результат,
			ОбработатьОчередьПометокНаУдаление(ОчередьПометкиКУдалению));
	КонецЕсли;

	Если ПарыЗамен.Количество() > 0 Тогда
		РезультатЗамены = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, ОбщегоНазначения.ПараметрыЗаменыСсылок());
		Для Каждого СтрокаРезультата Из РезультатЗамены Цикл
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.УдаляемыйСсылка = СтрокаРезультата.Ссылка;
			НоваяСтрока.ОбнаруженныйСсылка = СтрокаРезультата.ОбъектОшибки;
			НоваяСтрока.ТекстОшибки = СтрокаРезультата.ТекстОшибки;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Удаляет отмеченные на форме Обработки.УдалениеПомеченныхОбъектов.ОсновнаяФорма объекты
// и формирует данные для загрузки в форме.
// 
// При открытии формы с переданным параметром УдаляемыеОбъекты список удаляемых объектов формируется
// из значения параметра.
// 
// Параметры:
//   ИсточникУдаляемыхОбъектов - ДеревоЗначений:
//                 * УдаляемыйСсылка - ЛюбаяСсылка
// 							  -	СписокЗначений из ЛюбаяСсылка
//   РежимУдаления - Строка
//   НастройкиДополнительныхРеквизитов - ТаблицаЗначений
//   РезультатПредыдущегоШага - см. РезультатОбработкиУдаляемыхОбъектов
//   ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор формы, из которой запущено задание.
// 													 используется для отмены блокировки при прерывания фонового задания 
// 													 и закрытия формы.
//
// Возвращаемое значение:
//   см. ДанныеФормыИзРезультатаУдаления
//
Функция УдалитьПомеченныеОбъекты(Знач ИсточникУдаляемыхОбъектов, РежимУдаления, НастройкиДополнительныхРеквизитов,
	РезультатПредыдущегоШага, ИдентификаторЗадания) Экспорт

	Если ТипЗнч(ИсточникУдаляемыхОбъектов) = Тип("СписокЗначений") Тогда
		ИсточникУдаляемыхОбъектов = ДеревоПомеченныхНаУдаление(ИсточникУдаляемыхОбъектов.ВыгрузитьЗначения(), НастройкиДополнительныхРеквизитов, Новый Массив);
	ИначеЕсли ИсточникУдаляемыхОбъектов = Неопределено Тогда
		ИсточникУдаляемыхОбъектов = ДеревоПомеченныхНаУдаление(УдалениеПомеченныхОбъектов.ПомеченныеНаУдаление(,Истина), НастройкиДополнительныхРеквизитов, Новый Массив);
	КонецЕсли;
	
	РезультатПредыдущегоШага = РезультатШагаДополнительнойОбработки(РезультатПредыдущегоШага);
	
	УдаляемыеОбъекты = ОбъединениеМассивов(
		УдаляемыеОбъектыИзРезультатаДополнительнойОбработки(РезультатПредыдущегоШага),
		УдаляемыеОбъектыИзДанныхФормы(ИсточникУдаляемыхОбъектов, РезультатПредыдущегоШага));
		
	РезультатУдаления = УдалитьПомеченныеОбъектыСлужебный(УдаляемыеОбъекты, РежимУдаления, ИдентификаторЗадания);
	
	Результат = ДанныеФормыИзРезультатаУдаления(
		ИсточникУдаляемыхОбъектов, РезультатУдаления, НастройкиДополнительныхРеквизитов, РезультатПредыдущегоШага);
		
	Возврат Результат;
КонецФункции

#КонецОбласти

// Отключает контроль использования удаляемых объектов. Отключает регламентное задание, если обработаны все удаляемых объекты.
// Не используется для неразделенного сеанса в модули сервиса.
// 
// Параметры:
//   Идентификатор - УникальныйИдентификатор
//
Процедура СнятьБлокировкуИспользованияУдаляемыхОбъектов(Идентификатор) Экспорт
	Если ОбщегоНазначения.РазделениеВключено() И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.УдаляемыеОбъекты.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСеанса.Установить(Идентификатор);
	Набор.Записать();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных();
		Блокировка.Добавить("Константа.ПроверятьИспользованиеУдаляемыхОбъектов");
		Блокировка.Заблокировать();
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Таб.ИдентификаторСеанса ИЗ РегистрСведений.УдаляемыеОбъекты КАК Таб");
		Если Запрос.Выполнить().Пустой() Тогда
			Константы.ПроверятьИспользованиеУдаляемыхОбъектов.Установить(Ложь);
			
			Фильтр = Новый Структура(
				"Метаданные",
				Метаданные.РегламентныеЗадания.ОтключениеПроверкиИспользованияУдаляемыхОбъектов);
				
			УстановитьПривилегированныйРежим(Истина);
				
			ЗаданиеПроверки = РегламентныеЗаданияСервер.НайтиЗадания(Фильтр);
				
			Для Каждого Задание Из ЗаданиеПроверки Цикл
				РегламентныеЗаданияСервер.ИзменитьЗадание(
					Задание.УникальныйИдентификатор,
					Новый Структура("Использование", Ложь));
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Записывает информацию необходимую для блокировки удаляемых объектов и включает регламентное задание
// проверки использования удаляемых объектов.
// Не используется для неразделенного сеанса в модели сервиса.
//
Процедура УстановитьБлокировкуИспользованияУдаляемыхОбъектов(Пакет, Идентификатор) Экспорт
	
	ЭтоМодельСервиса = ОбщегоНазначения.РазделениеВключено();
	ВОбластиДанных = ?(ЭтоМодельСервиса, ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(), Ложь);
	Если ЭтоМодельСервиса И НЕ ВОбластиДанных Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.УдаляемыеОбъекты.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСеанса.Установить(Идентификатор);
	
	ВремяНачалаУдаления = ТекущаяДатаСеанса();
	Для Каждого Элемент Из Пакет Цикл
		Запись = Набор.Добавить();
		Запись.ИдентификаторСеанса = Идентификатор;
		Запись.Объект = Элемент.УдаляемыйСсылка;
		Запись.ВремяБлокировки = ВремяНачалаУдаления;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Константы.ПроверятьИспользованиеУдаляемыхОбъектов.Установить(Истина);
		Набор.Записать();
		
		Фильтр = Новый Структура(
			"Метаданные",
			Метаданные.РегламентныеЗадания.ОтключениеПроверкиИспользованияУдаляемыхОбъектов);
			
		УстановитьПривилегированныйРежим(Истина);
			
		ЗаданиеПроверки = РегламентныеЗаданияСервер.НайтиЗадания(Фильтр);
				
		Для Каждого Задание Из ЗаданиеПроверки Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(
				Задание.УникальныйИдентификатор,
				Новый Структура("Использование", Истина));
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Получить значение настроек отображения помеченных объектов из хранилища.
// 
// Параметры:
//   ИмяФормы - Строка
//   ИмяСписка - Строка
// Возвращаемое значение:
//   см. ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить
//
Функция ЗагрузитьНастройкуОтображенияПомеченныхНаУдаления(ИмяФормы, ИмяСписка) Экспорт
	КлючНастроек = КлючНастроек(ИмяФормы, ИмяСписка);
	Возврат ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, КлючНастроек, Ложь);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Снимает с элементов пометку на удаление, если есть хотя бы один помеченный на удаление объект.
// Если все объекты не помечены на удаление, то устанавливает пометку на удаление.
//
// Выбрасывает исключение, если произошла ошибка при установке пометки удаления.
//
// Параметры:
//  Ссылки	 - Массив из ЛюбаяСсылка
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//   * Ссылка - ЛюбаяСсылка
//   * НовоеЗначениеПометкиУдаления - Булево
//
Функция СнятьУстановитьПометкуУдаления(Ссылки) Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка");
	Результат.Колонки.Добавить("НовоеЗначениеПометкиУдаления");
	ИтоговоеЗначениеПометкиУдаления = Ложь;
	
	ЗначенияПометкиУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "ПометкаУдаления");
	
	КоличествоНепомеченныхНаУдаление = 0;
	Для каждого СсылкаЗначениеРеквизита Из ЗначенияПометкиУдаления Цикл
		Если СсылкаЗначениеРеквизита.Значение = Ложь Тогда
			КоличествоНепомеченныхНаУдаление = КоличествоНепомеченныхНаУдаление + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНепомеченныхНаУдаление = ЗначенияПометкиУдаления.Количество() Тогда
		ИтоговоеЗначениеПометкиУдаления = Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого СсылкаЗначениеРеквизита Из ЗначенияПометкиУдаления Цикл
			
			Если СсылкаЗначениеРеквизита.Значение <> ИтоговоеЗначениеПометкиУдаления Тогда
				СтрокаРезультата = Результат.Добавить();
				СтрокаРезультата.Ссылка = СсылкаЗначениеРеквизита.Ключ;
				
				Объект = СсылкаЗначениеРеквизита.Ключ.ПолучитьОбъект();
				Объект.УстановитьПометкуУдаления(ИтоговоеЗначениеПометкиУдаления);
				СтрокаРезультата.НовоеЗначениеПометкиУдаления = ИтоговоеЗначениеПометкиУдаления;
			КонецЕсли;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

#Область ПоискПомеченныхНаУдаление

// Параметры:
//   УдаляемыеОбъекты - Массив из ЛюбаяСсылка
//   Настройки - ТаблицаЗначений:
//       * Реквизит - Строка
//       * Метаданные - Строка
//       * Представление - Строка
//   Отмеченные - Массив из ЛюбаяСсылка
//
// Возвращаемое значение:
//   см. УниверсальноеДеревоУдаляемыхОбъектов
//
Функция ДеревоПомеченныхНаУдаление(УдаляемыеОбъекты, Настройки, Отмеченные)
	ПометкиУстанавливаютсяВыборочно = (Отмеченные.Количество() > 0);
	ДеревоЗначений = УниверсальноеДеревоУдаляемыхОбъектов(ЧислоДополнительныхРеквизитов(Настройки));

	УзлыПервогоУровня = Новый Соответствие;
	
	КешТиповУдаляемыхОбъектов = Новый Соответствие;
	Для Каждого УдаляемыйСсылка Из УдаляемыеОбъекты Цикл
		ТипУдаляемого = ТипЗнч(УдаляемыйСсылка);
		УдаляемыйИнформация = ИнформацияОТипе(ТипУдаляемого,
			КешТиповУдаляемыхОбъектов);

		УзелТипа = УзлыПервогоУровня.Получить(ТипУдаляемого);
		Если УзелТипа = Неопределено Тогда
			УзелТипа = ДеревоЗначений.Строки.Добавить();
			УзелТипа.УдаляемыйСсылка      = УдаляемыйИнформация.ПолноеИмя;
			УзелТипа.Представление = УдаляемыйИнформация.ПредставлениеСписка;
			УзелТипа.Пометка       = Истина;
			УзелТипа.Количество    = 0;
			УзелТипа.НомерКартинки = -1;
			УзелТипа.ЭтоОписаниеОбъектаМетаданных = Истина;
			ЗаполнитьОписаниеДополнительныхРеквизитов(Настройки, УдаляемыйИнформация, УзелТипа);
			УзлыПервогоУровня.Вставить(ТипУдаляемого, УзелТипа);
		КонецЕсли;
		УзелТипа.Количество = УзелТипа.Количество + 1;
		УзелТипа.Представление = УдаляемыйИнформация.ПредставлениеСписка + " (" + УзелТипа.Количество + ")";

		УзелУдаляемого = УзелТипа.Строки.Добавить();
		УзелУдаляемого.УдаляемыйСсылка      = УдаляемыйСсылка;
		УзелУдаляемого.Представление = Строка(УдаляемыйСсылка);
		УзелУдаляемого.Пометка       = Истина;
		УзелУдаляемого.НомерКартинки = НомерКартинки(УдаляемыйСсылка,
			Истина, УдаляемыйИнформация.Вид, "Удален");

		Если ПометкиУстанавливаютсяВыборочно И Отмеченные.Найти(УдаляемыйСсылка) = Неопределено Тогда
			УзелУдаляемого.Пометка = Ложь;
			УзелТипа.Пометка       = Ложь;
		КонецЕсли;

	КонецЦикла;

	ДеревоЗначений = ДополнитьДеревоДополнительнымиРеквизитами(ДеревоЗначений, Настройки);

	ДеревоЗначений.Колонки.Удалить(ДеревоЗначений.Колонки.Количество);
	ДеревоЗначений.Строки.Сортировать("Представление", Истина);

	Возврат ДеревоЗначений;
КонецФункции

Процедура ЗаполнитьОписаниеДополнительныхРеквизитов(Знач Настройки, УдаляемыйИнформация, Знач УзелТипа)
	Перем Настройка;
	Перем Сч;
	Сч = 1;
	Для Каждого Настройка Из Настройки Цикл
		Если ВРег(Настройка.Метаданные) = УдаляемыйИнформация.ПолноеИмя Тогда
			УзелТипа["Реквизит" + (Сч)] = Настройка.Представление;
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Параметры:
//   ДеревоЗначений - ДеревоЗначений
//   Настройки - ТаблицаЗначений
//
// Возвращаемое значение:
//   ДеревоЗначений
//
Функция ДополнитьДеревоДополнительнымиРеквизитами(ДеревоЗначений, Настройки)
	Результат = ДеревоЗначений.Скопировать();
	Результат.Строки.Очистить();

	Для Каждого Элемент Из Настройки Цикл
		Элемент.Метаданные = ВРег(Элемент.Метаданные);
	КонецЦикла;

	Для Каждого ТипМетаданных Из ДеревоЗначений.Строки Цикл
		ТипМетаданныхРезультата = Результат.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ТипМетаданныхРезультата, ТипМетаданных);
		ПомеченныеНаУдаление = ТипМетаданных.Строки.ВыгрузитьКолонку("УдаляемыйСсылка");
		ДополнительныеРеквизиты = ЗначенияДополнительныхРеквизитов(ПомеченныеНаУдаление, Настройки.НайтиСтроки(
			Новый Структура("Метаданные", ВРег(ТипМетаданных.УдаляемыйСсылка))));

		Для Каждого ПомеченныйОбъект Из ТипМетаданных.Строки Цикл
			ПомеченныйОбъектРезультат = ТипМетаданныхРезультата.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПомеченныйОбъектРезультат, ПомеченныйОбъект);
			ЗаполнитьЗначениеДополнительныхРеквизитов(ПомеченныйОбъектРезультат, ДополнительныеРеквизиты);
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ЗаполнитьЗначениеДополнительныхРеквизитов(Знач ПомеченныйОбъектРезультат, Знач ДополнительныеРеквизиты)
	Сч = 1;
	ЗначениеДополнительныхРеквизитов = ДополнительныеРеквизиты[ПомеченныйОбъектРезультат.УдаляемыйСсылка];
	Если ЗначениеДополнительныхРеквизитов <> Неопределено Тогда
		Для Каждого ЗначениеРеквизита Из ЗначениеДополнительныхРеквизитов Цикл
			ПомеченныйОбъектРезультат["Реквизит" + Сч] = ЗначениеРеквизита.Значение;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Параметры:
//   ПомеченныеНаУдаление - Массив
//   НастройкиДополнительныхРеквизитов - Массив из СтрокаТаблицыЗначений
//
// Возвращаемое значение:
//   Соответствие
//
Функция ЗначенияДополнительныхРеквизитов(ПомеченныеНаУдаление, НастройкиДополнительныхРеквизитов)
	Результат = Новый Соответствие;
	ДополнительныеРеквизиты = Новый Массив;

	Для Каждого Реквизит Из НастройкиДополнительныхРеквизитов Цикл
		ДополнительныеРеквизиты.Добавить(Реквизит.Реквизит);
	КонецЦикла;

	Если ДополнительныеРеквизиты.Количество() > 0 Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПомеченныеНаУдаление, СтрСоединить(
			ДополнительныеРеквизиты, ","));
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ВыполнениеДополнительнойОбработкиПричинНеудаления

Функция ОбработатьОчередьПометокНаУдаление(ОчередьПометкиКУдалению)
	Результат = РезультатОбработкиУдаляемыхОбъектов();

	Для Каждого Элемент Из ОчередьПометкиКУдалению Цикл
		УдаляемыйОбъект = Элемент.ПолучитьОбъект();
		УдаляемыйОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых");

		Ошибки = Новый Соответствие;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Элемент.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Элемент);
			Блокировка.Заблокировать();

			УдаляемыйОбъект.УстановитьПометкуУдаления(Истина);
			ЗафиксироватьТранзакцию();

			Описание = Результат.Добавить();
			Описание.УдаляемыйСсылка = Элемент;
			Описание.ТребуетсяУдаление = Истина;
			
		Исключение
			ОтменитьТранзакцию();
			Описание = Результат.Добавить();
			Описание.УдаляемыйСсылка = Элемент;
			Ошибка = ИнформацияОбОшибке();
			Описание.ТекстОшибки =КраткоеПредставлениеОшибки(Ошибка);
			Ошибки.Вставить(Элемент, ПодробноеПредставлениеОшибки(Ошибка));
		КонецПопытки;
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
	
		ТекстОшибки = Новый Массив;
		Для каждого Ошибка Из Ошибки Цикл
			ТекстОшибки.Добавить(
				ОбщегоНазначения.ПредметСтрокой(Ошибка.Ключ) + ":" + Символы.ПС + Ошибка.Значение);
		КонецЦикла;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление помеченных'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru='Не удалось установить пометку удаления для объектов:'") + Символы.ПС + СтрСоединить(ТекстОшибки, Символы.ПС + Символы.ПС));
	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область КонтрольИспользованияУдаляемыхОбъектов

Процедура ЗапретитьИспользованиеУдаляемыхОбъектов(Источник, Отказ)
	
	// ОбменДанными.Загрузка = Истина не устанавливается, т.к. необходимо выполнение
	// при загрузке из внешних источников
	
	Если МонопольныйРежим() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьКонтрольУдаляемых") 
			ИЛИ ПараметрыСеанса.ВыполняетсяУдалениеОбъектов Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоКонстанта(Источник.Метаданные()) Тогда
		ТипЗначений = ТипЗнч(Источник.Значение);
			
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗначений) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПроверятьИспользованиеУдаляемыхОбъектов() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсключенияПоискаСсылокРазрешающихУдаление().Найти(Источник.Метаданные()) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("РегистрСведенийНаборЗаписей.УдаляемыеОбъекты") 
			Или ТипИсточника = Тип("РегистрСведенийНаборЗаписей.НеудаленныеОбъекты") Тогда
		Возврат;
	КонецЕсли;
	
	СсылкиНаУдаляемыеОбъекты = Новый Массив;
	Попытка
		СсылкиНаУдаляемыеОбъекты = УдалениеПомеченныхОбъектов.СсылкиНаУдаляемыеОбъекты(Источник);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление помеченных'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				НСтр("ru='Не удалось выполнить контроль удаляемых объектов:'") + ПодробноеПредставлениеОшибки(Ошибка));
	КонецПопытки;
	
	ТекстСообщения = "";
	Если СсылкиНаУдаляемыеОбъекты.Количество() = 1 Тогда
		ПредставлениеСсылки = "";
		Для Каждого УдаляемаяСсылка Из СсылкиНаУдаляемыеОбъекты Цикл
			ПредставлениеСсылки = ОбщегоНазначения.ПредметСтрокой(УдаляемаяСсылка.Ключ);
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Выбранный элемент %1 в данный момент удаляется, т.к. был помечен на удаление.
		|Выберите другое значение.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, 
			ПредставлениеСсылки);
		
	ИначеЕсли СсылкиНаУдаляемыеОбъекты.Количество() > 1 Тогда
			
		ПредставлениеСсылок = Новый Массив;
		Для Каждого УдаляемаяСсылка Из СсылкиНаУдаляемыеОбъекты Цикл
			ПредставлениеСсылок.Добавить(ОбщегоНазначения.ПредметСтрокой(УдаляемаяСсылка.Ключ));
		КонецЦикла;
	
		ТекстСообщения = НСтр("ru = 'Выбранные элементы в данный момент удаляются, т.к. были помечены на удаление.
		|Выберите другие значения.
		|%1'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, 
			СтрСоединить(ПредставлениеСсылок, "-" + Символы.ПС));
	КонецЕсли;
	
	Если СсылкиНаУдаляемыеОбъекты.Количество() > 0 Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УдалениеПомеченныхОбъектов

// Возвращаемое значение:
//   Структура:
//   * Удаленные - Массив из ЛюбаяСсылка
//   * КоличествоНеУдаленных - Число
//   * КоличествоУдаленных - Число
//   * СвязиНеудаленных - см. СвязиНеудаленных
//   * ДеревоПомеченныхНаУдаление - см. УниверсальноеДеревоУдаляемыхОбъектов
//   * НеУдаленные - см. УниверсальноеДеревоУдаляемыхОбъектов
//
Функция ДанныеФормыИзРезультатаУдаления(ДеревоУдаляемых, РезультатУдаления, НастройкиДополнительныхРеквизитов, РезультатПредыдущегоШага)
	ДеревоПомеченныхНаУдаление = ДеревоФормыВУниверсальноеДерево(ДеревоУдаляемых, ЧислоДополнительныхРеквизитов(
		НастройкиДополнительныхРеквизитов));
	
	Результат = Новый Структура;
	Результат.Вставить("Удаленные", Новый Массив(Новый ФиксированныйМассив(РезультатУдаления.Удаленные)));
	Результат.Вставить("НеУдаленные", УниверсальноеДеревоУдаляемыхОбъектов());
	Результат.Вставить("ДеревоПомеченныхНаУдаление", ДеревоПомеченныхНаУдаление);
	Результат.Вставить("СвязиНеудаленных", СвязиНеудаленных());
	Результат.Вставить("КоличествоУдаленных", 0);
	Результат.Вставить("КоличествоНеУдаленных", 0);
	
	КешИнформацииОТипах = Новый Соответствие;
	Для Каждого ПрепятствующийУдалению Из РезультатУдаления.ПрепятствующиеУдалению Цикл
		ДобавитьСтрокуУниверсальногоДерева(Результат.НеУдаленные, ПрепятствующийУдалению.УдаляемыйСсылка,
			КешИнформацииОТипах);
		ДобавитьСтрокуУниверсальногоДерева(Результат.ДеревоПомеченныхНаУдаление, ПрепятствующийУдалению.УдаляемыйСсылка,
			КешИнформацииОТипах);
		ДобавитьСтрокуСвязейНеудаленных(Результат.СвязиНеудаленных, ПрепятствующийУдалению, КешИнформацииОТипах);
	КонецЦикла;
	
	Результат.ДеревоПомеченныхНаУдаление.Строки.Сортировать("Представление", Истина);
	Результат.СвязиНеудаленных.Сортировать("УдаляемыйСсылка", Новый СравнениеЗначений());
	
	Результат.ДеревоПомеченныхНаУдаление = ДеревоПомеченныхНаУдалениеБезУдаленных(
		Результат.ДеревоПомеченныхНаУдаление,
		РезультатУдаления.Удаленные);

	ИзмененныеСтрокиДерева = Результат.ДеревоПомеченныхНаУдаление.Строки.НайтиСтроки(
		Новый Структура("Модифицированность", Истина));
	Для Каждого ГруппаНеУдаленного Из ИзмененныеСтрокиДерева Цикл
		ГруппаНеУдаленного.Представление = ГруппаНеУдаленного.Представление + " (" + Формат(
			ГруппаНеУдаленного.КоличествоСвязей, "ЧН=0; ЧГ=") + ")";
	КонецЦикла;

	Результат.ДеревоПомеченныхНаУдаление = ДополнитьДеревоДополнительнымиРеквизитами(
		Результат.ДеревоПомеченныхНаУдаление, НастройкиДополнительныхРеквизитов);

	Результат.СвязиНеудаленных = ОбъединениеТаблиц(
		ОшибкиПредыдущегоШага(РезультатПредыдущегоШага),
		Результат.СвязиНеудаленных);

	Результат.КоличествоНеУдаленных = РезультатУдаления.НеУдаленные.Количество();
	Результат.КоличествоУдаленных = РезультатУдаления.Удаленные.Количество();
	
	Возврат Результат
КонецФункции

Функция РезультатШагаДополнительнойОбработки(РезультатПредыдущегоШагаПромежуточный)
	Возврат ?(ТипЗнч(РезультатПредыдущегоШагаПромежуточный) <> Тип("ТаблицаЗначений"),
		РезультатОбработкиУдаляемыхОбъектов(),
		РезультатПредыдущегоШагаПромежуточный);
КонецФункции

Функция ДеревоФормыВУниверсальноеДерево(ДеревоУдаляемых, КоличествоДополнительныхРеквизитов)
	Результат = УниверсальноеДеревоУдаляемыхОбъектов(КоличествоДополнительныхРеквизитов);
	СкопироватьСтроки(Результат.Строки, ДеревоУдаляемых.Строки);
	Возврат Результат;
КонецФункции

// Параметры:
//   РезультатПредыдущегоШага - см. СвязиНеудаленных
//
// Возвращаемое значение:
//   см. СвязиНеудаленных
//
Функция ОшибкиПредыдущегоШага(РезультатПредыдущегоШага)
	СвязиНеудаленных = СвязиНеудаленных();
	
	Для Каждого Элемент Из РезультатПредыдущегоШага Цикл
		Если ПустаяСтрока(Элемент.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОшибкаПредыдущегоШага = СвязиНеудаленных.Добавить();
		Если НЕ (Элемент.ТребуетсяУдаление) Тогда
			ОшибкаПредыдущегоШага.УдаляемыйСсылка = Элемент.ОбнаруженныйСсылка;
			ОшибкаПредыдущегоШага.Представление = Элемент.ТекстОшибки;
			ОшибкаПредыдущегоШага.ОбнаруженныйСсылка =  Элемент.ТекстОшибки;
		Иначе	
			ЗаполнитьЗначенияСвойств(ОшибкаПредыдущегоШага, Элемент);
		КонецЕсли;
		
		ОшибкаПредыдущегоШага.ЭтоОшибка = Истина;
		ОшибкаПредыдущегоШага.НомерКартинки = 11;
	КонецЦикла;
	
	Возврат СвязиНеудаленных;
КонецФункции

// Формирует удаляемые объекты из дерева помеченных за исключением помеченных на удаление
// при дополнительной обработке.
// 
// Параметры:
//   ИсточникУдаляемыхОбъектов - ДеревоЗначений:
//                 * УдаляемыйСсылка - ЛюбаяСсылка
// 							  - СписокЗначений из ЛюбаяСсылка
//   РезультатОбработкиОшибок - см. ВыполнитьОбработкуПричинНеудаления
//
// Возвращаемое значение:
//   Массив из ЛюбаяСсылка
//
Функция УдаляемыеОбъектыИзДанныхФормы(ИсточникУдаляемыхОбъектов, РезультатОбработкиОшибок = Неопределено)
	
	Результат = Новый Массив;
	
	Если РезультатОбработкиОшибок = Неопределено Тогда
		ЗапрещенныеКУдалению = РезультатОбработкиУдаляемыхОбъектов();
	Иначе	
		ЗапрещенныеКУдалению = РезультатОбработкиОшибок.Скопировать(Новый Структура("ТребуетсяУдаление", Ложь));
	КонецЕсли;

	Найденные = ИсточникУдаляемыхОбъектов.Строки.НайтиСтроки(Новый Структура("Пометка", 1), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.УдаляемыйСсылка) <> Тип("Строка") И ЗапрещенныеКУдалению.Найти(
			СтрокаДерева.УдаляемыйСсылка, "ОбнаруженныйСсылка") = Неопределено Тогда
				
			Результат.Добавить(СтрокаДерева.УдаляемыйСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УдаляемыеОбъектыИзРезультатаДополнительнойОбработки(РезультатОбработкиОшибок)
	Результат = Новый Массив;
	
	Для Каждого Элемент Из РезультатОбработкиОшибок.НайтиСтроки(Новый Структура("ТребуетсяУдаление", Истина)) Цикл
		Результат.Добавить(Элемент.УдаляемыйСсылка);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ДеревоПомеченныхНаУдалениеБезУдаленных(ПомеченныеНаУдаление, Удаленные)
	Результат = ПомеченныеНаУдаление.Скопировать();
	
	Кеш = Новый Соответствие;
	
	МодифицированныеРодители = Новый Соответствие;
	УдаляемыеОбъекты = Результат.Строки.НайтиСтроки(Новый Структура("Пометка", 1), Истина);
	Для Каждого Элемент Из УдаляемыеОбъекты Цикл
		Если Элемент.Родитель <> Неопределено И (Удаленные.Найти(Элемент.УдаляемыйСсылка) <> Неопределено
				ИЛИ НЕ Элемент.ЭтоОписаниеОбъектаМетаданных И ИнформацияОТипе(ТипЗнч(Элемент.УдаляемыйСсылка), Кеш).Технический) Тогда
			МодифицированныеРодители.Вставить(Элемент.Родитель);
			Элемент.Родитель.Строки.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗначениеРодитель Из МодифицированныеРодители Цикл
		Родитель = ЗначениеРодитель.Ключ;
		Если Родитель.Строки.Количество() = 0 Тогда
			Результат.Строки.Удалить(Родитель);
		ИначеЕсли Родитель.Строки.НайтиСтроки(Новый Структура("Пометка", 1)).Количество() = 0 Тогда
			Родитель.Пометка = 0;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ДобавитьСтрокуУниверсальногоДерева(ДеревоНеУдаленные, УдаляемыйСсылка, КешИнформацииОТипах)
	УдаляемыйИнформация = ИнформацияОТипе(ТипЗнч(УдаляемыйСсылка), КешИнформацииОТипах);
	СтрокиУдаляемых = ДеревоНеУдаленные.Строки.НайтиСтроки(Новый Структура("УдаляемыйСсылка", УдаляемыйСсылка),
		Истина);
	СтрокаНеУдаленного = ?(СтрокиУдаляемых.Количество() = 0, Неопределено, СтрокиУдаляемых[0]);

	Если СтрокаНеУдаленного = Неопределено И Не УдаляемыйИнформация.Технический Тогда
		ГруппаНеУдаленного = ДеревоНеУдаленные.Строки.НайтиСтроки(
			Новый Структура("УдаляемыйСсылка", УдаляемыйИнформация.ПолноеИмя));
		ГруппаНеУдаленного = ?(ГруппаНеУдаленного.Количество() = 0,
			Неопределено,
			ГруппаНеУдаленного[0]);
			
		Если ГруппаНеУдаленного = Неопределено Тогда
			ГруппаНеУдаленного = ДеревоНеУдаленные.Строки.Добавить();
			ГруппаНеУдаленного.НомерКартинки   = -1;
			ГруппаНеУдаленного.УдаляемыйСсылка = УдаляемыйИнформация.ПолноеИмя;
			ГруппаНеУдаленного.Представление   = УдаляемыйИнформация.ПредставлениеСписка;
		КонецЕсли;

		ГруппаНеУдаленного.КоличествоСвязей = ГруппаНеУдаленного.КоличествоСвязей + 1;
		ГруппаНеУдаленного.Модифицированность = Истина;

		СтрокаНеУдаленного = ГруппаНеУдаленного.Строки.Добавить();
		СтрокаНеУдаленного.УдаляемыйСсылка = УдаляемыйСсылка;
		СтрокаНеУдаленного.Представление   = Строка(УдаляемыйСсылка);
		СтрокаНеУдаленного.НомерКартинки = НомерКартинки(
			СтрокаНеУдаленного.УдаляемыйСсылка, Истина, УдаляемыйИнформация.Вид, "Удален");
	КонецЕсли;

	Если СтрокаНеУдаленного <> Неопределено Тогда
		СтрокаНеУдаленного.Пометка = Истина;
		СтрокаНеУдаленного.КоличествоСвязей = СтрокаНеУдаленного.КоличествоСвязей + 1;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСтрокуСвязейНеудаленных(ТаблицаСвязиНеУдаленных, Причина, КешИнформацииОТипах)
	НомерКартинки = 0;
	Вид = "";
	ОбнаруженныйСтатус = "";
	
	Если Причина.Метаданные <> Неопределено И Метаданные.Константы.Содержит(Причина.Метаданные) Тогда
		ОбнаруженныйТип = Тип("КонстантаМенеджерЗначения." + Причина.Метаданные.Имя);
	Иначе
		ОбнаруженныйТип = ТипЗнч(Причина.МестоИспользования);
	КонецЕсли;
	
	СтрокаПрепятствующегоУдалению = ТаблицаСвязиНеУдаленных.Добавить();
	СтрокаПрепятствующегоУдалению.УдаляемыйСсылка    = Причина.УдаляемыйСсылка;
	СтрокаПрепятствующегоУдалению.ЭтоОшибка          = ЗначениеЗаполнено(Причина.ОписаниеОшибки);
	СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка = ?(СтрокаПрепятствующегоУдалению.ЭтоОшибка,
															Причина.ОписаниеОшибки,
															Причина.МестоИспользования);

	Если СтрокаПрепятствующегоУдалению.ЭтоОшибка ИЛИ Причина.Метаданные = Неопределено Тогда
		СтрокаПрепятствующегоУдалению.Представление = Причина.ПодробноеОписаниеОшибки;
		СтрокаПрепятствующегоУдалению.НомерКартинки = 11;
	ИначеЕсли Причина.МестоИспользования = Неопределено Тогда
		СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка = Причина.Метаданные.ПолноеИмя();
		СтрокаПрепятствующегоУдалению.ЭтоКонстанта = Истина;
		СтрокаПрепятствующегоУдалению.СсылочногоТипа = Ложь;
		СтрокаПрепятствующегоУдалению.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Причина.Метаданные)
			+ " (" + НСтр("ru = 'Константа'") + ")";
		Вид = "КОНСТАНТА";
	Иначе
		ОбнаруженныйИнформация = ИнформацияОТипе(ОбнаруженныйТип, КешИнформацииОТипах);
		
		Если ОбнаруженныйИнформация.Вид = "ДОКУМЕНТ" Тогда
			Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Причина.МестоИспользования,
				"ПометкаУдаления, Проведен");
			ОбнаруженныйСтатус = ?(Значения.ПометкаУдаления, "Удален", ?(Значения.Проведен, "Проведен", ""));
		ИначеЕсли ОбнаруженныйИнформация.Ссылочный Тогда
			ОбнаруженныйСтатус = ?(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Причина.МестоИспользования,
				"ПометкаУдаления"), "Удален", "");
		КонецЕсли;	
		
		СтрокаПрепятствующегоУдалению.СсылочногоТипа = ОбнаруженныйИнформация.Ссылочный;

		СтрокаПрепятствующегоУдалению.ПредставлениеУдаляемый = Строка(Причина.УдаляемыйСсылка);
		Если ОбщегоНазначения.ЭтоРегистр(Причина.Метаданные) Тогда
			СтрокаПрепятствующегоУдалению.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Причина.Метаданные)
				+ " (" + НСтр("ru = 'Регистр'") + ")";
		Иначе	
			СтрокаПрепятствующегоУдалению.Представление = Строка(Причина.МестоИспользования) + " ("
				+ ОбнаруженныйИнформация.ПредставлениеЭлемента + ")";
		КонецЕсли;

		Вид = ОбнаруженныйИнформация.Вид;
	КонецЕсли;
	НомерКартинки = СтрокаПрепятствующегоУдалению.НомерКартинки;
	СтрокаПрепятствующегоУдалению.НомерКартинки = ?(НомерКартинки <> 0, НомерКартинки, НомерКартинки(
		СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка, СтрокаПрепятствующегоУдалению.СсылочногоТипа,
		Вид, ОбнаруженныйСтатус));
		
КонецПроцедуры

Функция УдалитьПомеченныеОбъектыСлужебный(УдаляемыеОбъекты, РежимУдаления = "Стандартный", ИдентификаторЗадания = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	ДопустимыеРежимы = ДопустимыеРежимыУдаления();

	Если ДопустимыеРежимы.Найти(РежимУдаления) = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Недопустимое значение параметра %1 в %2. 
			           |Ожидалось: %3; 
					   |передано значение: %4 (тип %5).'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
			"РежимУдаления",
			"УдалитьПомеченныеОбъекты",
			СтрСоединить(ДопустимыеРежимы, Символы.ПС+"-"),
			РежимУдаления,
			ТипЗнч(РежимУдаления));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Результат = Новый Структура("ПрепятствующиеУдалению, Удаленные, НеУдаленные, Успешно");
	
	ПараметрыУдаления = Новый Структура("ПользовательскиеОбъекты", УдаляемыеОбъекты);
	Если РежимУдаления = "Монопольный" Тогда
		УстановитьМонопольныйРежимПриНеобходимости(Истина, ИдентификаторЗадания);
		ПараметрыУдаления.Вставить("Монопольно", Истина);
	ИначеЕсли РежимУдаления = "Упрощенный" Тогда 	
		ПараметрыУдаления.Вставить("ОчищатьСсылкиВМестахИспользования", Истина);
	КонецЕсли;
	ПараметрыУдаления.Вставить("Режим", РежимУдаления);
	ПараметрыУдаления.Вставить("ЭтоРегламентноеЗадание", ЭтоРегламентноеЗадание);
	
	Попытка
		РезультатУдаления = Обработки.УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъекты(ПараметрыУдаления, ИдентификаторЗадания);
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыУдаления, "Монопольно", Ложь) И МонопольныйРежим() Тогда
			УстановитьМонопольныйРежимПриНеобходимости(Ложь, ИдентификаторЗадания);	
		КонецЕсли;
	Исключение
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыУдаления, "Монопольно", Ложь) Тогда
			УстановитьМонопольныйРежимПриНеобходимости(Ложь, ИдентификаторЗадания);	
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатУдаления);
	Результат.Успешно = Результат.НеУдаленные.Количество() = 0;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

Процедура СкопироватьСтроки(СтрокиПриемник, СтрокиИсточник)
	Для Каждого СтрокаИсточник Из СтрокиИсточник Цикл
		СтрокаПриемник = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		СкопироватьСтроки(СтрокаПриемник.Строки, СтрокаИсточник.Строки);
	КонецЦикла;
КонецПроцедуры

Функция ИсключенияПоискаСсылокРазрешающихУдалениеСлужебный() Экспорт
	Исключения = Новый Массив;

	Исключения.Добавить(Метаданные.РегистрыСведений.УдаляемыеОбъекты);
	Исключения.Добавить(Метаданные.РегистрыСведений.НеудаленныеОбъекты);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриДобавленииИсключенийПоискаСсылокДопускающихУдаление(Исключения);
	КонецЕсли;

	Возврат Исключения;
КонецФункции

Функция ЭтоТехническийОбъект(Знач ПолноеИмяОбъекта)

	ЭтоТехническийОбъект = Ложь;

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульОтчетыСервер = ОбщегоНазначения.ОбщийМодуль("ОтчетыСервер");
		ЭтоТехническийОбъект = МодульОтчетыСервер.ЭтоТехническийОбъект(ПолноеИмяОбъекта);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		ЭтоТехническийОбъект = МодульРаботаСФайламиСлужебный.ЭтоТехническийОбъект(ПолноеИмяОбъекта);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		ЭтоТехническийОбъект = МодульОбменДаннымиСервер.ЭтоТехническийОбъект(ПолноеИмяОбъекта);
	КонецЕсли;

	Возврат ЭтоТехническийОбъект Или ПолноеИмяОбъекта = ВРег("Справочник.ИдентификаторыОбъектовМетаданных")
		Или ПолноеИмяОбъекта = ВРег("Справочник.ИдентификаторыОбъектовРасширений") Или ПолноеИмяОбъекта = ВРег(
		"Справочник.ВерсииРасширений");

КонецФункции

// Возвращает номер картинки из коллекции для отображения на форме
// 
// Параметры:
//   СсылкаИлиДанные - ЛюбаяСсылка
//   СсылочногоТипа - Булево
//   Вид - Строка
//   Статус - Строка
//
// Возвращаемое значение:
//   Число - номер картинки
//
Функция НомерКартинки(Знач СсылкаИлиДанные, Знач СсылочногоТипа, Знач Вид, Знач Статус) Экспорт
	
	Вид = ВРег(Вид);
	Если СсылочногоТипа Тогда
		Если Вид = "СПРАВОЧНИК"
			Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			НомерКартинки = 3;
		ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
			НомерКартинки = 12;
		ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
			НомерКартинки = 15;
		ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
			НомерКартинки = 17;
		ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
			НомерКартинки = 19;
		ИначеЕсли Вид = "ЗАДАЧА" Тогда
			НомерКартинки = 21;
		ИначеЕсли Вид = "ПЛАНОБМЕНА" Тогда
			НомерКартинки = 23;
		Иначе
			НомерКартинки = -2;
		КонецЕсли;
		Если Статус = "Удален" Тогда
			НомерКартинки = НомерКартинки + 1;
		ИначеЕсли Статус = "Проведен" Тогда
			НомерКартинки = НомерКартинки + 2;
		КонецЕсли;
	Иначе
		Если Вид = "КОНСТАНТА" Тогда
			НомерКартинки = 25;
		ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
			НомерКартинки = 26;
		ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
			НомерКартинки = 28;
		ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
			НомерКартинки = 34;
		ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
			НомерКартинки = 38;
		ИначеЕсли СсылкаИлиДанные = Неопределено Тогда
			НомерКартинки = 11;
		Иначе
			НомерКартинки = 8;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерКартинки;
КонецФункции

Процедура УстановитьМонопольныйРежимПриНеобходимости(ЗначениеМонопольногоРежима, ИдентификаторЗадания)
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Управление монопольным режимом осуществляется на форме.
		Возврат;
	КонецЕсли;	
	
	Если МонопольныйРежим() <> ЗначениеМонопольногоРежима Тогда
		УстановитьМонопольныйРежим(ЗначениеМонопольногоРежима);
	КонецЕсли;
КонецПроцедуры

Функция ПроверятьИспользованиеУдаляемыхОбъектов() 
	ЭтоМодельСервиса = ОбщегоНазначения.РазделениеВключено();
	ВОбластиДанных = ?(ЭтоМодельСервиса, ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(), Ложь);
	Если ЭтоМодельСервиса И Не ВОбластиДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПериодОбновленияЗначения = 60000;
	
	ДанныеКонстанты = УдалениеПомеченныхПовтИсп.ПроверятьИспользованиеУдаляемыхОбъектов();
	Если ТекущаяУниверсальнаяДатаВМиллисекундах() - ДанныеКонстанты.МеткаВремени > ПериодОбновленияЗначения Тогда
		ДанныеКонстанты.Значение = Константы.ПроверятьИспользованиеУдаляемыхОбъектов.Получить();
		ДанныеКонстанты.МеткаВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	Возврат ДанныеКонстанты.Значение;
КонецФункции

#Область Конструкторы

// Возвращаемое значение:
//   ТаблицаЗначений:
//   * Ссылка - ЛюбаяСсылка
//   * ТекстОшибки - Строка
//   * ТребуетсяУдаление - Булево
//   * ОбнаруженныйСсылка - ЛюбаяСсылка
//   					  - Неопределено
//
Функция РезультатОбработкиУдаляемыхОбъектов()
	ТипСтрока = Новый ОписаниеТипов("Строка");

	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("УдаляемыйСсылка");
	Ошибки.Колонки.Добавить("ОбнаруженныйСсылка");
	Ошибки.Колонки.Добавить("ТекстОшибки", ТипСтрока);
	Ошибки.Колонки.Добавить("ТребуетсяУдаление", Новый ОписаниеТипов("Булево"));
	Возврат Ошибки
КонецФункции

// Представление коллекция ДеревоПомеченныхНаУдаление и НеУдаленные
// 
// Параметры:
//   ЧислоДополнительныхРеквизитов - Число
//
// Возвращаемое значение:
//   ДеревоЗначений:
//   * Пометка - Булево
//   * УдаляемыйСсылка - ЛюбаяСсылка
//                     - Строка
//   * Представление - Строка
//   * ПредставлениеУдаляемый - Строка
//   * НомерКартинки - Число
//   * БылиОшибкиПриУдалении - Булево
//   * ЭтоОписаниеОбъектаМетаданных - Булево - для условного оформления
//   * КоличествоСвязей - Число
//   * Количество - Число - количество элементов в узле объекта метаданных (для представления)
//   * Модифицированность - Булево - изменялся состав группы
//
Функция УниверсальноеДеревоУдаляемыхОбъектов(ЧислоДополнительныхРеквизитов = 0)
	УниверсальноеДерево = Новый ДеревоЗначений;
	УниверсальноеДерево.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)));
	УниверсальноеДерево.Колонки.Добавить("УдаляемыйСсылка");
	УниверсальноеДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	УниверсальноеДерево.Колонки.Добавить("ПредставлениеУдаляемый", Новый ОписаниеТипов("Строка"));
	УниверсальноеДерево.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	УниверсальноеДерево.Колонки.Добавить("БылиОшибкиПриУдалении", Новый ОписаниеТипов("Булево"));
	УниверсальноеДерево.Колонки.Добавить("ЭтоОписаниеОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	УниверсальноеДерево.Колонки.Добавить("КоличествоСвязей", Новый ОписаниеТипов("Число"));
	УниверсальноеДерево.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	УниверсальноеДерево.Колонки.Добавить("Модифицированность", Новый ОписаниеТипов("Булево"));

	Для Сч = 1 По ЧислоДополнительныхРеквизитов Цикл
		УниверсальноеДерево.Колонки.Добавить("Реквизит" + Сч);
	КонецЦикла;

	Возврат УниверсальноеДерево;
КонецФункции

// Возвращаемое значение:
//   ТаблицаЗначений:
//   * УдаляемыйСсылка - ЛюбаяСсылка
//   * ОбнаруженныйСсылка - ЛюбаяСсылка
//                        - Строка
//   * НомерКартинки - Число
//   * Представление - Строка
//   * СсылочногоТипа - Булево
//   * ЭтоОшибка - Булево
//   * ЭтоКонстанта - Булево
//   * ПредставлениеУдаляемый - Строка
//
Функция СвязиНеудаленных()
	Таблица = ПрепятствующиеУдалению();

	Таблица.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СсылочногоТипа", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЭтоОшибка", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЭтоКонстанта", Новый ОписаниеТипов("Булево"));
	
	Таблица.Индексы.Добавить("УдаляемыйСсылка");

	Возврат Таблица;
КонецФункции

// Ошибки при удалении объектов.
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//   * УдаляемыйСсылка - ЛюбаяСсылка - удаляемый объект, колонка индексируется.
//   * ОбнаруженныйСсылка - ЛюбаяСсылка - объект, в котором есть ссылки на удаляемый объект.
// 						  - Строка - подробное описание ошибки, если возникла ошибка при удалении объекта.
//   * ПредставлениеУдаляемый - Строка - представление удаляемого объекта.
//   * Представление - Строка - представление места использования или  описание ошибки при удалении объекта. 
//
Функция ПрепятствующиеУдалению() Экспорт
	Таблица = Новый ТаблицаЗначений;

	Таблица.Колонки.Добавить("УдаляемыйСсылка");
	Таблица.Колонки.Добавить("ОбнаруженныйСсылка");
	Таблица.Колонки.Добавить("ПредставлениеУдаляемый", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Таблица.Индексы.Добавить("УдаляемыйСсылка");

	Возврат Таблица;
КонецФункции

Функция Значение(Источник, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)

	Буфер = Новый Структура(ИмяСвойства, ЗначениеПоУмолчанию);
	ЗаполнитьЗначенияСвойств(Буфер, Источник);
	Возврат Буфер[ИмяСвойства];

КонецФункции

#КонецОбласти

#КонецОбласти
