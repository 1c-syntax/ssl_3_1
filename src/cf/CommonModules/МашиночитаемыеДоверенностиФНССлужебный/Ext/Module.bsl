///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриЗаполненииРеквизитовОрганизации(Реквизиты) Экспорт
	
	Если Реквизиты.ЭтоФизическоеЛицо = Истина Тогда
		МашиночитаемыеДоверенностиФНСПереопределяемый.ПриЗаполненииРеквизитовФизическогоЛица(Реквизиты.Ссылка, Реквизиты);
	ИначеЕсли Реквизиты.ЭтоКонтрагент = Истина Тогда
		МашиночитаемыеДоверенностиФНСПереопределяемый.ПриЗаполненииРеквизитовКонтрагента(Реквизиты.Ссылка, Реквизиты);
	Иначе
		СтандартнаяОбработка = Истина;
		МашиночитаемыеДоверенностиФНСПереопределяемый.ПриЗаполненииРеквизитовОрганизации(Реквизиты.Ссылка, Реквизиты, СтандартнаяОбработка);
		Если СтандартнаяОбработка Тогда
			ПриЗаполненииРеквизитовОрганизацииМЧД(Реквизиты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущееЗначениеРеквизита(Реквизит, РеквизитТип, ИмяПараметраФормы = "") Экспорт
	
	Если РеквизитТип = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТипов = Новый ОписаниеТипов(РеквизитТип.ВыгрузитьЗначения());
	Возврат ОписаниеТипов.ПривестиЗначение(Реквизит);
	
КонецФункции

// Используется для инициализации параметра сеанса в рамках механизмов БСП,
// см. ИнтеграцияПодсистемБСП.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПараметрыАвторизацииВРаспределенномРеестре", "МашиночитаемыеДоверенностиФНССлужебный.УстановитьПараметрСеансаПараметрыАвторизацииВРаспределенномРеестре");
	
КонецПроцедуры

// см. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
Процедура ПриОпределенииНастроекПечати(НастройкиПечати) Экспорт
	
	НастройкиПечати.ОбъектыПечати.Добавить(Справочники.МашиночитаемыеДоверенности);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСтатусовМЧД.Имя);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	Зависимость = Настройки.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовМЧД;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	Возврат НСтр("ru = 'Машиночитаемые доверенности'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

// Параметры:
//   ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() И Не ПравоДоступа("Просмотр", Метаданные.Справочники.МашиночитаемыеДоверенности) Тогда
		Возврат;
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Справочники.МашиночитаемыеДоверенности.ПолноеИмя());
	
	КоличествоДоверенностейСИстекающимСрокомДействия = КоличествоДоверенностейСИстекающимСрокомДействия(); 
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить ();
		Дело.Идентификатор  = "ДоверенностиСИстекающимСрокомДействия";
		Дело.ЕстьДела       = КоличествоДоверенностейСИстекающимСрокомДействия > 0;
		Дело.Представление  = НСтр("ru = 'Истекает строк действия доверенностей'");
		Дело.Количество     = КоличествоДоверенностейСИстекающимСрокомДействия;
		Дело.Важное         = Ложь;
		Дело.Форма          = "Справочник.МашиночитаемыеДоверенности.ФормаСписка";
		Дело.ПараметрыФормы = Новый Структура("ОтборПоСостоянию", "СИстекающимСрокомДействия");
		Дело.Владелец       = Раздел;
	КонецЦикла;
	
	КоличествоДоверенностейТребующихПодписания = КоличествоДоверенностейТребующихПодписания(); 
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить ();
		Дело.Идентификатор  = "ДоверенностиОжидающиеПодписания";
		Дело.ЕстьДела       = КоличествоДоверенностейТребующихПодписания > 0;
		Дело.Представление  = НСтр("ru = 'Доверенности ожидают подписания'");
		Дело.Количество     = КоличествоДоверенностейТребующихПодписания;
		Дело.Важное         = Ложь;
		Дело.Форма          = "Справочник.МашиночитаемыеДоверенности.ФормаСписка";
		Дело.ПараметрыФормы = Новый Структура("ОтборПоСостоянию", "ОжидаютПодписания");
		Дело.Владелец       = Раздел;
	КонецЦикла;
	
	КоличествоДоверенностейТребующихВнимания = КоличествоДоверенностейТребующихВнимания(); 
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить ();
		Дело.Идентификатор  = "ДоверенностиТребующиеВнимания";
		Дело.ЕстьДела       = КоличествоДоверенностейТребующихВнимания > 0;
		Дело.Представление  = НСтр("ru = 'Доверенности требуют внимания'");
		Дело.Количество     = КоличествоДоверенностейТребующихВнимания;
		Дело.Важное         = Ложь;
		Дело.Форма          = "Справочник.МашиночитаемыеДоверенности.ФормаСписка";
		Дело.ПараметрыФормы = Новый Структура("ОтборПоСостоянию", "ТребуютВнимания");
		Дело.Владелец       = Раздел;
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаОкончанияПериодаИстекающихДоверенностей(ДатаОтсчета) Экспорт
	Возврат ДатаОтсчета + 259200;
КонецФункции

Процедура УдалитьМашиночитаемуюДоверенностьПодписи(ПодписанныйОбъект, ИдентификаторПодписи, МашиночитаемаяДоверенность = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиМЧД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Отбор.ИдентификаторПодписи.Установить(ИдентификаторПодписи);
	Если МашиночитаемаяДоверенность <> Неопределено Тогда
		НаборЗаписей.Отбор.МашиночитаемаяДоверенность.Установить(МашиночитаемаяДоверенность);
	КонецЕсли;
	НаборЗаписей.Записать(); // АПК:1327 Блокировка установлена ранее в см. ЭлектроннаяПодпись.УдалитьПодпись

КонецПроцедуры

Процедура ДобавитьМашиночитаемуюДоверенностьПодписи(ПодписанныйОбъект, ИдентификаторПодписи, РезультатПроверкиПодписиПоМЧД) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиМЧД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Отбор.ИдентификаторПодписи.Установить(ИдентификаторПодписи);
	НаборЗаписей.Отбор.МашиночитаемаяДоверенность.Установить(РезультатПроверкиПодписиПоМЧД.МашиночитаемаяДоверенность);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, РезультатПроверкиПодписиПоМЧД);
	НоваяЗапись.ПодписанныйОбъект = ПодписанныйОбъект;
	НоваяЗапись.ИдентификаторПодписи = ИдентификаторПодписи;
	НаборЗаписей.Записать(); // АПК:1327 Блокировка установлена ранее в см. ЭлектроннаяПодпись.ДобавитьПодпись

КонецПроцедуры

Функция ТекстЗапросаДляУдаленияЭлектронныхПодписей() Экспорт
	
	Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ЭлектронныеПодписиМЧД.ПодписанныйОбъект, ИСТИНА) = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ЕстьПодписиПоМЧД,
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписиМЧД КАК ЭлектронныеПодписиМЧД
		|		ПО ЭлектронныеПодписи.ПодписанныйОбъект = ЭлектронныеПодписиМЧД.ПодписанныйОбъект
		|			И ЭлектронныеПодписи.ИдентификаторПодписи = ЭлектронныеПодписиМЧД.ИдентификаторПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПорядковыйНомер В(&МассивПорядковыхНомеров)
		|	И ЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныеПодписи.ПорядковыйНомер,
		|	ЭлектронныеПодписи.ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ИдентификаторПодписи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер УБЫВ";
	
	Возврат Текст;
	
КонецФункции

Процедура ПриДобавленииОписанияДополнительныхДанных(ДополнительныеДанные, ОписаниеФайлов, Сведения, Текст) Экспорт
	
	ДоверенностиМЧД = Новый Массив;

	Если ДополнительныеДанные.Свойство("ДоверенностьМЧД") Тогда
		ДоверенностиМЧД = ДополнительныеДанные.ДоверенностьМЧД;
	КонецЕсли;
	
	Если ДоверенностиМЧД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДоверенностиМЧД) <> Тип("Массив") Тогда
		ДоверенностиМЧД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДоверенностиМЧД);
	КонецЕсли;
	
	Для Каждого ДоверенностьМЧД Из ДоверенностиМЧД Цикл
		ДобавитьОписаниеДоверенностиМЧД(ДоверенностьМЧД, ОписаниеФайлов, Текст);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ОткрытьМашиночитаемыеДоверенности") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Пользователи.ЭтоПолноправныйПользователь() Или ПравоДоступа("Просмотр", Метаданные.Справочники.МашиночитаемыеДоверенности)) Тогда
		Форма.Элементы.ОткрытьМашиночитаемыеДоверенности.Видимость = Истина;
		Форма.Элементы.ОткрытьМашиночитаемыеДоверенности.Заголовок = Метаданные.Справочники.МашиночитаемыеДоверенности.Синоним;
	Иначе
		Форма.Элементы.ОткрытьМашиночитаемыеДоверенности.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверить сертификат доверителя.
// 
// Параметры:
//  Доверенность     - СправочникСсылка.МашиночитаемыеДоверенности
//  ФайлДоверенности - СправочникСсылка.МашиночитаемыеДоверенностиПрисоединенныеФайлы
//  Сертификат - СертификатКриптографии
//             - ДвоичныеДанные
//             - Строка
//
// 
// Возвращаемое значение:
//  Булево - доверенность подписана всеми доверителями.
//  Строка - ошибка, сертификат не совпадает с доверителями или подпись уже приложена.
//
Функция ПроверитьСертификатДоверителя(Доверенность, ФайлДоверенности, Сертификат) Экспорт
	
	ДанныеДоверенности = ДанныеДоверителей(Доверенность);
	ДанныеДоверенности.Колонки.Добавить("СертификатПодходит", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	Ошибки = Новый Массив;
	
	ОтборПоСертификату = МашиночитаемыеДоверенностиФНС.ОтборДляДоверенностейПоСертификату(Сертификат, Ложь);
	
	Совпадает = Истина;
	Для Каждого Строка Из ДанныеДоверенности Цикл
		
		Если Строка.Подписана Тогда
			Возврат НСтр("ru='Доверенность уже подписана, удалите подпись, чтобы добавить снова.'");
		КонецЕсли;
		
		Совпадает = Истина;
		ОшибкиПоСтроке = Новый Массив;
		
		Для Каждого КлючИЗначение Из ОтборПоСертификату Цикл
			
			Ключ =  СтрЗаменить(КлючИЗначение.Ключ, "Доверитель", "");
			
			Если Строка[Ключ] <> КлючИЗначение.Значение Тогда
				Совпадает = Ложь;
				ОшибкиПоСтроке.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 %2 <> %3'"),Ключ,
					Строка[Ключ], КлючИЗначение.Значение));
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Совпадает Тогда
			
			Доверители = Новый Массив;
			Если ЗначениеЗаполнено(Строка.ФИО) Тогда
				Доверители.Добавить(Строка.ФИО);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НаименованиеОрганизации) Тогда
				Доверители.Добавить(Строка.НаименованиеОрганизации);
			КонецЕсли;
			
			Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не совпадают данные доверителя (%1) и сертификата:
				|%2'"),
				СтрСоединить(Доверители, ", "),
				СтрСоединить(ОшибкиПоСтроке, ", ")));
				
		Иначе
			Строка.СертификатПодходит = 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Совпадает Тогда
		ТекстОшибки = СтрСоединить(Ошибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	КоличествоДоверителей = ДанныеДоверенности.Количество();
	Если КоличествоДоверителей = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеДоверенности.Колонки.Добавить("СертификатПодписиПодходит", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлДоверенности);
		
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		Сертификат = Новый СертификатКриптографии(Подпись.Сертификат.Получить());
		ОтборПоСертификату = МашиночитаемыеДоверенностиФНС.ОтборДляДоверенностейПоСертификату(Сертификат, Ложь);
		ОтборПоСертификату.Вставить("СертификатПодписиПодходит", 0);
		Найдено = ДанныеДоверенности.НайтиСтроки(ОтборПоСертификату);
		Если Найдено.Количество() > 0 Тогда
			Если Найдено[0].СертификатПодходит Тогда
				Возврат НСтр("ru='Доверенность уже подписана аналогичным сертификатом, удалите подпись, чтобы добавить снова.'");
			КонецЕсли;
			Найдено[0].СертификатПодписиПодходит = 1;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДоверенности.Свернуть("Подписана", "СертификатПодписиПодходит");
	
	Возврат КоличествоДоверителей = ДанныеДоверенности.СертификатПодписиПодходит + 1;
	
КонецФункции

Функция ДанныеДоверителей(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.ФИО КАК ФИО,
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.ИНН КАК ИНН,
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.ИННФЛ КАК ИННФЛ,
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.ОГРН КАК ОГРН,
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.СНИЛС КАК СНИЛС,
	|	МашиночитаемыеДоверенностиСтатусы.Подписана КАК Подписана
	|ИЗ
	|	РегистрСведений.МашиночитаемыеДоверенностиПредставителиИДоверители КАК МашиночитаемыеДоверенностиПредставителиИДоверители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МашиночитаемыеДоверенностиСтатусы КАК МашиночитаемыеДоверенностиСтатусы
	|		ПО МашиночитаемыеДоверенностиПредставителиИДоверители.МашиночитаемаяДоверенность = МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность
	|ГДЕ
	|	МашиночитаемыеДоверенностиПредставителиИДоверители.МашиночитаемаяДоверенность = &МашиночитаемаяДоверенность
	|	И МашиночитаемыеДоверенностиПредставителиИДоверители.ТипУчастника = ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковМЧД.Доверитель)";
	Запрос.УстановитьПараметр("МашиночитаемаяДоверенность", Доверенность);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Результат проверки подписей доверенности.
// 
// Параметры:
//  Доверенность       - СправочникСсылка.МашиночитаемыеДоверенности
//  ФайлДоверенности   - СправочникСсылка.МашиночитаемыеДоверенностиПрисоединенныеФайлы
//  ИдентификаторФормы - УникальныйИдентификатор - для сохранения во временном хранилище непроверенных подписей для
//                                                 проверки на клиенте.
//
// Возвращаемое значение:
//  Массив из Структура:
//     * Верна - Булево
//     * КомуВыданСертификат - Строка
//     * ДатаПодписи - Дата
//     * ИдентификаторПодписи - УникальныйИдентификатор
//     * ТребуетсяПроверка - Булево
//     * Соответствует -  Булево - подпись соответствует доверителю.
//     * ТекстОшибки - Строка
//     * ТекстОшибкиСоответствия - Строка
//     * АдресПодписи - Строка - если заполнен параметр ИдентификаторФормы и ТребуетсяПроверка = Истина.
//     * АдресДанныхДоверенности - Строка  - если заполнен параметр ИдентификаторФормы и ТребуетсяПроверка = Истина.
//     * РезультатПроверки - Неопределено - если подпись не требовалось проверять или не удалось ее проверить.
//                         - см. ЭлектроннаяПодписьКлиентСервер.РезультатПроверкиПодписи
//
Функция РезультатПроверкиПодписейДоверенности(Доверенность, ФайлДоверенности = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	РезультатПроверкиПодписейДоверенности = Новый Массив;
	
	Если ФайлДоверенности = Неопределено Тогда
		ФайлДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "ФайлДоверенности");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлДоверенности) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не заполнен файл доверенности %1'"), Доверенность);
	КонецЕсли;
	
	ДанныеДоверенности = ДанныеДоверителей(Доверенность);
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлДоверенности);
	
	ДвоичныеДанные = Неопределено;
	АдресДанныхДоверенности = Неопределено;
	
	Для Каждого ДанныеПодписи Из УстановленныеПодписи Цикл
		
		РезультатПроверкиПодписиДоверенности = Новый Структура;
		РезультатПроверкиПодписиДоверенности.Вставить("ИдентификаторПодписи", ДанныеПодписи.ИдентификаторПодписи);
		РезультатПроверкиПодписиДоверенности.Вставить("КомуВыданСертификат", ДанныеПодписи.КомуВыданСертификат);
		РезультатПроверкиПодписиДоверенности.Вставить("ДатаПодписи", ДанныеПодписи.ДатаПодписи);
		РезультатПроверкиПодписиДоверенности.Вставить("ПодписьВерна", Ложь);
		РезультатПроверкиПодписиДоверенности.Вставить("ТребуетсяПроверка", Ложь);
		РезультатПроверкиПодписиДоверенности.Вставить("Соответствует", Ложь);
		РезультатПроверкиПодписиДоверенности.Вставить("ТекстОшибки", "");
		РезультатПроверкиПодписиДоверенности.Вставить("ТекстОшибкиСоответствия", "");
		РезультатПроверкиПодписиДоверенности.Вставить("РезультатПроверки");
		
		Сертификат = ДанныеПодписи.Сертификат.Получить();
		Если Не ЗначениеЗаполнено(Сертификат) Тогда
			СвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(ДанныеПодписи.Подпись, Истина);
			Если СвойстваПодписи.Успех = Ложь Тогда
				РезультатПроверкиПодписиДоверенности.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось извлечь сертификат подписи %1'"), ДанныеПодписи.ПорядковыйНомер);
				РезультатПроверкиПодписейДоверенности.Добавить(РезультатПроверкиПодписиДоверенности);
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
				РезультатПроверкиПодписиДоверенности.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось извлечь сертификат подписи %1'"), ДанныеПодписи.ПорядковыйНомер);
				РезультатПроверкиПодписейДоверенности.Добавить(РезультатПроверкиПодписиДоверенности);
				Продолжить;
			КонецЕсли;
			ДанныеПодписи.Сертификат = СвойстваПодписи.Сертификат;
		КонецЕсли;
		
		Если Не ДанныеПодписи.ПодписьВерна И (ДанныеПодписи.ТребуетсяПроверка Или Не ЗначениеЗаполнено(ДанныеПодписи.ДатаПроверкиПодписи)) Тогда
			РезультатПроверкиПодписиДоверенности.ТребуетсяПроверка = Истина;
		Иначе
			РезультатПроверкиПодписиДоверенности.ПодписьВерна = ДанныеПодписи.ПодписьВерна;
		КонецЕсли;
		
		Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
			Если ДвоичныеДанные = Неопределено Тогда
				ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлДоверенности);
			КонецЕсли;
			
			РезультатПроверкиПодписи = ЭлектроннаяПодписьКлиентСервер.РезультатПроверкиПодписи();
			ОписаниеОшибки = "";
			ЭлектроннаяПодпись.ПроверитьПодпись(Неопределено, ДвоичныеДанные, ДанныеПодписи.Подпись,
				ОписаниеОшибки, Неопределено, РезультатПроверкиПодписи);
			
			Если Не РезультатПроверкиПодписи.ТребуетсяПроверка Тогда
				РезультатПроверкиПодписиДоверенности.ТребуетсяПроверка = РезультатПроверкиПодписи.ТребуетсяПроверка;
				РезультатПроверкиПодписиДоверенности.ПодписьВерна = РезультатПроверкиПодписи.Результат = Истина;
				РезультатПроверкиПодписиДоверенности.РезультатПроверки = РезультатПроверкиПодписи;
				РезультатПроверкиПодписиДоверенности.ТекстОшибки = ОписаниеОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если ИдентификаторФормы <> Неопределено И РезультатПроверкиПодписиДоверенности.ТребуетсяПроверка Тогда
			Если ДвоичныеДанные = Неопределено Тогда
				ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлДоверенности);
			КонецЕсли;
			Если АдресДанныхДоверенности = Неопределено Тогда
				АдресДанныхДоверенности = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			КонецЕсли;
			РезультатПроверкиПодписиДоверенности.Вставить("АдресДанныхДоверенности", АдресДанныхДоверенности);
			РезультатПроверкиПодписиДоверенности.Вставить("АдресПодписи",
				ПоместитьВоВременноеХранилище(ДанныеПодписи.Подпись, ИдентификаторФормы));
		КонецЕсли;
		
		ОтборПоСертификату = МашиночитаемыеДоверенностиФНС.ОтборДляДоверенностейПоСертификату(Сертификат, Ложь);
		Ошибки = Новый Массив;
		Соответствует = Ложь;
		
		Для Каждого Строка Из ДанныеДоверенности Цикл
			Совпадает = Истина;
			ОшибкиПоСтроке = Новый Массив;
			Для Каждого КлючИЗначение Из ОтборПоСертификату Цикл
				Ключ =  СтрЗаменить(КлючИЗначение.Ключ, "Доверитель", "");
				Если Строка[Ключ] <> КлючИЗначение.Значение Тогда
					Совпадает = Ложь;
					ОшибкиПоСтроке.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 %2 <> %3'"), Ключ, Строка[Ключ], КлючИЗначение.Значение));
				КонецЕсли;
			КонецЦикла;

			Если Не Совпадает Тогда
				Доверители = Новый Массив;
				Если ЗначениеЗаполнено(Строка.ФИО) Тогда
					Доверители.Добавить(Строка.ФИО);
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка.НаименованиеОрганизации) Тогда
					Доверители.Добавить(Строка.НаименованиеОрганизации);
				КонецЕсли;
				Ошибки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не совпадают данные доверителя (%1) и сертификата:
						 |%2'"), СтрСоединить(Доверители, ", "), СтрСоединить(ОшибкиПоСтроке, ", ")));
			Иначе
				Соответствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		РезультатПроверкиПодписиДоверенности.Соответствует = Соответствует;
		Если Не Соответствует Тогда
			РезультатПроверкиПодписиДоверенности.ТекстОшибкиСоответствия = СтрСоединить(Ошибки, ",");
		КонецЕсли;
		
		РезультатПроверкиПодписейДоверенности.Добавить(РезультатПроверкиПодписиДоверенности);
	КонецЦикла;
	
	Возврат РезультатПроверкиПодписейДоверенности;
	
КонецФункции

Процедура ПриЗаполненииРеквизитовОрганизацииМЧД(Реквизиты)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Возврат; // Реквизиты организации нельзя заполнить, если организация не выбрана.
	КонецЕсли;
	
	МодульОрганизацииСервер = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСервер");
	СведенияОбОрганизации = МодульОрганизацииСервер.СведенияОбОрганизации(Реквизиты.Ссылка,, ТекущаяДатаСеанса());
	
	Реквизиты.ИНН = СведенияОбОрганизации.ИНН;
	Реквизиты.НаименованиеПолное = СведенияОбОрганизации.НаименованиеПолное;
	Реквизиты.НаименованиеСокращенное = СведенияОбОрганизации.НаименованиеСокращенное;
	Реквизиты.ОГРН = СведенияОбОрганизации.ОГРН;
	Реквизиты.Телефон = СведенияОбОрганизации.ТелефонОрганизации;
	Реквизиты.ЮридическийАдрес = СведенияОбОрганизации.АдресОрганизации;
	Реквизиты.ЛицоБезДоверенности = СведенияОбОрганизации.Директор;
	
	Если Реквизиты.ЭтоИндивидуальныйПредприниматель Тогда
		Реквизиты.ЛицоБезДоверенности = СведенияОбОрганизации.ИндивидуальныйПредприниматель;
		ВидУчастника = "ИндивидуальныйПредприниматель";
	Иначе
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Директор) Тогда
			Реквизиты.ЛицоБезДоверенности = СведенияОбОрганизации.Директор;
			ВидУчастника = "ДолжностноеЛицо";
		КонецЕсли;
		Реквизиты.КПП  = СведенияОбОрганизации.КПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.ЛицоБезДоверенности) Тогда
		РеквизитыЛицаБезДоверенности = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.РеквизитыУчастника(
			"ФизическоеЛицо", Реквизиты.ЛицоБезДоверенности, ВидУчастника, Истина);
		Если ВидУчастника = "ДолжностноеЛицо" Тогда
			РеквизитыЛицаБезДоверенности.ДолжностьЛицаБезДоверенности = НСтр("ru = 'Генеральный директор'");
		КонецЕсли;
		РеквизитыЛицаБезДоверенности.ЭтоДолжностноеЛицо = ВидУчастника = "ДолжностноеЛицо";
		РеквизитыЛицаБезДоверенности.ЭтоИндивидуальныйПредприниматель = ВидУчастника = "ИндивидуальныйПредприниматель";
		МашиночитаемыеДоверенностиФНСПереопределяемый.ПриЗаполненииРеквизитовФизическогоЛица(Реквизиты.ЛицоБезДоверенности, 
			РеквизитыЛицаБезДоверенности);
		Реквизиты.РеквизитыЛицаБезДоверенности = РеквизитыЛицаБезДоверенности;
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьСведенияОбОрганизации(Форма, ПолеСообщения = "", ШаблонСообщения = "%1:", СведенияОбОрганизации = Неопределено) Экспорт
	
	Сведения = ?(СведенияОбОрганизации = Неопределено, Форма, СведенияОбОрганизации);
	
	Если Сведения.ЭтоФизическоеЛицо Тогда
		Если Сведения.ЭтоИндивидуальныйПредприниматель Тогда
			Вид = "ИндивидуальныйПредприниматель";
		ИначеЕсли Сведения.ЭтоДолжностноеЛицо Тогда
			Вид = "ДолжностноеЛицо";
		Иначе
			Вид = "ФизическоеЛицо"
		КонецЕсли;
		
		Реквизиты = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.РеквизитыФизическогоЛицаСписок(Ложь, Вид);
	Иначе
		Если Сведения.ЭтоИностраннаяОрганизация Тогда
			Вид = "ИностраннаяОрганизация";
		ИначеЕсли Сведения.ЭтоФилиал Тогда
			Вид = "Филиал";
		ИначеЕсли Сведения.ЭтоИндивидуальныйПредприниматель Тогда
			Вид = "ИндивидуальныйПредприниматель";
		Иначе
			Вид = "РоссийскаяОрганизация";
		КонецЕсли;
	
		Реквизиты = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.РеквизитыОрганизацииСписок(Ложь, Вид);
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив;
	ДобавитьРеквизитыДляПроверки(Форма, ПроверяемыеРеквизиты, Реквизиты, ПолеСообщения, ШаблонСообщения, СведенияОбОрганизации);
	
	Возврат Не ПроверитьЗаполнениеРеквизитов(
		Форма, ПроверяемыеРеквизиты, СведенияОбОрганизации);
	
КонецФункции

Процедура ЗаполнитьТипыЗначения(ТипСтрока, РеквизитТип, Элемент) Экспорт
	
	Если ТипСтрока = "Организация" Тогда
		ОписаниеТипов = ОписаниеТиповОрганизации();
	ИначеЕсли ТипСтрока = "Контрагент" Тогда
		ОписаниеТипов = ОписаниеТиповКонтрагента();
	Иначе
		ОписаниеТипов = ОписаниеТиповФизическогоЛица();
	КонецЕсли;
	
	ЕстьОрганизации = Не ОписаниеТипов.СодержитТип(Тип("Строка"));
	
	Если Не ЕстьОрганизации Тогда
		ОписаниеТипов = Неопределено;
	КонецЕсли;

	РеквизитТип = Неопределено;
	
	Если ТипЗнч(ОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		
		СоставТипов = Новый СписокЗначений;
		Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				СоставТипов.Добавить(Тип, Строка(Тип));
			КонецЕсли;
		КонецЦикла;
		
		Если СоставТипов.Количество() > 0 Тогда
			СоставТипов.СортироватьПоПредставлению();
			
			Для Каждого ЭлементСписка Из СоставТипов Цикл
				ЭлементСписка.Представление = Метаданные.НайтиПоТипу(ЭлементСписка.Значение).ПолноеИмя();
			КонецЦикла;
			
			РеквизитТип = СоставТипов;
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.КнопкаВыбора = РеквизитТип <> Неопределено;
	
	Если Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке Тогда
		Элемент.КнопкаВыпадающегоСписка = РеквизитТип <> Неопределено;
		Элемент.КнопкаСоздания          = ?(РеквизитТип = Неопределено, Ложь, Неопределено);
		Элемент.ИсторияВыбораПриВводе   = ?(РеквизитТип = Неопределено,
			ИсторияВыбораПриВводе.НеИспользовать, ИсторияВыбораПриВводе.Авто);
	Иначе
		Элемент.ВыбиратьТип = РеквизитТип <> Неопределено И РеквизитТип.Количество() > 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеТиповОрганизации()
	
	Возврат Метаданные.ОпределяемыеТипы.Организация.Тип;
	
КонецФункции

Функция ОписаниеТиповКонтрагента()
	
	Возврат Метаданные.ОпределяемыеТипы.Контрагент.Тип;
	
КонецФункции

Функция ОписаниеТиповФизическогоЛица()
	
	Возврат Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип;
	
КонецФункции

Функция ЗаголовокДекорации(Реквизиты, ИмяЭлементаОрганизация = Неопределено, ТолькоОбязательные = Ложь) Экспорт

	Результат = СтруктураЗаголовкаДекорации(Реквизиты, ИмяЭлементаОрганизация, ТолькоОбязательные, Ложь);
	
	Если Результат.ЗаголовокДекорацииОшибки.Количество() > 0 Тогда
		Результат.ЗаголовокДекорации.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнены: %1'"),
			СтрСоединить(Результат.ЗаголовокДекорацииОшибки, ", ")));
	КонецЕсли;
	
	ЗаголовокДекорацииСтрока = СтрСоединить(Результат.ЗаголовокДекорации, Символы.ПС);
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокДекорацииСтрока);
	
КонецФункции

Функция ЗаголовокДекорацииДляТаблицы(Реквизиты, ИмяЭлементаОрганизация = Неопределено, ТолькоОбязательные = Ложь) Экспорт

	Результат = СтруктураЗаголовкаДекорации(Реквизиты, ИмяЭлементаОрганизация, ТолькоОбязательные, Истина);
	
	ЗаголовокДекорацииСтрока = СтрСоединить(Результат.ЗаголовокДекорации, Символы.ПС);
	
	Структура = Новый Структура("Представление, НеЗаполненыРеквизиты");
	Структура.Представление = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокДекорацииСтрока);
	Структура.НеЗаполненыРеквизиты = СтроковыеФункции.ФорматированнаяСтрока(СтрСоединить(Результат.ЗаголовокДекорацииОшибки, ", "));
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураЗаголовкаДекорации(Реквизиты, ИмяЭлементаОрганизация = Неопределено, ТолькоОбязательные = Ложь, ДляТаблицы = Ложь)
	
	ВидУчастника = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ОпределитьВидУчастника(Реквизиты);
	
	Если Реквизиты.ЭтоФизическоеЛицо Тогда
		СписокРеквизитов = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.РеквизитыФизическогоЛицаСписок(Ложь,
			МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ОпределитьВидУчастника(Реквизиты));
	Иначе
		СписокРеквизитов = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.РеквизитыОрганизацииСписок(Ложь,
			МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ОпределитьВидУчастника(Реквизиты));
	КонецЕсли;
	
	ЗаголовокДекорации = Новый Массив;
	
	ЗаголовокДекорацииНаименование    = Новый Массив;
	ЗаголовокДекорацииКНаименованию   = Новый Массив;
	ЗаголовокДекорацииПаспорт         = Новый Массив;
	ЗаголовокДекорацииАдрес           = Новый Массив;
	ЗаголовокДекорацииДругиеДанные    = Новый Массив;
	ЗаголовокДекорацииОшибки          = Новый Массив;
	НаименованиеДокумента             = "";
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Реквизит.Ключ = "ЭтоИндивидуальныйПредприниматель"
			Или Реквизит.Ключ = "ЭтоФизическоеЛицо"
			Или Реквизит.Ключ = "ЭтоКонтрагент"
			Или Реквизит.Ключ = "ЭтоИностраннаяОрганизация"
			Или Реквизит.Ключ = "ЭтоИндивидуальныйПредприниматель"
			Или Реквизит.Ключ = "ЭтоФилиал"
			Или Реквизит.Ключ = "ЭтоДолжностноеЛицо"
			Или Реквизит.Ключ = "ФактическийАдресЗначение"
			Или Реквизит.Ключ = "ТелефонЗначение"
			Или Реквизит.Ключ = "ЭлектроннаяПочтаЗначение"
			Или Реквизит.Ключ = "ЮридическийАдресЗначение"
			Или Реквизит.Ключ = "АдресРегистрацииЗначение"
			Или Реквизит.Ключ = "НаименованиеСокращенное"
			Или Реквизит.Ключ = "ЮридическийАдресВСтранеРегистрацииЗначение" Тогда
			Продолжить;
		КонецЕсли;
		
		Найдено = СписокРеквизитов.НайтиПоЗначению(Реквизит.Ключ);
		
		Если Найдено <> Неопределено Тогда
			Если Реквизит.Ключ <> "Отчество" И Найдено.Пометка Тогда
				Если ТолькоОбязательные Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
				Ошибка = СтрШаблон("<a style=""color: ПоясняющийОшибкуТекст"" href=""%1:%2"">%3</a>", ИмяЭлементаОрганизация, Реквизит.Ключ, Найдено.Представление);
				
				ЗаголовокДекорацииОшибки.Добавить(Ошибка);
				
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.Ключ = "Пол" Тогда
				Значение = ?(Реквизит.Значение = 1, "Мужской", "Женский");
				ЗаголовокДекорацииКНаименованию.Добавить(СтрШаблон("%1: %2", Найдено.Представление, Значение));
				Продолжить;
			ИначеЕсли Реквизит.Ключ = "ДокументВид" Тогда
				НаименованиеДокумента = ?(Реквизит.Значение = "21", НСтр("ru = 'Паспорт'"), НСтр("ru = 'Иной документ'"));
				Продолжить;
			ИначеЕсли ТипЗнч(Реквизит.Значение) = Тип("Дата") Тогда
				Значение = Формат(Реквизит.Значение, "ДЛФ=D");
			Иначе
				Значение = Реквизит.Значение;
			КонецЕсли;
			
			Если Реквизит.Ключ = "НаименованиеПолное" 
				Или Реквизит.Ключ = "ДолжностьЛицаБезДоверенности"
				Или Реквизит.Ключ = "Фамилия"
				Или Реквизит.Ключ = "Имя"
				Или Реквизит.Ключ = "Отчество" Тогда
				ЗаголовокДекорацииНаименование.Добавить(Значение);
			ИначеЕсли Реквизит.Ключ = "Гражданство"
				Или Реквизит.Ключ = "МестоРождения"
				Или Реквизит.Ключ = "ДатаРождения" Тогда
				ЗаголовокДекорацииКНаименованию.Добавить(СтрШаблон("%1: %2", Найдено.Представление, Значение)); 
			ИначеЕсли Реквизит.Ключ = "ФактическийАдрес"
				Или Реквизит.Ключ = "ЮридическийАдрес"
				Или Реквизит.Ключ = "АдресРегистрации"
				Или Реквизит.Ключ = "ЮридическийАдресВСтранеРегистрации" Тогда
				ЗаголовокДекорацииАдрес.Добавить(СтрШаблон("%1: %2", Найдено.Представление, Значение)); 
			ИначеЕсли Реквизит.Ключ = "ДокументНомер"
				Или Реквизит.Ключ = "ДокументКемВыдан"
				Или Реквизит.Ключ = "ДокументДатаВыдачи"
				Или Реквизит.Ключ = "ДокументКодПодразделения"
				Или Реквизит.Ключ = "ДокументСрокДействия" Тогда
				ЗаголовокДекорацииПаспорт.Добавить(СтрШаблон("%1: %2", Найдено.Представление, Значение));
			Иначе
				ЗаголовокДекорацииДругиеДанные.Добавить(СтрШаблон("%1: %2", Найдено.Представление, Значение));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаголовокДекорацииНаименование.Количество() Тогда
		ЗаголовокДекорации.Добавить(СтрСоединить(ЗаголовокДекорацииНаименование, " "));
	КонецЕсли;
	Если ЗаголовокДекорацииКНаименованию.Количество() Тогда
		ЗаголовокДекорации.Добавить(СтрСоединить(ЗаголовокДекорацииКНаименованию, ", "));
	КонецЕсли;
	Если ЗаголовокДекорацииПаспорт.Количество() Тогда
		ЗаголовокДекорацииПаспорт = НаименованиеДокумента + " " + СтрСоединить(ЗаголовокДекорацииПаспорт, ", ");
		ЗаголовокДекорации.Добавить(ЗаголовокДекорацииПаспорт);
	КонецЕсли;
	Если ЗаголовокДекорацииДругиеДанные.Количество() Тогда
		ЗаголовокДекорации.Добавить(СтрСоединить(ЗаголовокДекорацииДругиеДанные, ", "));
	КонецЕсли;
	Если ЗаголовокДекорацииАдрес.Количество() Тогда
		ЗаголовокДекорации.Добавить(СтрСоединить(ЗаголовокДекорацииАдрес, Символы.ПС));
	КонецЕсли;
	
	Возврат Новый Структура("ЗаголовокДекорации, ЗаголовокДекорацииОшибки", ЗаголовокДекорации, ЗаголовокДекорацииОшибки);
	
КонецФункции

Процедура ДобавитьРеквизитыДляПроверки(Форма, ПроверяемыеРеквизиты, РеквизитыДляПроверки,
			ПолеСообщения = "", ШаблонСообщения = "%1:", СведенияОбОрганизации = Неопределено) Экспорт
			
	Сведения = ?(СведенияОбОрганизации = Неопределено, Форма, СведенияОбОрганизации);
	
	Для Каждого Реквизит Из РеквизитыДляПроверки Цикл
		
		ИмяРеквизита = Реквизит.Значение;
		
		ПараметрыРеквизитаДляПроверки = Новый Структура;
		ПараметрыРеквизитаДляПроверки.Вставить("Имя", ИмяРеквизита);
		Если ИмяРеквизита = "Телефон"
			Или ИмяРеквизита = "ЮридическийАдрес"
			Или ИмяРеквизита = "ЮридическийАдресВСтранеРегистрации"
			Или ИмяРеквизита = "АдресРегистрации"
			Или ИмяРеквизита = "ФактическийАдрес" Тогда
			ПараметрыРеквизитаДляПроверки.Вставить("Значение", Сведения[ИмяРеквизита + "Значение"]);
		Иначе
			Если СведенияОбОрганизации = Неопределено Тогда
				ПараметрыРеквизитаДляПроверки.Вставить("Значение", Сведения[ИмяРеквизита]);
			Иначе
				ПараметрыРеквизитаДляПроверки.Вставить("Значение", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Сведения, ИмяРеквизита));
			КонецЕсли;
		КонецЕсли;
		ПараметрыРеквизитаДляПроверки.Вставить("ПолеСообщения",
			?(ЗначениеЗаполнено(ПолеСообщения), ПолеСообщения, ИмяРеквизита));
		
		Если Реквизит.Пометка Тогда
			ТекстНезаполненного = "";
		Иначе
			ТекстНезаполненного = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Реквизит.Представление);
		КонецЕсли;
		ПараметрыРеквизитаДляПроверки.Вставить("ТекстНезаполненного", ТекстНезаполненного);
		ПараметрыРеквизитаДляПроверки.Вставить("ТекстПроверкиЗначения",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Реквизит.Представление));
		
		ПроверяемыеРеквизиты.Добавить(ПараметрыРеквизитаДляПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеРеквизитов(Форма, Реквизиты, СведенияОбОрганизации = Неопределено) Экспорт
	
	Отказ = Ложь;
	ВидДокумента = "";
	Гражданство = Неопределено;
	БезГражданства = Неопределено;
	
	Сведения = ?(СведенияОбОрганизации = Неопределено, Форма, СведенияОбОрганизации);
	
	Если Сведения.ЭтоФизическоеЛицо Тогда
		ЭтоФЛ = Истина;
		ЭтоИП = Сведения.ЭтоИндивидуальныйПредприниматель;
	Иначе
		ЭтоФЛ = Ложь;
		ЭтоИП = Сведения.ЭтоИндивидуальныйПредприниматель;
	КонецЕсли;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Реквизит.Имя = "ДокументВид" Тогда
			ВидДокумента = Реквизит.Значение;
		ИначеЕсли Реквизит.Имя = "ДокументНомер" Тогда
			НомерДокумента = Реквизит;
		ИначеЕсли Реквизит.Имя = "ДокументКодПодразделения" Тогда
			КодПодразделения = Реквизит;
		ИначеЕсли Реквизит.Имя = "Гражданство" Тогда
			Гражданство = Реквизит;
		ИначеЕсли Реквизит.Имя = "БезГражданства" Тогда
			БезГражданства = Реквизит;
		КонецЕсли;
		
		ПроверитьЗаполнениеРеквизита(Форма, Реквизит, Отказ, ЭтоИП, ЭтоФЛ);
		
	КонецЦикла;
	
	Если Гражданство <> Неопределено Тогда
		ТекстОшибки = ОшибкиПроверкиГражданства(Гражданство.Значение, БезГражданства.Значение);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			СообщитьПользователю(Форма, ТекстОшибки, Гражданство.ПолеСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДокумента = "21" Тогда
		
		ТекстОшибки = ОшибкиПроверкиКодаПодразделения(КодПодразделения.Значение);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = КодПодразделения.ТекстПроверкиЗначения + " " + ТекстОшибки;
			СообщитьПользователю(Форма, ТекстОшибки, КодПодразделения.ПолеСообщения, Отказ);
		КонецЕсли;
		
		ТекстОшибки = ОшибкиПроверкиНомераПаспорта(НомерДокумента.Значение);
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = НомерДокумента.ТекстПроверкиЗначения + " " + ТекстОшибки;
			СообщитьПользователю(Форма, ТекстОшибки, НомерДокумента.ПолеСообщения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизита(Форма, Реквизит, Отказ, ЭтоИП, ЭтоФЛ)
	
	ИмяРеквизита = Реквизит.Имя;
	ПолеСообщения = Реквизит.ПолеСообщения;
	ЗначениеРеквизита = Реквизит.Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Если ЗначениеЗаполнено(Реквизит.ТекстНезаполненного) Тогда
			ТекстОшибки = Реквизит.ТекстНезаполненного + " " + ТекстОшибкиПолеНеЗаполнено();
			СообщитьПользователю(Форма, ТекстОшибки, ПолеСообщения, Отказ);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстСообщения = "";
	ПродолжитьПриОшибке = Ложь;
	
	Если ИмяРеквизита = "ИНН" Или ИмяРеквизита = "ИННФЛ" Тогда
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЗначениеРеквизита,
			Не (ЭтоИП Или ЭтоФЛ), ТекстСообщения);
	ИначеЕсли ИмяРеквизита = "КПП" Тогда
		
		РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ЗначениеРеквизита, ТекстСообщения);
		
	ИначеЕсли ИмяРеквизита = "ОГРН" Тогда
		РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ЗначениеРеквизита, Не ЭтоИП, ТекстСообщения);
		
	ИначеЕсли ИмяРеквизита = "ЮридическийАдрес"
		  Или ИмяРеквизита = "ФактическийАдрес"
	      Или ИмяРеквизита = "АдресРегистрации" Тогда
		
		ТекстСообщения = ОшибкиПроверкиАдреса(ЗначениеРеквизита);
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ПроверитьАдрес(ЗначениеРеквизита, ЭтоФЛ);
			ПродолжитьПриОшибке = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Телефон" Тогда
		
		ТекстСообщения = ОшибкиПроверкиТелефона(ЗначениеРеквизита);
		
	ИначеЕсли ИмяРеквизита = "СтраховойНомерПФР" Тогда
		РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(
			ЗначениеРеквизита, ТекстСообщения);
		
	ИначеЕсли ИмяРеквизита = "ЭлектроннаяПочта" Тогда
		
		Попытка
			ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ЗначениеРеквизита);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыОшибок = СтрРазделить(ТекстСообщения, Символы.ПС + Символы.ВК, Ложь);
	Для Каждого ТекстОшибки Из ТекстыОшибок Цикл
		ТекстОшибки = Реквизит.ТекстПроверкиЗначения + " " + ТекстОшибки;
		СообщитьПользователю(Форма, ТекстОшибки, ПолеСообщения,
			?(ПродолжитьПриОшибке, Неопределено, Отказ));
	КонецЦикла;
	
КонецПроцедуры

Функция ОшибкиПроверкиАдреса(Знач АдресЗначение)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат "";
	КонецЕсли;
	
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	ТекстСообщения = Новый Массив;
	ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
	АдресСтруктура = МодульРаботаСАдресами.СведенияОбАдресе(АдресЗначение, ДополнительныеПараметры);
	
	// Проверка, что адрес российский.
	Если Не АдресСтруктура.Свойство("КодРегиона") Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Это не российский адрес'"));
	КонецЕсли;
	
	// Проверка, что указан регион.
	Если Не АдресСтруктура.Свойство("Регион") Или Не ЗначениеЗаполнено(АдресСтруктура.Регион) Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Не указан регион'"));
	КонецЕсли;
	
	// Проверка, что регион указан правильно - код региона определен.
	Если Не ЗначениеЗаполнено(АдресСтруктура.КодРегиона) Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Некорректный регион (код региона не определен)'"));
	КонецЕсли;
	
	// Населенный пункт полностью.
	НаселенныйПунктПолностью = НаселенныйПунктПолностью(АдресСтруктура);
	Если Не ЗначениеЗаполнено(НаселенныйПунктПолностью) Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Не указан населенный пункт'"));
	КонецЕсли;
	
	Если ТекстСообщения.Количество() > 0 Тогда
		Возврат СтрСоединить(ТекстСообщения, Символы.ПС);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОшибкиПроверкиТелефона(Знач ТелефонЗначение)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат "";
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ТекстСообщения = Новый Массив;
	ТелефонСтруктура = МодульУправлениеКонтактнойИнформацией.СведенияОТелефоне(ТелефонЗначение);
	
	// Проверка, что телефон российский.
	Если СтрЗаменить(ТелефонСтруктура.КодСтраны, "+", "") <> "7" Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Код страны не российский (должен быть ""7"")'"));
	КонецЕсли;
	
	НомерТелефонаБезКодаСтраны = ТелефонСтруктура.КодГорода + ТелефонСтруктура.НомерТелефона;
	
	Если Не ЗначениеЗаполнено(НомерТелефонаБезКодаСтраны) Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Не заполнен номер телефона'"));
		Возврат СтрСоединить(ТекстСообщения, Символы.ПС);
	КонецЕсли;
	
	КодГородаТолькоЦифры = ТолькоЦифры(ТелефонСтруктура.КодГорода);
	Если СтрДлина(КодГородаТолькоЦифры) < 3 Или СтрДлина(КодГородаТолькоЦифры) > 5 Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Код города должен состоять из 3-5 цифр'"));
	КонецЕсли;
	
	Если СтрДлина(ТолькоЦифры(НомерТелефонаБезКодаСтраны)) <> 10 Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Номер телефона с кодом города должен состоять из 10-и цифр'"));
	КонецЕсли;
	
	Если СтрДлина(ТелефонСтруктура.Добавочный) > 6 Тогда
		ТекстСообщения.Добавить(НСтр("ru = 'Добавочный номер телефона не может быть длиннее 6 символов.'"));
	КонецЕсли;
	
	Если ТекстСообщения.Количество() > 0 Тогда
		Возврат СтрСоединить(ТекстСообщения, Символы.ПС);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ТелефонДляОтправкиВСервис(ТелефонЗначение) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат "";
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	ТелефонСтруктура = МодульУправлениеКонтактнойИнформацией.СведенияОТелефоне(ТелефонЗначение);
	
	ТелефонДляСервиса = "+" + СтрЗаменить(ТелефонСтруктура.КодСтраны, "+", "")
		+ "(" + ТолькоЦифры(ТелефонСтруктура.КодГорода) + ")" + ТолькоЦифры(ТелефонСтруктура.НомерТелефона);
		
	Если ЗначениеЗаполнено(ТелефонСтруктура.Добавочный) Тогда
		ТелефонДляСервиса = ТелефонДляСервиса + ", д." + ТелефонСтруктура.Добавочный;
	КонецЕсли;
	
	// Не более 24 символа.
	Возврат ТелефонДляСервиса;
	
КонецФункции

Функция ОшибкиПроверкиКодаПодразделения(КодПодразделения)
	
	Если ПустаяСтрока(КодПодразделения) Тогда
		Возврат НСтр("ru = 'Не указан код подразделения'");
	КонецЕсли;
	
	СтрокаЦифр = СтрЗаменить(СокрЛП(КодПодразделения), "-", "");
	Если СтрДлина(СтрокаЦифр) < 6 Тогда
		Возврат НСтр("ru = 'Код подразделения задан не полностью'");
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаЦифр) Тогда
		Возврат НСтр("ru = 'Код подразделения должен состоять только из цифр.'");
	КонецЕсли;
	
	Если СтрокаЦифр = "000000" Тогда
		Возврат НСтр("ru = 'Код подразделения не может быть нулевым.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОшибкиПроверкиГражданства(Гражданство, БезГражданства)
	
	Если БезГражданства = Истина Тогда
		Если ЗначениеЗаполнено(Гражданство) Тогда
			Возврат НСтр("ru = 'Указан признак ""Без гражданства"" и заполнено гражданство.'");
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Гражданство) Тогда
			Возврат НСтр("ru = 'Не заполнено гражданство.'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Гражданство.Код) Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен код страны гражданства %1.'"), Гражданство);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ОшибкиПроверкиНомераПаспорта(Знач НомерПаспортаРФ)
	
	Если ПустаяСтрока(НомерПаспортаРФ) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаЦифр = СтрЗаменить(НомерПаспортаРФ, ",", "");
	СтрокаЦифр = СтрЗаменить(СтрокаЦифр, " ", "");
	
	Если ПустаяСтрока(СтрокаЦифр) Тогда
		Возврат НСтр("ru = 'Номер паспорта не заполнен'");
	КонецЕсли;
	
	Если СтрДлина(СтрокаЦифр) < 10 Тогда
		Возврат НСтр("ru = 'Номер паспорта задан не полностью'");
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаЦифр) Тогда
		Возврат НСтр("ru = 'Номер паспорта должен состоять только из цифр.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ТолькоЦифры(Строка)
	
	ДлинаСтроки = СтрДлина(Строка);
	
	ОбработаннаяСтрока = "";
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(Строка, НомерСимвола, 1);
		Если Символ >= "0" И Символ <= "9" Тогда
			ОбработаннаяСтрока = ОбработаннаяСтрока + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработаннаяСтрока;
	
КонецФункции

Функция НаселенныйПунктПолностью(АдресСтруктура)
	
	// Округ ОкругСокращение, Район РайонСокращение, Город ГородСокращение,
	// ВнутригородскойРайон ВнутригородскойРайонСокращение, НаселенныйПункт НаселенныйПунктСокращение.
	СписокПолей = "";
	
	Если АдресСтруктура.Свойство("Регион")
	   И АдресСтруктура.Свойство("КодРегиона")
	   И (    АдресСтруктура.КодРегиона = "77"
	      Или АдресСтруктура.КодРегиона = "78"
	      Или АдресСтруктура.КодРегиона = "92"
	      Или АдресСтруктура.КодРегиона = "99") Тогда
		
		СписокПолей = "Регион, КодРегиона, ";
	КонецЕсли;
	
	Возврат ПредставлениеЧастиАдреса(АдресСтруктура, СписокПолей +
		"Округ,
		|Район,
		|Город,
		|ВнутригородскойРайон,
		|НаселенныйПункт,
		|Территория");
	
КонецФункции

Функция ПредставлениеЧастиАдреса(АдресСтруктура, СписокПолей)
	
	Представление = "";
	СтруктураПолей = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(СтруктураПолей, АдресСтруктура);
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	Представление = МодульУправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтруктураПолей);
	
	Возврат Представление;
	
КонецФункции

Процедура СообщитьПользователю(Форма, ТекстСообщения, Поле, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры 

Функция ТекстОшибкиПолеНеЗаполнено() Экспорт
	Возврат НСтр("ru = 'Поле не заполнено'");
КонецФункции

Функция ПроверитьАдрес(Адрес, ЭтоФЛ) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат "";
	КонецЕсли;
	
	Сообщение = "";
	МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	
	Попытка
		
		ПодробныйИтог = МодульРаботаСАдресами.ПроверитьАдрес(Адрес);
		Если ПодробныйИтог.Результат <> "Корректный" Тогда
			
			Для каждого ЭлементСписка Из ПодробныйИтог.СписокОшибок Цикл
				Сообщение = Сообщение + Символы.ПС + ЭлементСписка.Представление;
			КонецЦикла;
			
			Сообщение = СокрЛП(Сообщение);
			Если Не ЗначениеЗаполнено(Сообщение) Тогда
				Сообщение = НСтр("ru = 'Адрес не заполнен'");
			КонецЕсли;
			Если ЭтоФЛ Тогда
				Сообщение = Сообщение + " (" + НСтр("ru = 'не ошибка, если указан регион и населенный пункт'")+ ")";
			Иначе
				Сообщение = Сообщение + " (" + НСтр("ru = 'не ошибка, если так в ЕГРЮЛ'")+ ")";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ОбновитьКлассификаторыМЧД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторовМЧД);
	РегистрыСведений.КлассификаторыМЧД.ОбновитьКлассификаторы();
	
КонецПроцедуры


#Область ДанныеДляМоихДел

Функция КоличествоДоверенностейСИстекающимСрокомДействия()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МашиночитаемыеДоверенности.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
	|ГДЕ
	|	КонецПериода(МашиночитаемыеДоверенности.ДатаОкончания, День) МЕЖДУ &ТекущаяДата И &ДатаОкончания
	|	И МашиночитаемыеДоверенности.Статус = &Статус";

	ТекущаяДатаСеанса = КонецДня(ТекущаяДатаСеанса());

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("ДатаОкончания", МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ДатаОкончанияПериодаИстекающихДоверенностей(ТекущаяДатаСеанса));
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМЧД.Действует);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция КоличествоДоверенностейТребующихПодписания()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МашиночитаемыеДоверенности.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МашиночитаемыеДоверенностиСтатусы КАК МашиночитаемыеДоверенностиСтатусы
	|		ПО (МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность = МашиночитаемыеДоверенности.Ссылка)
	|ГДЕ
	|	МашиночитаемыеДоверенности.Статус = &Статус
	|	И НЕ МашиночитаемыеДоверенностиСтатусы.Подписана";

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМЧД.Черновик);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция КоличествоДоверенностейТребующихВнимания()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МашиночитаемыеДоверенности.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МашиночитаемыеДоверенностиСтатусы КАК МашиночитаемыеДоверенностиСтатусы
	|		ПО (МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность = МашиночитаемыеДоверенности.Ссылка)
	|ГДЕ
	|	МашиночитаемыеДоверенности.НомерДоверенности <> """"
	|	И МашиночитаемыеДоверенностиСтатусы.ТехническийСтатус В (&Статусы)
	|	И МашиночитаемыеДоверенности.ДатаОкончания > &ТекущаяДата";

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса);
	СтатусыТребующиеВнимания = Новый Массив;
	СтатусыТребующиеВнимания.Добавить(Перечисления.ТехническиеСтатусыМЧД.ОшибкаРегистрации);
	СтатусыТребующиеВнимания.Добавить(Перечисления.ТехническиеСтатусыМЧД.Регистрация);
	СтатусыТребующиеВнимания.Добавить(Перечисления.ТехническиеСтатусыМЧД.РегистрацияОтмены);
	Запрос.УстановитьПараметр("Статусы", СтатусыТребующиеВнимания);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

#КонецОбласти

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПредставительНесколько.ПредставительФЛ");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПредставительНесколькоПредставительФЛ");
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПредставительНесколько.НеЗаполненыРеквизиты");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПредставительНесколькоНеЗаполненыРеквизиты");
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПредставительНесколько.НеЗаполненыРеквизитыФЛ");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПредставительНесколькоНеЗаполненыРеквизитыФЛ");
	
КонецПроцедуры

Функция ВидыДокументовУдостоверяющихЛичность() Экспорт
	
	ВидыДокументов = Новый ТаблицаЗначений;
	ВидыДокументов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ВидыДокументов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ВидыДокументов.Колонки.Добавить("Шаблон", Новый ОписаниеТипов("Строка"));
	ВидыДокументов.Колонки.Добавить("Маска", Новый ОписаниеТипов("Строка"));
	
	ТекстовыйДокумент = ПолучитьОбщийМакет("ВидыДокументовУдостоверяющихЛичность");
	
	Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли;
		ЧастиСтроки = СтрРазделить(Строка, ";");
		
		ВидДокумента = ВидыДокументов.Добавить();
		ВидДокумента.Код = ЧастиСтроки[0];
		ВидДокумента.Наименование = ЧастиСтроки[1];
		ВидДокумента.Шаблон =  ЧастиСтроки[3];
		
		Маска = ЧастиСтроки[3];
		Если СтрНайти(Маска, "R")
			Или СтрНайти(Маска, "S") Тогда
			Маска = "";
		Иначе
			Маска = СтрЗаменить(Маска, "0", "#");
			Маска = СтрЗаменить(Маска, "Б", "X");
		КонецЕсли;
		
		ВидДокумента.Маска = Маска;
	КонецЦикла;
	
	ВидыДокументов.Сортировать("Наименование");
	
	Возврат ВидыДокументов;
	
КонецФункции

Процедура ДобавитьОписаниеДоверенностиМЧД(ДоверенностьМЧД, ОписаниеФайлов, Сведения)
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Данные", ДоверенностьМЧД.Данные);
	ОписаниеФайла.Вставить("Имя",    ДоверенностьМЧД.Имя);
	
	Сведения = Сведения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: ""%2""'"), ДоверенностьМЧД.ТипФайла, ДоверенностьМЧД.Имя) + Символы.ПС;
		
	ОписаниеФайлов.Добавить(ОписаниеФайла);
	
КонецПроцедуры

#Область РаботаСРаспределеннымРеестром

Функция СвойстваСервераМЧДРР()
	
	Результат = НастройкиМЧД();
	
	Если ИспользуетсяРежимТестирования() Тогда
		СохраненныеНастройкиМЧД = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_НастройкиМЧД");
		Если СохраненныеНастройкиМЧД <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, СохраненныеНастройкиМЧД);
		КонецЕсли;
		Если Результат.ИспользоватьРасширенияAPI Тогда
			Результат.ЛогинОператора 	= "";
			Результат.ПарольОператора 	= "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	URLСервера = Константы.АдресСервисаМЧДРР.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если НЕ ЗначениеЗаполнено(URLСервера) Тогда
		URLСервера = "https://1cpoagate.1c.ru/applications/MChD/api/clientpoa";
	КонецЕсли;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСервера);
	ЛогинПароль = ?(ЗначениеЗаполнено(СтруктураURI.Логин) ИЛИ ЗначениеЗаполнено(СтруктураURI.Пароль),
		СтруктураURI.Логин + ":" + СтруктураURI.Пароль + "@", "");
	
	Результат.Вставить("АдресСервера", 					СтруктураURI.Схема + "://" + ЛогинПароль + СтруктураURI.ИмяСервера);
	Результат.Вставить("АдресСервераБезАутентификации", СтруктураURI.Схема + "://" + СтруктураURI.ИмяСервера);
	Результат.Вставить("РесурсКорняAPI", 				"/" + СтруктураURI.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиМЧД()
	
	Результат = Новый Структура;
	Результат.Вставить("ЛогинОператора", 			"");
	Результат.Вставить("ПарольОператора", 			"");
	Результат.Вставить("ИспользоватьРасширенияAPI", Истина);
	Результат.Вставить("ТестовыйСервер", 			"test");
	
	Возврат Результат;
	
КонецФункции

Функция ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПродолжитьПолучениеТикета = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");	
		ПродолжитьПолучениеТикета = МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
	Если ПродолжитьПолучениеТикета Тогда
			
			ВладелецТикета = ВладелецТикета();
			
			РезультатПолученияТикета =
				МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
			
			Если РезультатПолученияТикета = Неопределено ИЛИ НЕ ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
				Возврат МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			
			Иначе
				Возврат РезультатПолученияТикета;
			КонецЕсли;
			
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета,  ДополнительныеФайлы, ЗаголовокОшибки = "", ТекстОшибки = "")
	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	Результат.Вставить("ЗапросHTTP", ЗапросHTTP);
	Результат.Вставить("ОтветHTTP", ОтветHTTP);
	Результат.Вставить("СтруктураОтвета", СтруктураОтвета);
	Результат.Вставить("ТекстОшибки", ТекстОшибки); 
	Результат.Вставить("ДополнительныеФайлы", ДополнительныеФайлы);
	Возврат Результат;
КонецФункции 

Функция ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибки)
	ЗаголовокОшибки = ПараметрыОшибки.ЗаголовокОшибки;
	ЗапросHTTP = ПараметрыОшибки.ЗапросHTTP;
	ОтветHTTP = ПараметрыОшибки.ОтветHTTP;
	ТекстОшибки = ПараметрыОшибки.ТекстОшибки;
	СтруктураОтвета = ПараметрыОшибки.СтруктураОтвета;
	ДополнительныеФайлы = ПараметрыОшибки.ДополнительныеФайлы;
	
	Если ОтветHTTP <> Неопределено Тогда
		СтрокаОтвета = ПолучитьИдентификаторОтвета(ОтветHTTP, СтруктураОтвета);
	Иначе
		СтрокаОтвета = "";
	КонецЕсли;
	
	Если ОтветHTTP <> Неопределено И Строка(ОтветHTTP.КодСостояния) = СтрокаОтвета Тогда 
		СтрокаПоискаОшибки = СтрокаОтвета;
	Иначе
		Если ЗапросHTTP <> Неопределено Тогда
			СтрокаЗапроса = ПолучитьИдентификаторЗапроса(ЗапросHTTP);
		Иначе
			СтрокаЗапроса = "";
		КонецЕсли;
		
		Если СтрокаЗапроса + СтрокаОтвета = "" Тогда
			СтрокаПоискаОшибки = ТекстОшибки;
		Иначе
			СтрокаПоискаОшибки = СтрокаЗапроса + "|" + СтрокаОтвета;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПоКлассификатору = ЭлектроннаяПодпись.ОшибкаПоКлассификатору(СтрокаПоискаОшибки, Истина);
	
	СтруктураЗначения = Новый Структура;
	СтруктураЗначения.Вставить("СтрокаПоискаОшибки", СтрокаПоискаОшибки);
	СтруктураЗначения.Вставить("ОшибкаПоКлассификаторуНайдена", ОшибкаПоКлассификатору <> Неопределено);
	
	Если ОшибкаПоКлассификатору = Неопределено Тогда
		ОшибкаПоКлассификатору = Новый Структура("Причина, Решение, СпособУстранения, Ссылка");
	КонецЕсли;
	ОшибкаПоКлассификатору.Вставить("ТекстОшибки", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОтвета, "title", ТекстОшибки));
	ОшибкаПоКлассификатору.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	СтруктураЗначения.Вставить("ОшибкаПоКлассификатору", ОшибкаПоКлассификатору); 
	
	ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураЗначения));
	Если ДополнительныеФайлы = Неопределено Тогда
		ДополнительныеФайлы = Новый Массив;
	КонецЕсли;
	ДобавитьФайлДляРасследования(ДополнительныеФайлы, ДанныеФайла, НСтр("ru='Ошибка по классификатору'"), "html");
	ОшибкаПоКлассификатору.Вставить("ДополнительныеФайлы", ДополнительныеФайлы);
		
	Возврат ОшибкаПоКлассификатору;

КонецФункции

	// Устанавливает соединение с сервером Интернета по протоколу http(s).
//
// Параметры:
//  URL                 - Строка - url сервера в формате [Протокол://]<Сервер>/.
//  ПараметрыСоединения - Структура - дополнительные параметры для "тонкой" настройки:
//    * Таймаут - Число - определяет время ожидания осуществляемого соединения и операций, в секундах.
//
Функция СоединениеССерверомИнтернета(URL, ПараметрыСоединения = Неопределено) Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	
	Таймаут = 30;
	Если ТипЗнч(ПараметрыСоединения) = Тип("Структура") Тогда
		Если ПараметрыСоединения.Свойство("Таймаут") Тогда
			Таймаут = ПараметрыСоединения.Таймаут;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();	
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации() +"."
			+ НСтр("ru = 'Установление соединения с сервером интернета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Процедура СброситьДанныеАутентификацииНаПорталеПоддержки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Если МодульИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки() Тогда
			МодульИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда	
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьФайлДляРасследования(Файлы, ДанныеФайла, ТипФайла, Расширение = "txt")
	СведенияОФайле = Новый Структура;
	Если ТипЗнч(ДанныеФайла) = Тип("Строка") Тогда
		СведенияОФайле.Вставить("Данные", Новый ДвоичныеДанные(ДанныеФайла));
	ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		СведенияОФайле.Вставить("Данные", ДанныеФайла);
	Иначе
		СведенияОФайле.Вставить("Данные", Неопределено);
	КонецЕсли;
	СведенияОФайле.Вставить("Имя", ТипФайла + "." + Расширение);
	СведенияОФайле.Вставить("ТипФайла", ТипФайла);
	Файлы.Добавить(СведенияОФайле);	
КонецПроцедуры          

Функция ПолучитьИдентификаторЗапроса(ЗапросHTTP)
	Результат = "";
	Словарь = СтрРазделить("poar-webapp/integration/poa/generate-number/transactions/status/poaopen/public/poazip/zip/number/token", "/", Ложь);
	Синонимы = Новый Соответствие;
	Синонимы.Вставить("/vst-oauth2/oauth/token", "/token");
	Синонимы.Вставить("/poar-webapp/integration/poa/generate-number", "/number");
	Синонимы.Вставить("/poar-webapp/integration/poa", "/poa");
	Синонимы.Вставить("/poar-webapp/integration/poa/status", "/transactions");
	Синонимы.Вставить("/poar-webapp/integration/poa/public", "/poaopen");
	Синонимы.Вставить("/poar-webapp/integration/poa/zip", "/poazip");
	СловаЗапроса = СтрРазделить(ЗапросHTTP.АдресРесурса, "/?", Ложь);
	Для Каждого Слово Из СловаЗапроса Цикл
		Если Словарь.Найти(Слово) <> Неопределено Тогда
			Результат = Результат + "/" + Слово;
		КонецЕсли;
	КонецЦикла;
	Синоним = Синонимы[Результат];
	Возврат ?(Синоним = Неопределено, Результат, Синоним);
КонецФункции  

Функция ПолучитьИдентификаторОтвета(ОтветHTTP, СтруктураОтвета)
	Если СтруктураОтвета = Неопределено Или ОтветHTTP.КодСостояния = 500  Тогда
		Возврат Строка(ОтветHTTP.КодСостояния);
	ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
		КодОшибки = СтруктураОтвета.error;
	ИначеЕсли СтруктураОтвета.Свойство("type") Тогда
		КодОшибки = СтруктураОтвета.type;
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(КодОшибки) Тогда
		Возврат Строка(ОтветHTTP.КодСостояния);
	КонецЕсли;
	
	Возврат КодОшибки;
КонецФункции

Функция ПараметрыФайловДляРасследования()
	
	ПараметрыФайловДляРасследования = Новый Структура;
	ПараметрыФайловДляРасследования.Вставить("ИмяФайлаЗапроса", "");
	ПараметрыФайловДляРасследования.Вставить("ИмяФайлаОтвета", "");
	ПараметрыФайловДляРасследования.Вставить("Запрос", Неопределено);
	ПараметрыФайловДляРасследования.Вставить("Ответ", Неопределено);
	ПараметрыФайловДляРасследования.Вставить("СоединениеHTTP", Неопределено);
	Возврат ПараметрыФайловДляРасследования;

КонецФункции

Функция ФайлыДляРасследования(ПараметрыФайловДляРасследования)
	
	ИмяФайлаЗапроса = ПараметрыФайловДляРасследования.ИмяФайлаЗапроса;
	ИмяФайлаОтвета = ПараметрыФайловДляРасследования.ИмяФайлаОтвета;
	Запрос = ПараметрыФайловДляРасследования.Запрос;
	Ответ = ПараметрыФайловДляРасследования.Ответ;
	СоединениеHTTP = ПараметрыФайловДляРасследования.СоединениеHTTP;
	
	ДополнительныеФайлы = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		АдресРесурса = Запрос.АдресРесурса;
		Заголовки = Запрос.Заголовки;
		УбратьИнформациюОДоступе(АдресРесурса, Заголовки);
		RestЗапрос = RestПредставлениеЗапроса(Запрос, СоединениеHTTP);
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(RestЗапрос);
		ДобавитьФайлДляРасследования(ДополнительныеФайлы, ДанныеФайла, НСтр("ru='Запрос http'"), "rest");
	КонецЕсли;
	
	Если Ответ <> Неопределено Тогда
		СтруктураЗначения = Новый Структура;
		СтруктураЗначения.Вставить("КодСостояния", Ответ.КодСостояния);
		Заголовки = Запрос.Заголовки;
		УбратьИнформациюОДоступе(АдресРесурса, Заголовки);
		СтруктураЗначения.Вставить("Заголовки", Заголовки);
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ОбщегоНазначения.ЗначениеВJSON(СтруктураЗначения));
		ДобавитьФайлДляРасследования(ДополнительныеФайлы, ДанныеФайла, НСтр("ru='Ответ http'"), "json");
	КонецЕсли;
	
	Возврат ДополнительныеФайлы;
КонецФункции     

Функция RestПредставлениеЗапроса(Запрос, СоединениеHTTP)
	RestЗапрос = Новый Массив;
	RestЗапрос.Добавить("###");
	RestЗапрос.Добавить(Символы.ПС);
	АдресРесурса = ?(СоединениеHTTP.ЗащищенноеСоединение = Неопределено, "http://", "https://") + СоединениеHTTP.Сервер + "/" + Запрос.АдресРесурса;
	СтрокаЗапроса = ?(ЗначениеЗаполнено(Запрос.ПолучитьТелоКакСтроку()), "POST", "GET") + " " + АдресРесурса + " HTTP/1.1";
	RestЗапрос.Добавить(СтрокаЗапроса);
	Для Каждого Заголовок Из Запрос.Заголовки Цикл
		RestЗапрос.Добавить(Заголовок.Ключ+": "+Заголовок.Значение);
	КонецЦикла;
	
	RestЗапрос.Добавить(Символы.ПС);
	RestЗапрос.Добавить(Запрос.ПолучитьТелоКакСтроку()); 
	RestЗапрос.Добавить(Символы.ПС);
	RestЗапрос.Добавить("###");
	Возврат СтрСоединить(RestЗапрос, Символы.ПС);
КонецФункции

Процедура УбратьИнформациюОДоступе(Строка, Заголовки)
	Если Заголовки.Получить("username") <> Неопределено Тогда
		Заголовки.Вставить("username", "*");
	КонецЕсли;
	
	Если Заголовки.Получить("password") <> Неопределено Тогда
		Заголовки.Вставить("password", "*");
	КонецЕсли;
	
	Позиция = СтрНайти(Строка, "?login=");
	Если Позиция > 0 Тогда
		Строка = Лев(Строка, Позиция -1)+"?login=*&password=*";
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаИзСтрокиРазныхФорматов(СтрокаДаты)
	
	Если ТипЗнч(СтрокаДаты) = Тип("Дата") Тогда
		Возврат СтрокаДаты;
	КонецЕсли;
	
	Возврат ПрочитатьДатуJSON(СтрокаДаты, ФорматДатыJSON.ISO);
	
КонецФункции

Функция СтатусТранзакцииПеречислением(СтатусТранзакцииСтрокой)
	Если СтатусТранзакцииСтрокой = "SUCCESS" Тогда
		Возврат Перечисления.СтатусыТранзакцииСРеестромМЧД.Успешно;
	ИначеЕсли СтатусТранзакцииСтрокой = "FAILURE" Тогда
		Возврат Перечисления.СтатусыТранзакцииСРеестромМЧД.Ошибка;
	ИначеЕсли СтатусТранзакцииСтрокой = "PENDING" Тогда
		Возврат Перечисления.СтатусыТранзакцииСРеестромМЧД.ОжидаетОбработки;
	КонецЕсли;
	Возврат Перечисления.СтатусыТранзакцииСРеестромМЧД.ПустаяСсылка();
КонецФункции

#КонецОбласти  

#Область ТехническийСтатусДокумента

Функция ПрочитатьСостояниеМЧД(Доверенность) Экспорт
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность);
	СостояниеМассиваМЧД = ПрочитатьСостояниеМассиваМЧД(Доверенности);
	Если СостояниеМассиваМЧД.Количество() > 0 Тогда
		Возврат СостояниеМассиваМЧД[Доверенность];
	Иначе
		Возврат СостояниеДоверенности();
	КонецЕсли;
КонецФункции

Функция СостояниеДоверенности()
	Результат = Новый Структура;
	Результат.Вставить("Доверенность");
	Результат.Вставить("ОписаниеСостояния", "");
	Результат.Вставить("ДатаТранзакции");
	Результат.Вставить("ТипТранзакции");
	Результат.Вставить("ТехническийСтатус");
	Результат.Вставить("СтатусТранзакции");
	Результат.Вставить("Статус");
	Результат.Вставить("Подписана");
	Результат.Вставить("ДатаЗапросаСтатуса");
	Результат.Вставить("ДанныеОшибкиЗапросаСтатуса");
	Результат.Вставить("ОтображатьСтатусВДокументе", Ложь);
	Возврат Результат;
КонецФункции

Функция ПрочитатьСостояниеМассиваМЧД(Доверенности)
	
	СостояниеДоверенностей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность КАК Доверенность,
	               |	МашиночитаемыеДоверенностиСтатусы.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	               |	МашиночитаемыеДоверенностиСтатусы.ТехническийСтатус КАК ТехническийСтатус,
	               |	МашиночитаемыеДоверенностиСтатусы.СтатусТранзакции КАК СтатусТранзакции,
	               |	МашиночитаемыеДоверенностиСтатусы.Подписана КАК Подписана,
	               |	МашиночитаемыеДоверенностиСтатусы.ТипТранзакции КАК ТипТранзакции,
	               |	МашиночитаемыеДоверенностиСтатусы.ДатаТранзакции КАК ДатаТранзакции,
	               |	МашиночитаемыеДоверенностиСтатусы.ДатаЗапросаСтатуса КАК ДатаЗапросаСтатуса,
	               |	МашиночитаемыеДоверенностиСтатусы.ДанныеОшибкиЗапросаСтатуса КАК ДанныеОшибкиЗапросаСтатуса,
	               |	МашиночитаемыеДоверенности.Статус КАК Статус,
	               |	ВЫБОР
	               |		КОГДА МашиночитаемыеДоверенностиСтатусы.ТехническийСтатус В (&СтатусыБезПодробностей)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ОтображатьСтатусВДокументе
	               |ИЗ
	               |	РегистрСведений.МашиночитаемыеДоверенностиСтатусы КАК МашиночитаемыеДоверенностиСтатусы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенности КАК МашиночитаемыеДоверенности
	               |		ПО МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность = МашиночитаемыеДоверенности.Ссылка
	               |ГДЕ
	               |	МашиночитаемыеДоверенностиСтатусы.МашиночитаемаяДоверенность В(&Доверенности)";
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	СтатусыБезПодробностей = Новый Массив;
	СтатусыБезПодробностей.Добавить(Перечисления.ТехническиеСтатусыМЧД.Создание);
	СтатусыБезПодробностей.Добавить(Перечисления.ТехническиеСтатусыМЧД.Подписание);
	СтатусыБезПодробностей.Добавить(Перечисления.ТехническиеСтатусыМЧД.Подписан);
	СтатусыБезПодробностей.Добавить(Перечисления.ТехническиеСтатусыМЧД.Просрочено);
	СтатусыБезПодробностей.Добавить(Перечисления.ТехническиеСтатусыМЧД.Отменена);
	
	Запрос.УстановитьПараметр("СтатусыБезПодробностей", СтатусыБезПодробностей);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СостояниеДоверенности = СостояниеДоверенности();
		ЗаполнитьЗначенияСвойств(СостояниеДоверенности, Выборка);
		Если ЗначениеЗаполнено(Выборка.ДатаТранзакции) Тогда
			ОписаниеСостояния = СтроковыеФункции.ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<span style=""color: %1"">Запрос отправлен %2</span>'"), "ПоясняющийТекст", ОтформатироватьДату(Выборка.ДатаТранзакции)));
		ИначеЕсли ЗначениеЗаполнено(Выборка.ТехническийСтатус) Тогда
			ОписаниеСостояния = СтроковыеФункции.ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">%2</span>'"), "ПоясняющийТекст", "Выборка.ТехническийСтатус"))
		Иначе
			ОписаниеСостояния = СтроковыеФункции.ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">Запрос не направлялся</span>'"), "ПоясняющийТекст"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаЗапросаСтатуса) Тогда
			ОписаниеСостояния = Новый ФорматированнаяСтрока(ОписаниеСостояния, Символы.ПС, 
				СтроковыеФункции.ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<span style=""color: %1"">Состояние на %2</span>'"), "ПоясняющийТекст", ОтформатироватьДату(Выборка.ДатаЗапросаСтатуса))));	
		КонецЕсли;
		
		Если Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.ОжидаетОбработки
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Регистрация Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: Ожидает регистрации</span>'"), "ПоясняющийТекст");
		ИначеЕсли Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.ОжидаетОбработки
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Отмена Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: Ожидает отмены</span>'"), "ПоясняющийТекст");
		ИначеЕсли Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.Успешно
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Регистрация
			И Выборка.ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Регистрация Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: Ожидает регистрации в ИР «Доверенность»</span>'"), "ПоясняющийТекст");
		ИначеЕсли Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.Успешно
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Регистрация Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: Успешно зарегистрирована</span>'"), "ПоясняющийТекст");
		ИначеЕсли Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.Успешно
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Отмена Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: Успешно отменена</span>'"), "ПоясняющийТекст");
		ИначеЕсли Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.Ошибка
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Регистрация Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: <a href = ""%2"">Ошибка регистрации</a>'"), "ПоясняющийТекст", "ПоказатьОшибку");
		ИначеЕсли Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.Ошибка
			И Выборка.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Отмена Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: <a href = ""%2"">Ошибка отмены</a>'"), "ПоясняющийТекст", "ПоказатьОшибку");
		ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаТранзакции) И Выборка.СтатусТранзакции = Перечисления.СтатусыТранзакцииСРеестромМЧД.Ошибка Тогда
			ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<span style=""color: %1"">: <a href = ""%2"">Не удалось получить статус</a>'"), "ПоясняющийТекст", "ПоказатьОшибку");
		КонецЕсли;
		
		ОписаниеСостояния = Новый ФорматированнаяСтрока(ОписаниеСостояния, 
			СтроковыеФункции.ФорматированнаяСтрока(ОписаниеСобытия));
		СостояниеДоверенности.ОписаниеСостояния = ОписаниеСостояния;
		СостояниеДоверенности.ДанныеОшибкиЗапросаСтатуса = СостояниеДоверенности.ДанныеОшибкиЗапросаСтатуса.Получить();
		СостояниеДоверенностей.Вставить(Выборка.Доверенность, СостояниеДоверенности);
	КонецЦикла;
	Возврат СостояниеДоверенностей;
КонецФункции

Функция ОтформатироватьДату(Дата)
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаТекстом = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'сегодня %1'"), Формат(Дата, НСтр("ru='ДФ=HH:mm'")));
	Иначе
		ДатаТекстом = Формат(Дата, НСтр("ru='ДФ=dd.MM.yyyy HH:mm'"));
	КонецЕсли;
	Возврат ДатаТекстом;
КонецФункции

Функция ОбновитьИПрочитатьСтатусДоверенностей(Доверенности) Экспорт
	
	РегистрыСведений.МашиночитаемыеДоверенностиСтатусы.ОбновлениеСтатусовМЧД(Доверенности);
	ДанныеСостояний = ПрочитатьСостояниеМассиваМЧД(Доверенности);
	Возврат ДанныеСостояний;
	
КонецФункции

Процедура РассчитатьИЗаписатьТехническийСтатус(Документ, Знач Подписана = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешниеСтатусы = МашиночитаемыеДоверенностиФНССлужебныйКлиентСервер.ВнешниеСтатусы();
	
	Запись = РегистрыСведений.МашиночитаемыеДоверенностиСтатусы.СоздатьМенеджерЗаписи();
	Запись.МашиночитаемаяДоверенность = Документ;
	Запись.Прочитать();
	
	ТехническийСтатус = Запись.ТехническийСтатус;
	
	Если ЗначениеЗаполнено(Документ.ДатаОкончания) И КонецДня(Документ.ДатаОкончания) < ТекущаяДатаСеанса() Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Просрочено;
	ИначеЕсли ВнешниеСтатусы[ТехническийСтатус] = Истина Тогда
		Если Запись.Подписана И Подписана <> Истина Или Подписана = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Если Подписана <> Неопределено Тогда
			Запись.Подписана = Подписана;
		КонецЕсли;
		
		Если Запись.Подписана Тогда
			Если Документ.РегистрироватьВРеестре Тогда
				ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Подписан;
			Иначе
				ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Активна;
			КонецЕсли;
		Иначе
			ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Создание;
		КонецЕсли;
	КонецЕсли;
	
	Запись.МашиночитаемаяДоверенность = Документ;
	Запись.ТехническийСтатус = ТехническийСтатус;
	Запись.Записать();
	
КонецПроцедуры

Процедура ОбновлениеСтатусовМЧД() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеСтатусовМЧД);
	РегистрыСведений.МашиночитаемыеДоверенностиСтатусы.ОбновлениеСтатусовМЧД();
КонецПроцедуры

Функция ПолучитьЗначениеСтатуса(СтатусСтрокой) Экспорт
	ТехническийСтатус = Неопределено;
	СтатусДоверенности = СокрЛП(ВРег(СтатусСтрокой));
	
	Если СтатусДоверенности = "ACTIVE" Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Зарегистрировано;
	ИначеЕсли СтатусДоверенности = "REJECTED" Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.ОшибкаРегистрации;
	ИначеЕсли СтатусДоверенности = "PROCESSING" Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Регистрация;
	ИначеЕсли СтатусДоверенности = "EXPIRED" Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Просрочено;
	ИначеЕсли СтатусДоверенности = "REVOKED" Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Отменена;
	ИначеЕсли СтатусДоверенности = "CREATED" Тогда
		ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.ДатаНачалаДействияНеНаступила;
	КонецЕсли;
	
	Возврат ТехническийСтатус;
КонецФункции


#КонецОбласти

#Область ИнтерфейсРаботаСРаспределеннымРеестром

Функция АвторизоватьсяНаСервереМЧДРР() Экспорт
	
	ПараметрыРезультатаАвторизации = ПараметрыСеанса.ПараметрыАвторизацииВРаспределенномРеестре;
	Если ПараметрыРезультатаАвторизации <> Неопределено И ПараметрыРезультатаАвторизации.ДатаСеанса <> Неопределено
		И ПараметрыРезультатаАвторизации.РезультатАвторизации <> Неопределено Тогда
		
		ДатаСеанса = ТекущаяДатаСеанса();
		Если ПараметрыРезультатаАвторизации.ДатаСеанса >= ДатаСеанса - 60 * 60
			И ПараметрыРезультатаАвторизации.ДатаСеанса <= ДатаСеанса Тогда
			
			Возврат Новый Структура(ПараметрыРезультатаАвторизации.РезультатАвторизации);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", 			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ТокенДоступа", 			"");
	Результат.Вставить("ТекстОтвета", 			"");
	Результат.Вставить("Ошибка");
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");
	ПараметрыРесурсаНаСервере = "";
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
		ТикетАутентификацииИлиДанныеПользователя = ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
		Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
			ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(, , , , НСтр("ru='Не удается авторизоваться на сайте интернет поддержки'"), НСтр("ru='Не удается авторизоваться на сайте интернет поддержки'"));
			Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
			Возврат Результат;
		КонецЕсли;
		
		Если ТикетАутентификацииИлиДанныеПользователя.Свойство("Тикет") Тогда
			ПараметрыРесурсаНаСервере = "?ticket=" + КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Тикет,
				СпособКодированияСтроки.КодировкаURL);
		Иначе
			ПараметрыРесурсаНаСервере = "?login=" + КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Логин,
				СпособКодированияСтроки.КодировкаURL)
				+ "&password=" + КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Пароль,
				СпособКодированияСтроки.КодировкаURL)
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧДРР.ЛогинОператора);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧДРР.ПарольОператора);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ТелоЗапроса = ОбщегоНазначения.ЗначениеВJSON(СтруктураЗапроса);
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	ОтветHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = СоединениеССерверомИнтернета(СвойстваСервераМЧДРР.АдресСервера);
		
		Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
		Иначе
			//@skip-check object-deprecated Используется на сервере
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается соединиться с сервером реестра'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		СтруктураОтвета = ПолучитьСтруктуруОтвета(ОтветHTTP);
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		Результат.ТокенДоступа = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("access_token"),
			СтруктураОтвета.access_token, "");
		
		КодСостоянияПриНеверномЛогинеИлиПароле = 403;
		Если ОтветHTTP.КодСостояния = КодСостоянияПриНеверномЛогинеИлиПароле И СтруктураОтвета.Свойство("message") Тогда
			СброситьДанныеАутентификацииНаПорталеПоддержки();
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается соединиться с сервером реестра'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается авторизоваться'"), 
			НСтр("ru='Распределенный реестр ФНС России не предоставил данные для авторизации.'"));
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыРезультатаАвторизации = ПараметрыРезультатаАвторизацииНаСервереМЧД();
	ПараметрыРезультатаАвторизации.ДатаСеанса 			= ТекущаяДатаСеанса();
	ПараметрыРезультатаАвторизации.РезультатАвторизации = Новый ФиксированнаяСтруктура(Результат);
	ПараметрыСеанса.ПараметрыАвторизацииВРаспределенномРеестре = Новый ФиксированнаяСтруктура(ПараметрыРезультатаАвторизации);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНомерМЧДРР(ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", 			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ТекстОтвета", 			"");
	Результат.Вставить("Ошибка");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
		
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ОтветHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается получить номер доверенности'"), 
			ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ПолучитьСтруктуруОтвета(ОтветHTTP);
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, 
			НСтр("ru='Не удается получить номер доверенности'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается получить номер доверенности'"), 
			НСтр("ru='Распределенный реестр ФНС России не выдал номер доверенности.'"));
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗарегистрироватьМЧДРР(
		ИмяФайлаВыгрузки,
		ДанныеИлиАдресВыгрузки,
		ДанныеИлиАдресПодписи,
		ТокенДоступа = "",
		НомерДоверенности = "") Экспорт
		
	ДанныеВыгрузки = ?(ТипЗнч(ДанныеИлиАдресВыгрузки) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресВыгрузки), ПолучитьИзВременногоХранилища(ДанныеИлиАдресВыгрузки),
		ДанныеИлиАдресВыгрузки);
	ДанныеПодписи = ?(ТипЗнч(ДанныеИлиАдресПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(ДанныеИлиАдресПодписи), ПолучитьИзВременногоХранилища(ДанныеИлиАдресПодписи),
		ДанныеИлиАдресПодписи);
		
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", 				СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("НомерДоверенности", 		"");
	Результат.Вставить("ХешДоверенности", 			"");
	Результат.Вставить("ИННДоверителя", 			"");
	Результат.Вставить("ТекстОтвета", 				"");
	Результат.Вставить("Ошибка");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если РезультатАвторизации.ПовторятьСоединение Тогда
			Результат.ПовторятьСоединение = Истина;
		КонецЕсли; 
		
		Если Результат.Ошибка <> Неопределено Или Результат.ПовторятьСоединение Тогда
			Возврат Результат;
		КонецЕсли;

		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
		
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	// запись передаваемых файлов
	
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poa""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1.sig""
		|Content-Type: text/xml
		|
		|";
		
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
		
	ОтветHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается зарегистрировать доверенность'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		СтруктураОтвета = ПолучитьСтруктуруОтвета(ОтветHTTP);
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается зарегистрировать доверенность'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается зарегистрировать доверенность'"),
			 НСтр("ru='Распределенный реестр ФНС России не предоставил идентификационные данные.'"));
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусТранзакцииМЧДРР(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", 				СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("СтатусТранзакции", 			Перечисления.СтатусыМЧД.ПустаяСсылка());
	Результат.Вставить("ИдентификаторТранзакции", 	"");
	Результат.Вставить("ДатаВремяТранзакции", 		Неопределено);
	Результат.Вставить("ТекстОтвета", 				"");
	Результат.Вставить("Ошибка");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
		РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ОтветHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удалось обновить статус заявления'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ПолучитьСтруктуруОтвета(ОтветHTTP);
		СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
			
		Результат.СтатусТранзакции = СтатусТранзакцииПеречислением(СтатусТранзакции);
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp"),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.timestamp), Неопределено);
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удалось обновить статус заявления'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		Результат.СтатусТранзакции = Перечисления.СтатусыМЧД.ПустаяСсылка();
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удалось обновить статус заявления'"), 
			НСтр("ru='Распределенный реестр ФНС России не вернул данные о статусе заявления.'"));
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧастичныеДанныеДоверенностиМЧДРР(НомерДоверенности, ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", 			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ДатаРегистрации", 		Неопределено);
	Результат.Вставить("ДатаИзмененияСтатуса", 	Неопределено);
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("ТекстОтвета", 			"");
	Результат.Вставить("Ошибка");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;
		
		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poaopen?poaNumber=" + НомерДоверенности, "/poar-webapp/integration/poa/" + НомерДоверенности + "/public");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ОтветHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = СоединениеССерверомИнтернета(
			СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается получить частичные данные доверенности'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		СтруктураОтвета = ПолучитьСтруктуруОтвета(ОтветHTTP);
		
		Результат.СтатусДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("id"),
			СтруктураОтвета.id, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ДатаВыдачи = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("startDate"),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.startDate), Неопределено);
		Результат.ДатаОкончания = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("endDate"),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.endDate), Неопределено);
		Результат.ДатаРегистрации = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("createdDate"),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.createdDate), Неопределено);
		Результат.ДатаИзмененияСтатуса = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("statusDate"),
			ДатаИзСтрокиРазныхФорматов(СтруктураОтвета.statusDate), Неопределено);
		Результат.ПубличныйКлюч = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerPublicKey"),
			СтруктураОтвета.issuerPublicKey, "");
		Если ИспользуетсяРежимТестирования() Тогда
			ПараметрыМЧДФНС = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ПараметрыМЧДФНС");
			Если ПараметрыМЧДФНС <> Неопределено Тогда
				ПараметрыДоверенности = ПараметрыМЧДФНС[Результат.НомерДоверенности];
				Если ПараметрыДоверенности <> Неопределено И ПараметрыДоверенности.Свойство("ВозвращаемыйСтатус") Тогда
					Результат.СтатусДоверенности = ПараметрыДоверенности.ВозвращаемыйСтатус;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается получить частичные данные доверенности'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат.ХешДоверенности) И НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		Результат.СтатусДоверенности = "";
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается получить частичные данные доверенности'"), 
			НСтр("ru='Распределенный реестр ФНС России не предоставил частичных данных доверенности.'"));
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПолныеДанныеДоверенностиМЧДРР(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	СвойстваСервераМЧДРР = СвойстваСервераМЧДРР();
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", 					СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
	Результат.Вставить("ДанныеВыгрузки", 				Неопределено);
	Результат.Вставить("ДанныеПодписи", 				Неопределено);
	Результат.Вставить("ДанныеЗаявленияНаОтзыв", 		Неопределено);
	Результат.Вставить("ДанныеПодписиЗаявленияНаОтзыв", Неопределено);
	Результат.Вставить("ДанныеАрхива", 					Неопределено);
	Результат.Вставить("СтатусПолучения", 				"");
	Результат.Вставить("ТекстОтвета", 					"");
	Результат.Вставить("Ошибка");
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		РезультатАвторизации = АвторизоватьсяНаСервереМЧДРР();
		Если РезультатАвторизации.Ошибка <> Неопределено Тогда
			Результат.Ошибка = РезультатАвторизации.Ошибка;
		КонецЕсли;

		Если Результат.Ошибка <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	КонецЕсли;
	
	РесурсНаСервере = СвойстваСервераМЧДРР.РесурсКорняAPI + ?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI,
		"/poazip?poaNumber=" + НомерДоверенности + ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя),
		"/poar-webapp/integration/poa/" + НомерДоверенности
			+ ?(ИННДоверителя = Неопределено, "", "/" + ИННДоверителя) + "/zip");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	Если СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI И ИспользуетсяРежимТестирования() Тогда
		ЗаголовкиHTTP.Вставить("poaservertype", СвойстваСервераМЧДРР.ТестовыйСервер);
	КонецЕсли;
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧДРР.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	ОтветHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = СоединениеССерверомИнтернета(СвойстваСервераМЧДРР.АдресСервераБезАутентификации);
		
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP, ИмяФайлаОтвета);
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ПовторятьСоединение = НЕ ОбщегоНазначения.РазделениеВключено();
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается получить полные данные доверенности'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Если НРег(ОтветHTTP.Заголовки["Content-Type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["Content-Type"]) = "multipart"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "multipart"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["Content-Disposition"], 10)) = "attachment"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["content-disposition"], 10)) = "attachment" Тогда
		
		Попытка
			Результат.ДанныеАрхива = Новый ДвоичныеДанные(ИмяФайлаОтвета);
		Исключение
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
			ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
			ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
			ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
			ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
			ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, , ДополнительныеФайлы, НСтр("ru='Не удается получить архив полных данных'"), ПредставлениеОшибки);
			Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
			УдалитьВременныйФайл(ИмяФайлаОтвета);
			Возврат Результат;
		КонецПопытки;
		
		УдалитьВременныйФайл(ИмяФайлаОтвета);
		Возврат Результат;
	КонецЕсли;
	
	УдалитьВременныйФайл(ИмяФайлаОтвета);
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ПолучитьСтруктуруОтвета(ОтветHTTP.ПолучитьТелоКакСтроку());
		
		Результат.СтатусПолучения = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("reqStatus"),
			СтруктураОтвета.reqStatus, "");
	Исключение
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается получить полные данные доверенности'"), ПредставлениеОшибки);
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат.СтатусПолучения) Тогда
		ПараметрыФайловДляРасследования = ПараметрыФайловДляРасследования();
		ПараметрыФайловДляРасследования.СоединениеHTTP = СоединениеHTTP;
		ПараметрыФайловДляРасследования.Запрос = ЗапросHTTP;
		ПараметрыФайловДляРасследования.Ответ = ОтветHTTP;
		ДополнительныеФайлы = ФайлыДляРасследования(ПараметрыФайловДляРасследования);
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(ЗапросHTTP, ОтветHTTP, СтруктураОтвета, ДополнительныеФайлы, НСтр("ru='Не удается получить полные данные доверенности'"), 
			НСтр("ru='Распределенный реестр ФНС России не предоставил полных данных доверенности и не сообщил о статусе запроса данных.'"));
		Результат.Ошибка = ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДоверенностьИзРеестра(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	РезультатПолучения = ПолучитьПолныеДанныеДоверенностиМЧДРР(НомерДоверенности, ИННДоверителя, ТокенДоступа);
	ПолныеДанныеДоверенности = Новый Структура;
	ПолныеДанныеДоверенности.Вставить("Ошибка", РезультатПолучения.Ошибка);
	Если ЗначениеЗаполнено(РезультатПолучения.Ошибка) Тогда
		Возврат ПолныеДанныеДоверенности;
	КонецЕсли;
	
	Поток = РезультатПолучения.ДанныеАрхива.ОткрытьПотокДляЧтения();
	Архив = Новый ЧтениеZipФайла(Поток);
	ПутьВосстановления = ФайловаяСистема.СоздатьВременныйКаталог();
	
	Архив.ИзвлечьВсе(ПутьВосстановления, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ФайлыАрхива = НайтиФайлы(ПутьВосстановления, ПолучитьМаскуВсеФайлы());
	
	ФайлыДляЗагрузки = Новый Массив;
	Для Каждого ФайлАрхива Из ФайлыАрхива Цикл
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Имя", ФайлАрхива.ИмяБезРасширения);
		ОписаниеФайла.Вставить("ИмяФайла", ФайлАрхива.Имя);
		ОписаниеФайла.Вставить("ПолноеИмя", ФайлАрхива.ПолноеИмя);
		ОписаниеФайла.Вставить("Хранение", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлАрхива.ПолноеИмя), Новый УникальныйИдентификатор));
		ФайлыДляЗагрузки.Добавить(ОписаниеФайла);
	КонецЦикла;
		РезультатЗагрузки = Справочники.МашиночитаемыеДоверенности.ЗагрузитьДоверенностиВИнформационнуюБазу(ФайлыДляЗагрузки);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки) Тогда
		ПараметрыОшибкиМЧДРР = ПараметрыОшибкиМЧДРР(, , , , НСтр("ru='Не удалось загрузить доверенность из реестра'"), РезультатЗагрузки.ТекстОшибки);
		ПолныеДанныеДоверенности.Вставить("Ошибка", ПолучитьИЗаписатьОшибкуМЧДРР(ПараметрыОшибкиМЧДРР));
		Возврат ПолныеДанныеДоверенности;
	КонецЕсли;
	ФайловаяСистема.УдалитьВременныйКаталог(ПутьВосстановления);
	РегистрыСведений.МашиночитаемыеДоверенностиСтатусы.ОбновлениеСтатусовМЧД(РезультатЗагрузки.Доверенности);
	
	ПолныеДанныеДоверенности.Вставить("Доверенность", РезультатЗагрузки.Доверенности[0]);
	
	Возврат ПолныеДанныеДоверенности;
КонецФункции

Функция ИспользуетсяРежимТестирования() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыРезультатаАвторизацииНаСервереМЧД()
	
	ПараметрыРезультатаАвторизации = Новый Структура;
	ПараметрыРезультатаАвторизации.Вставить("ДатаСеанса", 			Неопределено);
	ПараметрыРезультатаАвторизации.Вставить("РезультатАвторизации", Неопределено);
	Возврат ПараметрыРезультатаАвторизации;
	
КонецФункции

Функция ВладелецТикета()

	Возврат "1C-Reporting";

КонецФункции

Функция ПолучитьСтруктуруОтвета(ОтветHTTP)
	Возврат ОбщегоНазначения.JSONВЗначение(ОтветHTTP.ПолучитьТелоКакСтроку(),,Ложь);
КонецФункции

// Используется для инициализации параметра сеанса в рамках механизмов БСП
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура УстановитьПараметрСеансаПараметрыАвторизацииВРаспределенномРеестре(
		ИмяПараметра = Неопределено,
		УстановленныеПараметры = Неопределено) Экспорт
	
	Если ИмяПараметра = "ПараметрыАвторизацииВРаспределенномРеестре" Тогда
		ПараметрыРезультатаАвторизации = ПараметрыРезультатаАвторизацииНаСервереМЧД();
		ПараметрыСеанса.ПараметрыАвторизацииВРаспределенномРеестре = Новый ФиксированнаяСтруктура(ПараметрыРезультатаАвторизации);
		УстановленныеПараметры.Добавить("РезультатАвторизацииАвторизацииНаСервереМЧДРРСКО");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусРегистрации(Доверенность, ИдентификаторТранзакции = Неопределено) Экспорт
	ЗаписьСтатуса = РегистрыСведений.МашиночитаемыеДоверенностиСтатусы.СоздатьМенеджерЗаписи();
	ЗаписьСтатуса.МашиночитаемаяДоверенность = Доверенность;
	ЗаписьСтатуса.Прочитать();	
	ЗаписьСтатуса.МашиночитаемаяДоверенность = Доверенность;
	ЗаписьСтатуса.ДатаТранзакции = ТекущаяДатаСеанса();
	ЗаписьСтатуса.ТехническийСтатус = Перечисления.ТехническиеСтатусыМЧД.Регистрация;
	ЗаписьСтатуса.ИдентификаторТранзакции = ИдентификаторТранзакции;
	ЗаписьСтатуса.ТипТранзакции = Перечисления.ТипыТранзакцийСРеестромМЧД.Регистрация;
	ЗаписьСтатуса.Записать();
КонецПроцедуры

#КонецОбласти

#КонецОбласти
