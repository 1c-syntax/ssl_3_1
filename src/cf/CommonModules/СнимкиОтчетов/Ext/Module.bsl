///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует к выгрузке все варианты отчетов, по которым сформированы снимки.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СнимкиОтчетов.Вариант КАК Вариант
	|ИЗ
	|	РегистрСведений.СнимкиОтчетов КАК СнимкиОтчетов
	|ГДЕ
	|	СнимкиОтчетов.Вариант ССЫЛКА Справочник.ВариантыОтчетов";
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ЭлементСоставаПланаОбмена.Метаданные = Метаданные.Справочники.ВариантыОтчетов Тогда
			// @skip-check query-in-loop - Однократная обработка данных
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вариант");
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МассивСсылок);
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если есть снимки отчета для автономного режима.
// 
// Параметры:
//  Источник - СправочникОбъект
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьИзмененияДляАвтономногоРежима(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВариантыОтчетов") 
		И Не ЕстьСнимкиВариантаОтчета(Источник.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Зарегистрировать к выгрузке связанные со снимками отчетов вариантов отчетов и пользователей, 
// сформировавших эти снимки.
// 
// Параметры:
//  Источник - Произвольный
//  Изменения - Массив
// 
Процедура ЗарегистрироватьИзмененияДляАвтономногоРежима(Источник, Изменения) Экспорт

	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СнимкиОтчетов") Тогда
		Для Каждого Запись Из Источник Цикл
			Изменения.Добавить(Запись.Вариант);
			Изменения.Добавить(Запись.Пользователь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выгружает в XML варианты отчетов, их снимки и связанные с ними сведения о пользователях.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  Данные - Произвольный - данные для записи в XML.
//
Процедура ЗаписатьОтчетыВXML(ЗаписьXML, Данные) Экспорт
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		ЗаписатьВариантыОтчетовВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи") Тогда
		ЗаписатьПользователейВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СнимкиОтчетов") Тогда
		ЗаписатьСнимкиОтчетовВXML(ЗаписьXML, Данные);
	КонецЕсли;

КонецПроцедуры

// Загружает из XML варианты отчетов, их снимки и связанные с ними сведения о пользователях.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML
//
// Возвращаемое значение:
//  СправочникОбъект
//  Неопределено - прочитанные данные, подготовленные для записи.
//
Функция ПрочитатьОтчетыИзXML(ЧтениеXML) Экспорт
	
	Если ЧтениеXML.Имя = "CatalogObject.ВариантыОтчетов" Тогда
		Возврат ПрочитатьВариантыОтчетовИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.Пользователи" Тогда
		Возврат ПрочитатьПользователейИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "InformationRegisterRecordSet.СнимкиОтчетов" Тогда
		ПрочитатьСнимкиОтчетовИзXML(ЧтениеXML);
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записывает в XML снимки отчетов.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  Данные - СтрокаТаблицыЗначений - данные снимков отчетов.
//
Процедура ЗаписатьСнимкиОтчетовВXML(ЗаписьXML, Данные)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("InformationRegisterRecordSet.СнимкиОтчетов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Пользователь");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Пользователь.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отчет");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Отчет.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОтчетТипЗначения");
	Если ТипЗнч(Данные[0].Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ЗаписьXML.ЗаписатьТекст("ИдентификаторыОбъектовМетаданных");
	ИначеЕсли ТипЗнч(Данные[0].Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		ЗаписьXML.ЗаписатьТекст("ИдентификаторыОбъектовРасширений");
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		ЗаписьXML.ЗаписатьТекст("ДополнительныеОтчетыИОбработки");
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантОтчета");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Вариант.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантТипЗначения");
	ЗаписьXML.ЗаписатьТекст(?(ТипЗнч(Данные[0].Вариант) = Тип("СправочникСсылка.ВариантыОтчетов"), "ВариантыОтчетов", ""));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ХешПользовательскойНастройки");
	ЗаписьXML.ЗаписатьТекст(Данные[0].ХешПользовательскойНастройки);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("РезультатОтчета");
	РезультатОтчета = СериализаторXDTO.ЗаписатьXDTO(Данные[0].РезультатОтчета);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, РезультатОтчета, "ValueStorage", "http://v8.1c.ru/8.1/data/core", ,
		НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаАктуальности");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ДатаАктуальности));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаПоследнегоПросмотра");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ДатаПоследнегоПросмотра));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОшибкаОбновленияОтчета");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ОшибкаОбновленияОтчета));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Записывает в XML данные варианта отчета.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  Данные - СправочникСсылка.ВариантыОтчетов
//
Процедура ЗаписатьВариантыОтчетовВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ВариантыОтчетов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Записывает в XML данные пользователя.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  Данные - СправочникСсылка.ВариантыОтчетов
//
Процедура ЗаписатьПользователейВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Пользователи");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИдентификаторПользователяИБ");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИдентификаторПользователяИБ));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ПрочитатьСнимкиОтчетовИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Пользователь));
	Отчет = Неопределено;
	Если ОбъектXDTO.ОтчетТипЗначения = "ИдентификаторыОбъектовМетаданных" Тогда
		Отчет = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	ИначеЕсли ОбъектXDTO.ОтчетТипЗначения = "ИдентификаторыОбъектовРасширений" Тогда
		Отчет = Справочники.ИдентификаторыОбъектовРасширений.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МодульДополнительныеОтчетыИОбработки.ИмяТаблицыДополнительныеОтчеты());
		Отчет = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	КонецЕсли;
	Если ОбъектXDTO.ВариантТипЗначения = "ВариантыОтчетов" Тогда
		Вариант = Справочники.ВариантыОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ВариантОтчета));
	Иначе
		Вариант = Неопределено;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СнимкиОтчетов.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Отчет = Отчет;
	МенеджерЗаписи.Вариант = Вариант;
	МенеджерЗаписи.ХешПользовательскойНастройки = ОбъектXDTO.ХешПользовательскойНастройки;

	МенеджерЗаписи.РезультатОтчета = ОбъектXDTO.РезультатОтчета.ValueStorage;
	МенеджерЗаписи.ДатаАктуальности = Дата(ОбъектXDTO.ДатаАктуальности);
	МенеджерЗаписи.ДатаПоследнегоПросмотра = Дата(ОбъектXDTO.ДатаПоследнегоПросмотра);

	МенеджерЗаписи.ОшибкаОбновленияОтчета = Булево(ОбъектXDTO.ОшибкаОбновленияОтчета);

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать снимок отчета %1 по причине: 
				 |%2'"), ?(ЗначениеЗаполнено(Вариант), Вариант, Отчет), ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));
#Если МобильныйАвтономныйСервер Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
#Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка снимка отчета из XML'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СнимкиОтчетов, , ТекстСообщения);
#КонецЕсли
	КонецПопытки;
	
КонецПроцедуры

// Считывает из XML варианты отчетов.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML
//
// Возвращаемое значение:
//  СправочникОбъект.ВариантыОтчетов
//
Функция ПрочитатьВариантыОтчетовИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.ВариантыОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	Возврат Данные;
	
КонецФункции

// Считывает из XML сведения о пользователях.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML
//
// Возвращаемое значение:
//  СправочникОбъект.Пользователи
//
Функция ПрочитатьПользователейИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.Пользователи.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	Данные.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор(ОбъектXDTO.ИдентификаторПользователяИБ);
	
	Возврат Данные;
	
КонецФункции

// Возвращает признак наличия снимков по заданному варианту отчета.
//
// Параметры:
//  Вариант - СправочникСсылка.ВариантыОтчетов - вариант отчета.
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьСнимкиВариантаОтчета(Вариант)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СнимкиОтчетов.Вариант КАК Вариант
	|ИЗ
	|	РегистрСведений.СнимкиОтчетов КАК СнимкиОтчетов
	|ГДЕ
	|	СнимкиОтчетов.Вариант = &Вариант";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти
