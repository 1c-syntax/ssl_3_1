///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Отправляет SMS через SMS.RU.
//
// Параметры:
//  НомераПолучателей - Массив - номера получателей в формате +7ХХХХХХХХХХ;
//  Текст 			  - Строка - текст сообщения, длиной не более 480 символов;
//  ИмяОтправителя 	  - Строка - имя отправителя, которое будет отображаться вместо номера входящего SMS;
//  Логин			  - Строка - логин пользователя услуги отправки sms;
//  Пароль			  - Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//   см. ОтправкаSMS.ОтправитьSMS.
//
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль) Экспорт
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	ФорматированныеНомераТелефонов = ФорматироватьНомераТелефонов(НомераПолучателей);
	Получатели = Новый Массив;
	
	Для Каждого Номер Из НомераПолучателей Цикл
		Если ФорматированныеНомераТелефонов[Номер] <> Неопределено Тогда
			Получатели.Добавить(ФорматированныеНомераТелефонов[Номер]);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПолучателей = СтрСоединить(Получатели, ",");
	
	Если ПустаяСтрока(СтрокаПолучателей) Или ПустаяСтрока(Текст) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверные параметры сообщения'");
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиSMS = ОтправкаSMS.НастройкиОтправкиSMS();
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыЗапроса = Новый Структура;
	
	Если НастройкиОтправкиSMS.Свойство("СпособАвторизации") И НастройкиОтправкиSMS.СпособАвторизации = "ПоИдентификатору" Тогда
		ПараметрыЗапроса.Вставить("api_id", Пароль);
	Иначе
		ПараметрыЗапроса.Вставить("login", Логин);
		ПараметрыЗапроса.Вставить("password", Пароль);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("text", Текст);
	ПараметрыЗапроса.Вставить("to", СтрокаПолучателей);
	ПараметрыЗапроса.Вставить("from", ИмяОтправителя);
	ПараметрыЗапроса.Вставить("json", 1);
	
	ТекстОтвета = ВыполнитьЗапрос("sms/send", ПараметрыЗапроса);
	Если Не ЗначениеЗаполнено(ТекстОтвета) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + НСтр("ru = 'Соединение не установлено'");
		Возврат Результат;
	КонецЕсли;
	
	РезультатЗапроса = ОбщегоНазначения.JSONВЗначение(ТекстОтвета);
	
	ЗапросПринят = РезультатЗапроса["status"] = "OK";
	ТекстСостояния = РезультатЗапроса["status_text"];
	КодСостояния = РезультатЗапроса["status_code"];
	
	Если ЗапросПринят И ЗначениеЗаполнено(РезультатЗапроса["sms"]["empty_phone"]) Тогда
		ЗапросПринят = Ложь;
		ТекстСостояния = РезультатЗапроса["sms"]["empty_phone"]["real_status_text"];
		КодСостояния = РезультатЗапроса["sms"]["empty_phone"]["real_status"];
	КонецЕсли;
	
	Если Не ЗапросПринят Тогда
		Если ЗначениеЗаполнено(ТекстСостояния) Тогда
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (код состояния: %2)'"), ТекстСостояния, КодСостояния);
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Код состояния: %1'"), КодСостояния);
		КонецЕсли;
		
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправка SMS не выполнена по причине:
			|%1'"), Причина);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Результат.ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ТекстыОшибок = Новый Массив;
	
	Для Каждого НомерПолучателя Из НомераПолучателей Цикл
		
		ИдентификаторСообщения = "";
		СтатусОтправкиПолучателю = РезультатЗапроса["sms"][ФорматированныеНомераТелефонов[НомерПолучателя]];
		
		Если СтатусОтправкиПолучателю <> Неопределено Тогда
			ИдентификаторСообщения = СтатусОтправкиПолучателю["sms_id"];
			
			Если СтатусОтправкиПолучателю["status_text"] = "ERROR" Тогда
				ТекстСостояния = СтатусОтправкиПолучателю["status_text"];
				КодСостояния = СтатусОтправкиПолучателю["status_code"];
				
				ТекстыОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: %2 (код состояния: %3)'"),
					НомерПолучателя,
					ТекстСостояния,
					КодСостояния));
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(НомерПолучателя) И ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
			ОтправленноеСообщение = Новый Структура("НомерПолучателя,ИдентификаторСообщения",
				НомерПолучателя,ИдентификаторСообщения);
			Результат.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстыОшибок) Тогда
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отправка SMS не выполнена следующим получателям:
			|%1'"), СтрСоединить(ТекстыОшибок, Символы.ПС));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает текстовое представление статуса доставки сообщения.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный sms при отправке.
//  НастройкиОтправкиSMS   - см. ОтправкаSMS.НастройкиОтправкиSMS.
//
// Возвращаемое значение:
//   см. ОтправкаSMS.СтатусДоставки.
//
Функция СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS) Экспорт
	
	ИдентификаторыСообщений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСообщения);
	Возврат СтатусыДоставки(ИдентификаторыСообщений, НастройкиОтправкиSMS)[ИдентификаторСообщения];
	
КонецФункции

Функция СтатусДоставкиSMS(КодСостояния)
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("-1", "НеОтправлялось");
	СоответствиеСтатусов.Вставить("100", "НеОтправлялось");
	СоответствиеСтатусов.Вставить("101", "Отправляется");
	СоответствиеСтатусов.Вставить("102", "Отправлено");
	СоответствиеСтатусов.Вставить("103", "Доставлено");
	СоответствиеСтатусов.Вставить("104", "НеДоставлено");
	СоответствиеСтатусов.Вставить("105", "НеДоставлено");
	СоответствиеСтатусов.Вставить("106", "НеДоставлено");
	СоответствиеСтатусов.Вставить("107", "НеДоставлено");
	СоответствиеСтатусов.Вставить("108", "НеДоставлено");
	СоответствиеСтатусов.Вставить("150", "НеДоставлено");
	
	Результат = СоответствиеСтатусов[НРег(КодСостояния)];
	Возврат ?(Результат = Неопределено, "Ошибка", Результат);
	
КонецФункции

Функция ОписанияОшибок()
	ОписанияОшибок = Новый Соответствие;
	ОписанияОшибок.Вставить("200", НСтр("ru = 'Авторизация не выполнена: неверный api_id.'"));
	ОписанияОшибок.Вставить("201", НСтр("ru = 'Недостаточно средств на лицевом счету.'"));
	ОписанияОшибок.Вставить("202", НСтр("ru = 'Неправильно указан получатель.'"));
	ОписанияОшибок.Вставить("203", НСтр("ru = 'Нет текста сообщения.'"));
	ОписанияОшибок.Вставить("204", НСтр("ru = 'Имя отправителя не согласовано с провайдером (SMS.RU).'"));
	ОписанияОшибок.Вставить("205", НСтр("ru = 'Сообщение слишком длинное (превышает 8 SMS).'"));
	ОписанияОшибок.Вставить("206", НСтр("ru = 'Достигнут дневной лимит на отправку сообщений.'"));
	ОписанияОшибок.Вставить("207", НСтр("ru = 'На этот номер (или один из номеров) нельзя отправлять сообщения, либо указано более 100 номеров в списке получателей'"));
	ОписанияОшибок.Вставить("208", НСтр("ru = 'Параметр time указан неправильно.'"));
	ОписанияОшибок.Вставить("209", НСтр("ru = 'Номер получателя (или один из номеров) в стоп-листе (см. в личном кабинете на сайте).'"));
	ОписанияОшибок.Вставить("210", НСтр("ru = 'Используется GET, где необходимо использовать POST.'"));
	ОписанияОшибок.Вставить("211", НСтр("ru = 'Метод не существует.'"));
	ОписанияОшибок.Вставить("212", НСтр("ru = 'Неверная кодировка текста сообщения (необходимо использовать UTF-8).'"));
	ОписанияОшибок.Вставить("220", НСтр("ru = 'Сервис временно недоступен.'"));
	ОписанияОшибок.Вставить("230", НСтр("ru = 'Сообщение не принято к отправке: достигнут дневной лимит сообщений на один номер (60 шт).'"));
	ОписанияОшибок.Вставить("300", НСтр("ru = 'Авторизация не выполнена: token устарел (истек срок действия, либо изменился IP отправителя.'"));
	ОписанияОшибок.Вставить("301", НСтр("ru = 'Авторизация не выполнена: логин или пароль указаны неверно.'"));
	ОписанияОшибок.Вставить("302", НСтр("ru = 'Авторизация не выполнена: пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной SMS.)'"));
	
	Возврат ОписанияОшибок;
КонецФункции

Функция ОписаниеОшибкиПолученияСтатуса(КодОшибки)
	ОписанияОшибок =ОписанияОшибок();
	ТекстСообщения = ОписанияОшибок[КодОшибки];
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отказ выполнения операции'");
	КонецЕсли;
	Возврат ТекстСообщения;
КонецФункции

Функция ВыполнитьЗапрос(ИмяМетода, ПараметрыЗапроса)
	
	HTTPЗапрос = ОтправкаSMS.ПодготовитьHTTPЗапрос("/" + ИмяМетода, ПараметрыЗапроса);
	HTTPОтвет = Неопределено;
	
	Попытка
		Соединение = Новый HTTPСоединение("sms.ru", , , , ПолучениеФайловИзИнтернета.ПолучитьПрокси("https"),
			60, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
			
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если HTTPОтвет <> Неопределено Тогда
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'"), ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС
				+ HTTPОтвет.ПолучитьТелоКакСтроку();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецЕсли;
		
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ФорматироватьНомер(Знач Номер)
	
	ДопустимыеСимволы = "1234567890";
	ЛишниеСимволы = СтрСоединить(СтрРазделить(Номер, ДопустимыеСимволы, Ложь), "");
	
	Возврат СтрСоединить(СтрРазделить(Номер, ЛишниеСимволы, Ложь), "");
	
КонецФункции

Функция ФорматироватьНомераТелефонов(Знач НомераТелефонов)
	
	Результат = Новый Соответствие;
	
	Для Каждого НомерТелефона Из НомераТелефонов Цикл
		ФорматированныйНомер = ФорматироватьНомер(НомерТелефона);
		Если ЗначениеЗаполнено(ФорматированныйНомер) Тогда
			Результат.Вставить(НомерТелефона, ФорматированныйНомер);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список разрешений для отправки SMS с использованием всех доступных провайдеров.
//
// Возвращаемое значение:
//  Массив
//
Функция Разрешения() Экспорт
	
	Протокол = "HTTP";
	Адрес = "sms.ru";
	Порт = Неопределено;
	Описание = НСтр("ru = 'Отправка SMS через ""SMS.RU"".'");
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(
		МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	Возврат Разрешения;
КонецФункции

Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.АдресОписанияУслугиВИнтернете = "https://sms.ru";
	Настройки.ПриОпределенииСпособовАвторизации = Истина;
	Настройки.ПриОпределенииПолейАвторизации = Истина;
	Настройки.СтатусыДоставкиОднимЗапросом = Истина;
	
КонецПроцедуры

Процедура ПриОпределенииСпособовАвторизации(СпособыАвторизации) Экспорт
	
	СпособыАвторизации.Очистить();
	СпособыАвторизации.Добавить("ПоИдентификатору", НСтр("ru = 'По ключу (рекомендуется)'"));
	СпособыАвторизации.Добавить("ПоЛогинуИПаролю", НСтр("ru = 'По логину и паролю'"));
	
КонецПроцедуры

Процедура ПриОпределенииПолейАвторизации(СпособыАвторизации) Экспорт
	
	ПоляАвторизации = Новый СписокЗначений;
	ПоляАвторизации.Добавить("Пароль", НСтр("ru = 'api_id'"));
	
	СпособыАвторизации.Вставить("ПоИдентификатору", ПоляАвторизации);
	
	ПоляАвторизации = Новый СписокЗначений;
	ПоляАвторизации.Добавить("Логин", НСтр("ru = 'Логин'"));
	ПоляАвторизации.Добавить("Пароль", НСтр("ru = 'Пароль'"));

	СпособыАвторизации.Вставить("ПоЛогинуИПаролю", ПоляАвторизации);
	
КонецПроцедуры

// Запрашивает статус доставки сообщения у поставщика услуг.
//
// Параметры:
//  ИдентификаторыСообщений - см. ОтправкаSMS.СтатусыДоставки.ИдентификаторыСообщений
//  НастройкиОтправкиSMS    - см. ОтправкаSMS.НастройкиОтправкиSMS
//  
// Возвращаемое значение:
//   См. ОтправкаSMS.СтатусыДоставки
//
Функция СтатусыДоставки(ИдентификаторыСообщений, НастройкиОтправкиSMS) Экспорт
	
	СтатусыДоставки = Новый Соответствие;
	
	Для Каждого ИдентификаторСообщения Из ИдентификаторыСообщений Цикл
		СтатусыДоставки[ИдентификаторСообщения] = "Ошибка";
	КонецЦикла;
	
	Логин = НастройкиОтправкиSMS.Логин;
	Пароль = НастройкиОтправкиSMS.Пароль;
	
	ПараметрыЗапроса = Новый Структура;
	
	Если НастройкиОтправкиSMS.Свойство("СпособАвторизации") И НастройкиОтправкиSMS.СпособАвторизации = "ПоИдентификатору" Тогда
		ПараметрыЗапроса.Вставить("api_id", Пароль);
	Иначе
		ПараметрыЗапроса.Вставить("login", Логин);
		ПараметрыЗапроса.Вставить("password", Пароль);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("id", СтрСоединить(ИдентификаторыСообщений, ","));
	ПараметрыЗапроса.Вставить("json", 1);
	
	ТекстОтвета = ВыполнитьЗапрос("sms/status", ПараметрыЗапроса);
	Если Не ЗначениеЗаполнено(ТекстОтвета) Тогда
		Возврат СтатусыДоставки;
	КонецЕсли;
	
	РезультатЗапроса = ОбщегоНазначения.JSONВЗначение(ТекстОтвета);
	
	Если РезультатЗапроса["status"] <> "OK" Тогда
		ТекстСостояния = РезультатЗапроса["status_text"];
		КодСостояния = РезультатЗапроса["status_code"];
		
		Если ЗначениеЗаполнено(ТекстСостояния) Тогда
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (код состояния: %2)'"), ТекстСостояния, КодСостояния);
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Код состояния: %1'"), КодСостояния);
		КонецЕсли;
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить статус доставки SMS по причине:
			|%1'"), Причина);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
		Возврат СтатусыДоставки;
	КонецЕсли;
	
	Для Каждого ИдентификаторСообщения Из ИдентификаторыСообщений Цикл
		КодСостояния = РезультатЗапроса["sms"][ИдентификаторСообщения]["status_code"];
		СтатусДоставки = СтатусДоставкиSMS(КодСостояния);
		СтатусыДоставки[ИдентификаторСообщения] = СтатусДоставкиSMS(КодСостояния);
		
		Если СтатусДоставки = "Ошибка" Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Не удалось получить статус доставки SMS (id: ""%3""):
				|%1 (код ошибки: %2)'"), ОписаниеОшибкиПолученияСтатуса(РезультатЗапроса), КодСостояния, ИдентификаторСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусыДоставки;
	
КонецФункции

#КонецОбласти

