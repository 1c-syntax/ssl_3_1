///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Параметры - см. ПараметрыДобавленияСпискаПолей
//
Процедура ДобавитьСписокПолейНаФорму(Форма, Параметры) Экспорт
	
	ПараметрыДобавления = ПараметрыДобавленияСпискаПолей();
	ЗаполнитьЗначенияСвойств(ПараметрыДобавления, Параметры);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ЗначенияРеквизитов = Новый Структура("ПодключенныеСпискиПолей");
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Форма);
	ПодключенныеСпискиПолей = ЗначенияРеквизитов.ПодключенныеСпискиПолей;
	Если ПодключенныеСпискиПолей = Неопределено Тогда
		ИмяРеквизитаПодключенныеСпискиПолей = "ПодключенныеСпискиПолей";
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаПодключенныеСпискиПолей, Новый ОписаниеТипов("ТаблицаЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСпискаПолей", Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяСпискаИсточников", Новый ОписаниеТипов("Строка"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкобкиИдентификаторов", Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкобкиПредставлений", Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьИдентификаторыДляФормул", Новый ОписаниеТипов("Булево"), ИмяРеквизитаПодключенныеСпискиПолей));
	КонецЕсли;
	
	ИмяСпискаПолей = ПараметрыДобавления.ИмяСписка;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСпискаПолей, Новый ОписаниеТипов("ДеревоЗначений")));
	Для Каждого ОписаниеРеквизита Из РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		ТипРеквизита = ОписаниеРеквизита.Значение;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, ИмяСпискаПолей));
	КонецЦикла;
	
	ИмяСтрокиПоиска = ИмяРеквизитаСтрокиПоискаСпискаПолей(ИмяСпискаПолей);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСтрокиПоиска, Новый ОписаниеТипов("Строка")));
	
	ИмяСпискаИсточников = ИмяСпискаПолей + "Источники";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяСпискаИсточников, Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсточникДанных", Новый ОписаниеТипов("Строка"), ИмяСпискаИсточников));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоллекцияПолей", Новый ОписаниеТипов(), ИмяСпискаИсточников));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Замещать", Новый ОписаниеТипов("Булево"), ИмяСпискаИсточников));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	МестоРазмещенияСтрокиПоиска = ПараметрыДобавления.МестоРазмещенияСтрокиПоиска;
	Если Не ЗначениеЗаполнено(МестоРазмещенияСтрокиПоиска) Тогда
		МестоРазмещенияСтрокиПоиска = ПараметрыДобавления.МестоРазмещенияСписка;
	КонецЕсли;
	
	СтрокаПоиска = Форма.Элементы.Добавить(ИмяСтрокиПоиска, Тип("ПолеФормы"), МестоРазмещенияСтрокиПоиска);
	СтрокаПоиска.ПутьКДанным = ИмяСтрокиПоиска;
	СтрокаПоиска.Вид = ВидПоляФормы.ПолеВвода;
	СтрокаПоиска.ПодсказкаВвода = ПараметрыДобавления.ПодсказкаВводаСтрокиПоиска;
	СтрокаПоиска.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	СтрокаПоиска.УстановитьДействие("ИзменениеТекстаРедактирования", "Подключаемый_СтрокаПоискаИзменениеТекстаРедактирования");
	СтрокаПоиска.УстановитьДействие("Очистка", "Подключаемый_СтрокаПоискаОчистка");
	СтрокаПоиска.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.НеИспользовать;
	СтрокаПоиска.АвтоМаксимальнаяШирина = Ложь;
	СтрокаПоиска.КнопкаОчистки = Истина;
	
	СписокПолей = Форма.Элементы.Добавить(ИмяСпискаПолей, Тип("ТаблицаФормы"), ПараметрыДобавления.МестоРазмещенияСписка);
	СписокПолей.ПутьКДанным = ИмяСпискаПолей;
	СписокПолей.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
	СписокПолей.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	СписокПолей.Шапка = Ложь;
	СписокПолей.ГоризонтальныеЛинии = Ложь;
	СписокПолей.ВертикальныеЛинии = Ложь;
	СписокПолей.ИзменятьСоставСтрок = Ложь;
	СписокПолей.ИзменятьПорядокСтрок = Ложь;
	СписокПолей.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	СписокПолей.КоманднаяПанель.Видимость = Ложь;
	СписокПолей.УстановитьДействие("ПередРазворачиванием", "Подключаемый_СписокПолейПередРазворачиванием");
	СписокПолей.УстановитьДействие("НачалоПеретаскивания", "Подключаемый_СписокПолейНачалоПеретаскивания");
	
	Для Каждого Обработчик Из ПараметрыДобавления.ОбработчикиСписка Цикл
		ИмяСобытия = Обработчик.Ключ;
		ИмяПроцедуры = Обработчик.Значение;
		СписокПолей.УстановитьДействие(ИмяСобытия, ИмяПроцедуры);
	КонецЦикла;
	
	ГруппаКолонок = Форма.Элементы.Добавить(ИмяСпискаПолей + "КартинкаИПредставление", Тип("ГруппаФормы"), СписокПолей);
	ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	КартинкаПоля = Форма.Элементы.Добавить(ИмяСпискаПолей + "Картинка", Тип("ПолеФормы"), ГруппаКолонок);
	КартинкаПоля.ПутьКДанным = ИмяСпискаПолей + ".Картинка";
	КартинкаПоля.Вид = ВидПоляФормы.ПолеКартинки;
	КартинкаПоля.ОтображатьВШапке = Ложь;
	
	ПредставлениеПоля = Форма.Элементы.Добавить(ИмяСпискаПолей + "Представление", Тип("ПолеФормы"), ГруппаКолонок);
	ПредставлениеПоля.ПутьКДанным = ИмяСпискаПолей + ".Заголовок";
	ПредставлениеПоля.Вид = ВидПоляФормы.ПолеВвода;
	ПредставлениеПоля.ТолькоПросмотр = Истина;
	
	ПредставлениеПоля = Форма.Элементы.Добавить(ИмяСпискаПолей + "ПредставлениеПутиКДанным", Тип("ПолеФормы"), ГруппаКолонок);
	ПредставлениеПоля.ПутьКДанным = ИмяСпискаПолей + ".ПредставлениеПутиКДанным";
	ПредставлениеПоля.Вид = ВидПоляФормы.ПолеНадписи;
	ПредставлениеПоля.ТолькоПросмотр = Истина;
	ПредставлениеПоля.Видимость = Ложь;
	
	ПодключенныеСпискиПолей = Форма.ПодключенныеСпискиПолей; // ТаблицаЗначений
	ПодключенныйСписок = ПодключенныеСпискиПолей.Добавить();
	ПодключенныйСписок.ИмяСпискаПолей = ИмяСпискаПолей;
	ПодключенныйСписок.ИмяСпискаИсточников = ИмяСпискаИсточников;
	ПодключенныйСписок.СкобкиИдентификаторов = ПараметрыДобавления.СкобкиИдентификаторов;
	ПодключенныйСписок.СкобкиПредставлений = ПараметрыДобавления.СкобкиПредставлений;
	ПодключенныйСписок.ИспользоватьИдентификаторыДляФормул = ПараметрыДобавления.ИспользоватьИдентификаторыДляФормул;
	
	ИсточникиДоступныхПолей = Форма[ИмяСпискаИсточников]; // ТаблицаЗначений

	Для Каждого КоллекцияПолей Из ПараметрыДобавления.КоллекцииПолей Цикл
		ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Добавить();
		ИсточникДоступныхПолей.КоллекцияПолей = КоллекцияПолей;
	КонецЦикла;
	
	Для Каждого ИсточникДоступныхПолей Из ПараметрыДобавления.ИсточникиДоступныхПолей Цикл
		ЗаполнитьЗначенияСвойств(ИсточникиДоступныхПолей.Добавить(), ИсточникДоступныхПолей);
	КонецЦикла;
	
	ДеревоПолей = Форма.РеквизитФормыВЗначение(ИмяСпискаПолей);
	ТаблицаИсточников = Форма.РеквизитФормыВЗначение(ИмяСпискаИсточников);
	
	ЗаполнитьСписокДоступныхРеквизитов(ДеревоПолей, ТаблицаИсточников);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоПолей, ИмяСпискаПолей);
	Форма.ЗначениеВРеквизитФормы(ТаблицаИсточников, ИмяСпискаИсточников);
	
	УстановитьУсловноеОформление(Форма, ИмяСпискаПолей);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//   * МестоРазмещенияСписка - ГруппаФормы
//                           - ТаблицаФормы
//                           - ФормаКлиентскогоПриложения
//   * ИмяСписка - Строка
//   * КоллекцииПолей - Массив
//   * МестоРазмещенияСтрокиПоиска - ГруппаФормы
//                                 - ТаблицаФормы
//                                 - ФормаКлиентскогоПриложения
//   * ПодсказкаВводаСтрокиПоиска - Строка
//   * ОбработчикиСписка - Структура
//   * ВключатьГруппыВПутьКДанным - Булево
//   * СкобкиИдентификаторов - Булево
//   * СкобкиПредставлений - Булево
//   * ИсточникиДоступныхПолей - см. НоваяКоллекцияИсточниковДоступныхПолей
//   * ИспользоватьИдентификаторыДляФормул - Булево
//
Функция ПараметрыДобавленияСпискаПолей() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МестоРазмещенияСписка");
	Результат.Вставить("ИмяСписка", "ДоступныеПоля");
	Результат.Вставить("КоллекцииПолей", Новый Массив);
	Результат.Вставить("МестоРазмещенияСтрокиПоиска");
	Результат.Вставить("ПодсказкаВводаСтрокиПоиска", НСтр("ru = 'Найти...'"));
	Результат.Вставить("ОбработчикиСписка", Новый Структура);
	Результат.Вставить("ВключатьГруппыВПутьКДанным", Истина);
	Результат.Вставить("СкобкиИдентификаторов", Ложь);
	Результат.Вставить("СкобкиПредставлений", Истина);
	Результат.Вставить("ИсточникиДоступныхПолей", НоваяКоллекцияИсточниковДоступныхПолей());
	Результат.Вставить("ИспользоватьИдентификаторыДляФормул", Ложь);
	
	Возврат Результат;
	
КонецФункции


// Возвращаемое значение:
//  ТаблицаЗначений:
//   * КоллекцияПолей - ДеревоЗначений
//   * ИсточникиДоступныхПолей - ТаблицаЗначений
//   * СкобкиИдентификаторов - Булево
//   * СкобкиПредставлений - Булево
//   * ИспользоватьИдентификаторыДляФормул - Булево
//
Функция ОписаниеСписковПолей() Экспорт
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("КоллекцияПолей");
	Результат.Колонки.Добавить("ИсточникиДоступныхПолей");
	Результат.Колонки.Добавить("СкобкиИдентификаторов", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СкобкиПредставлений", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИспользоватьИдентификаторыДляФормул", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

Функция КоллекцияИсточниковДоступныхПолей() Экспорт
	
	ИсточникиДоступныхПолей = Новый ТаблицаЗначений();
	
	ИсточникиДоступныхПолей.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	ИсточникиДоступныхПолей.Колонки.Добавить("КоллекцияПолей", Новый ОписаниеТипов());
	ИсточникиДоступныхПолей.Колонки.Добавить("Замещать", Новый ОписаниеТипов("Булево"));
	
	Возврат ИсточникиДоступныхПолей;
	
КонецФункции

Процедура ОбновитьКоллекцииПолей(Форма, КоллекцииПолей, ИмяСпискаПолей = "ДоступныеПоля") Экспорт
	
	ИсточникиДоступныхПолей = СписокИсточниковДоступныхПолей(Форма, ИмяСпискаПолей); // ДанныеФормыКоллекция
	Отбор = Новый Структура("ИсточникДанных", "");
	Для Каждого СтрокаТаблицы Из ИсточникиДоступныхПолей.НайтиСтроки(Отбор) Цикл
		ИсточникиДоступныхПолей.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Индекс = 0 По КоллекцииПолей.ВГраница() Цикл
		КоллекцияПолей = КоллекцииПолей[Индекс];
		ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Вставить(Индекс);
		ИсточникДоступныхПолей.ИсточникДанных = "";
		ИсточникДоступныхПолей.КоллекцияПолей = КоллекцияПолей;
	КонецЦикла;
	
	Форма[ИмяСпискаПолей].ПолучитьЭлементы().Очистить();
	ЗаполнитьСписокДоступныхРеквизитов(Форма[ИмяСпискаПолей], ИсточникиДоступныхПолей);
	
КонецПроцедуры

Функция ТаблицаПолей() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
	
КонецФункции

Функция ДеревоПолей() Экспорт
	
	Результат = Новый ДеревоЗначений();
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
	
КонецФункции

Функция КоллекцияПолей(Знач ИсточникПолей, Форма = Неопределено, Знач ИмяКоллекцииСКД = Неопределено) Экспорт

	КомпоновщикНастроек = КомпоновщикНастроекИсточникаПолей(ИсточникПолей, Форма);
	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КоллекцияПолейКомпоновщикаНастроек(КомпоновщикНастроек, ИмяКоллекцииСКД);
	
КонецФункции

Функция КомпоновщикНастроекИсточникаПолей(Знач ИсточникПолей, Форма = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИсточникПолей) Тогда
		ИсточникПолей = ПолучитьИзВременногоХранилища(ИсточникПолей);
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ИсточникПолей;
	Если ТипЗнч(ИсточникПолей) = Тип("ТаблицаЗначений") Тогда
		СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхИзТаблицыЗначений(ИсточникПолей);
	ИначеЕсли ТипЗнч(ИсточникПолей) = Тип("ДеревоЗначений") Тогда
		СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхИзДереваЗначений(ИсточникПолей);
	КонецЕсли;
	
	Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	КонецЕсли;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Функция КоллекцияПолейКомпоновщикаНастроек(Знач КомпоновщикНастроек, Знач ИмяКоллекцииСКД = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяКоллекцииСКД) Тогда
		ИмяКоллекцииСКД = "ДоступныеПоляОтбора";
	КонецЕсли;
	
	ОписаниеИмениКоллекцииПолей = СтрРазделить(ИмяКоллекцииСКД, ".");
	КоллекцияПолей = КомпоновщикНастроек.Настройки;
	
	Для Каждого Элемент Из ОписаниеИмениКоллекцииПолей Цикл 
		КоллекцияПолей = КоллекцияПолей[Элемент];
	КонецЦикла;
	
	Возврат КоллекцияПолей;

КонецФункции

Процедура ЗаполнитьСписокДоступныхРеквизитов(Знач ТекущийРеквизит, ИсточникиДоступныхПолей, Знач Отбор = "", 
	ИспользоватьИдентификаторыДляФормул = Ложь)
	
	ДоступныеРеквизиты = НоваяКоллекцияДоступныхРеквизитов();
	ДоступныеРеквизиты.Колонки.Добавить("ЕстьПодчиненные", Новый ОписаниеТипов("Булево"));
	ДоступныеРеквизиты.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	КоллекцииДоступныхПолей = КоллекцииДоступныхПолей(ТекущийРеквизит, ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул);
	Для Каждого КоллекцияДоступныхПолей Из КоллекцииДоступныхПолей Цикл
		Для Каждого ОписаниеПоля Из КоллекцияДоступныхПолей.Элементы Цикл
			
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ДополнительныеРеквизиты") Тогда
				Продолжить;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("КонтактнаяИнформация") Тогда
				Продолжить;
			КонецЕсли;
			
			Реквизит = ДоступныеРеквизиты.Добавить();
			
			Реквизит.Заголовок = ОписаниеПоля.Заголовок;
			Если ОписаниеПоля.Родитель <> Неопределено И СтрНачинаетсяС(Реквизит.Заголовок, ОписаниеПоля.Родитель.Заголовок) Тогда
				Реквизит.Заголовок = Сред(Реквизит.Заголовок, СтрДлина(ОписаниеПоля.Родитель.Заголовок) + 2);
			КонецЕсли;
			
			Реквизит.Поле = ОписаниеПоля.Поле;
			Реквизит.Имя = ИмяПоля(ОписаниеПоля.Поле);
			
			Реквизит.Тип = ОписаниеПоля.Тип;
			Реквизит.Папка = ОписаниеПоля.Папка;
			Реквизит.Таблица = ОписаниеПоля.Таблица;
			Реквизит.Порядок = 1;
			
			ДополнительныеПараметры = Новый Соответствие;
			Если ТипЗнч(ОписаниеПоля) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") И ЗначениеЗаполнено(ОписаниеПоля.Маска)
				И СтрНачинаетсяС(ОписаниеПоля.Маска, "{") И СтрЗаканчиваетсяНа(ОписаниеПоля.Маска, "}") Тогда
				ДополнительныеПараметры = JSONВЗначение(ОписаниеПоля.Маска);
			КонецЕсли;
			
			Если ДополнительныеПараметры["Картинка"] <> Неопределено Тогда
				Реквизит.Картинка = Новый Картинка(Base64Значение(ДополнительныеПараметры["Картинка"]));
			КонецЕсли;
			
			Порядок = ДополнительныеПараметры["Порядок"];
			Если ЗначениеЗаполнено(Порядок) Тогда
				Реквизит.Порядок = Порядок;
			КонецЕсли;
			
			Реквизит.ЭтоГруппа = ДополнительныеПараметры["ЭтоГруппа"];
			Если Реквизит.ЭтоГруппа Тогда
				Реквизит.Папка = Реквизит.ЭтоГруппа;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Реквизит.Картинка) Тогда
				Реквизит.Картинка = КартинкаТипа(ОписаниеПоля.Тип);

				Если Реквизит.Таблица Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ТипСписок;
				ИначеЕсли Реквизит.Папка Тогда
					Реквизит.Картинка = БиблиотекаКартинок.ТипГруппа;
				КонецЕсли;
			КонецЕсли;
			
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля") Тогда
				Реквизит.Порядок = 2;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля") Тогда
				Реквизит.Заголовок = НСтр("ru = 'Формулы'");
				Реквизит.Картинка = БиблиотекаКартинок.ТипФункция;
				Реквизит.Порядок = 3;
			КонецЕсли;
			Если ОписаниеПоля.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписи") Тогда
				Реквизит.Порядок = 4;
			КонецЕсли;
			
			Реквизит.ПредставлениеПутиКДанным = "";
			Если Не Реквизит.ЭтоГруппа Тогда
				Реквизит.ПутьКДанным = Реквизит.Имя;
				Реквизит.ПредставлениеПутиКДанным = Реквизит.Заголовок;
			КонецЕсли;
			
			Если ОписаниеПоля.Элементы.Количество() > 0 Тогда
				Реквизит.ЕстьПодчиненные = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ДоступныеРеквизиты.Сортировать("Порядок, Заголовок");
	
	КоллекцияРеквизитов = ПодчиненныеЭлементы(ТекущийРеквизит);
	Для Каждого ДоступныйРеквизит Из ДоступныеРеквизиты Цикл
		Реквизит = КоллекцияРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(Реквизит, ДоступныйРеквизит);
		
		Если Родитель(Реквизит) <> Неопределено Тогда
			Родитель = Родитель(Реквизит);
			Если Реквизит.ЭтоГруппа Тогда
				Реквизит.ПутьКДанным = Родитель.ПутьКДанным;
				Реквизит.ПредставлениеПутиКДанным = Строка(Родитель.ПредставлениеПутиКДанным);;
			Иначе
				Если ЗначениеЗаполнено(Родитель.ПутьКДанным) Тогда
					Реквизит.ПутьКДанным = Родитель.ПутьКДанным + "." + Реквизит.Имя;
					Реквизит.ПредставлениеПутиКДанным = Строка(Родитель.ПредставлениеПутиКДанным) + "." + Реквизит.Заголовок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоступныйРеквизит.ЕстьПодчиненные 
			Или Реквизит.Тип.Типы().Количество() = 1 И Не ОбщегоНазначения.ЭтоСсылка(Реквизит.Тип.Типы()[0]) Тогда
			
			КоллекцииПолейРеквизита = КоллекцииДоступныхПолей(Реквизит, ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул);
			Если ЗначениеЗаполнено(КоллекцииПолейРеквизита) И ЗначениеЗаполнено(КоллекцииПолейРеквизита[0].Элементы) 
				И Не СтрНайти(Реквизит.ПутьКДанным, Реквизит.Имя + ".") Тогда
				ПодчиненныеЭлементы(Реквизит).Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Имя - Строка
//   * Заголовок - Строка
//   * Поле - ОписаниеТипов
//   * ПутьКДанным - Строка
//   * ПредставлениеПутиКДанным - Строка
//   * Тип - ОписаниеТипов
//   * Картинка - Картинка
//   * Папка - Булево
//   * Таблица - Булево
//   * СвойНаборПолей - Булево 
//   * Отступ - Строка
//   * СоответствуетОтбору - Булево
//   * ПодчиненныйЭлементСоответствуетОтбору - Булево
//   * ЭтоГруппа - Булево
//
Функция НоваяКоллекцияДоступныхРеквизитов() 
	
	ДоступныеРеквизиты = Новый ТаблицаЗначений;
	Для Каждого ОписаниеРеквизита Из РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		ТипРеквизита = ОписаниеРеквизита.Значение;
		ДоступныеРеквизиты.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
	КонецЦикла;
	
	Возврат ДоступныеРеквизиты;
	
КонецФункции

// Параметры:
//  Коллекция - ДанныеФормыДерево
//            - ДанныеФормыКоллекцияЭлементовДерева
//            - ДеревоЗначений
//            - СтрокаДереваЗначений
//
Функция ПодчиненныеЭлементы(Коллекция)
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Или ТипЗнч(Коллекция) = Тип("СтрокаДереваЗначений") Тогда
		Возврат Коллекция.Строки;
	КонецЕсли;
	
	Возврат Коллекция.ПолучитьЭлементы();
	
КонецФункции

// Параметры:
//  Элемент - ДанныеФормыДерево
//          - ДанныеФормыКоллекцияЭлементовДерева
//          - ДеревоЗначений
//          - СтрокаДереваЗначений
//
Функция Родитель(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат Элемент.ПолучитьРодителя();
	ИначеЕсли ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		Возврат Элемент.Родитель;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращаемое значение:
//  Массив из ДоступныеПоляКомпоновкиДанных
//
Функция КоллекцииДоступныхПолей(Реквизит, ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Реквизит) = Тип("ДанныеФормыДерево") Или ТипЗнч(Реквизит) = Тип("ДеревоЗначений") Тогда
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул) Цикл
			Результат.Добавить(ИсточникДоступныхПолей.КоллекцияПолей);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Замещать = Ложь;
	Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул, Реквизит) Цикл
		Реквизит.СвойНаборПолей = Истина;
		Результат.Добавить(ИсточникДоступныхПолей.КоллекцияПолей);
		Замещать = Замещать Или ИсточникДоступныхПолей.Замещать;
	КонецЦикла;
	
	Если Замещать И ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Родитель = Родитель(Реквизит);
	Пока Родитель <> Неопределено Цикл
		Если Родитель.СвойНаборПолей Тогда
			Прервать;
		Иначе
			Родитель = Родитель(Родитель);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если Родитель <> Неопределено Тогда
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул, Родитель) Цикл
			Поле = ИсточникДоступныхПолей.КоллекцияПолей.НайтиПоле(Реквизит.Поле);
			Если Поле <> Неопределено Тогда
				Результат.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Замещать Или Не ЗначениеЗаполнено(Результат) Тогда
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул) Цикл
			Поле = ИсточникДоступныхПолей.КоллекцияПолей.НайтиПоле(Реквизит.Поле);
			Если Поле <> Неопределено Тогда
				Результат.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсточникиДоступныхПолей(ИсточникиДоступныхПолей, ИспользоватьИдентификаторыДляФормул, Реквизит = Неопределено)
	
	Результат = Новый Массив;
	
	Если Реквизит = Неопределено Тогда
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей.НайтиСтроки(Новый Структура("ИсточникДанных", "")) Цикл
			Результат.Добавить(ИсточникДоступныхПолей);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей Цикл
		Строка = Реквизит.ПутьКДанным;
		Если Реквизит.Папка Тогда
			Строка = Строка + ?(ЗначениеЗаполнено(Строка), ".", "") + Реквизит.Имя;
		КонецЕсли;
		Если СтрокаСоответствуетШаблону(Строка, ИсточникДоступныхПолей.ИсточникДанных) Тогда
			Результат.Добавить(ИсточникДоступныхПолей);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Тип Из Реквизит.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Или Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		ИсточникДанных = ОбъектМетаданных.ПолноеИмя();
		
		ИсточникНайден = Ложь;
		Для Каждого ИсточникДоступныхПолей Из ИсточникиДоступныхПолей Цикл
			Если СтрокаСоответствуетШаблону(ИсточникДанных, ИсточникДоступныхПолей.ИсточникДанных) Тогда
				Результат.Добавить(ИсточникДоступныхПолей);
				ИсточникНайден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ИсточникНайден И ИспользоватьИдентификаторыДляФормул Тогда
			КомпоновщикНастроек = КомпоновщикНастроекОбъекта(ОбъектМетаданных);
			ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Добавить();
			ИсточникДоступныхПолей.ИсточникДанных = ИсточникДанных;
			ИсточникДоступныхПолей.КоллекцияПолей = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
			ИсточникДоступныхПолей.Замещать = Истина;
			
			Результат.Добавить(ИсточникДоступныхПолей);
			
			КоллекцияПолей = КоллекцияДопРеквизитов(ОбъектМетаданных.ПолноеИмя());
			Если КоллекцияПолей <> Неопределено Тогда
				ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Добавить();
				ИсточникДоступныхПолей.ИсточникДанных = ИсточникДанных;
				ИсточникДоступныхПолей.КоллекцияПолей = КоллекцияПолей;
				
				Результат.Добавить(ИсточникДоступныхПолей);
			КонецЕсли;
			
			КоллекцияПолей = КоллекцияПолейКонтактнойИнформации(ОбъектМетаданных.ПолноеИмя());
			Если КоллекцияПолей <> Неопределено Тогда
				ИсточникДоступныхПолей = ИсточникиДоступныхПолей.Добавить();
				ИсточникДоступныхПолей.ИсточникДанных = ИсточникДанных;
				ИсточникДоступныхПолей.КоллекцияПолей = КоллекцияПолей;
				
				Результат.Добавить(ИсточникДоступныхПолей);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаСоответствуетШаблону(Знач Строка, Знач Шаблон)
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = СтрСоединить(СтрРазделить(Строка, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");
	СтрокаСоответствуетШаблону = Истина;
	
	Для Каждого ЧастиШаблона Из СтрРазделить(Шаблон, "*", Ложь) Цикл
		ФрагментДляПоиска = СтрСоединить(СтрРазделить(ЧастиШаблона, " " + Символы.ПС + Символы.ВК + Символы.Таб, Ложь), " ");
		
		Позиция = СтрНайти(Строка, ФрагментДляПоиска);
		Если Позиция = 0 Тогда
			СтрокаСоответствуетШаблону = Ложь;
			Прервать;
		КонецЕсли;
		
		Строка = Сред(Строка, Позиция + СтрДлина(ФрагментДляПоиска));
	КонецЦикла;
	
	Возврат СтрокаСоответствуетШаблону;
	
КонецФункции

Функция КомпоновщикНастроекОбъекта(ОбъектМетаданных)
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
		СхемаКомпоновкиДанных = ПолучитьОбщийМакет("ДанныеПечати" + ОбъектМетаданных);
	Иначе
		ЕстьДанныеПечати = ОбъектМетаданных.Макеты.Найти("ДанныеПечати") <> Неопределено;
		Если ЕстьДанныеПечати Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			СхемаКомпоновкиДанных = МенеджерОбъекта.ПолучитьМакет("ДанныеПечати");
		Иначе
			ТекстЗапроса = ТекстЗапроса(ОбъектМетаданных.ПолноеИмя());
			СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Функция СхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция ТекстЗапроса(ТипыИзменяемыхОбъектов, ОграничитьВыборку = Ложь)
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	СтруктураОбъектов = ОбщиеРеквизитыОбъектов(ТипыИзменяемыхОбъектов);
	
	Результат = "";
	ПсевдонимТаблицы = "ПсевдонимЗаданнойТаблицы";
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = "";
		
		Для Каждого ИмяРеквизита Из СтруктураОбъектов.Реквизиты Цикл
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ПсевдонимТаблицы + "." + ИмяРеквизита + " КАК " + ИмяРеквизита;
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из СтруктураОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + ПсевдонимТаблицы + "." + ИмяТабличнойЧасти + ".(";
			
			СтрокаРеквизитов = "НомерСтроки";
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			Для Каждого ИмяРеквизита Из РеквизитыТабличнойЧасти Цикл
				Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
				КонецЕсли;
				СтрокаРеквизитов = СтрокаРеквизитов + ИмяРеквизита;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
			|)";
		КонецЦикла;
		
		ТекстЗапроса = "ВЫБРАТЬ " + ?(ОграничитьВыборку, "ПЕРВЫЕ 1001 ", "") //@query-part
			+ ТекстЗапроса + Символы.ПС + "
			|ИЗ
			|	"+ ОбъектМетаданных.ПолноеИмя() + " КАК " + ПсевдонимТаблицы;
		
		Результат = Результат + ТекстЗапроса;
	КонецЦикла;
		
		
	Возврат Результат;
	
КонецФункции

Функция ОбщиеРеквизитыОбъектов(ТипыОбъектов) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", Новый Массив);
	Результат.Вставить("ТабличныеЧасти", Новый Структура);
	
	Если ОбъектыМетаданных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
		
	ОбщийСписокРеквизитов = СписокЭлементов(ОбъектыМетаданных[0].Реквизиты, Ложь);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = ПересечениеРеквизитов(ОбщийСписокРеквизитов, ОбъектыМетаданных[Индекс].Реквизиты);
	КонецЦикла;
	
	СтандартныеРеквизиты = ОбъектыМетаданных[0].СтандартныеРеквизиты;
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		СтандартныеРеквизиты = ПересечениеРеквизитов(СтандартныеРеквизиты, ОбъектыМетаданных[Индекс].СтандартныеРеквизиты);
	КонецЦикла;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ОбщийСписокРеквизитов.Добавить(Реквизит);
	КонецЦикла;
	
	Результат.Реквизиты = СписокЭлементов(ОбщийСписокРеквизитов);
	
	ТабличныеЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ТабличныеЧасти = ПересечениеМножеств(ТабличныеЧасти, СписокЭлементов(ОбъектыМетаданных[Индекс].ТабличныеЧасти));
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		РеквизитыТабличнойЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты, Ложь);
		Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
			РеквизитыТабличнойЧасти = ПересечениеРеквизитов(РеквизитыТабличнойЧасти, ОбъектыМетаданных[Индекс].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты);
		КонецЦикла;
		Если РеквизитыТабличнойЧасти.Количество() > 0 Тогда
			Результат.ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, СписокЭлементов(РеквизитыТабличнойЧасти));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПересечениеМножеств(Множество1, Множество2) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Множество1.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПересечениеРеквизитов(КоллекцияРеквизитов1, КоллекцияРеквизитов2)
	
	Результат = Новый Массив;
	
	Для Каждого Реквизит2 Из КоллекцияРеквизитов2 Цикл
		Для Каждого Реквизит1 Из КоллекцияРеквизитов1 Цикл
			Если Реквизит1.Имя = Реквизит2.Имя 
				И (Реквизит1.Тип = Реквизит2.Тип Или Реквизит1.Имя = "Ссылка") Тогда
				Результат.Добавить(Реквизит1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//   Коллекция - Массив из ОбъектМетаданныхРеквизит
//             - Массив из ОбъектМетаданныхТабличнаяЧасть
//   ТолькоИмена - Булево
// Возвращаемое значение:
//   Массив
//
Функция СписокЭлементов(Коллекция, ТолькоИмена = Истина)
	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Если ТолькоИмена Тогда
			Результат.Добавить(Элемент.Имя);
		Иначе
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСписокДоступныхПолей(Форма, ПараметрыЗаполнения) Экспорт
	
	ИдентификаторСтроки = ПараметрыЗаполнения.ИдентификаторСтроки;
	ИмяСписка = ПараметрыЗаполнения.ИмяСписка;
	
	РазвернутьРеквизит(ИдентификаторСтроки, ИмяСписка, Форма);
	
КонецПроцедуры

Функция СписокИсточниковДоступныхПолей(Форма, ИмяСпискаПолей)
	
	ИмяСпискаИсточников = КонструкторФормулКлиентСервер.НастройкиСпискаПолей(Форма, ИмяСпискаПолей).ИмяСпискаИсточников;
	Возврат Форма[ИмяСпискаИсточников];
	
КонецФункции

Функция СписокСвойствДляВидаОбъектов(ВидОбъектов)
	Результат = Новый Массив;
	
	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ДополнительныеРеквизиты");
	ВидыСвойств.Добавить("ДополнительныеСведения");
	
	МодульУправлениеСвойствамиСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствамиСлужебный");
	Если МодульУправлениеСвойствамиСлужебный <> Неопределено Тогда
		Для Каждого ВидСвойства Из ВидыСвойств Цикл
			СписокСвойств = МодульУправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВидОбъектов, ВидСвойства);
			Если СписокСвойств <> Неопределено Тогда
				Для Каждого Элемент Из СписокСвойств Цикл
					Результат.Добавить(Элемент.Свойство);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция КоллекцияДопРеквизитов(ИмяОбъектаМетаданных)
	
	СписокСвойств = СписокСвойствДляВидаОбъектов(ИмяОбъектаМетаданных);
	Если Не ЗначениеЗаполнено(СписокСвойств) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСвойств, "Заголовок,ИдентификаторДляФормул,ТипЗначения");
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Имя = "НаборДанных1";
	
	Для Каждого Элемент Из ЗначенияРеквизитов Цикл
		Свойство = Элемент.Значение;
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = Свойство.ИдентификаторДляФормул;
		Поле.ПутьКДанным = Свойство.ИдентификаторДляФормул;
		Если ЗначениеЗаполнено(Свойство.Заголовок) Тогда
			Поле.Заголовок = Свойство.Заголовок;
		КонецЕсли;
		Поле.ТипЗначения = Свойство.ТипЗначения;
	КонецЦикла;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
	
КонецФункции

Функция КоллекцияПолейКонтактнойИнформации(ИмяОбъектаМетаданных)
	
	ВидыКонтактнойИнформации = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");

		ВидыКонтактнойИнформации = МодульУправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъектаМетаданных).ПустаяСсылка());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидыКонтактнойИнформации) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Имя = "НаборДанных1";
	
	Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации.ИдентификаторДляФормул) Тогда
			Продолжить;
		КонецЕсли;
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = ВидКонтактнойИнформации.ИдентификаторДляФормул;
		Поле.ПутьКДанным = ВидКонтактнойИнформации.ИдентификаторДляФормул;
		Если ЗначениеЗаполнено(ВидКонтактнойИнформации.Наименование) Тогда
			Поле.Заголовок = ВидКонтактнойИнформации.Наименование;
		КонецЕсли;
		Поле.ТипЗначения = Новый ОписаниеТипов("Строка");
	КонецЦикла;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
	
КонецФункции

Процедура ВыполнитьПоискВСпискеПолей(Форма) Экспорт
	
	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей = Элемент.ИмяСпискаПолей;
		ИмяРеквизитаСтрокиПоиска = ИмяРеквизитаСтрокиПоискаСпискаПолей(ИмяСпискаПолей);
		Отбор = Форма[ИмяРеквизитаСтрокиПоиска];
		ОтборУстановлен = ЗначениеЗаполнено(Отбор);
		Если ЗначениеЗаполнено(Отбор) Тогда
			УстановитьОтбор(Форма, ИмяСпискаПолей, Отбор, Форма[ИмяСпискаПолей]);
		КонецЕсли;
		Форма.Элементы[ИмяСпискаПолей + "Представление"].Видимость = НЕ ОтборУстановлен;
		Форма.Элементы[ИмяСпискаПолей + "ПредставлениеПутиКДанным"].Видимость = ОтборУстановлен;
		Форма.Элементы[ИмяСпискаПолей].Отображение = ?(ОтборУстановлен, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьОтбор(Знач Форма, Знач ИмяСписка, Знач Отбор,
	Знач КоллекцияРеквизитов = Неопределено, Знач Уровень = 0)
	
	Уровень = Уровень + 1;
	ЕстьРеквизитыСоответствующиеОтбору = Ложь;
	Для Каждого Реквизит Из КоллекцияРеквизитов.ПолучитьЭлементы() Цикл
		Если РодительскийРеквизитСоответствуетОтбору(Реквизит) Тогда
			Реквизит.СоответствуетОтбору = Ложь;
		Иначе
			ФорматированнаяСтрока = НайтиТекстВСтроке(Реквизит.ПредставлениеПутиКДанным, Отбор);
			Реквизит.СоответствуетОтбору = ФорматированнаяСтрока <> Неопределено;
			Если Реквизит.СоответствуетОтбору Тогда
				Реквизит.ПредставлениеПутиКДанным = ФорматированнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		Если Не Реквизит.СоответствуетОтбору И (Уровень < 2 
			Или Реквизит.Поле <> Неопределено И СтрНачинаетсяС(Отбор, Реквизит.ПредставлениеПутиКДанным)) Тогда
			РазвернутьРеквизит(Реквизит.ПолучитьИдентификатор(), ИмяСписка, Форма);
		КонецЕсли;
		Реквизит.ПодчиненныйЭлементСоответствуетОтбору = УстановитьОтбор(Форма, ИмяСписка, Отбор, Реквизит, Уровень);
		ЕстьРеквизитыСоответствующиеОтбору = ЕстьРеквизитыСоответствующиеОтбору Или Реквизит.СоответствуетОтбору
			Или Реквизит.ПодчиненныйЭлементСоответствуетОтбору;
	КонецЦикла;
	
	Возврат ЕстьРеквизитыСоответствующиеОтбору;
	
КонецФункции

Функция РодительскийРеквизитСоответствуетОтбору(Реквизит)
	
	Родитель = Реквизит.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Возврат Родитель.СоответствуетОтбору Или РодительскийРеквизитСоответствуетОтбору(Родитель);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура РазвернутьРеквизит(ИдентификаторСтроки, ИмяСписка, Форма)
	
	Отбор = Форма[ИмяРеквизитаСтрокиПоискаСпискаПолей(ИмяСписка)];
	ТекущиеДанные = Форма[ИмяСписка].НайтиПоИдентификатору(ИдентификаторСтроки);
	КоллекцияРеквизитов = ТекущиеДанные.ПолучитьЭлементы();

	НастройкиСписка = КонструкторФормулКлиентСервер.НастройкиСпискаПолей(Форма, ИмяСписка);
	ИспользоватьИдентификаторыДляФормул = НастройкиСписка.ИспользоватьИдентификаторыДляФормул;
	
	Если КоллекцияРеквизитов.Количество() = 0 Или КоллекцияРеквизитов[0].Поле <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияРеквизитов.Очистить();
	ИсточникиДоступныхПолей = СписокИсточниковДоступныхПолей(Форма, ИмяСписка);
	ЗаполнитьСписокДоступныхРеквизитов(ТекущиеДанные, ИсточникиДоступныхПолей, Отбор, ИспользоватьИдентификаторыДляФормул);
	
КонецПроцедуры

Процедура РазвернутьПоле(ТекущиеДанные, ИсточникиДоступныхПолей, НастройкиСписка)
	
	КоллекцияРеквизитов = ПодчиненныеЭлементы(ТекущиеДанные);
	ИспользоватьИдентификаторыДляФормул = НастройкиСписка.ИспользоватьИдентификаторыДляФормул;
	
	Если КоллекцияРеквизитов.Количество() = 0 Или КоллекцияРеквизитов[0].Поле <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	КоллекцияРеквизитов.Очистить();
	
	ЗаполнитьСписокДоступныхРеквизитов(ТекущиеДанные, ИсточникиДоступныхПолей, "", ИспользоватьИдентификаторыДляФормул);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма, ИмяСпискаПолей)
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "Картинка");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "Представление");
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + "ПредставлениеПутиКДанным");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяСпискаПолей + ".СоответствуетОтбору");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаСтрокиПоискаСпискаПолей(ИмяСпискаПолей));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

Функция НайтиТекстВСтроке(Знач Строка, Знач Текст)
	
	СтрокаПоиска = Строка;
	
	ФорматированныеСтроки = Новый Массив;
	Для Каждого Подстрока Из СтрРазделить(Текст, " ", Ложь) Цикл
		Позиция = СтрНайти(НРег(СтрокаПоиска), НРег(Подстрока));
		Если Позиция = 0 Тогда
			ФорматированныеСтроки = Неопределено;
			Прервать;
		КонецЕсли;
		
		ПодстрокаДоВхождения = Лев(СтрокаПоиска, Позиция - 1);
		ПодстрокаВхождения = Сред(СтрокаПоиска, Позиция, СтрДлина(Подстрока));
		СтрокаПоиска = Сред(СтрокаПоиска, Позиция + СтрДлина(Подстрока));
		
		ФорматированныеСтроки.Добавить(ПодстрокаДоВхождения);
		ФорматированныеСтроки.Добавить(Новый ФорматированнаяСтрока(ПодстрокаВхождения,
			Новый Шрифт( , , Истина), Новый Цвет(0,128,0)));
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ФорматированныеСтроки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныеСтроки.Добавить(СтрокаПоиска);
	СтрокаСПодсветкой = Новый ФорматированнаяСтрока(ФорматированныеСтроки); // АПК:1356 - можно использовать составную форматированную строку, так как массив строк формируется из переданного в функцию текста.
	
	Возврат СтрокаСПодсветкой;
	
КонецФункции

Функция СхемаКомпоновкиДанныхИзТаблицыЗначений(ТаблицаЗначений)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Имя = "НаборДанных1";
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = СтрокаТаблицы.Идентификатор;
		Поле.ПутьКДанным = СтрокаТаблицы.Идентификатор;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Представление) Тогда
			Поле.Заголовок = СтрокаТаблицы.Представление;
		КонецЕсли;
		Поле.ТипЗначения = СтрокаТаблицы.ТипЗначения;
		
		ДополнительныеПараметры = Новый Структура("Порядок");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтрокаТаблицы);
		
		ДополнительныеПараметры.Вставить("Картинка",  Base64Строка(СтрокаТаблицы.Картинка.ПолучитьДвоичныеДанные()));
		
		Поле.ПараметрыРедактирования.УстановитьЗначениеПараметра("Маска", ЗначениеВJSON(ДополнительныеПараметры));
	КонецЦикла;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция СхемаКомпоновкиДанныхИзДереваЗначений(ДеревоЗначений)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Имя = "НаборДанных1";
	
	ДобавитьГруппуЭлементовВНаборДанных(ДеревоЗначений, НаборДанных);
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Процедура ДобавитьГруппуЭлементовВНаборДанных(КоллекцияЭлементов, НаборДанных, Родитель = Неопределено)
	
	Для Каждого Элемент Из КоллекцияЭлементов.Строки Цикл
		ЭтоГруппа = Элемент.Строки.Количество() > 0 И Не ЗначениеЗаполнено(Элемент.ТипЗначения);
		
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = Элемент.Идентификатор;
		Поле.ТипЗначения = Элемент.ТипЗначения;

		ДополнительныеПараметры = Новый Структура("Порядок,ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Элемент);
		ДополнительныеПараметры.ЭтоГруппа = ЭтоГруппа;
		
		ДополнительныеПараметры.Вставить("Картинка", Base64Строка(Элемент.Картинка.ПолучитьДвоичныеДанные()));
		
		Поле.ПараметрыРедактирования.УстановитьЗначениеПараметра("Маска", ЗначениеВJSON(ДополнительныеПараметры));
		
		Поле.ПутьКДанным = Элемент.Идентификатор;
		Если Родитель <> Неопределено Тогда
			Поле.ПутьКДанным = Родитель.ПутьКДанным + "." + Поле.ПутьКДанным;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Элемент.Представление) Тогда
			Поле.Заголовок = Элемент.Представление;
		КонецЕсли;

		ДобавитьГруппуЭлементовВНаборДанных(Элемент, НаборДанных, Поле);
	КонецЦикла;
	
КонецПроцедуры

#Область ЧтениеФормулы

Функция ФормулаИзПредставления(Форма, ПредставлениеФормулы) Экспорт
	
	ЭлементыФормулы = КонструкторФормулКлиентСервер.ЭлементыФормулы(ПредставлениеФормулы);
	Выражение = ПредставлениеФормулы;
	
	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей = Элемент.ИмяСпискаПолей;
		КоллекцияПолей = Форма[ИмяСпискаПолей];
		СкобкиИдентификаторов = Элемент.СкобкиИдентификаторов;
		
		Для Каждого ПредставлениеОперанда Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным = ОчиститьКвадратныеСкобки(ПредставлениеОперанда);
			Реквизит = НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Истина);
			Если Реквизит <> Неопределено  Тогда
				Операнд = Реквизит.ПутьКДанным;
				Если СкобкиИдентификаторов Тогда
					Операнд = ОбернутьВКвадратныеСкобки(Операнд);
				КонецЕсли;
				Выражение = СтрЗаменить(Выражение, ПредставлениеОперанда, Операнд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Выражение;
	
КонецФункции

Функция ПредставлениеФормулы(Форма, Формула) Экспорт
	
	ЭлементыФормулы = КонструкторФормулКлиентСервер.ЭлементыФормулы(Формула);
	Выражение = Формула;
	
	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей = Элемент.ИмяСпискаПолей;
		КоллекцияПолей = Форма[ИмяСпискаПолей];
		СкобкиПредставлений = Элемент.СкобкиПредставлений;
		
		Для Каждого Операнд Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным = ОчиститьКвадратныеСкобки(Операнд);
			Реквизит = НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Ложь);
			Если Реквизит <> Неопределено Тогда
				ПредставлениеОперанда = Реквизит.ПредставлениеПутиКДанным;
				Если СкобкиПредставлений Тогда
					ПредставлениеОперанда = ОбернутьВКвадратныеСкобки(Реквизит.ПредставлениеПутиКДанным);
				КонецЕсли;
				Выражение = СтрЗаменить(Выражение, Операнд, ПредставлениеОперанда);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Выражение;
	
КонецФункции

Функция ПредставлениеВыражения(Знач Выражение, СпискиПолей) Экспорт
	
	ЭлементыФормулы = КонструкторФормулКлиентСервер.ЭлементыФормулы(Выражение);
	Результат = Выражение;
	
	Для Каждого НастройкиСписка Из СпискиПолей Цикл
		КоллекцияПолей = НастройкиСписка.КоллекцияПолей;
		ИсточникиДоступныхПолей = НастройкиСписка.ИсточникиДоступныхПолей;
		ИспользоватьИдентификаторыДляФормул = НастройкиСписка.ИспользоватьИдентификаторыДляФормул;
		Если КоллекцияПолей = Неопределено Тогда
			КоллекцияПолей = НоваяКоллекцияПолей();
			ЗаполнитьСписокДоступныхРеквизитов(КоллекцияПолей, ИсточникиДоступныхПолей, , ИспользоватьИдентификаторыДляФормул);
		КонецЕсли;
		
		Для Каждого Операнд Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным = ОчиститьКвадратныеСкобки(Операнд);
			Реквизит = НайтиПоле(ПутьКДанным, ПодчиненныеЭлементы(КоллекцияПолей), Ложь, ИсточникиДоступныхПолей, НастройкиСписка);
			Если Реквизит <> Неопределено Тогда
				ПредставлениеОперанда = Реквизит.ПредставлениеПутиКДанным;
				Если НастройкиСписка.СкобкиПредставлений Тогда
					ПредставлениеОперанда = ОбернутьВКвадратныеСкобки(Реквизит.ПредставлениеПутиКДанным);
				КонецЕсли;
				Результат = СтрЗаменить(Результат, Операнд, ПредставлениеОперанда);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыражениеДляПроверки(Форма, ПредставлениеФормулы, ИмяСпискаОперандов) Экспорт
	
	ЭлементыФормулы = КонструкторФормулКлиентСервер.ЭлементыФормулы(ПредставлениеФормулы);
	Выражение = ПредставлениеФормулы;
	
	Для Каждого Элемент Из Форма.ПодключенныеСпискиПолей Цикл
		ИмяСпискаПолей = Элемент.ИмяСпискаПолей;
		КоллекцияПолей = Форма[ИмяСпискаПолей];
		СкобкиИдентификаторов = Элемент.СкобкиИдентификаторов;
		
		Для Каждого ПредставлениеОперанда Из ЭлементыФормулы.Операнды Цикл
			ПутьКДанным = ОчиститьКвадратныеСкобки(ПредставлениеОперанда);
			Реквизит = НайтиРеквизит(Форма, ИмяСпискаПолей, ПутьКДанным, КоллекцияПолей.ПолучитьЭлементы(), Истина);
			Если Реквизит <> Неопределено  Тогда
				Если ИмяСпискаОперандов = ИмяСпискаПолей Тогда
					Операнд = Реквизит.Тип.ПривестиЗначение(1);
					Если ТипЗнч(Операнд) = Тип("Строка") Тогда
						Операнд = """" + Операнд + """";
					КонецЕсли;
					Если ТипЗнч(Операнд) = Тип("Булево") Тогда
						Операнд = Формат(Операнд, "БЛ=Ложь; БИ=Истина"); // Должно быть на языке конфигурации.
					КонецЕсли;
					Если ТипЗнч(Операнд) = Тип("Дата") Тогда
						Операнд = "'" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММддЧЧмм") +  "'"; // Для использования в выражении Вычислить().
					КонецЕсли;
				Иначе
					Операнд = ОчиститьКвадратныеСкобки(Реквизит.ПутьКДанным);
					Если СкобкиИдентификаторов Тогда
						Операнд = ОбернутьВКвадратныеСкобки(Операнд);
					КонецЕсли;
				КонецЕсли;
				Выражение = СтрЗаменить(Выражение, ПредставлениеОперанда, Операнд);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Выражение;
	
КонецФункции

Функция ОчиститьКвадратныеСкобки(Строка)
	
	Если СтрНачинаетсяС(Строка, "[") И СтрЗаканчиваетсяНа(Строка, "]") Тогда
		Возврат Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция ОбернутьВКвадратныеСкобки(Строка)
	
	Возврат "[" + Строка + "]";
	
КонецФункции

Функция НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, КоллекцияРеквизитов, ИскатьПоПредставлению)
	
	ИмяПоляПоиска = "ПутьКДанным";
	Если ИскатьПоПредставлению Тогда
		ИмяПоляПоиска = "ПредставлениеПутиКДанным";
	КонецЕсли;
	
	Владелец = Неопределено;
	Папки = Новый Массив;
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		Если НРег(Реквизит[ИмяПоляПоиска]) = НРег(ПутьКДанным) Тогда
			Возврат Реквизит;
		КонецЕсли;
		Если Реквизит.Папка Тогда
			Папки.Добавить(Реквизит);
		Иначе
			Если СтрНачинаетсяС(НРег(ПутьКДанным), НРег(Реквизит[ИмяПоляПоиска]) + ".") Тогда
				Владелец = Реквизит;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Владелец <> Неопределено Тогда
		РазвернутьРеквизит(Владелец.ПолучитьИдентификатор(), ИмяСписка, Форма);
		Возврат НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, Владелец.ПолучитьЭлементы(), ИскатьПоПредставлению);
	КонецЕсли;
	
	Для Каждого Папка Из Папки Цикл
		РазвернутьРеквизит(Папка.ПолучитьИдентификатор(), ИмяСписка, Форма);
		Реквизит = НайтиРеквизит(Форма, ИмяСписка, ПутьКДанным, Папка.ПолучитьЭлементы(), ИскатьПоПредставлению);
		
		Если Реквизит <> Неопределено Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиПоле(ПутьКДанным, КоллекцияРеквизитов, ИскатьПоПредставлению, ИсточникиДоступныхПолей, НастройкиСписка)
	
	ИмяПоляПоиска = "ПутьКДанным";
	Если ИскатьПоПредставлению Тогда
		ИмяПоляПоиска = "ПредставлениеПутиКДанным";
	КонецЕсли;
	
	Владелец = Неопределено;
	Папки = Новый Массив;
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		Если НРег(Реквизит[ИмяПоляПоиска]) = НРег(ПутьКДанным) Тогда
			Возврат Реквизит;
		КонецЕсли;
		Если Реквизит.Папка Тогда
			Папки.Добавить(Реквизит);
		Иначе
			Если СтрНачинаетсяС(НРег(ПутьКДанным), НРег(Реквизит[ИмяПоляПоиска]) + ".") Тогда
				Владелец = Реквизит;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Владелец <> Неопределено Тогда
		РазвернутьПоле(Владелец, ИсточникиДоступныхПолей, НастройкиСписка);
		Возврат НайтиПоле(ПутьКДанным, ПодчиненныеЭлементы(Владелец), ИскатьПоПредставлению, ИсточникиДоступныхПолей, НастройкиСписка);
	КонецЕсли;
	
	Для Каждого Папка Из Папки Цикл
		РазвернутьПоле(Папка, ИсточникиДоступныхПолей, НастройкиСписка);
		Реквизит = НайтиПоле(ПутьКДанным, ПодчиненныеЭлементы(Папка), ИскатьПоПредставлению, ИсточникиДоступныхПолей, НастройкиСписка);
		
		Если Реквизит <> Неопределено Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

Функция РеквизитыПодключаемогоСписка()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Имя", Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Заголовок", Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Поле", Новый ОписаниеТипов());
	Результат.Вставить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	Результат.Вставить("ПредставлениеПутиКДанным", Новый ОписаниеТипов);
	Результат.Вставить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Вставить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Вставить("Папка", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Таблица", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("СвойНаборПолей", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Отступ", Новый ОписаниеТипов("Строка"));
	Результат.Вставить("СоответствуетОтбору", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ПодчиненныйЭлементСоответствуетОтбору", Новый ОписаниеТипов("Булево"));
	Результат.Вставить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

Функция НоваяКоллекцияПолей()
	
	Результат = Новый ДеревоЗначений();
	Для Каждого ОписаниеРеквизита Из РеквизитыПодключаемогоСписка() Цикл
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		ТипРеквизита = ОписаниеРеквизита.Значение;
		Результат.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция НоваяКоллекцияИсточниковДоступныхПолей()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КоллекцияПолей");
	Результат.Колонки.Добавить("Замещать", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JSONВЗначение(Строка, ИменаСвойствСоЗначениямиДата = Неопределено)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата);
КонецФункции

Функция КартинкаТипа(ОписаниеТипов)
	
	Картинка = БиблиотекаКартинок.ТипНеопределено;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		Тип = ОписаниеТипов.Типы()[0];
		Если Тип = Тип("Число") Тогда
			Картинка = БиблиотекаКартинок.ТипЧисло;
		ИначеЕсли Тип = Тип("Дата") Тогда
			Картинка = БиблиотекаКартинок.ТипДата;
		ИначеЕсли Тип = Тип("Булево") Тогда
			Картинка = БиблиотекаКартинок.ТипБулево;
		ИначеЕсли Тип = Тип("Строка") Тогда
			Картинка = БиблиотекаКартинок.ТипСтрока;
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Картинка = БиблиотекаКартинок.ТипСсылка;
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			Картинка = БиблиотекаКартинок.ТипИдентификатор;
		КонецЕсли;
	ИначеЕсли ОписаниеТипов.Типы().Количество() > 1 Тогда
		Картинка = БиблиотекаКартинок.ТипСоставнойОсновной;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

Функция СписокОператоров(ГруппыОператоров = Неопределено) Экспорт
	
	СписокОператоров =  ДеревоПолей();
	
	Если ГруппыОператоров = Неопределено Тогда
		ГруппыОператоров = "Разделители, Операторы, ЛогическиеОператорыИКонстанты,
		|ЧисловыеФункции, СтроковыеФункции, ПрочиеФункции";
	ИначеЕсли ГруппыОператоров = "ВсеОператорыСКД" Тогда
		ГруппыОператоров = "Операторы, ОперацииНадСтрокамиСКД, ОперацииСравненияСКД,
		|ЛогическиеОперацииСКД, АгрегатныеФункцииСКД";
	КонецЕсли;
	
	Для Каждого Элемент Из Новый Структура(ГруппыОператоров) Цикл
		ИмяГруппы = Элемент.Ключ;
		Если ИмяГруппы = "Разделители" Тогда
			ДобавитьГруппуОператоровРазделители(СписокОператоров);
		ИначеЕсли ИмяГруппы = "Операторы" Тогда
			ДобавитьГруппуОператоровОператоры(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЛогическиеОператорыИКонстанты" Тогда
			ДобавитьГруппуОператоровЛогическиеОператорыИКонстанты(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЧисловыеФункции" Тогда
			ДобавитьГруппуОператоровЧисловыеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "СтроковыеФункции" Тогда
			ДобавитьГруппуОператоровСтроковыеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ПрочиеФункции" Тогда
			ДобавитьГруппуОператоровПрочиеФункции(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ОперацииНадСтрокамиСКД" Тогда
			ДобавитьГруппуОператоровОперацииНадСтроками(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ОперацииСравненияСКД" Тогда
			ДобавитьГруппуОператоровОперацииСравнения(СписокОператоров);
		ИначеЕсли ИмяГруппы = "ЛогическиеОперацииСКД" Тогда
			ДобавитьГруппуОператоровЛогическиеОперации(СписокОператоров);
		ИначеЕсли ИмяГруппы = "АгрегатныеФункцииСКД" Тогда
			ДобавитьГруппуОператоровАгрегатныеФункции(СписокОператоров);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СписокОператоров;
	
КонецФункции

Процедура ДобавитьГруппуОператоровРазделители(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "Разделители";
	Группа.Представление = НСтр("ru = 'Разделители'");
	Группа.Порядок = 1;
	
	Для Каждого Идентификатор Из СтрРазделить("/ | \ _ , . ( ) """, " ", Ложь) Цикл
		ДобавитьОператорВГруппу(Группа, Идентификатор, , Новый ОписаниеТипов("Строка"));
	КонецЦикла;

	ДобавитьОператорВГруппу(Группа, " ", НСтр("ru = 'Пробел'"), Новый ОписаниеТипов("Строка"));
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровОператоры(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "Операторы";
	Группа.Представление = НСтр("ru = 'Операторы'");
	Группа.Порядок = 2;
	
	Для Каждого Идентификатор Из СтрРазделить("+ - * / %", " ", Ложь) Цикл
		ДобавитьОператорВГруппу(Группа, Идентификатор, , Новый ОписаниеТипов("Число"));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровЛогическиеОператорыИКонстанты(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "ЛогическиеОператорыИКонстанты";
	Группа.Представление = НСтр("ru = 'Логические операторы и константы'");
	Группа.Порядок = 3;
	
	Тип = Новый ОписаниеТипов("Булево");
	
	Для Каждого Идентификатор Из СтрРазделить("<,>,<=,>=,=,<>", ",", Ложь) Цикл
		ДобавитьОператорВГруппу(Группа, Идентификатор, , Тип);
	КонецЦикла;
	
	ДобавитьОператорВГруппу(Группа, "И", НСтр("ru = 'И'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Или", НСтр("ru = 'Или'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Не", НСтр("ru = 'Не'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Истина", НСтр("ru = 'Истина'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Ложь", НСтр("ru = 'Ложь'"), Тип);
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровЧисловыеФункции(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "ЧисловыеФункции";
	Группа.Представление = НСтр("ru = 'Числовые функции'");
	Группа.Порядок = 4;
	Группа.Картинка = БиблиотекаКартинок.ТипФункция;
	
	Тип = Новый ОписаниеТипов("Число");
	
	ДобавитьОператорВГруппу(Группа, "Макс", НСтр("ru = 'Максимум'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Мин", НСтр("ru = 'Минимум'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Окр", НСтр("ru = 'Округлить'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Цел", НСтр("ru = 'ЦелаяЧасть'"), Тип);
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровСтроковыеФункции(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "СтроковыеФункции";
	Группа.Представление = НСтр("ru = 'Строковые функции'");
	Группа.Порядок = 5;
	Группа.Картинка = БиблиотекаКартинок.ТипФункция;
	
	Тип = Новый ОписаниеТипов("Строка");
	
	ДобавитьОператорВГруппу(Группа, "Строка", НСтр("ru = 'ПреобразоватьВСтроку'"), Тип);
	ДобавитьОператорВГруппу(Группа, "ВРег", НСтр("ru = 'ВсеПрописные'"), Тип);
	ДобавитьОператорВГруппу(Группа, "НРег", НСтр("ru = 'ВсеСтрочные'"), Тип);
	ДобавитьОператорВГруппу(Группа, "ТРег", НСтр("ru = 'КаждоеСловоСПрописной'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Лев", НСтр("ru = 'СимволыСлева'"), Тип);
	ДобавитьОператорВГруппу(Группа, "Прав", НСтр("ru = 'СимволыСправа'"), Тип);
	ДобавитьОператорВГруппу(Группа, "СокрЛ", НСтр("ru = 'УбратьПробелыСлева'"), Тип);
	ДобавитьОператорВГруппу(Группа, "СокрЛП", НСтр("ru = 'УбратьПробелыСлеваИСправа'"), Тип);
	ДобавитьОператорВГруппу(Группа, "СокрП", НСтр("ru = 'УбратьПробелыСправа'"), Тип);
	ДобавитьОператорВГруппу(Группа, "СтрЗаменить", НСтр("ru = 'ЗаменитьСимволыВСтроке'"), Тип);
	ДобавитьОператорВГруппу(Группа, "СтрДлина", НСтр("ru = 'ДлинаСтроки'"), Новый ОписаниеТипов("Число"));
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровПрочиеФункции(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "ПрочиеФункции";
	Группа.Представление = НСтр("ru = 'Прочие функции'");
	Группа.Порядок = 6;
	Группа.Картинка = БиблиотекаКартинок.ТипФункция;
	
	ДобавитьОператорВГруппу(Группа, "?", НСтр("ru = 'Условие'"), Новый ОписаниеТипов("Булево"));
	ДобавитьОператорВГруппу(Группа, "ПредопределенноеЗначение", НСтр("ru = 'ПредопределенноеЗначение'"), Новый ОписаниеТипов);
	ДобавитьОператорВГруппу(Группа, "ЗначениеЗаполнено", НСтр("ru = 'ЗначениеЗаполнено'"), Новый ОписаниеТипов("Булево"));
	ДобавитьОператорВГруппу(Группа, "Формат", НСтр("ru = 'Формат'"), Новый ОписаниеТипов("Строка"));
	
КонецПроцедуры

Процедура ДобавитьОператорВГруппу(Группа, Идентификатор, Знач Представление = Неопределено, Тип = Неопределено)
	
	Если Представление = Неопределено Тогда
		Представление = Идентификатор;
	КонецЕсли;
	
	Оператор = Группа.Строки.Добавить();
	Оператор.Идентификатор = Идентификатор;
	Оператор.Представление = Представление;
	Оператор.ТипЗначения = Тип;
	Оператор.Картинка = БиблиотекаКартинок.Пустая;
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровОперацииНадСтроками(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "ОперацииНадСтроками";
	Группа.Представление = НСтр("ru = 'Операции над строками'");
	Группа.Порядок = 2;
	
	Тип = Новый ОписаниеТипов("Строка");
	
	ДобавитьОператорВГруппу(Группа, "+", , Тип);
	ДобавитьОператорВГруппу(Группа, "ПОДОБНО", НСтр("ru = 'ПОДОБНО'"), Тип);
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровОперацииСравнения(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "ОперацииСравнения";
	Группа.Представление = НСтр("ru = 'Операции сравнения'");
	Группа.Порядок = 3;
	
	Тип = Новый ОписаниеТипов("Булево");
	
	Для Каждого Идентификатор Из СтрРазделить("<,>,<=,>=,=,<>", ",", Ложь) Цикл
		ДобавитьОператорВГруппу(Группа, Идентификатор, , Тип);
	КонецЦикла;
	
	ДобавитьОператорВГруппу(Группа, "В", НСтр("ru = 'В'"), Тип);
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровЛогическиеОперации(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "ЛогическиеОперации";
	Группа.Представление = НСтр("ru = 'Логические операции'");
	Группа.Порядок = 4;
	
	Тип = Новый ОписаниеТипов("Булево");
	
	ДобавитьОператорВГруппу(Группа, "НЕ", НСтр("ru = 'НЕ'"), Тип);
	ДобавитьОператорВГруппу(Группа, "И", НСтр("ru = 'И'"), Тип);
	ДобавитьОператорВГруппу(Группа, "ИЛИ", НСтр("ru = 'ИЛИ'"), Тип);
	
КонецПроцедуры

Процедура ДобавитьГруппуОператоровАгрегатныеФункции(СписокОператоров)
	
	Группа = СписокОператоров.Строки.Добавить();
	Группа.Идентификатор = "АгрегатныеФункции";
	Группа.Представление = НСтр("ru = 'Агрегатные функции'");
	Группа.Порядок = 5;
	Группа.Картинка = БиблиотекаКартинок.ТипФункция;
	
	Тип = Новый ОписаниеТипов("Число");
	
	ДобавитьОператорВГруппу(Группа, "СУММА", НСтр("ru = 'СУММА'"), Тип);
	ДобавитьОператорВГруппу(Группа, "КОЛИЧЕСТВО", НСтр("ru = 'КОЛИЧЕСТВО'"), Тип);
	ДобавитьОператорВГруппу(Группа, "МАКСИМУМ", НСтр("ru = 'МАКСИМУМ'"), Тип);
	ДобавитьОператорВГруппу(Группа, "МИНИМУМ", НСтр("ru = 'МИНИМУМ'"), Тип);
	ДобавитьОператорВГруппу(Группа, "СРЕДНЕЕ", НСтр("ru = 'СРЕДНЕЕ'"), Тип);
	
КонецПроцедуры

Функция ИмяРеквизитаСтрокиПоискаСпискаПолей(ИмяСпискаПолей)
	
	Возврат "СтрокаПоиска" + ИмяСпискаПолей;
	
КонецФункции

Функция ИмяПоля(Поле)
	
	ИмяПоля = "";
	Строка = Строка(Поле);
	ОткрывающихСкобок = 0;
	
	Для Индекс = -СтрДлина(Строка) По -1 Цикл
		Позиция = -Индекс;
		Символ = Сред(Строка, Позиция, 1);
		
		Если Символ = "]" Тогда
			ОткрывающихСкобок = ОткрывающихСкобок + 1;
		КонецЕсли;
		
		Если Символ = "[" Тогда
			ОткрывающихСкобок = ОткрывающихСкобок - 1;
		КонецЕсли;
		
		Если Символ = "." И ОткрывающихСкобок = 0 Тогда
			Прервать;
		Иначе
			ИмяПоля = Символ + ИмяПоля;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяПоля;
	
КонецФункции

#КонецОбласти