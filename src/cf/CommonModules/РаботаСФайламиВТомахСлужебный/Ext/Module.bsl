///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Определяет наличие активных томов хранения файлов.
// Если есть хоть один том хранения файлов, то будет возвращена Истина.
//
// Возвращаемое значение:
//   Булево - если Истина, тогда существует хотя бы один работающий том.
//
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
	|ГДЕ
	|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает двоичные данные файла.
//
// Параметры:
//   ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//   ВызыватьИсключение - Булево - если указать Ложь, то функция будет возвращать Неопределено
//                     вместо вызова исключений. Значение по умолчанию - Истина.
//
// Возвращаемое значение:
//   ДвоичныеДанные, Неопределено - двоичные данные присоединенного файла. Если двоичные данные файла не найдены
//                               в информационной базе или в томах, вызывает исключение. Если двоичные данные не
//                               найдены и параметр ВызыватьИсключение принимает значение Ложь, тогда
//                               возвращаемое значение - Неопределено.
//
Функция ДанныеФайла(ПрисоединенныйФайл, Знач ВызыватьИсключение = Истина) Экспорт
	
	СвойстваФайла = СвойстваФайлаВТоме(ПрисоединенныйФайл);
	Попытка
		Возврат Новый ДвоичныеДанные(ПолноеИмяФайлаВТоме(СвойстваФайла));
	Исключение
		
		Если Не ВызыватьИсключение Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Получение файла из тома'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
			ПрисоединенныйФайл,
			СообщениеОбОшибке);
			
		ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Присоединен к %1 : %2'"),
			Строка(ТипЗнч(СвойстваФайла.ВладелецФайла)),
			СвойстваФайла.ВладелецФайла);
			
		ТекстОшибки = НСтр("ru = 'Не удалось открыть файл:
			|%1
			|который присоединен к:
			|%2
			|по причине: двоичные данные файла были удалены. Возможно, файл очищен как ненужный или удален антивирусной программой.
			|Обратитесь к администратору.'");
		
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			СвойстваФайла.Наименование + "." + СвойстваФайла.Расширение,
			ПредставлениеВладельцаФайла);
			
	КонецПопытки;
	
КонецФункции

// Конструктор структуры данных присоединенного файла. Подробнее см. ДобавитьФайл.
// 
// Возвращаемое значение:
//   ПараметрыФайла - Структура.
//     Перед добавлением файла должны быть заполнены свойства:
//       * Ссылка                       - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлами.
//       * Наименование                 - Строка - наименование добавляемого файла.
//       * Расширение                   - Строка - расширение добавляемого файла.
//       * ВладелецФайла                - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - ссылка на владельца файла.
//       * ДатаМодификацииУниверсальная - Дата - дата изменения файла.
//    После добавления можно анализировать свойства:
//       * ТипХраненияФайла - Перечисления.ТипыХраненияФайлов - тип хранения данных файла.
//       * Том              - СправочникСсылка.ТомаХраненияФайлов - том, в который был добавлен файл.
//       * ПутьКФайлу       - Строка - путь в томе, по которому был размещен файл.
//       * ХранимыйФайл     - ХранилищеЗначения - данные добавленного файла.
//
Функция ПараметрыДобавленияФайла() Экспорт
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Ссылка", Неопределено);
	ПараметрыФайла.Вставить("Том", Справочники.ТомаХраненияФайлов.ПустаяСсылка());
	ПараметрыФайла.Вставить("ПутьКФайлу", "");
	ПараметрыФайла.Вставить("Расширение", Неопределено);
	ПараметрыФайла.Вставить("Наименование", "");
	ПараметрыФайла.Вставить("ХранимыйФайл", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайла", Неопределено);
	ПараметрыФайла.Вставить("ТипХраненияФайла", Неопределено);
	ПараметрыФайла.Вставить("ДатаМодификацииУниверсальная", Неопределено);
	
	Возврат ПараметрыФайла;
	
КонецФункции

// Добавляет файл в один из томов (где есть свободное место) или в информационную базу, если
// способ хранения файлов в настройках указан "ВИнформационнойБазеИТомахНаДиске" и файл соответствует
// параметрам хранения в информационной базе.
//
// Параметры:
//   ПрисоединенныйФайл  - ОпределяемыйТип.ПрисоединенныйФайлОбъект, Структура - элемент
//                                       справочника присоединенных файлов, данные которого сохраняются
//                                       в том, или структура со свойствами, необходимыми для сохранения
//                                       данных в том.
//                                       Свойства структуры: См. РаботаСФайламиВТомахСлужебный.ПараметрыДобавленияФайла.
//   ДвоичныеДанныеИлиПуть - ДвоичныеДанные, Строка - двоичные данные файла или полный путь
//                                       к файлу на диске.
//   ДатаДляРазмещенияВТоме - Дата - если не указано, то используется текущее время сеанса.
//   ЗаполнятьСлужебныйРеквизитХранилище - Булево - если параметр принимает значение Истина, двоичные данные
//                                       файла будут дополнительно помещены в служебный реквизит ФайлХранилище.
//   ТомДляРазмещения - СправочникСсылка.ТомаХраненияФайлов, Неопределено - если параметр
//                                       заполнен, файлы будут принудительно помещаться в указанный том,
//                                       иначе - том будет выбран автоматически.
//
Процедура ДобавитьФайл(ПрисоединенныйФайл,
	ДвоичныеДанныеИлиПуть,
	ДатаДляРазмещенияВТоме = Неопределено,
	ЗаполнятьСлужебныйРеквизитХранилище = Ложь,
	ТомДляРазмещенияДанных = Неопределено) Экспорт
	
	ОжидаемыеТипы = Новый Массив;
	ОжидаемыеТипы.Добавить(Тип("ДвоичныеДанные"));
	ОжидаемыеТипы.Добавить(Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайламиСлужебный.ДобавитьФайлВТом",
		"ДвоичныеДанныеИлиПуть", ДвоичныеДанныеИлиПуть, Новый ОписаниеТипов(ОжидаемыеТипы));
	
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("Структура")
		И Не ЗначениеЗаполнено(ПрисоединенныйФайл.Ссылка) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнено значение свойства %1 в параметре %2 (Структура) в процедуре %3.'"),
			"Ссылка",
			"ПрисоединенныйФайл",
			"РаботаСФайламиВТомахСлужебный.ДобавитьФайл");
		
	КонецЕсли;
	
	Если ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка") Тогда
		
		ФайлНаДиске = Новый Файл(ДвоичныеДанныеИлиПуть);
		Если ФайлНаДиске.Существует() Тогда
			РазмерФайла = ФайлНаДиске.Размер();
			РасширениеФайла = СтрЗаменить(ФайлНаДиске.Расширение, ".", "");
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось добавить файл ""%1"" ни в один из томов, т.к. он отсутствует.
				|Возможно, файл удален антивирусной программой.
				|Обратитесь к администратору.'"),
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение);
				
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		РазмерФайла = ДвоичныеДанныеИлиПуть.Размер();
		РасширениеФайла = СтрЗаменить(ПрисоединенныйФайл.Расширение, ".", "");
	КонецЕсли;
	
	Если ТипХраненияФайла(РасширениеФайла, РазмерФайла) = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		СсылкаНаФайл = ПрисоединенныйФайл.Ссылка;
		Если Не ЗначениеЗаполнено(СсылкаНаФайл) Тогда
			МетаданныеПрисоединенныйФайл = ПрисоединенныйФайл.Метаданные(); // ОбъектМетаданных
			СсылкаНаФайл = Справочники[МетаданныеПрисоединенныйФайл.Имя].ПолучитьСсылку();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНаФайл);
		КонецЕсли;
		
		ДанныеФайла = ?(ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка"),
			Новый ДвоичныеДанные(ДвоичныеДанныеИлиПуть), ДвоичныеДанныеИлиПуть);
		РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаНаФайл, ДанныеФайла);
		
		ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		ПрисоединенныйФайл.Том = Неопределено;
		ПрисоединенныйФайл.ПутьКФайлу = "";
		
		Если ЗаполнятьСлужебныйРеквизитХранилище Тогда
			ПрисоединенныйФайл.ФайлХранилище = Новый ХранилищеЗначения(ДанныеФайла);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл.Ссылка) Тогда
		РаботаСФайламиСлужебный.УдалитьЗаписьИзРегистраДвоичныеДанныеФайлов(ПрисоединенныйФайл.Ссылка);
	КонецЕсли;
	
	ТомХранения = ?(ТомДляРазмещенияДанных = Неопределено, СвободныйТом(РазмерФайла), ТомДляРазмещенияДанных);
	Если ТомХранения = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось добавить файл ""%1"" ни в один из томов, т.к. в томах недостаточно места.'"),
			ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение);
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПрисоединенныйФайл.Том = ТомХранения;
	ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
	
	СвойстваФайла = СвойстваФайлаВТоме();
	ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайл);
	Если ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		СвойстваФайла.ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПрисоединенныйФайл.Владелец, "ВладелецФайла");
	КонецЕсли;
	
	ПутьКТому = ПолныйПутьТома(ТомХранения);
	ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме);
	
	Попытка
		
		Если ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка") Тогда
			КопироватьФайл(ДвоичныеДанныеИлиПуть, ПутьКФайлу);
		Иначе
			ДвоичныеДанныеИлиПуть.Записать(ПутьКФайлу);
		КонецЕсли;
		
		ФайлНаДиске = Новый Файл(ПутьКФайлу);
		ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ПрисоединенныйФайл.ДатаМодификацииУниверсальная);
		ФайлНаДиске.УстановитьТолькоЧтение(Истина);
		
	Исключение
		
		ШаблонОписанияОшибки = НСтр("ru = 'Ошибка при добавлении файла ""%1""
			|в том ""%2"" (%3):
			|""%4"".'");
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Добавление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписанияОшибки,
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение,
				Строка(ТомХранения),
				ПутьКТому,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			
			СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписанияОшибки,
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение,
				Строка(ТомХранения),
				ПутьКТому,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			
			// Сообщение обычному пользователю.
			СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось добавить файл:
				|""%1.%2"".
				|
				|Обратитесь к администратору.'"),
				ПрисоединенныйФайл.Наименование,
				ПрисоединенныйФайл.Расширение);
				
		КонецЕсли;
		
		ВызватьИсключение СтрокаИсключения;
		
	КонецПопытки;
	
	ПрисоединенныйФайл.ПутьКФайлу = Сред(ПутьКФайлу, СтрДлина(ПутьКТому) + 1);
	
	Если ЗаполнятьСлужебныйРеквизитХранилище Тогда
		ПрисоединенныйФайл.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Копирует данные присоединенного файла по указанному пути.
//
// Параметры:
//   ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//   ВызыватьИсключение - Путь - полный путь (включая имя файла), куда будет скопирован файл из тома.
//
Процедура СкопироватьФайл(ПрисоединенныйФайл, Путь) Экспорт
	
	СвойстваФайла = СвойстваФайлаВТоме(ПрисоединенныйФайл);
	КопироватьФайл(ПолноеИмяФайлаВТоме(СвойстваФайла), Путь);
	
	// Исходному файлу мог быть установлен атрибут "Только чтение".
	// Унаследованный при копировании атрибут снимается, чтобы файл можно было удалить.
	СвойстваФайла = Новый Файл(Путь);
	Если СвойстваФайла.Существует()
		И СвойстваФайла.ПолучитьТолькоЧтение() Тогда
		
		СвойстваФайла.УстановитьТолькоЧтение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные файла в томе.
//
// Параметры:
//   ПрисоединенныйФайлОбъект - ОпределяемыйТип.ПрисоединенныйФайлОбъект - элемент справочника с файлом.
//   ДвоичныеДанные           - данные, которые будут помещены в том.
//
Процедура ОбновитьФайл(ПрисоединенныйФайлОбъект, ДвоичныеДанные) Экспорт
	
	Попытка
		
		СвойстваФайла = СвойстваФайлаВТоме();
		ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
		
		ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла);
		УдалитьФайл(ПутьКФайлу);
		
		ДобавитьФайл(ПрисоединенныйФайлОбъект, ДвоичныеДанные);
		ПрисоединенныйФайлОбъект.Записать();
		
	Исключение
		
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайлОбъект.Ссылка;
		ТекстОшибки = НСтр("ru = 'Ошибка, при сохранении файла в томе:
			|""%1"".
			|
			|Ссылка на файл: ""%2"".'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Запись файла на диск'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайлСсылка.Метаданные().Имя],
			ПрисоединенныйФайлСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ПрисоединенныйФайлСсылка));
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПрисоединенныйФайлСсылка);
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет файл из тома и обновляет информацию о хранении файла в информационной базе.
//
// Параметры:
//   ПрисоединенныйФайлОбъект - ОпределяемыйТип.ПрисоединенныйФайлОбъект - элемент справочника с файлом.
//   ТекстКомментария         - Строка - комментарий, который будет помещен в элемент справочника, данные
//                            которого удаляются из тома.
//
Процедура УдалитьДанныеФайла(ПрисоединенныйФайлОбъект, ТекстКомментария = "") Экспорт
	
	ПрисоединенныйФайлОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ПрисоединенныйФайлОбъект.ПутьКФайлу = "";
	ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
	Если ТипЗнч(ПрисоединенныйФайлОбъект) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		ПрисоединенныйФайлОбъект.Комментарий = ТекстКомментария + ПрисоединенныйФайлОбъект.Комментарий;
	Иначе
		ПрисоединенныйФайлОбъект.Описание = ТекстКомментария + ПрисоединенныйФайлОбъект.Описание;
	КонецЕсли;
	ПрисоединенныйФайлОбъект.Записать();
	
	СвойстваФайла = СвойстваФайлаВТоме();
	ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
	УдалитьФайл(ПолноеИмяФайлаВТоме(СвойстваФайла));
	
КонецПроцедуры

// Удаляет файл из тома.
//
// Параметры:
//   ПутьКФайлу - Строка - путь к удаляемому файлу.
//
Процедура УдалитьФайл(ПутьКФайлу) Экспорт
	
	ФайлНаДиске = Новый Файл(ПутьКФайлу);
	Если ФайлНаДиске.Существует() Тогда
		
		КаталогФайла = ФайлНаДиске.Путь;
		ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		
		Попытка
			
			УдалитьФайлы(ПутьКФайлу);
			
			// Удаляем каталог файла, если после удаления файла каталог стал пустым.
			ФайлыВКаталоге = НайтиФайлы(КаталогФайла, ПолучитьМаскуВсеФайлы());
			Если ФайлыВКаталоге.Количество() = 0 Тогда
				УдалитьФайлы(КаталогФайла);
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Удаление файлов в томе'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Переименовывает файл в томе.
//
// Параметры:
//   ПрисоединенныйФайл      - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//   НовоеИмя                - Строка - имя, которое будет установлено файлу в томе.
//   СтароеИмя               - Строка - текущее имя файла в томе. Если параметр не заполнен, текущим
//                           именем будет считаться наименование присоединенного файла.
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы для блокировки присоединенного
//                           файла при записи нового пути к файлу в томе.
//
Процедура ПереименоватьФайл(ПрисоединенныйФайл, НовоеИмя,
	СтароеИмя = "", УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(
			Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
		БлокировкаДанных.Заблокировать();
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПрисоединенныйФайл, , УникальныйИдентификатор);
		
		СвойстваФайла = СвойстваФайлаВТоме();
		ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайлОбъект);
		
		ПутьКТому = ПолныйПутьТома(ПрисоединенныйФайлОбъект.Том);
		ТекущийПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла);
		
		ФайлНаДиске = Новый Файл(ТекущийПутьКФайлу);
		ИмяДляЗамены = ?(ПустаяСтрока(СтароеИмя), ПрисоединенныйФайлОбъект.Наименование, СтароеИмя);
		НовыйПутьКФайлу = ФайлНаДиске.Путь
			+ СтрЗаменить(ФайлНаДиске.ИмяБезРасширения, ИмяДляЗамены, НовоеИмя)
			+ ФайлНаДиске.Расширение;
		
		ПереместитьФайл(ТекущийПутьКФайлу, НовыйПутьКФайлу);
		
		ПрисоединенныйФайлОбъект.ПутьКФайлу = СтрЗаменить(НовыйПутьКФайлу, ПутьКТому, "");
		ПрисоединенныйФайлОбъект.Записать();
		
		РазблокироватьДанныеДляРедактирования(ПрисоединенныйФайл, УникальныйИдентификатор);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		РазблокироватьДанныеДляРедактирования(ПрисоединенныйФайл, УникальныйИдентификатор);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Инициализирует структуру свойств файла для получения полного пути к файлу в томе.
//
// Параметры:
//   Файл - ОпределяемыйТип.ПрисоединенныйФайл, Неопределено - если значение параметра заполнено, свойства
//          заполняются значениями одноименных реквизитов файла, иначе - свойства принимают значение Неопределено.
//
// Возвращаемое значение:
//   СвойстваФайла - Структура со свойствами:
//     * Наименование - Строка - наименование файла;
//     * Том - СправочникСсылка.ТомаХраненияФайлов, Неопределено - том, в котором хранится файл;
//     * ПутьКФайлу - Строка - путь к файлу в томе;
//     * ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов, ОпределяемыйТип.ВладелецФайлов, Неопределено -
//                       владелец файла;
//     * Расширение - Строка - расширение файла;
//     * НомерВерсии - Строка - номер версии файла.
//
Функция СвойстваФайлаВТоме(Файл = Неопределено) Экспорт
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("Наименование", "");
	СвойстваФайла.Вставить("Расширение", "");
	СвойстваФайла.Вставить("Том", Неопределено);
	СвойстваФайла.Вставить("ПутьКФайлу", "");
	СвойстваФайла.Вставить("ВладелецФайла", Неопределено);
	
	Если ЗначениеЗаполнено(Файл) Тогда
		
		ИменаРеквизитов = "Наименование, Расширение, Том, ПутьКФайлу, "
			+ ?(ТипЗнч(Файл) = Тип("СправочникСсылка.ВерсииФайлов"),
			"Владелец, НомерВерсии", "ВладелецФайла");
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(СвойстваФайла, РеквизитыФайла);
		
		Если РеквизитыФайла.Свойство("Владелец") Тогда
			СвойстваФайла.ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайла.Владелец, "ВладелецФайла");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СвойстваФайла.Свойство("НомерВерсии") Тогда
		СвойстваФайла.Вставить("НомерВерсии", "");
	КонецЕсли;
	
	Возврат СвойстваФайла;
	
КонецФункции

// Возвращает полное имя для файла в томе с учетом настроек
// хранения файлов в томах и значений разделителя.
//
// Параметры:
//   СвойстваФайла - см. СвойстваФайлаВТоме.
//
Функция ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме = Неопределено) Экспорт
	
	Разделитель = ПолучитьРазделительПути();
	
	КорневойКаталог = ПолныйПутьТома(СвойстваФайла.Том);
	Если Не ПустаяСтрока(СвойстваФайла.ПутьКФайлу) Тогда
		Возврат КорневойКаталог + СвойстваФайла.ПутьКФайлу;
	КонецЕсли;
	
	КорневойКаталог = КорневойКаталог + ?(Прав(КорневойКаталог, 1) = Разделитель, "", Разделитель);
	Если СоздаватьПодкаталогиСИменамиВладельцев() Тогда
		КорневойКаталог = КорневойКаталог + ИмяКаталогаВладельцаФайла(СвойстваФайла.ВладелецФайла) + Разделитель;
	КонецЕсли;
	
	ДатаРазмещения = ?(ЗначениеЗаполнено(ДатаДляРазмещенияВТоме), ДатаДляРазмещенияВТоме, ТекущаяДатаСеанса());
	КорневойКаталог = КорневойКаталог + Формат(ДатаРазмещения, "ДФ=ггггММдд") + Разделитель;
	
	ИмяФайла = СвойстваФайла.Наименование
		+ ?(ЗначениеЗаполнено(СвойстваФайла.НомерВерсии), "." + СвойстваФайла.НомерВерсии, "")
		+ ?(СтрНайти(СвойстваФайла.Расширение, ".") > 0, СвойстваФайла.Расширение, "." + СвойстваФайла.Расширение);
	
	Возврат КорневойКаталог
		+ РаботаСФайламиСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(КорневойКаталог, ИмяФайла);
	
КонецФункции

// Возвращает полный путь к корневому каталогу тома хранения файлов.
//
// Параметры:
//   Том - СправочникСсылка.ТомаХраненияФайлов - том, путь к корневому каталогу которого необходимо получить.
//
// Возвращаемое значение:
//   КорневойКаталог - Строка - полный путь к корневому каталогу тома.
//
Функция ПолныйПутьТома(Том) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КорневойКаталог = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Том,
		?(ОбщегоНазначения.ЭтоWindowsСервер(), "ПолныйПутьWindows", "ПолныйПутьLinux"));
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЗначениеРазделителя = ?(МодульРаботаВМоделиСервиса.ИспользованиеРазделителяСеанса(),
			МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "");
	Иначе
		ЗначениеРазделителя = "";
	КонецЕсли;
	
	Возврат СтрЗаменить(КорневойКаталог, "%z", ЗначениеРазделителя);
	
КонецФункции

// Возвращает суммарный размер всех файлов в томе в байтах.
//
// Параметры:
//   Том - СправочникСсылка.ТомаХраненияФайлов - том, размер которого необходимо посчитать.
//
// Возвращаемое значение:
//   РазмерФайловВТоме - Число - суммарный размер файлов в томе.
//
Функция ОбъемТома(Том) Экспорт
	
	ОбъемТома = 0;
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат ОбъемТома;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ВсеИменаСправочников = Новый Соответствие;
	ТипыПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Том = &Том";
	
	Для Каждого Тип Из ТипыПрисоединенныхФайлов Цикл
		
		Если Тип = Тип("СправочникСсылка.ВерсииФайлов")
			Или Тип = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			
			Продолжить;
		КонецЕсли;
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеСправочника.Реквизиты.Найти("ТекущаяВерсия") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаПоСправочнику = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПрисоединенныеФайлы.Размер), 0)
		|ИЗ
		|	&ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.Том = &Том";
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + СтрЗаменить(ТекстЗапросаПоСправочнику, "&ИмяСправочника",
			Метаданные.НайтиПоТипу(Тип).ПолноеИмя());
		
	КонецЦикла;
	
	Запрос.Параметры.Вставить("Том", Том);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъемТома = ОбъемТома + Выборка.РазмерФайлов;
	КонецЦикла;
			
	Возврат ОбъемТома;
	
КонецФункции

#Область КонтрольВеденияУчета

// см. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок
// 
// Параметры:
//  ГруппыПроверок - см. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.ГруппыПроверок
//  Проверки - см. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.Проверки
// 
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы          = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru = 'Поиск ссылок на несуществующие файлы в томах хранения'");
	Проверка.Причины                      = НСтр("ru = 'Файл был физически удален или перемещен на диске вследствие работы антивирусных программ,
		|непреднамеренных действий администратора и.т.д.'");
	Проверка.Рекомендация                 = НСтр("ru = '• Пометить файл в программе на удаление;
		|• Или восстановить файл на диске в томе из резервной копии.'");
	Проверка.Идентификатор                = "СтандартныеПодсистемы.ПроверкаСсылокНаНесуществующиеФайлыВТоме";
	Проверка.ОбработчикПроверки           = "РаботаСФайламиВТомахСлужебный.ПроверкаСсылокНаНесуществующиеФайлыВТоме";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	Проверка.Отключена                    = Истина;
	
КонецПроцедуры

// Исполняет проверку несуществующих файлов на диске, в случае когда присоединенные файлы хранятся в томах.
//
Процедура ПроверкаСсылокНаНесуществующиеФайлыВТоме(Проверка, ПараметрыПроверки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено()
		Или Не ХранитьФайлыВТомахНаДиске() Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеТома = ДоступныеТома(ПараметрыПроверки);
	Если ДоступныеТома.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаВМоделиСервиса = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	КонецЕсли;
	
	ВидыОбъектовМетаданных = Новый Массив;
	ВидыОбъектовМетаданных.Добавить(Метаданные.Справочники);
	ВидыОбъектовМетаданных.Добавить(Метаданные.Документы);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыСчетов);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	ВидыОбъектовМетаданных.Добавить(Метаданные.Задачи);
	
	Для Каждого ВидОбъектаМетаданных Из ВидыОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из ВидОбъектаМетаданных Цикл
			Если МодульРаботаВМоделиСервиса <> Неопределено 
				И Не МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных.ПолноеИмя()) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ПроверитьОбъектПрисоединенныхФайлов(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			ПоискСсылокНаНесуществующиеФайлыВТомах(ОбъектМетаданных, ПараметрыПроверки, ДоступныеТома);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыХранения

// Возвращает признак того, что файлы могут храниться в томах на диске.
//
// Возвращаемое значение:
//  Булево - Истина, если указано хранить файлы в томах на диске, иначе - Ложь.
//
Функция ХранитьФайлыВТомахНаДиске() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СпособХраненияФайлов = Константы.СпособХраненияФайлов.Получить();
	Возврат СпособХраненияФайлов = "ВТомахНаДиске"
		Или СпособХраненияФайлов = "ВИнформационнойБазеИТомахНаДиске";
	
КонецФункции

// Возвращает информацию о настройках хранения файлов в информационной базе.
// Имеет смысл в случае хранения файлов в томах и информационной базе.
//
// Возвращаемое значение:
//   Структура - настройки хранения файлов в ИБ. Свойства:
//    * РасширенияФайлов   - Строка - расширения файлов, которые хранятся в ИБ.
//                         Разделены пробелом.
//    * МаксимальныйРазмер - Число - максимальный размер файла, сохраняемого
//                         в ИБ, в байтах.
//
Функция ПараметрыХраненияФайловВИнформационнойБазе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПараметрыХраненияФайловВИБ.Получить().Получить();
	
КонецФункции

// Устанавливает настройки хранения файлов в информационной базе.
// Имеет смысл в случае хранения файлов в томах и информационной базе.
//
// Параметры:
//  ПараметрыХранения - Структура - настройки хранения файлов в ИБ. Свойства:
//    * РасширенияФайлов   - Строка - расширения файлов, которые хранятся в ИБ.
//                         Разделены пробелом.
//    * МаксимальныйРазмер - Число - максимальный размер файла, сохраняемого
//                         в ИБ, в байтах.
//
Процедура УстановитьПараметрыХраненияФайловВИнформационнойБазе(ПараметрыХранения) Экспорт
	
	ХранилищеПараметров = Новый ХранилищеЗначения(ПараметрыХранения);
	Константы.ПараметрыХраненияФайловВИБ.Установить(ХранилищеПараметров);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиХраненияФайловВТомах

// Возвращает признак того, что файлы могут храниться и в томах на диске и в информационной базе.
//
// Возвращаемое значение:
//   Булево - Истина, если файлы могут храниться и в томах на диске и в информационной базе, иначе - Ложь.
//
Функция ХранитьФайлыВТомахНаДискеИИнформационнойБазе()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СпособХраненияФайлов.Получить() = "ВИнформационнойБазеИТомахНаДиске";
	
КонецФункции

// Возвращает признак того, что файлы в томах хранятся в подкаталогах с именем владельца.
//
// Возвращаемое значение:
//   Булево - Истина, если файлы в томе хранятся в подкаталогах с именем объекта-владельца, иначе - Ложь.
//
Функция СоздаватьПодкаталогиСИменамиВладельцев()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СоздаватьПодкаталогиСИменамиВладельцев.Получить();
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Помещает двоичные данные файла из тома в служебный реквизит ФайлХранилище.
//
// Параметры:
// 	ЭлементДанных - СправочникОбъект.ВерсииФайлов,  ОпределяемыйТип.ПрисоединенныйФайл - 
// 
Процедура ПоместитьФайлВРеквизитСправочника(ЭлементДанных) Экспорт
	
	Попытка
		ДанныеФайла = ДанныеФайла(ЭлементДанных.Ссылка);
	Исключение
		
		ДанныеФайла = Неопределено;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ДанныеФайла);
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	
КонецПроцедуры

// Размещает файлы в томах, устанавливая ссылки в ВерсииФайла.
//
Процедура ДобавитьФайлыВТома(ПутьКАрхивуWindows, ПутьКАрхивуLinux) Экспорт
	
	ПолноеИмяФайлаZip = "";
	Если ОбщегоНазначения.ЭтоWindowsСервер() Тогда
		ПолноеИмяФайлаZip = ПутьКАрхивуWindows;
	Иначе
		ПолноеИмяФайлаZip = ПутьКАрхивуLinux;
	КонецЕсли;
	
	ИмяКаталога = ФайловаяСистема.СоздатьВременныйКаталог();
	СоздатьКаталог(ИмяКаталога);
	
	ZIP = Новый ЧтениеZipФайла(ПолноеИмяФайлаZip);
	ZIP.ИзвлечьВсе(ИмяКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	СоответствиеПутейФайлов = Новый Соответствие;
	
	Для Каждого ZIPЭлемент Из ZIP.Элементы Цикл
		ПолныйПутьФайла = ИмяКаталога + "\" + ZIPЭлемент.Имя;
		УникальныйИдентификатор = ZIPЭлемент.ИмяБезРасширения;
		
		СоответствиеПутейФайлов.Вставить(УникальныйИдентификатор, ПолныйПутьФайла);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, РаботаСФайламиСлужебный.ТипХраненияФайлов());
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйКаталог(ИмяКаталога);
	
КонецПроцедуры

// Возвращаемое значение:
//   ТаблицаЗначений - колонки:
//     * Ссылка - СправочникСсылка.ВерсииФайлов -.
//
Функция ВерсииФайловВТомахНаДиске()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Добавляет файл в тома при выполнении команды "разместить файлы начального образа".
//
// Параметры:
//   СоответствиеПутейФайлов - Соответствие - соответствие УникальногоИдентификатора файла и пути на диске к файлу.
//   ТипХраненияФайла        - Перечисления.ТипыХраненияФайлов - тип хранения файлов.
//
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ТипХраненияФайла)
	
	ВерсииФайлов = ВерсииФайловВТомахНаДиске();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ВерсииФайлов");
	ЭлементБлокировкиДанных.ИсточникДанных = ВерсииФайлов;
	ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	БлокировкаДанных.Заблокировать();
	
	Для Каждого Версия Из ВерсииФайлов Цикл
		
		Объект = Версия.Ссылка.ПолучитьОбъект();
		Объект.Заблокировать();
		
		УникальныйИдентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор());
		
		ПолныйПутьНовый = "";
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(УникальныйИдентификатор);
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХранилищеФайла = Неопределено;
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			// В базе-приемнике файлы должны храниться в информационной базе - значит там их и разместим (даже если в исходной
			// базе они были в томах).
			
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			Объект.ПутьКФайлу = "";
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Иначе
			
			// В базе-приемнике файлы должны храниться в томах на диске - переместим разархивированный файл на том.
			ФайлИсходный = Новый Файл(ПолныйПутьФайлаНаДиске);
			ПолныйПутьНовый = ФайлИсходный.Путь + Объект.Наименование + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			ДобавитьФайл(Объект, ПолныйПутьНовый);
			
		КонецЕсли;
		
		Объект.ДополнительныеСвойства.Вставить("РазмещениеФайловВТомах", Истина); // Чтобы прошла запись подписанных файлов.
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(Объект.Ссылка, ХранилищеФайла);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПолныйПутьНовый) Тогда
			УдалитьФайлы(ПолныйПутьНовый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаНенужныхФайлов

// Конструктор таблицы, содержащей лишние файлы на диске.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - колонки:
//      * Имя                - Строка - .
//      * Файл               - Строка - .
//      * ИмяБезРасширения   - Строка - .
//      * ПолноеИмя          - Строка - .
//      * Путь               - Строка - .
//      * Том                - Строка - .
//      * Расширение         - Строка - .
//      * СтатусПроверки     - Строка - .
//      * Количество         - Строка - .
//      * Отредактировал     - Строка - .
//      * ДатаРедактирования - Строка - .
//
Функция ЛишниеФайлыНаДиске() Экспорт
	
	ТаблицаФайловНаДиске = Новый ТаблицаЗначений;
	ТаблицаФайловНаДиске.Колонки.Добавить("Имя");
	ТаблицаФайловНаДиске.Колонки.Добавить("Файл");
	ТаблицаФайловНаДиске.Колонки.Добавить("ИмяБезРасширения");
	ТаблицаФайловНаДиске.Колонки.Добавить("ПолноеИмя");
	ТаблицаФайловНаДиске.Колонки.Добавить("Путь");
	ТаблицаФайловНаДиске.Колонки.Добавить("Том");
	ТаблицаФайловНаДиске.Колонки.Добавить("Расширение");
	ТаблицаФайловНаДиске.Колонки.Добавить("СтатусПроверки");
	ТаблицаФайловНаДиске.Колонки.Добавить("Количество");
	ТаблицаФайловНаДиске.Колонки.Добавить("Отредактировал");
	ТаблицаФайловНаДиске.Колонки.Добавить("ДатаРедактирования");
	
	Возврат ТаблицаФайловНаДиске;
	
КонецФункции

// Параметры:
//   ТаблицаФайловНаДиске - См. РаботаСФайламиВТомахСлужебный.ЛишниеФайлыНаДиске
//   Том                  - СправочникСсылка.ТомаХраненияФайлов - ссылка на том.
//
Процедура ПроверитьЦелостностьФайлов(ТаблицаФайловНаДиске, Том) Экспорт
	
	ТипыФайлов = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы();
	
	Запрос = Новый Запрос;
	ПустойТекстЗапроса = Истина;
	Для Каждого СправочникФайлов Из ТипыФайлов Цикл
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(СправочникФайлов);
		ЭтоСправочникВерсий = ОбщегоНазначения.ЕстьРеквизитОбъекта("РодительскаяВерсия", МетаданныеСправочника);
		
		ФрагментЗапроса = 
		"ВЫБРАТЬ
		|	СправочникПрисоединенныеФайлы.Ссылка,
		|	СправочникПрисоединенныеФайлы.%1 " + ?(ПустойТекстЗапроса, "КАК ВладелецФайла","") + ",
		|	СправочникПрисоединенныеФайлы.Расширение,
		|	СправочникПрисоединенныеФайлы.Наименование,
		|	СправочникПрисоединенныеФайлы.Том,
		|	СправочникПрисоединенныеФайлы.%2 " + ?(ПустойТекстЗапроса, "КАК Отредактировал","") + ",
		|	СправочникПрисоединенныеФайлы.ДатаМодификацииУниверсальная " + ?(ПустойТекстЗапроса, "КАК ДатаМодификацииФайла","") + ",
		|	СправочникПрисоединенныеФайлы.ПутьКФайлу,
		|	СправочникПрисоединенныеФайлы.ПометкаУдаления
		|ИЗ
		|	Справочник." + МетаданныеСправочника.Имя + " КАК СправочникПрисоединенныеФайлы
		|ГДЕ
		|	СправочникПрисоединенныеФайлы.Том = &Том
		|	И СправочникПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
		
		ФрагментЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ФрагментЗапроса,
			?(ЭтоСправочникВерсий, "Владелец.ВладелецФайла", "ВладелецФайла"),
			?(ЭтоСправочникВерсий, "Автор", "Изменил"));
		
		Если Не ЭтоСправочникВерсий
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеСправочника) Тогда
			
			СправочникВерсийФайлов = Метаданные.НайтиПоТипу(
				МетаданныеСправочника.Реквизиты.ТекущаяВерсия.Тип.Типы()[0]);
			ФрагментЗапроса = ФрагментЗапроса + "
				|	И СправочникПрисоединенныеФайлы.ТекущаяВерсия = ЗНАЧЕНИЕ(Справочник."
				+ СправочникВерсийФайлов.Имя + ".ПустаяСсылка)";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ?(ПустойТекстЗапроса,"", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + ФрагментЗапроса;
		
		ПустойТекстЗапроса = Ложь;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Том", Том);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СвойстваФайла = СвойстваФайлаВТоме();
	СвойстваФайла.Том = Том;
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ПутьКФайлу   = Выборка.ПутьКФайлу;
		Если Прав(ПутьКФайлу, 1) = "." Тогда
			ПутьКФайлу = Лев(ПутьКФайлу, СтрДлина(ПутьКФайлу) - 1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ПутьКФайлу)
			И ЗначениеЗаполнено(Выборка.Том) Тогда
			
			СвойстваФайла.ПутьКФайлу = ПутьКФайлу;
			
			ПолныйПутьФайла = ПолноеИмяФайлаВТоме(СвойстваФайла);
			СуществующийФайл = ТаблицаФайловНаДиске.НайтиСтроки(Новый Структура("ПолноеИмя", ПолныйПутьФайла));
			Если СуществующийФайл.Количество() = 0 Тогда
				
				НесуществующийФайл = ТаблицаФайловНаДиске.Добавить();
				НесуществующийФайл.Файл = ВерсияСсылка;
				НесуществующийФайл.ПолноеИмя = ПолныйПутьФайла;
				НесуществующийФайл.Расширение = Выборка.Расширение;
				НесуществующийФайл.Имя = Выборка.Наименование;
				НесуществующийФайл.Том = Том;
				НесуществующийФайл.Отредактировал = Выборка.Отредактировал;
				НесуществующийФайл.ДатаРедактирования = Выборка.ДатаМодификацииФайла;
				НесуществующийФайл.Количество = 1;
				НесуществующийФайл.СтатусПроверки = ?(Выборка.ПометкаУдаления,
					НСтр("ru = 'Целостные данные'"),
					НСтр("ru = 'Отсутствуют данные в томе на диске'"));
					
			Иначе
				
				СуществующийФайл[0].Файл = ВерсияСсылка;
				СуществующийФайл[0].СтатусПроверки = НСтр("ru = 'Целостные данные'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

Функция ДоступныеТома(ПараметрыПроверки)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТомаХраненияФайлов.Ссылка КАК СсылкаНаТом,
	|	ТомаХраненияФайлов.Наименование КАК ПредставлениеТома,
	|	ВЫБОР
	|		КОГДА &ЭтоWindowsСервер
	|			ТОГДА ТомаХраненияФайлов.ПолныйПутьWindows
	|		ИНАЧЕ ТомаХраненияФайлов.ПолныйПутьLinux
	|	КОНЕЦ КАК ПолныйПуть
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов");
	Запрос.УстановитьПараметр("ЭтоWindowsСервер", ОбщегоНазначения.ЭтоWindowsСервер());
	Результат = Запрос.Выполнить().Выбрать();
	
	ДоступныеТома = Новый Массив;
	Пока Результат.Следующий() Цикл
		
		Если ТомДоступен(Результат.СсылкаНаТом, Результат.ПредставлениеТома, Результат.ПолныйПуть, ПараметрыПроверки) Тогда
			ДоступныеТома.Добавить(Результат.СсылкаНаТом);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеТома;
	
КонецФункции

Функция ТомДоступен(Том, ПредставлениеТома, Путь, ПараметрыПроверки)
	
	Если ПустаяСтрока(Путь) Тогда
		
		УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У тома хранения файлов ""%1"" не задан путь к сетевому каталогу. Сохранение файлов в него невозможно.'"), 
			ПредставлениеТома);
		ЗафиксироватьПроблемуСТомом(Том, УточнениеПроблемы, ПараметрыПроверки);
		Возврат Ложь;
		
	КонецЕсли;
		
	ИмяКаталогаТестовое = Путь + "ПроверкаДоступа" + ПолучитьРазделительПути();
	
	Попытка
		СоздатьКаталог(ИмяКаталогаТестовое);
		УдалитьФайлы(ИмяКаталогаТестовое);
	Исключение
		
		УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Том хранения файлов ""%1"" недоступен по причине: 
				|%2
				|
				|Указанный сетевой каталог мог быть отключен или к нему отсутствуют права доступа.
				|Невозможна работа со всеми файлами, хранящимися в этом томе.'"),
				Путь, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УточнениеПроблемы = УточнениеПроблемы + Символы.ПС;
		ЗафиксироватьПроблемуСТомом(Том, УточнениеПроблемы, ПараметрыПроверки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗафиксироватьПроблемуСТомом(Том, УточнениеПроблемы, ПараметрыПроверки)
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	
	Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Том, ПараметрыПроверки);
	Проблема.УточнениеПроблемы = УточнениеПроблемы;
	МодульКонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
	
КонецПроцедуры

Процедура ПоискСсылокНаНесуществующиеФайлыВТомах(ОбъектМетаданных, ПараметрыПроверки, ДоступныеТома)
	
	МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Ссылка КАК ПроблемныйОбъект,
	|	&ПолеВладельца КАК Владелец,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Ссылка) КАК Файл,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Том) КАК Том,
	|	ОбъектМетаданных.ПутьКФайлу КАК ПутьКФайлу,
	|	ОбъектМетаданных.Том КАК ТомСсылка
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Ссылка > &Ссылка
	|	И ОбъектМетаданных.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)
	|	И ОбъектМетаданных.Том В(&ДоступныеТома)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Ссылка";
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ПолноеИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеВладельца",
		?(ПолноеИмя = "Справочник.ВерсииФайлов", "ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Владелец) ", "Неопределено "));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Справочники.ТомаХраненияФайлов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДоступныеТома", ДоступныеТома);
	Результат = Запрос.Выполнить().Выгрузить();
	Пока Результат.Количество() > 0 Цикл
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			СвойстваФайлаВТоме = Новый Структура("Том, ПутьКФайлу",
				СтрокаРезультата.ТомСсылка, СтрокаРезультата.ПутьКФайлу);
			
			ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайлаВТоме);
			Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверяемыйФайл = Новый Файл(ПутьКФайлу);
			Если ПроверяемыйФайл.Существует() Тогда
				Продолжить;
			КонецЕсли;
				
			СсылкаНаОбъект = СтрокаРезультата.ПроблемныйОбъект;
			Если СтрокаРезультата.Владелец <> Неопределено Тогда
				УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Версия ""%1"" файла ""%2"" не существует в томе ""%3"".'"),
					СтрокаРезультата.Файл, СтрокаРезультата.Владелец, СтрокаРезультата.Том);
			Иначе
				УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл ""%1"" не существует в томе ""%2"".'"),
					СтрокаРезультата.Файл, СтрокаРезультата.Том);
			КонецЕсли;
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СсылкаНаОбъект, ПараметрыПроверки);
			
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			Если ОбъектМетаданных.Реквизиты.Найти("Ответственный") <> Неопределено Тогда
				Проблема.Вставить("Ответственный", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Ответственный"));
			КонецЕсли;
			
			МодульКонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка", СтрокаРезультата.ПроблемныйОбъект);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьОбъектПрисоединенныхФайлов(ОбъектМетаданных)
	
	Если СтрЗаканчиваетсяНа(ОбъектМетаданных.Имя, "ПрисоединенныеФайлы")
		Или ОбъектМетаданных.ПолноеИмя() = "Справочник.ВерсииФайлов" Тогда
		
		Возврат ОбъектМетаданных.Реквизиты.Найти("ПутьКФайлу") <> Неопределено
			И ОбъектМетаданных.Реквизиты.Найти("Том") <> Неопределено;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.1";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "РаботаСФайламиВТомахСлужебный.ОбновитьПутьТомаLinux";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.65";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "РаботаСФайламиВТомахСлужебный.ЗаполнитьНастройкиХраненияФайлов";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

// Устанавливает значение константы СпособХраненияФайлов в зависимости от значения
// константы ХранитьФайлыВТомахНаДиске и инициализирует константу ПараметрыХраненияФайловВИБ.
//
Процедура ЗаполнитьНастройкиХраненияФайлов() Экспорт
	
	Константы.СпособХраненияФайлов.Установить(
		?(Константы.ХранитьФайлыВТомахНаДиске.Получить(),
		"ВТомахНаДиске", "ВИнформационнойБазе"));
		
	УстановитьПараметрыХраненияФайловВИнформационнойБазе(
		Новый Структура("РасширенияФайлов, МаксимальныйРазмер", "", 0));
	
КонецПроцедуры

Процедура ОбновитьПутьТомаLinux() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТомаХраненияФайлов.Ссылка
		|ИЗ
		|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
		|ГДЕ
		|	ТомаХраненияФайлов.ПолныйПутьLinux ПОДОБНО ""%/\""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ТомаХраненияФайлов");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			БлокировкаДанных.Заблокировать();
			
			Том = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ТомаХраненияФайлов
			Том.ПолныйПутьLinux = СтрЗаменить(Том.ПолныйПутьLinux , "/\", "/");
			Том.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать том хранения файлов: %1 по причине:
				|%2'"), 
				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Возвращает имя подкаталога в томе по типу владельца файла.
// Имя подкаталога формируется как конкатенация 30 первых символов имени
// объекта метаданных владельца файла + хеш CRC32 от остатка.
//
// Параметры:
//   ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов, ОпределяемыйТип.ВладелецФайлов - ссылка на
//                 владельца файла, от метаданных которого необходимо образовать имя подкаталога.
//
// Возвращаемое значение:
//   Строка - имя каталога.
//
Функция ИмяКаталогаВладельцаФайла(ВладелецФайла)
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяОбъектаМетаданных = ВладелецФайла.Метаданные().Имя;
	Если СтрДлина(ИмяОбъектаМетаданных) > 30 Тогда
		ХешОстатка = Новый ХешированиеДанных("CRC32");
		ХешОстатка.Добавить(Сред(ИмяОбъектаМетаданных, 31));
		ХешСуммаОстатка = ХешОстатка.ХешСумма;
	Иначе
		ХешСуммаОстатка = "";
	КонецЕсли;
	
	Возврат Лев(ИмяОбъектаМетаданных, 30) + ХешСуммаОстатка;
	
КонецФункции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Возвращает тип хранения добавляемого файла в зависимости от расширения и размера.
// 
// Параметры:
//   Расширение - Строка - расширение добавляемого файла.
//   Размер - Число - размер добавляемого файла в байтах.
//
// Возвращаемое значение:
//   ТипХранения - ПеречислениеСсылка.ТипыХраненияФайлов - если способ хранения файлов в настройках
//               указан "ВТомахНаДиске", всегда возвращает значение "ВТомахНаДиске". Если способ хранения
//               файлов указан "ВИнформационнойБазеИТомахНаДиске", возвращает "ВИнформационнойБазе", если
//               файл соответствует параметрам хранения в информационной базе и "ВТомахНаДиске", если нет.
//
Функция ТипХраненияФайла(Расширение, Размер)
	
	ТипХранения = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
	Если ХранитьФайлыВТомахНаДискеИИнформационнойБазе() Тогда
		
		ПараметрыХранения = ПараметрыХраненияФайловВИнформационнойБазе();
		Если Размер <= ПараметрыХранения.МаксимальныйРазмер
			И СтрНайти(НРег(ПараметрыХранения.РасширенияФайлов), НРег(Расширение)) > 0 Тогда
			
			ТипХранения = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТипХранения;
	
КонецФункции

// Возвращает первый том по порядку заполнения, в который можно поместить файл указанного размера.
//
// Параметры:
//   РазмерФайла - Число - размер помещаемого файла в байтах.
//
// Возвращаемое значение:
//   СправочникСсылка.ТомаХраненияФайлов - том, в который можно поместить файл.
//
Функция СвободныйТом(РазмерФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТомаХраненияФайлов.Ссылка КАК Ссылка,
	|	ТомаХраненияФайлов.МаксимальныйРазмер КАК МаксимальныйРазмер
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
	|ГДЕ
	|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТомаХраненияФайлов.ПорядокЗаполнения";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нет ни одного тома для размещения файла.'");
	КонецЕсли;
	
	ВыборкаТомов = Результат.Выбрать();
	Пока ВыборкаТомов.Следующий() Цикл
		
		Если ВыборкаТомов.МаксимальныйРазмер = 0 Тогда
			Возврат ВыборкаТомов.Ссылка;
		Иначе
			
			ОбъемТома = ОбъемТома(ВыборкаТомов.Ссылка);
			Если ОбъемТома + РазмерФайла <= ВыборкаТомов.МаксимальныйРазмер * 1024 * 1024 Тогда
				Возврат ВыборкаТомов.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти