///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//                          ИСПОЛЬЗОВАНИЕ ФОРМЫ                               //
//
// Форма предназначена для выбора объектов метаданных конфигурации и передачи
// выбранных их списка в вызывающую среду.
//
// Параметры вызова:
// КоллекцииВыбираемыхОбъектовМетаданных - СписокЗначений - фактически фильтр
//				по типам объектов метаданных, которые могут быть выбраны.
//				Например:
//					ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
//					ФильтрПоСсылочнымМетаданным.Добавить("Справочники");
//					ФильтрПоСсылочнымМетаданным.Добавить("Документы");
//				Позволяет выбирать только объекты метаданных справочники и документы.
// ВыбранныеОбъектыМетаданных - СписокЗначений - уже выбранные объекты метаданных.
//				В дереве метаданных такие объекты будут отмечены флажком выбора.
//				Может быть полезным для установки объектов метаданных выбора по умолчанию
//				или переустановки уже установленного списка.
// РодительскиеПодсистемы - СписокЗначений - подсистемы, только подчиненные подсистемы которых
// 				будут отображаться в форме (спец. для помощника внедрения БСП). 
// ТолькоПодсистемыСКИ - булево - признак того, что в списке выбора будут только те подсистемы, 
//				которые включены в командный интерфейс (спец. для помощника внедрения БСП).
// ВыборЕдинственного - булево - признак того, что выбирается единственный объект метаданных.
//              При этом пометка нескольких будет невозможна, кроме того двойной клик по строке
//              с объектом метаданных осуществит выбор.
// НачальноеЗначениеВыбора - Строка - полное имя метаданных, на котором будет спозиционирован
//              список при открытии формы.
//

#Область ОписаниеПеременных

&НаСервере
Перем ПодчиненныеСправочники;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьВыбранныеОбъектыМетаданных();
	
	Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0 Тогда
		Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Очистить();
		Для Каждого ОбъектМетаданныхПолноеИмя Из Параметры.ФильтрПоОбъектамМетаданных Цикл
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.НайтиПоПолномуИмени(ОбъектМетаданныхПолноеИмя.Значение));
			Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(ИмяБазовогоТипа) = Неопределено Тогда
				Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Добавить(ИмяБазовогоТипа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоПодсистемыСКИ") И Параметры.ТолькоПодсистемыСКИ Тогда
		СписокПодсистем = Метаданные.Подсистемы;
		ЗаполнитьСписокПодсистем(СписокПодсистем);
		ТолькоПодсистемыСКИ = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборЕдинственного", ВыборЕдинственного) И ВыборЕдинственного Тогда
		Элементы.Пометка.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Параметры.Свойство("НачальноеЗначениеВыбора", НачальноеЗначениеВыбора);
	Если Не ЗначениеЗаполнено(НачальноеЗначениеВыбора)
		И ВыборЕдинственного
		И Параметры.ВыбранныеОбъектыМетаданных.Количество() = 1 Тогда
		НачальноеЗначениеВыбора = Параметры.ВыбранныеОбъектыМетаданных[0].Значение;
	КонецЕсли;
	
	СпособГруппировкиОбъектов = Параметры.СпособГруппировкиОбъектов;
	Если Не ЗначениеЗаполнено(СпособГруппировкиОбъектов) Тогда
		СпособГруппировкиОбъектов = "ПоРазделам";
	Иначе
		Элементы.СпособГруппировкиОбъектов.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьДеревоОбъектов();
	
	Если Параметры.РодительскиеПодсистемы.Количество()> 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Верх;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем начальное значение выбора.
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура обработчик события нажатия на поле "Пометка" дерева формы.
&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ПриПометкеЭлементаДерева(ТекущийЭлемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораПриИзменении(Элемент)
	
	АдресаВыбранныхОбъектов.Очистить();
	ОбновитьКоллекциюВыбранныеОбъектыМетаданных();
	
	ЗаполнитьДеревоОбъектов();
	Если ДеревоОбъектовМетаданных.ПолучитьЭлементы().Количество() = 1 Тогда
		ИдентификаторСтроки = ДеревоОбъектовМетаданных.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Элементы.ДеревоОбъектовМетаданных.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ВыборЕдинственного Тогда
		
		ВыбратьВыполнить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВыполнить()
	
	Если ВыборЕдинственного Тогда
		
		ТекДанные = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
		Если ТекДанные <> Неопределено
			И ТекДанные.ЭтоОбъектМетаданных Тогда
			
			ВыбранныеОбъектыМетаданных.Очистить();
			ВыбранныеОбъектыМетаданных.Добавить(ТекДанные.ПолноеИмя, ТекДанные.Представление);
			
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		
		ВыбранныеОбъектыМетаданных.Очистить();
		ОбновитьКоллекциюВыбранныеОбъектыМетаданных();
		
	КонецЕсли;
	
	Если ВыбиратьСсылки Тогда 
		ВыбратьСсылки(ВыбранныеОбъектыМетаданных);
	КонецЕсли;
	
	Если ЭтотОбъект.ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		Оповестить("ВыборОбъектовМетаданных", ВыбранныеОбъектыМетаданных, Параметры.УникальныйИдентификаторИсточник);
	КонецЕсли;
	
	Закрыть(ВыбранныеОбъектыМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВыполнить()
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВыбранныеОбъектыМетаданных()
	
	ОбъектыМетаданных = Параметры.ВыбранныеОбъектыМетаданных.ВыгрузитьЗначения();
	ВыбранныеОбъектыМетаданных = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ВыбранныеОбъектыМетаданных);
	
	Если Параметры.ЗапоминатьРазделыВыбранныхОбъектов 
		И ВыбранныеОбъектыМетаданных.Количество() > 0 И СтрНачинаетсяС(ВыбранныеОбъектыМетаданных[0].Представление, "./") Тогда
		Для Каждого Элемент Из ВыбранныеОбъектыМетаданных Цикл
			АдресаВыбранныхОбъектов.Добавить(Элемент.Представление, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВыбиратьСсылки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВыбиратьСсылки", Ложь);
	Если Не ВыбиратьСсылки Тогда 
		Возврат;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл 
		
		Если ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			Или ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда 
			
			Ссылки.Добавить(ОбъектМетаданных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ссылки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИменаОбъектовМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ссылки, "ПолноеИмя");
	
	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл 
		
		ИмяОбъектаМетаданных = ИменаОбъектовМетаданных[ЭлементСписка.Значение];
		Если ИмяОбъектаМетаданных <> Неопределено Тогда 
			ЭлементСписка.Значение = ИмяОбъектаМетаданных;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем) 
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет дерево значений объектов конфигурации.
// Если список значений "Параметры.КоллекцииВыбираемыхОбъектовМетаданных" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// "Параметры.ВыбранныеОбъектыМетаданных", тогда они будут помечены, как выбранные.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	ДеревоОбъектовМетаданных.ПолучитьЭлементы().Очистить();
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЭтоКоллекцияОбщие");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ПолноеИмя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Родитель");
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Подсистемы",                   НСтр("ru = 'Подсистемы'"),                     35, 36, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМодули",                  НСтр("ru = 'Общие модули'"),                   37, 38, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыСеанса",              НСтр("ru = 'Параметры сеанса'"),               39, 40, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Роли",                         НСтр("ru = 'Роли'"),                           41, 42, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыОбмена",                  НСтр("ru = 'Планы обмена'"),                   43, 44, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("КритерииОтбора",               НСтр("ru = 'Критерии отбора'"),                45, 46, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПодпискиНаСобытия",            НСтр("ru = 'Подписки на события'"),            47, 48, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегламентныеЗадания",          НСтр("ru = 'Регламентные задания'"),           49, 50, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ФункциональныеОпции",          НСтр("ru = 'Функциональные опции'"),           51, 52, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыФункциональныхОпций", НСтр("ru = 'Параметры функциональных опций'"), 53, 54, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ХранилищаНастроек",            НСтр("ru = 'Хранилища настроек'"),             55, 56, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеФормы",                   НСтр("ru = 'Общие формы'"),                    57, 58, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКоманды",                 НСтр("ru = 'Общие команды'"),                  59, 60, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ГруппыКоманд",                 НСтр("ru = 'Группы команд'"),                  61, 62, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Интерфейсы",                   НСтр("ru = 'Интерфейсы'"),                     63, 64, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМакеты",                  НСтр("ru = 'Общие макеты'"),                   65, 66, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКартинки",                НСтр("ru = 'Общие картинки'"),                 67, 68, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПакетыXDTO",                   НСтр("ru = 'XDTO-пакеты'"),                    69, 70, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WebСервисы",                   НСтр("ru = 'Web-сервисы'"),                    71, 72, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WSСсылки",                     НСтр("ru = 'WS-ссылки'"),                      73, 74, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Стили",                        НСтр("ru = 'Стили'"),                          75, 76, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Языки",                        НСтр("ru = 'Языки'"),                          77, 78, Истина, КоллекцииОбъектовМетаданных);
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Константы",                    НСтр("ru = 'Константы'"),                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Справочники",                  НСтр("ru = 'Справочники'"),                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Документы",                    НСтр("ru = 'Документы'"),                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ЖурналыДокументов",            НСтр("ru = 'Журналы документов'"),             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Перечисления",                 НСтр("ru = 'Перечисления'"),                   БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Отчеты",                       НСтр("ru = 'Отчеты'"),                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Обработки",                    НСтр("ru = 'Обработки'"),                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовХарактеристик",      НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыСчетов",                  НСтр("ru = 'Планы счетов'"),                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовРасчета",            НСтр("ru = 'Планы видов расчета'"),            БиблиотекаКартинок.ПланВидовРасчета,       БиблиотекаКартинок.ПланВидовРасчетаОбъект,        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыСведений",             НСтр("ru = 'Регистры сведений'"),              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыНакопления",           НСтр("ru = 'Регистры накопления'"),            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыБухгалтерии",          НСтр("ru = 'Регистры бухгалтерии'"),           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыРасчета",              НСтр("ru = 'Регистры расчета'"),               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("БизнесПроцессы",               НСтр("ru = 'Бизнес-процессы'"),                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Задачи",                       НСтр("ru = 'Задачи'"),                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);
	
	// Создание предопределенных элементов.
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = Метаданные.Имя;
	ПараметрыЭлемента.Синоним = Метаданные.Синоним;
	ПараметрыЭлемента.Картинка = 79;
	ПараметрыЭлемента.Родитель = ДеревоОбъектовМетаданных;
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = "Общие";
	ПараметрыЭлемента.Синоним = НСтр("ru = 'Общие'");
	ПараметрыЭлемента.Картинка = 0;
	ПараметрыЭлемента.Родитель = ЭлементКонфигурация;
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
		Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Количество() = 0
			Или Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новую структуру параметров элемента дерева объектов метаданных.
//
// Возвращаемое значение:
//   Структура:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//
&НаСервере
Функция ПараметрыЭлементаДереваОбъектовМетаданных()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя", "");
	СтруктураПараметров.Вставить("ПолноеИмя", "");
	СтруктураПараметров.Вставить("Синоним", "");
	СтруктураПараметров.Вставить("Пометка", 0);
	СтруктураПараметров.Вставить("Картинка", 0);
	СтруктураПараметров.Вставить("КартинкаОбъекта", Неопределено);
	СтруктураПараметров.Вставить("Родитель", Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
//
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//   ПараметрыЭлемента - Структура:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//   Подсистемы - КоллекцияОбъектовМетаданных - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов).
//   Проверять       - Булево - признак проверки на принадлежность родительским подсистемам.
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено  И Параметры.Свойство("ТолькоПодсистемыСКИ") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			
			// Если нет ни одного объекта метаданных из нужной ветки. 
			// Например, нет ни одного регистра бухгалтерии,
			// то корень "Регистры бухгалтерии" добавлять не нужно.
			Возврат Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
		
		Для Каждого ЭлементКоллекцииМетаданных Из Метаданные[ПараметрыЭлемента.Имя] Цикл
			
			Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0
				И Параметры.ФильтрПоОбъектамМетаданных.НайтиПоЗначению(ЭлементКоллекцииМетаданных.ПолноеИмя()) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ПараметрыЭлемента.Картинка = КартинкаВКонфигураторе(ЭлементКоллекцииМетаданных);
			НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
		КонецЦикла;
		
		Возврат НоваяСтрока;
		
	КонецЕсли;
		
	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
	
	Для Каждого ЭлементКоллекцииМетаданных Из Подсистемы Цикл
		
		Если Не Проверять
			Или Параметры.РодительскиеПодсистемы.Количество() = 0
			Или Параметры.РодительскиеПодсистемы.НайтиПоЗначению(ЭлементКоллекцииМетаданных.Имя) <> Неопределено Тогда
			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ПараметрыЭлемента.Картинка = КартинкаВКонфигураторе(ЭлементКоллекцииМетаданных);
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	
	Коллекция = ПараметрыСтроки.Родитель.ПолучитьЭлементы(); // КоллекцияСтрокДереваЗначений
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Пометка             = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПараметрыСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;
	
	Если НоваяСтрока.ЭтоОбъектМетаданных 
		И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации.
//
// Параметры:
//   Имя  - Строка - имя объекта метаданных или вида объекта метаданных.
//   Синоним - Строка - синоним объекта метаданных.
//   Картинка - Число - картинка поставленная в соответствие объекту метаданных
//                      или виду объекта метаданных.
//   КартинкаОбъекта - Число
//   ЭтоКоллекцияОбщие - Булево - признак того, что текущий элемент содержит подэлементы.
//   Таб - ТаблицаЗначений
//
&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПомеченные Тогда
		Если ЕстьНепомеченные Тогда
			Возврат 2;
		Иначе
			Если ТолькоПодсистемыСКИ Тогда
				Возврат 2;
			Иначе
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)

	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);

КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
// объектов метаданных, которые не имеют объектов метаданных (истина) и 
// которые имеют объекты метаданных с заданной пометкой.
//
// Параметры:
//   Элемент      - ДанныеФормыКоллекцияЭлементовДерева.
//
&НаСервере
Процедура НачальнаяПометкаКоллекций(Родитель)
	
	ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныйЭлемент);
		КонецЕсли;
		НачальнаяПометкаКоллекций(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыбратьСсылки(ВыбранныеОбъектыМетаданных)
	
	Если ВыбранныеОбъектыМетаданных.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъектовМетаданных = ВыбранныеОбъектыМетаданных.ВыгрузитьЗначения();
	Ссылки = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ОписаниеОбъектовМетаданных, Ложь);
	
	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл 
		
		Ссылка = Ссылки[ЭлементСписка.Значение];
		Если Ссылка <> Неопределено Тогда 
			ЭлементСписка.Значение = Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнитьПоРазделам()
	
	ДеревоОбъектовМетаданных.ПолучитьЭлементы().Очистить();
	
	Ветка = ДеревоОбъектовМетаданных.ПолучитьЭлементы().Добавить();
	Ветка.Имя = Метаданные.Имя;
	Ветка.Представление = Метаданные.Синоним;
	Ветка.Адрес = ".";
	
	ВывестиКоллекцию(Ветка, Метаданные.Подсистемы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКоллекцию(Знач Ветка, Знач КоллекцияОбъектовМетаданных)
	
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		Если ТипЗнч(Ветка) = Тип("ДанныеФормыЭлементДерева") И ОбъектМетаданных.ПолноеИмя() = Ветка.ПолноеИмя Тогда
			Продолжить;
		КонецЕсли;
		Если Не ОбъектМетаданныхДоступен(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяВетка = Ветка.ПолучитьЭлементы().Добавить();
		НоваяВетка.Имя = ОбъектМетаданных.Имя;
		НоваяВетка.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		НоваяВетка.Представление = ОбъектМетаданных.Представление();
		НоваяВетка.Картинка = КартинкаВИнтерфейсе(ОбъектМетаданных);
		НоваяВетка.Адрес = ?(ТипЗнч(Ветка) = Тип("ДанныеФормыЭлементДерева"), Ветка.Адрес + "/", "") + НоваяВетка.Представление;
		Если ЗначениеЗаполнено(АдресаВыбранныхОбъектов) Тогда
			НоваяВетка.Пометка = ?(АдресаВыбранныхОбъектов.НайтиПоЗначению(НоваяВетка.Адрес) = Неопределено, 0, 1);
		Иначе
			НоваяВетка.Пометка = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(НоваяВетка.ПолноеИмя) = Неопределено, 0, 1);
		КонецЕсли;
		
		Если ЭтоПодсистема(ОбъектМетаданных) Тогда
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Состав);
			ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.Подсистемы);
			НоваяВетка.ЭтоПодраздел = КоллекцияОбъектовМетаданных <> Метаданные.Подсистемы;
		Иначе
			НоваяВетка.ЭтоОбъектМетаданных = Истина;
			
			Если ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
				ВывестиКоллекцию(НоваяВетка, ОбъектМетаданных.РегистрируемыеДокументы);
			ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда 
				ВывестиКоллекцию(НоваяВетка, ПодчиненныеСправочники(ОбъектМетаданных));
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПодсистема(ОбъектМетаданных) И НоваяВетка.ПолучитьЭлементы().Количество() = 0 Тогда
			Индекс = Ветка.ПолучитьЭлементы().Индекс(НоваяВетка);
			Ветка.ПолучитьЭлементы().Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартинкаВИнтерфейсе(ОбъектМетаданных)
	
	СвойстваОбъекта = Новый Структура("Картинка");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СвойстваОбъекта.Картинка) Тогда
		Возврат СвойстваОбъекта.Картинка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция КартинкаВКонфигураторе(ОбъектМетаданных)
	
	ВидОбъекта = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[0];
	Картинки = Новый Структура(ВидОбъекта);
	ЗаполнитьЗначенияСвойств(Картинки, БиблиотекаКартинок);
	
	Возврат Картинки[ВидОбъекта];
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПодсистема(ОбъектМетаданных)
	Возврат СтрНачинаетсяС(ОбъектМетаданных.ПолноеИмя(), "Подсистема");
КонецФункции

&НаСервере
Функция ОбъектМетаданныхДоступен(ОбъектМетаданных)
	
	Если Не ЭтоПодсистема(ОбъектМетаданных) Тогда
		ЭтоВыбираемыйОбъект = Не ЗначениеЗаполнено(Параметры.КоллекцииВыбираемыхОбъектовМетаданных);
		Для Каждого ВидОбъекта Из Параметры.КоллекцииВыбираемыхОбъектовМетаданных.ВыгрузитьЗначения() Цикл
			Если Метаданные[ВидОбъекта].Содержит(ОбъектМетаданных) Тогда
				ЭтоВыбираемыйОбъект = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭтоВыбираемыйОбъект Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных)
		И Не ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных)
		И Не ЭтоПодсистема(ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоступенПоПравам = ПравоДоступа("Просмотр", ОбъектМетаданных);
	ДоступенПоФункциональнымОпциям = ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных);
	
	СвойстваМетаданного = Новый Структура("ПолнотекстовыйПоиск, ВключатьВКомандныйИнтерфейс");
	ЗаполнитьЗначенияСвойств(СвойстваМетаданного, ОбъектМетаданных);
	
	Если СвойстваМетаданного.ПолнотекстовыйПоиск = Неопределено Тогда 
		ИспользованиеПолнотекстовогоПоиска = Истина; // Если свойства нет - игнорируем.
	Иначе 
		ИспользованиеПолнотекстовогоПоиска = (СвойстваМетаданного.ПолнотекстовыйПоиск = 
			Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать);
	КонецЕсли;
	
	Если СвойстваМетаданного.ВключатьВКомандныйИнтерфейс = Неопределено Тогда 
		ВключатьВКомандныйИнтерфейс = Истина; // Если свойства нет - игнорируем.
	Иначе 
		ВключатьВКомандныйИнтерфейс = СвойстваМетаданного.ВключатьВКомандныйИнтерфейс;
	КонецЕсли;
	
	Возврат ДоступенПоПравам И ДоступенПоФункциональнымОпциям 
		И ИспользованиеПолнотекстовогоПоиска И ВключатьВКомандныйИнтерфейс;
	
КонецФункции

&НаСервере
Функция ПодчиненныеСправочники(ОбъектМетаданных)
	
	Если ПодчиненныеСправочники = Неопределено Тогда
		ПодчиненныеСправочники = Новый Соответствие;
		
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Если ПодчиненныеСправочники[Справочник] = Неопределено Тогда
				ПодчиненныеСправочники[Справочник] = Новый Массив;
			КонецЕсли;
			Для Каждого ВладелецСправочника Из Справочник.Владельцы Цикл
				Если ПодчиненныеСправочники[ВладелецСправочника] = Неопределено Тогда
					ПодчиненныеСправочники[ВладелецСправочника] = Новый Массив;
				КонецЕсли;
				СписокСправочников = ПодчиненныеСправочники[ВладелецСправочника]; // Массив
				СписокСправочников.Добавить(Справочник);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПодчиненныеСправочники[ОбъектМетаданных];
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОбъектов()
	
	Если СпособГруппировкиОбъектов = "ПоРазделам" Тогда
		ДеревоОбъектовМетаданныхЗаполнитьПоРазделам();
	Иначе
		ДеревоОбъектовМетаданныхЗаполнить();
	КонецЕсли;
	
	НачальнаяПометкаКоллекций(ДеревоОбъектовМетаданных);
	
КонецПроцедуры

#Область ПометкаЭлементов

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПриПометкеЭлементаДерева(ЭлементДерева)
	
	ЭлементДерева.Пометка = СледующееЗначениеПометкиЭлемента(ЭлементДерева);
	
	Если ТребуетсяПометитьВложенныеЭлементы(ЭлементДерева) Тогда 
		ПометитьВложенныеЭлементыРекурсивно(ЭлементДерева);
	КонецЕсли;
	
	Если ЭлементДерева.Пометка = ПометкаФлажокНеУстановлен() Тогда 
		ЭлементДерева.Пометка = ЗначениеПометкиОтносительноВложенныхЭлементов(ЭлементДерева);
	КонецЕсли;
	
	ПометитьЭлементыРодителейРекурсивно(ЭлементДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПометкаФлажокНеУстановлен()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПометкаФлажокУстановлен()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПометкаКвадрат()
	
	Возврат 2;
	
КонецФункции

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Функция СледующееЗначениеПометкиЭлемента(ЭлементДерева)
	
	// 0 - Флажок не установлен.
	// 1 - Флажок установлен.
	// 2 - Установлен квадрат.
	//
	// Переопределение графа конечного автомата (или машины состояний, как ее еще можно назвать).
	//
	// Платформа делает постоянный цикл при изменении пометки,
	// т.е. имеет компоненту сильной связности орграфа:
	// 0-1-2-0-1-2-0-1...
	//
	//    0
	//   / \
	//  2 - 1
	//
	// т.е. совершает цикл: не помеченный - помеченный - квадрат - не помеченный.
	//
	// Нам требуется поведение недетерминированного конечного автомата с компонентой сильной связности:
	// 0-1-0-1-0...
	//
	// т.е. помеченный должен переходить в не помеченный, а тот - опять в помеченный.
	//
	// При этом:
	//
	// Для разделов циклы:
	// 1) 1-0-1-0-1...
	// 2) 2-0-1-0-1-0-...
	//
	//      /\
	// 2 - 0 -1
	//
	// т.е. с квадрата должен быть переход к неустановленному флажку.
	//
	// Для метаданных циклы:
	// 1) 1-0-1-0-1-0...
	// 2) 2-1-0-1-0-1-0...
	//
	//      /\
	// 2 - 1 -0
	//
	// т.е. с квадрата должен быть переход к установленному флажку.
	
	// На момент проверки платформа уже изменила значение пометки.
	
	Если ЭлементДерева.ЭтоОбъектМетаданных Тогда
		// Предыдущее значение пометки = 2 : Установлен квадрат.
		Если ЭлементДерева.Пометка = 0 Тогда
			Возврат ПометкаФлажокУстановлен();
		КонецЕсли;
	КонецЕсли;
	
	// Предыдущее значение пометки = 1 : Флажок установлен.
	Если ЭлементДерева.Пометка = 2 Тогда 
		Возврат ПометкаФлажокНеУстановлен();
	КонецЕсли;
	
	// Во всех остальных случаях - значение установленное платформой.
	Возврат ЭлементДерева.Пометка;
	
КонецФункции

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьЭлементыРодителейРекурсивно(ЭлементДерева)
	
	Родитель = ЭлементДерева.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = ПометкаФлажокУстановлен();
	ИначеЕсли ЭлементДерева.Пометка = ПометкаКвадрат() Тогда
		Родитель.Пометка = ПометкаКвадрат();
	Иначе
		Родитель.Пометка = ЗначениеПометкиОтносительноВложенныхЭлементов(Родитель);
	КонецЕсли;
	
	ПометитьЭлементыРодителейРекурсивно(Родитель);
	
КонецПроцедуры

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПометкиОтносительноВложенныхЭлементов(ЭлементДерева)
	
	СостояниеВложенныхЭлементов = СостояниеВложенныхЭлементов(ЭлементДерева);
	
	ЕстьПомеченные   = СостояниеВложенныхЭлементов.ЕстьПомеченные;
	ЕстьНепомеченные = СостояниеВложенныхЭлементов.ЕстьНепомеченные;
	
	Если ЭлементДерева.ЭтоОбъектМетаданных Тогда 
		
		// Для объекта метаданных важно какое у него состояние сейчас,
		// ведь этот объект метаданных надо возвращать.
		// Нельзя сбрасывать установленный флажок.
		
		Если ЭлементДерева.Пометка = ПометкаФлажокУстановлен() Тогда 
			// Оставляем флажок взведенным независимо от вложенных.
			Возврат ПометкаФлажокУстановлен();
		КонецЕсли;
		
		Если ЭлементДерева.Пометка = ПометкаФлажокНеУстановлен()
			Или ЭлементДерева.Пометка = ПометкаКвадрат() Тогда 
			
			Если ЕстьПомеченные Тогда
				Возврат ПометкаКвадрат();
			Иначе 
				Возврат ПометкаФлажокНеУстановлен();
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		
		// Для разделов не важно какое состояние сейчас, 
		// они всегда зависят только от вложенных.
		
		Если ЕстьПомеченные Тогда
			
			Если ЕстьНепомеченные Тогда
				Возврат ПометкаКвадрат();
			Иначе
				Возврат ПометкаФлажокУстановлен();
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ПометкаФлажокНеУстановлен();
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Функция СостояниеВложенныхЭлементов(ЭлементДерева)
	
	ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	
	ЕстьПомеченные   = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		
		Если ВложенныйЭлемент.Пометка = ПометкаФлажокНеУстановлен() Тогда 
			ЕстьНепомеченные = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ВложенныйЭлемент.Пометка = ПометкаФлажокУстановлен() Тогда 
			ЕстьПомеченные = Истина;
			
			Если ВложенныйЭлемент.ЭтоОбъектМетаданных Тогда 
				
				// Для объекта метаданных допустимо иметь непомеченные в своем составе вложенных,
				// при этом самостоятельно быть помеченным. Чтобы обыграть эту ситуацию надо поднять
				// вложенные элементы на один уровень с самим объектом, к которому они относятся.
				
				Состояние = СостояниеВложенныхЭлементов(ВложенныйЭлемент);
				ЕстьПомеченные   = ЕстьПомеченные   Или Состояние.ЕстьПомеченные;
				ЕстьНепомеченные = ЕстьНепомеченные Или Состояние.ЕстьНепомеченные;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ВложенныйЭлемент.Пометка = ПометкаКвадрат() Тогда 
			ЕстьПомеченные   = Истина;
			ЕстьНепомеченные = Истина;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПомеченные",   ЕстьПомеченные);
	Результат.Вставить("ЕстьНепомеченные", ЕстьНепомеченные);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяПометитьВложенныеЭлементы(ЭлементДерева)
	
	Если ЭлементДерева.ЭтоОбъектМетаданных Тогда 
		
		// Если для объекта метаданных есть не полностью выбранные вложенные элементы,
		// значит эти элементы были выбраны пользователем и не следует портить его выбор.
		
		СостояниеВложенныхЭлементов = СостояниеВложенныхЭлементов(ЭлементДерева);
		
		ЕстьПомеченные   = СостояниеВложенныхЭлементов.ЕстьПомеченные;
		ЕстьНепомеченные = СостояниеВложенныхЭлементов.ЕстьНепомеченные;
		
		Если ЕстьПомеченные И ЕстьНепомеченные Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  ЭлементДерева - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьВложенныеЭлементыРекурсивно(ЭлементДерева)
	
	ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	
	Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		
		ВложенныйЭлемент.Пометка = ЭлементДерева.Пометка;
		ПометитьВложенныеЭлементыРекурсивно(ВложенныйЭлемент);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлементДеревоРазделовПоиска - ДанныеФормыЭлементДерева:
//      * Пометка             - Число  - обязательный реквизит дерева.
//      * ЭтоОбъектМетаданных - Булево - обязательный реквизит дерева.
//  ЗначениеПометки - Число - устанавливаемое значение.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьВсеЭлементыДереваРекурсивно(ЭлементДеревоРазделовПоиска, ЗначениеПометки)
	
	КоллекцияЭлементовДерева = ЭлементДеревоРазделовПоиска.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		ЭлементДерева.Пометка = ЗначениеПометки;
		ПометитьВсеЭлементыДереваРекурсивно(ЭлементДерева, ЗначениеПометки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМетаданных");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоОбъектовМетаданных.ЭтоПодраздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРазделаПанелиФункций);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеЭлементы(Ветка)
	
	Результат = Новый Соответствие;
	
	Для Каждого Элемент Из Ветка.ПолучитьЭлементы() Цикл
		Если Элемент.Пометка = 1 И Не ПустаяСтрока(Элемент.ПолноеИмя) И Элемент.ЭтоОбъектМетаданных Тогда
			Результат.Вставить(Элемент.ПолноеИмя, ?(Параметры.ЗапоминатьРазделыВыбранныхОбъектов 
				И СпособГруппировкиОбъектов = "ПоРазделам", Элемент.Адрес, Элемент.Представление));
		КонецЕсли;
		Для Каждого ВыбранныйЭлемент Из ВыбранныеЭлементы(Элемент) Цикл
			Результат.Вставить(ВыбранныйЭлемент.Ключ, ВыбранныйЭлемент.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКоллекциюВыбранныеОбъектыМетаданных()
	
	ВыбранныеОбъектыМетаданных.Очистить();
	Для Каждого ВыбранныйЭлемент Из ВыбранныеЭлементы(ДеревоОбъектовМетаданных) Цикл
		ВыбранныеОбъектыМетаданных.Добавить(ВыбранныйЭлемент.Ключ, ВыбранныйЭлемент.Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
