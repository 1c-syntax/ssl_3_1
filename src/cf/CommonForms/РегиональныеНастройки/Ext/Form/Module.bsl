///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущийЯзык;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Источник = Параметры.Источник;
	Если Источник = "ПанельАдминистрированияБСП" Тогда
		Элементы.ОК.Заголовок = НСтр("ru = 'Изменить'");
		Элементы.ОК.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.ГруппаЧасовойПоясПрограммы.Видимость = Ложь;
		Заголовок = НСтр("ru = 'Языки ведения учета'");
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	 
	ЗаполнитьЧасовыеПояса();
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	
		ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
		
		ЧасовойПоясПрограммы = ПолучитьЧасовойПоясИнформационнойБазы();
		Если ПустаяСтрока(ЧасовойПоясПрограммы) Тогда
			ЧасовойПоясПрограммы = ЧасовойПояс();
		КонецЕсли;
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Элементы.ГруппаОсновнойЯзык.Видимость = Ложь;
			Элементы.ГруппаДополнительныеЯзыки.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		ЧасовойПоясПрограммы = ЧасовойПоясСеанса();
		
	КонецЕсли;
	
	УстановитьОсновнойЯзык();
	
	Настройки = Новый Структура;
	Настройки.Вставить("МультиязычныеДанные",      Истина);
	
	КоличествоДополнительныхЯзыков = МультиязычностьСервер.КоличествоДополнительныхЯзыков();
	
	Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
		Настройки.Вставить("КодДополнительногоЯзыка" + Формат(ПорядковыйНомерЯзыка, "ЧГ=0"), "");
	КонецЦикла;
	
	МультиязычностьПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	КоличествоЯзыков = Метаданные.Языки.Количество();
	Если Не Настройки.МультиязычныеДанные Или КоличествоЯзыков = 1 Тогда
		Элементы.ГруппаДополнительныеЯзыки.Видимость = Ложь;
		Элементы.ГруппаОсновнойЯзык.Видимость        = Ложь;
	Иначе
		ОтобразитьНастройкиДополнительныхЯзыков(Настройки, КоличествоДополнительныхЯзыков);
	КонецЕсли;
	
	ДанныеДляИзмененияМультиязычныхРеквизитов = МультиязычностьСервер.ДанныеДляИзмененияМультиязычныхРеквизитов();
	Если ДанныеДляИзмененияМультиязычныхРеквизитов <> Неопределено Тогда
		Если Не ДанныеДляИзмененияМультиязычныхРеквизитов.ОсновнойЯзыкИзменен И ОбщегоНазначения.ЭтоОсновнойЯзык() Тогда
			РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		КонецЕсли;
		ПродолжитьИзменениеМультиязычныхРеквизитов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПродолжитьИзменениеМультиязычныхРеквизитов Тогда
		ПерезаполнитьДанные();
		Возврат;
	КонецЕсли;
	
	Если ИнформационнаяБазаФайловая
		И СтрНайти(ПараметрЗапуска, "ВыполнитьОбновлениеИЗавершитьРаботу") > 0 Тогда
			ПодключитьОбработчикОжидания("ЗаписатьЗначенияКонстантИЗакрыть", 0.1, Истина);
	КонецЕсли;
	 
	СмещениеЧасовогоПояса = ОбщегоНазначенияКлиент.ДатаСеанса() - ТекущиеВремяНаКлиенте();
	УстановитьВремя();
	
	Если СтрСравнить(Источник, "НачальноеЗаполнение") = 0 Тогда
		ВремяЗакрытияФормы = ТекущиеВремяНаКлиенте() + 180;
		ПодключитьОбработчикОжидания("АвтоматическоеЗакрытиеФормыПриНеактивности", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойЯзык()
	
	ОсновнойЯзык = Константы.ОсновнойЯзык.Получить();
	Для каждого Язык Из Метаданные.Языки Цикл
		Элементы.ОсновнойЯзык.СписокВыбора.Добавить(Язык.КодЯзыка, Язык.Представление());
	КонецЦикла;
	
	Если ПустаяСтрока(ОсновнойЯзык) Тогда
		ОсновнойЯзык = ТекущийЯзык().КодЯзыка;
	КонецЕсли;
	
	Если ПустаяСтрока(ОсновнойЯзык) Или Элементы.ОсновнойЯзык.СписокВыбора.НайтиПоЗначению(ОсновнойЯзык) = Неопределено Тогда
		ОсновнойЯзык = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНастройкиДополнительныхЯзыков(Настройки, КоличествоЯзыков)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ОписаниеТипаРеквизитаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаРеквизитаБулево = Новый ОписаниеТипов("Булево");
	
	Для ПорядковыйНомерЯзыка = 1 По КоличествоЯзыков Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка), ОписаниеТипаРеквизитаСтрока));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка), ОписаниеТипаРеквизитаБулево));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Для ПорядковыйНомерЯзыка = 1 По КоличествоЯзыков Цикл
		
		ИмяРеквизита = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
		ИмяЭлементаВключенияЯзыка = ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка);
		
		Группа = Элементы.Добавить(ИмяЭлементаГруппы(ПорядковыйНомерЯзыка), Тип("ГруппаФормы"), Элементы.РегиональныеНастройки);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок = ИмяЭлементаГруппы(ПорядковыйНомерЯзыка);
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.РазрешитьИзменениеСостава = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		ПолеИспользоватьДополнительныйЯзык = Элементы.Добавить(ИмяЭлементаВключенияЯзыка,
			Тип("ПолеФормы"), Группа);
		ПолеИспользоватьДополнительныйЯзык.Заголовок = ИмяЭлементаВключенияЯзыка;
		ПолеИспользоватьДополнительныйЯзык.Вид       = ВидПоляФормы.ПолеФлажка;
		ПолеИспользоватьДополнительныйЯзык.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеИспользоватьДополнительныйЯзык.ПутьКДанным = ИмяЭлементаВключенияЯзыка;
		ПолеИспользоватьДополнительныйЯзык.УстановитьДействие("ПриИзменении", "Подключаемый_ИспользоватьДополнительныйЯзык_ПриИзменении");
		
		ПолеДополнительныйЯзык = Элементы.Добавить(ИмяРеквизита,
			Тип("ПолеФормы"), Группа);
		ПолеДополнительныйЯзык.Заголовок = ИмяРеквизита;
		ПолеДополнительныйЯзык.Вид = ВидПоляФормы.ПолеВвода;
		ПолеДополнительныйЯзык.РежимВыбораИзСписка = Истина;
		ПолеДополнительныйЯзык.ПутьКДанным = ИмяРеквизита;
		ПолеДополнительныйЯзык.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДополнительныйЯзык.АвтоОтметкаНезаполненного = Истина;
		ПолеДополнительныйЯзык.ПодсказкаВвода= НСтр("ru = 'Дополнительный язык для ведения учета'");
		ПолеДополнительныйЯзык.УстановитьДействие("ПриИзменении", "Подключаемый_ДополнительныйЯзык_ПриИзменении");
		ПолеДополнительныйЯзык.УстановитьДействие("НачалоВыбора", "Подключаемый_ДополнительныйЯзык_НачалоВыбора");
		
	КонецЦикла;
	
	ДоступныеЯзыки = Новый Соответствие;
	Для каждого ЯзыкКонфигурации Из Метаданные.Языки Цикл
		Если СтрСравнить(ОсновнойЯзык, ЯзыкКонфигурации.КодЯзыка) = 0  Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеЯзыки.Вставить(ЯзыкКонфигурации.КодЯзыка, Истина);
	КонецЦикла;
	
	Для каждого Язык Из Метаданные.Языки Цикл

		Для ПорядковыйНомерЯзыка = 1 По КоличествоЯзыков Цикл
				ИмяРеквизита = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
				Элементы[ИмяРеквизита].СписокВыбора.Добавить(Язык.КодЯзыка, Язык.Представление());
		КонецЦикла;
		
	КонецЦикла;
	
	Для ПорядковыйНомерЯзыка = 1 По КоличествоЯзыков Цикл
		
		ИмяЭлементаВключенияЯзыка = ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка);
		ИмяРеквизита = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);

		ЭтотОбъект[ИмяЭлементаВключенияЯзыка] = МультиязычностьСервер.ИспользуетсяДополнительныйЯзык(ПорядковыйНомерЯзыка);
		ЭтотОбъект[ИмяРеквизита] = МультиязычностьСервер.КодДополнительногоЯзыкаИнформационнойБазы(ПорядковыйНомерЯзыка);
		
		Элементы[ИмяРеквизита].Доступность = ЭтотОбъект[ИмяЭлементаВключенияЯзыка];
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Разделитель()
	Возврат "_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка)
	Возврат "ДополнительныйЯзык" + Разделитель() + Формат(ПорядковыйНомерЯзыка,"ЧГ=0");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка)
	Возврат "ИспользоватьДополнительныйЯзык" + Разделитель() + Формат(ПорядковыйНомерЯзыка,"ЧГ=0");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаГруппы(ПорядковыйНомерЯзыка)
	Возврат "Группа" + Разделитель() + Формат(ПорядковыйНомерЯзыка,"ЧГ=0");
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ИспользоватьДополнительныйЯзык_ПриИзменении(Элемент)
	
	Позиция = СтрНайти(Элемент.Имя, Разделитель(), НаправлениеПоиска.СКонца);
	
	Если Позиция > 0 Тогда
		ПорядковыйНомер = Сред(Элемент.Имя, Позиция + 1);
		Элементы[ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомер)].Доступность = ЭтотОбъект[Элемент.Имя];
	КонецЕсли;
	
	ДанныеБылиИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительныйЯзык_ПриИзменении(Элемент)
	
	Позиция = СтрНайти(Элемент.Имя, Разделитель(), НаправлениеПоиска.СКонца);
	
	Если Позиция > 0 Тогда
		ПорядковыйНомерТекущегоЭлемента = Сред(Элемент.Имя, Позиция + 1);
	КонецЕсли;
	
	НовоеЗначение = ЭтотОбъект[Элемент.Имя];
	
	Если СтрСравнить(ПредыдущийЯзык, НовоеЗначение) <> 0 Тогда
		Если СтрСравнить(НовоеЗначение, ОсновнойЯзык) = 0 Тогда
			ОсновнойЯзык = ПредыдущийЯзык;
		Иначе
			Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
				Если СтрСравнить(ПорядковыйНомерТекущегоЭлемента, ПорядковыйНомерЯзыка) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СтрСравнить(НовоеЗначение, ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка)]) = 0 Тогда
					ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка)] = ПредыдущийЯзык;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеБылиИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительныйЯзык_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредыдущийЯзык = ЭтотОбъект[Элемент.Имя];
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЯзыкПриИзменении(Элемент)
	
	Если СтрСравнить(ПредыдущийЯзык, ОсновнойЯзык) <> 0 Тогда
		
		Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
			ИмяЭлементаПолеВыбораЯзыка = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
			
			Если СтрСравнить(ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка], ОсновнойЯзык) = 0 Тогда
				ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка] = ПредыдущийЯзык;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		ДанныеБылиИзменены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЯзыкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредыдущийЯзык = ОсновнойЯзык;
КонецПроцедуры

&НаКлиенте
Процедура ЧасовойПоясПрограммыПриИзменении(Элемент)
	СмещениеЧасовогоПояса = СмещениеЧасовогоПояса(ЧасовойПоясПрограммы, ТекущиеВремяНаКлиенте());
	ДанныеБылиИзменены = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если ДанныеКорректны() Тогда
		
		Если Источник = "ПанельАдминистрированияБСП" И ЗначенияКонстантИзменены() Тогда
			ПерезаполнитьДанные();
		Иначе
			ЗаписатьЗначенияКонстантИЗакрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АвтоматическоеЗакрытиеФормыПриНеактивности()
	
	Если ДанныеБылиИзменены Тогда
		Элементы.ОК.Заголовок = НСтр("ru = 'ОК'");
		Возврат;
	КонецЕсли;
	
	Если ВремяЗакрытияФормы < ТекущиеВремяНаКлиенте() Тогда
		
		ЗаписатьЗначенияКонстантИЗакрыть();
		Элементы.ОК.Заголовок = НСтр("ru = 'ОК'");
		Возврат;
		
	КонецЕсли;
	
	СекундДоЗакрытияФормы = ВремяЗакрытияФормы - ТекущиеВремяНаКлиенте();
	Секунды = СекундДоЗакрытияФормы % 60;
	Минуты = (СекундДоЗакрытияФормы - Секунды) / 60;
	МинутыИСекунды = ?(Минуты > 1, Строка(Минуты) + ":" + Строка(Секунды), Строка(Секунды));

	Элементы.ОК.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ОК (%1)'"), МинутыИСекунды);
		
	ПодключитьОбработчикОжидания("АвтоматическоеЗакрытиеФормыПриНеактивности", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗначенияКонстантИЗакрыть()
	
	ЗаписатьЗначенияКонстант();
	Закрыть(Новый Структура("Отказ", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДанные()
	
	ОчиститьСообщения();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Ожидание;
	Элементы.ОК.Доступность = Ложь;
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
	
	ДлительнаяОперация = ЗапуститьФоновоеПерезаполнениеНаСервере(УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	
	Обработчик = Новый ОписаниеОповещения("ПослеФоновогоПерезаполнения", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеПерезаполнениеНаСервере(Знач УникальныйИдентификатор)
	
	Если Не ПродолжитьИзменениеМультиязычныхРеквизитов Тогда
		СписокМетаданныхДляОбработки = ПодготовитьСписокМетаданныхДляОбработки(СтарыеИНовыеЗначенияКонстант());
		ЗаписатьЗначенияКонстант(СписокМетаданныхДляОбработки);
	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Перезаполнение строк предопределенных элементов и классификаторов.'");
	ПараметрыВыполнения.УточнениеОшибки =
		НСтр("ru = 'Не удалось перезаполнить строки предопределенных элементов и классификаторов по причине:'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("МультиязычностьСервер.ИзменитьЯзыкВМультиязычныхРеквизитахКонфигурации",
		Новый Структура, ПараметрыВыполнения);
	
КонецФункции

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовоеСостояниеДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется"
	   И Результат.Прогресс <> Неопределено Тогда
	
		Прогресс = Результат.Прогресс.Процент;
		Элементы.Прогресс.Подсказка = Результат.Прогресс.Текст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокМетаданныхДляОбработки(СтарыеИНовыеЗначенияКонстант)
	
	ОбъектыСМультиязычнымиРеквизитами = МультиязычностьСервер.ИменаОбъектовСМультиязычнымиРеквизитами();
	
	ТекущиеСсылкиНаОбъекты = Новый Соответствие;
	
	Для Каждого ОбъектСМультиязычнымиРеквизитами Из ОбъектыСМультиязычнымиРеквизитами Цикл
		
		Настройки = Новый Структура;
		Настройки.Вставить("СсылкаНаПоследнийОбработанныйОбъекты", Неопределено);
		Настройки.Вставить("ЯзыковыеПоля", ОбъектСМультиязычнымиРеквизитами.Значение);
		
		ТекущиеСсылкиНаОбъекты.Вставить(ОбъектСМультиязычнымиРеквизитами.Ключ, Настройки);
	КонецЦикла;
	
	НастройкиОбработки = Новый Структура;
	НастройкиОбработки.Вставить("НастройкиИзмененияЯзыков", СтарыеИНовыеЗначенияКонстант);
	НастройкиОбработки.Вставить("Объекты", ТекущиеСсылкиНаОбъекты);
	
	Значение = Новый ХранилищеЗначения(НастройкиОбработки, Новый СжатиеДанных(9));
	
	Возврат Значение;
	
КонецФункции

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ПослеФоновогоПерезаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.РегиональныеНастройки;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(
			Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;

	ОбновитьПовторноИспользуемыеЗначения();

	Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	Элементы.ОК.Видимость              = Ложь;
	Элементы.Закрыть.Видимость         = Истина;
	ТекущийЭлемент                     = Элементы.Закрыть;
	Элементы.Страницы.ТекущаяСтраница = Элементы.УспешноеЗавершение;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеКорректны()
	
	Если ПустаяСтрока(ОсновнойЯзык) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран основной язык приложения'"),, Элементы.ОсновнойЯзык);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ЧасовойПоясПрограммы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран часовой пояс приложения'"),, Элементы.ЧасовойПоясПрограммы);
		Возврат Ложь;
	КонецЕсли;
	
	УстановленныеЯзыки = Новый Соответствие;
	УстановленныеЯзыки.Вставить(ОсновнойЯзык, Истина);
	
	Для ТекущийПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
		
		Если ЭтотОбъект[ИмяЭлементаВключенияЯзыка(ТекущийПорядковыйНомерЯзыка)] Тогда
			ИмяТекущегоЭлемента = ИмяЭлементаПолеВыбораЯзыка(ТекущийПорядковыйНомерЯзыка);
			
			Если ПустаяСтрока(ЭтотОбъект[ИмяТекущегоЭлемента]) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран дополнительный язык учета'"),, ИмяТекущегоЭлемента);
				Возврат Ложь;
			КонецЕсли;
			
			Для ПорядковыйНомерЯзыка= 1 По КоличествоДополнительныхЯзыков Цикл
				ИмяЭлемента = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
				
				Если ТекущийПорядковыйНомерЯзыка = ПорядковыйНомерЯзыка Тогда
					Если СтрСравнить(ОсновнойЯзык, ЭтотОбъект[ИмяЭлемента]) = 0 Тогда
						ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Указаны некорректные значения региональных настроек'"));
						Возврат Ложь;
					КонецЕсли;
				ИначеЕсли СтрСравнить(ЭтотОбъект[ИмяЭлемента], ЭтотОбъект[ИмяТекущегоЭлемента]) = 0 Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Указаны некорректные значения региональных настроек'"));
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЗначенияКонстант(СписокМетаданныхДляОбработки = Неопределено)
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Если ЧасовойПоясПрограммы <> ПолучитьЧасовойПоясИнформационнойБазы() Тогда
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				УстановитьМонопольныйРежим(Истина);
				УстановитьЧасовойПоясИнформационнойБазы(ЧасовойПоясПрограммы);
				УстановитьМонопольныйРежим(Ложь);
			Исключение
				УстановитьМонопольныйРежим(Ложь);
				ВызватьИсключение;
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьЧасовойПоясСеанса(ЧасовойПоясПрограммы);
		КонецЕсли;
		
	Иначе
		
		УстановитьЧасовойПоясСеанса(ЧасовойПоясПрограммы);
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Или Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		ДанныеЗаполненияЯзыков = Новый Соответствие;
		
		КодыЯзыков = Новый Массив;
		КодыЯзыков.Добавить(ОсновнойЯзык);
		
		Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
			ИмяЭлементаВключенияЯзыка  = ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка);
			ИмяЭлементаПолеВыбораЯзыка = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
			КодТекущегоЯзыка           = "";
			Если ЭтотОбъект[ИмяЭлементаВключенияЯзыка] Тогда
				КодТекущегоЯзыка = ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка];
				КодыЯзыков.Добавить(КодТекущегоЯзыка);
			КонецЕсли;
			ДанныеЗаполненияЯзыков.Вставить(ПорядковыйНомерЯзыка, КодТекущегоЯзыка);
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОсновнойЯзык = ОсновнойЯзык;
			
			Константы.ОсновнойЯзык.Установить(ОсновнойЯзык);
			
			Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
				ИмяЭлементаВключенияЯзыка = ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка);
				ИмяЭлементаПолеВыбораЯзыка = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
				ИмяКонстантыЯзыка = МультиязычностьСервер.ИмяКонстантыЯзыка(ПорядковыйНомерЯзыка);
				ИмяФункциональнойОпции= МультиязычностьСервер.ИмяФункциональнойОпции(ПорядковыйНомерЯзыка);
				
				Константы[ИмяКонстантыЯзыка].Установить(ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка]);
				Константы[ИмяФункциональнойОпции].Установить(ЭтотОбъект[ИмяЭлементаВключенияЯзыка]);
			КонецЦикла;
			
			Константы.ДанныеДляИзмененияМультиязычныхРеквизитов.Установить(СписокМетаданныхДляОбработки);
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
					МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
					МодульУправлениеПечатью.ДобавитьЯзыкиПечатныхФорм(КодыЯзыков);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Функция ЗначенияКонстантИзменены()
	
	Если Метаданные.Языки.Количество() = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрСравнить(Константы.ОсновнойЯзык.Получить(), ОсновнойЯзык) <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
		
		ИмяФункциональнойОпции = МультиязычностьСервер.ИмяФункциональнойОпции(ПорядковыйНомерЯзыка);
		ИмяЭлементаВключенияЯзыка = ИмяЭлементаВключенияЯзыка(ПорядковыйНомерЯзыка);

		Если (Константы[ИмяФункциональнойОпции].Получить() = Ложь
		   И ЭтотОбъект[ИмяЭлементаВключенияЯзыка] = Истина) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ИмяКонстантыЯзыка = МультиязычностьСервер.ИмяКонстантыЯзыка(ПорядковыйНомерЯзыка);
		ИмяЭлементаПолеВыбораЯзыка = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
		
		Если ЭтотОбъект[ИмяЭлементаВключенияЯзыка] 
		   И СтрСравнить(Константы[ИмяКонстантыЯзыка].Получить(), ЭтотОбъект[ИмяЭлементаПолеВыбораЯзыка]) <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


// Возвращаемое значение:
//   см. МультиязычностьСервер.ОписаниеСтарыхИНовыхНастроекЯзыков
//
&НаСервере
Функция СтарыеИНовыеЗначенияКонстант()
	
	Результат = МультиязычностьСервер.ОписаниеСтарыхИНовыхНастроекЯзыков(КоличествоДополнительныхЯзыков);
	
	Результат.ОсновнойЯзык.СтароеЗначение= Константы.ОсновнойЯзык.Получить();
	Результат.ОсновнойЯзык.НовоеЗначение = ОсновнойЯзык;
	
	Для ПорядковыйНомерЯзыка = 1 По КоличествоДополнительныхЯзыков Цикл
		ИмяКонстантыЯзыка = МультиязычностьСервер.ИмяКонстантыЯзыка(ПорядковыйНомерЯзыка);
		ИмяЭлемента       = ИмяЭлементаПолеВыбораЯзыка(ПорядковыйНомерЯзыка);
		Результат[ИмяКонстантыЯзыка].СтароеЗначение = Константы[ИмяКонстантыЯзыка].Получить();
		Результат[ИмяКонстантыЯзыка].НовоеЗначение = ЭтотОбъект[ИмяЭлемента];
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Часовые пояса

&НаСервере
Процедура ЗаполнитьЧасовыеПояса()

	Для Каждого ОписаниеЧасовогоПояса Из ПолучитьДопустимыеЧасовыеПояса() Цикл
	
			СмещениеДатой = Дата(1, 1, 1) + СмещениеСтандартногоВремени(ОписаниеЧасовогоПояса); 
			ПредставлениеСмещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(UTC+%1)",
				Формат(СмещениеДатой, "ДФ=HH:mm; ДП=00:00;"));
	
			ПредставлениеЧасовогоПояса = ПредставлениеСмещения + " " + ОписаниеЧасовогоПояса;
			Элементы.ЧасовойПоясПрограммы.СписокВыбора.Добавить(ОписаниеЧасовогоПояса, ПредставлениеЧасовогоПояса);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СмещениеЧасовогоПояса(ЧасовойПоясПрограммы, ВремяНаКлиенте)
	
	ДатаСеансаУниверсальная = УниверсальноеВремя(ТекущаяДатаСеанса(), ЧасовойПоясСеанса());
	ДатаСеансаНовыйЧасовойПояс = ДатаСеансаУниверсальная + СмещениеСтандартногоВремени(ЧасовойПоясПрограммы);

	Возврат ДатаСеансаНовыйЧасовойПояс - ВремяНаКлиенте + СмещениеЛетнегоВремени(ЧасовойПоясПрограммы);
	
КонецФункции

&НаКлиенте
Процедура УстановитьВремя()
	
	ВремяВыбранногоЧасовогоПояса = ТекущиеВремяНаКлиенте() + СмещениеЧасовогоПояса;
	ПодключитьОбработчикОжидания("УстановитьВремя", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеВремяНаКлиенте()

	// АПК:143-выкл -Требуется ТекущаяДата для расчета смещения отображаемого времени сеанса на форме.
	Возврат ТекущаяДата();
	// АПК:143-вкл 
	
КонецФункции

#КонецОбласти