///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ПроверитьВозможностьНастройкиСинхронизацииДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/ОбщаяФорма.СинхронизацияДанных";
	
	ИнициализироватьРеквизитыФормы();
	
	УстановитьОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДанныеМонитораИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "ВыполненОбменДанными"
		Или ИмяСобытия = "Запись_СценарииОбменовДанными"
		Или ИмяСобытия = "Запись_УзелПланаОбмена"
		Или ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		Или ИмяСобытия = "ЗакрытаФормаРезультатовОбменаДанными" Тогда
		
		ОбновитьДанныеМонитораВФоне();
		
	ИначеЕсли ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными" Тогда
		
		ОбновитьДанныеМонитораИнтерактивно();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСостоянияУзлов

&НаКлиенте
Процедура СписокПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиПараметровСинхронизации(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриложенийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
		
	Элементы.СписокПриложенийВыполнитьСинхронизациюСДополнительнымиОтборами.Доступность =
		ТекущиеДанные.ДоступнаИнтерактивнаяОтправка И Не ТекущиеДанные.ЗапускОбменаИзКорреспондента;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСинхронизацию(Команда)
	
	ОбработкаКомандыВыполненияСинхронизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюСДополнительнымиОтборами(Команда)
	
	ОбработкаКомандыВыполненияСинхронизации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДанными(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(ТекущиеДанные.УзелИнформационнойБазы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	ОбновитьДанныеМонитораИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиПараметровСинхронизации(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ПерейтиВЖурналРегистрацииСобытий("ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ПерейтиВЖурналРегистрацииСобытий("ВыгрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбновление(Команда)
	
	ОбменДаннымиКлиент.УстановитьОбновлениеКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоОбмену(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	СсылкаНаПодробноеОписание = ПодробнаяИнформацияНаСервере(ТекущиеДанные.УзелИнформационнойБазы);
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(СсылкаНаПодробноеОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатыСинхронизацииДанных(Команда)
	
	ОбменДаннымиКлиент.ОткрытьРезультатыОбменаДанными(МассивИспользуемыхУзлов(СписокПриложений));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОтправляемыхДанных(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОткрытьСоставОтправляемыхДанных(ТекущиеДанные.УзелИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСинхронизации(Команда)
	
	ОбменДаннымиКлиент.ОткрытьФормуНастройкиНовойСинхронизацииДанных(ФормаНовойСинхронизацииДанных,
		ПараметрыФормыНовойСинхронизацииДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуСинхронизации(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоОбменСПриложениемВСервисе 
		И ТекущиеДанные.НастройкаСинхронизацииВМенеджереСервиса Тогда
			
		ПоказатьПредупреждение(, НСтр("ru = 'Для удаления настройки синхронизации данных перейдите в менеджер сервиса.
			|В менеджере сервиса воспользуйтесь командой ""Синхронизация данных"".'"));
		
	Иначе
		
		ПараметрыПомощника = Новый Структура;
		ПараметрыПомощника.Вставить("УзелОбмена",                   ТекущиеДанные.УзелИнформационнойБазы);
		ПараметрыПомощника.Вставить("ИмяПланаОбмена",               ТекущиеДанные.ИмяПланаОбмена);
		ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  ТекущиеДанные.ОбластьДанных);
		ПараметрыПомощника.Вставить("НаименованиеКорреспондента",   ТекущиеДанные.НаименованиеКорреспондента);
		ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ТекущиеДанные.ЭтоОбменСПриложениемВСервисе);
		
		ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.УдалениеНастройкиСинхронизации",
			ПараметрыПомощника, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаСинхронизацииДанных(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	СведенияОПланеОбмена = СведенияОПланеОбмена(ТекущиеДанные.ИмяПланаОбмена);
	
	Если СведенияОПланеОбмена.ИспользуютсяПравилаКонвертации Тогда
		ОбменДаннымиКлиент.ЗагрузитьПравилаСинхронизацииДанных(СведенияОПланеОбмена.ИмяПланаОбмена);
	Иначе
		ВидПравил = ПредопределенноеЗначение("Перечисление.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов");
		
		Отбор              = Новый Структура("ИмяПланаОбмена, ВидПравил", СведенияОПланеОбмена.ИмяПланаОбмена, ВидПравил);
		ЗначенияЗаполнения = Новый Структура("ИмяПланаОбмена, ВидПравил", СведенияОПланеОбмена.ИмяПланаОбмена, ВидПравил);
		ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "ПравилаДляОбменаДанными", 
			ТекущиеДанные.УзелИнформационнойБазы, "ПравилаРегистрацииОбъектов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяВыгрузкаДанных(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗавершенияНастройки = Неопределено;
	Если ПродолжитьНастройкуНовойСинхронизации(ТекущиеДанные, ДанныеДляЗавершенияНастройки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные",                ТекущиеДанные);
		ДополнительныеПараметры.Вставить("ДанныеДляЗавершенияНастройки", ДанныеДляЗавершенияНастройки);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВопросПродолжитьНастройкуСинхронизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения,
			НСтр("ru = 'Перед выгрузкой данных для сопоставления необходимо завершить настройку синхронизации.
			|Открыть форму помощника настройки?'"),
			РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Не ТекущиеДанные.ДоступнаИнтерактивнаяОтправка Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбранного варианта настройки синхронизации выгрузка данных для сопоставления не поддерживается.'"));
		Возврат;
	Иначе
		ПараметрыПомощника = Новый Структура;
		ПараметрыПомощника.Вставить("УзелОбмена", ТекущиеДанные.УзелИнформационнойБазы);
		ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ТекущиеДанные.ЭтоОбменСПриложениемВСервисе);
		ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента", ТекущиеДанные.ОбластьДанных);
		Если ДанныеДляЗавершенияНастройки.ПассивноеПодключение Тогда
			ПараметрыПомощника.Вставить("НачальнаяВыгрузка", Истина);
		КонецЕсли;
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("НачальнаяВыгрузкаДанныхЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ПомощникИнтерактивногоОбменаДанными.Форма.ВыгрузкаДанныхДляСопоставления",
			ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Тусклый цвет шрифта настроенной, но ни разу не запускавшейся синхронизации.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Не запускалась'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Текст "н/д" и тусклый цвет шрифта для отсутствующего префикса программы-корреспондента.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийПрефиксКорреспондента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.ПрефиксКорреспондента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'н/д'"));
	
	// Особый цвет шрифта синхронизации, по которой не завершена настройка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Настройка не завершена'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноКрасный);
	
	// Скрыть пустую картинку состояния синхронизации данных.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрыть пустую картинку состояния выгрузки данных.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеВыгрузкиКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеВыгрузкиКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрыть пустую картинку состояния загрузки данных.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеЗагрузкиКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеЗагрузкиКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросПродолжитьНастройкуСинхронизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПомощникаНастройкиНовойСинхронизации(
		ДополнительныеПараметры.ТекущиеДанные,
		ДополнительныеПараметры.ДанныеДляЗавершенияНастройки);
		
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяВыгрузкаДанныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораИнтерактивно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметровСинхронизации(ТекущиеДанные)
	
	ДанныеДляЗавершенияНастройки = Неопределено;
	Если ПродолжитьНастройкуНовойСинхронизации(ТекущиеДанные, ДанныеДляЗавершенияНастройки) Тогда
		ОткрытьФормуПомощникаНастройкиНовойСинхронизации(ТекущиеДанные, ДанныеДляЗавершенияНастройки);
		Возврат;
	КонецЕсли;
		
	ОткрытьФормуУзлаПланаОбмена(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Функция ПродолжитьНастройкуНовойСинхронизации(ТекущиеДанные, ДанныеДляЗавершенияНастройки)
	
	СтрокаПриложение = Новый Структура("УзелИнформационнойБазы, ИмяПланаОбмена, ВерсияКорреспондента, ВнешняяСистема");
	ЗаполнитьЗначенияСвойств(СтрокаПриложение, ТекущиеДанные);
	
	ДанныеДляЗавершенияНастройки = Неопределено;
	
	Возврат Не НастройкаСинхронизацииЗавершена(СтрокаПриложение, ДанныеДляЗавершенияНастройки);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПомощникаНастройкиНовойСинхронизации(ТекущиеДанные, ДанныеДляЗавершенияНастройки)
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("УзелОбмена",             ТекущиеДанные.УзелИнформационнойБазы);
	ПараметрыПомощника.Вставить("ИмяПланаОбмена",         ТекущиеДанные.ИмяПланаОбмена);
	ПараметрыПомощника.Вставить("ИдентификаторНастройки", ДанныеДляЗавершенияНастройки.ИдентификаторНастройки);
	
	Если МодельСервиса Тогда
		ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  ТекущиеДанные.ОбластьДанных);
		ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ТекущиеДанные.ЭтоОбменСПриложениемВСервисе);
	КонецЕсли;
	
	ПараметрыПомощника.Вставить("ОписаниеВариантаНастройки", ДанныеДляЗавершенияНастройки.ОписаниеВариантаНастройки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиПараметровСинхронизацииЗавершение", ЭтотОбъект);
	
	Если ТекущиеДанные.ВнешняяСистема Тогда
		ПараметрыПомощника.Вставить("ОбменДаннымиСВнешнейСистемой", Истина);
		
		ФоновоеЗадание = ФоновоеЗаданиеВариантыНастроекОбменаДаннымиСВнешнимиСистемами(
			ПараметрыПомощника.УзелОбмена, УникальныйИдентификатор);
		
		Если Не ФоновоеЗадание = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыПомощника",  ПараметрыПомощника);
			ДополнительныеПараметры.Вставить("ОповещениеОЗакрытии", ОповещениеОЗакрытии);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"ПриЗавершенииПолученияВариантовНастроекОбменаДаннымиСВнешнимиСистемами", ЭтотОбъект, ДополнительныеПараметры);
	
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КлючУникальностиПомощника = ПараметрыПомощника.ИмяПланаОбмена
		+ "_" + ПараметрыПомощника.ИдентификаторНастройки + "_" + ПараметрыПомощника.УзелОбмена.УникальныйИдентификатор();
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.НастройкаСинхронизации",
		ПараметрыПомощника, ЭтотОбъект, КлючУникальностиПомощника, , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуУзлаПланаОбмена(ТекущиеДанные)
	
	ИмяФормыПомощника = СтрЗаменить("ПланОбмена.[ИмяПланаОбмена].ФормаОбъекта", "[ИмяПланаОбмена]", ТекущиеДанные.ИмяПланаОбмена);
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("Ключ", ТекущиеДанные.УзелИнформационнойБазы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиПараметровСинхронизацииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыПомощника,
		ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметровСинхронизацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораИнтерактивно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииПолученияВариантовНастроекОбменаДаннымиСВнешнимиСистемами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Отказ = Ложь;
		СообщениеОбОшибке = "";
		ОбработатьРезультатПолученияВариантовНастроекНаСервере(
			Результат.АдресРезультата, Отказ, СообщениеОбОшибке, ДополнительныеПараметры.ПараметрыПомощника);
			
		Если Отказ Тогда
			ПоказатьПредупреждение(, СообщениеОбОшибке);
		Иначе
			ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.НастройкаСинхронизации",
				ДополнительныеПараметры.ПараметрыПомощника, ЭтотОбъект, , , , ДополнительныеПараметры.ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
			
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
			
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыВыполненияСинхронизации(ИспользоватьДопОтборы = Ложь)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗавершенияНастройки = Неопределено;
	Если ПродолжитьНастройкуНовойСинхронизации(ТекущиеДанные, ДанныеДляЗавершенияНастройки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные",                ТекущиеДанные);
		ДополнительныеПараметры.Вставить("ДанныеДляЗавершенияНастройки", ДанныеДляЗавершенияНастройки);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВопросПродолжитьНастройкуСинхронизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения,
			НСтр("ru = 'Перед запуском синхронизации данных необходимо завершить ее настройку.
			|Открыть форму помощника настройки?'"),
			РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТекущиеДанные.ЗапускОбменаИзКорреспондента
		И Не ПолученоСообщениеДляСопоставленияДанных(ТекущиеДанные.УзелИнформационнойБазы) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запуск синхронизации с ""%1"" из этой программы не поддерживается.
			|Перейдите в ""%1"" и запустите синхронизацию из нее.'"), ТекущиеДанные.НаименованиеКорреспондента));
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("УзелОбмена",     ТекущиеДанные.УзелИнформационнойБазы);
		ДополнительныеПараметры.Вставить("ИмяПланаОбмена", ТекущиеДанные.ИмяПланаОбмена);
		
		ДополнительныеПараметры.Вставить("ЭтоОбменСПриложениемВСервисе", ТекущиеДанные.ЭтоОбменСПриложениемВСервисе);
		ДополнительныеПараметры.Вставить("ОбластьДанныхКорреспондента",  ТекущиеДанные.ОбластьДанных);
		
		ДополнительныеПараметры.Вставить("ИспользоватьДопОтборы",                   ИспользоватьДопОтборы);
		ДополнительныеПараметры.Вставить("ДоступнаИнтерактивнаяОтправка",           ТекущиеДанные.ДоступнаИнтерактивнаяОтправка);
		ДополнительныеПараметры.Вставить("ВариантОбменаДанными",                    ТекущиеДанные.ВариантОбменаДанными);
		ДополнительныеПараметры.Вставить("ПолученоСообщениеДляСопоставленияДанных", ПолученоСообщениеДляСопоставленияДанных(ТекущиеДанные.УзелИнформационнойБазы));
		ДополнительныеПараметры.Вставить("ЗапускОбменаИзКорреспондента",            ТекущиеДанные.ЗапускОбменаИзКорреспондента);
		
		ОписаниеПродолжения = Новый ОписаниеОповещения("ПродолжитьВыполнениеСинхронизации", ЭтотОбъект, ДополнительныеПараметры);
			
		Если ТекущиеДанные.ЭтоОбменСПриложениемВСервисе Тогда
			ВыполнитьОбработкуОповещения(ОписаниеПродолжения);
		Иначе
			ПроверитьСовместимостьПравилКонвертации(ОписаниеПродолжения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФоновоеЗаданиеВариантыНастроекОбменаДаннымиСВнешнимиСистемами(
		УзелОбмена,
		УникальныйИдентификатор)
	
	ФоновоеЗадание = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОбменДаннымиСВнешнимиСистемами") Тогда
		МодульПомощник = ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными();
		ВариантыНастроек = МодульПомощник.ОписаниеВариантовНастроекОбменаДаннымиСВнешнимиСистемами();
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ВариантыНастроек", ВариантыНастроек);
		ПараметрыПроцедуры.Вставить("УзелОбмена",       УзелОбмена);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение доступных вариантов настроек обмена данными с внешними системами.'");
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(
			"ОбменДаннымиСВнешнимиСистемами.ПриПолученииВариантовНастроекОбменаДанными",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
	КонецЕсли;
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьРезультатПолученияВариантовНастроекНаСервере(АдресРезультата, Отказ, СообщениеОбОшибке, ПараметрыПомощника)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Отбор = Новый Структура("ИмяПланаОбмена, ИдентификаторНастройки");
		ЗаполнитьЗначенияСвойств(Отбор, ПараметрыПомощника);
		
		СтрокиВариантыНастроек = Результат.ВариантыНастроек.НайтиСтроки(Отбор);
		Если СтрокиВариантыНастроек.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыПомощника.ОписаниеВариантаНастройки, СтрокиВариантыНастроек[0]);
		Иначе
			Отказ = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Настройка подключения к данному сервису недоступна.'");
		КонецЕсли;
	Иначе
		Отказ = Истина;
		Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
			СообщениеОбОшибке = Результат.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьНастройкиСинхронизацииДанных(Отказ = Ложь)
	
	ТекстСообщения = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			МодульОбменДаннымиВМоделиСервисаПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервисаПовтИсп");
			Если Не МодульОбменДаннымиВМоделиСервисаПовтИсп.СинхронизацияДанныхПоддерживается() Тогда
		 		ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных в данной программе не предусмотрена.'");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'В неразделенном режиме настройка синхронизации данных с другими программами недоступна.'");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		СписокПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
		Если СписокПлановОбмена.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных в данной программе не предусмотрена.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ
		И Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаСинхронизацииЗавершена(СтрокаПриложение, ДанныеДляЗавершенияНастройки = Неопределено)
	
	МодульПомощник = ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными();
	ОписаниеВариантаНастройки = МодульПомощник.СтруктураОписанияВариантаНастройки();
	
	ИдентификаторНастройки = ОбменДаннымиСервер.СохраненныйВариантНастройкиУзлаПланаОбмена(
		СтрокаПриложение.УзелИнформационнойБазы);
		
	Если Не СтрокаПриложение.ВнешняяСистема Тогда
		ЗначенияНастроекДляВарианта = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(СтрокаПриложение.ИмяПланаОбмена,
			"НаименованиеКонфигурацииКорреспондента,
			|ЗаголовокКомандыДляСозданияНовогоОбменаДанными,
			|ЗаголовокПомощникаСозданияОбмена,
			|КраткаяИнформацияПоОбмену,
			|ПодробнаяИнформацияПоОбмену",
			ИдентификаторНастройки,
			СтрокаПриложение.ВерсияКорреспондента);
			
		ЗаполнитьЗначенияСвойств(ОписаниеВариантаНастройки, ЗначенияНастроекДляВарианта);
		ОписаниеВариантаНастройки.НаименованиеКорреспондента = ЗначенияНастроекДляВарианта.НаименованиеКонфигурацииКорреспондента;
	КонецЕсли;
	
	НомераСообщений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПриложение.УзелИнформационнойБазы, "НомерПринятого, НомерОтправленного");
	ВидТранспорта   = РегистрыСведений.НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию(СтрокаПриложение.УзелИнформационнойБазы);
	
	Если Не ЗначениеЗаполнено(ВидТранспорта) Тогда
		ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим;
	КонецЕсли;
	
	ДанныеДляЗавершенияНастройки = Новый Структура;
	ДанныеДляЗавершенияНастройки.Вставить("ИдентификаторНастройки",    ИдентификаторНастройки);
	ДанныеДляЗавершенияНастройки.Вставить("ОписаниеВариантаНастройки", ОписаниеВариантаНастройки);
	ДанныеДляЗавершенияНастройки.Вставить("ПассивноеПодключение",      ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим);
	
	Возврат ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(СтрокаПриложение.УзелИнформационнойБазы)
		И Не (НомераСообщений.НомерПринятого = 0
			И НомераСообщений.НомерОтправленного = 0
			И ОбменДаннымиСервер.ПолученоСообщениеСДаннымиДляСопоставления(СтрокаПриложение.УзелИнформационнойБазы));
	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОПланеОбмена(ИмяПланаОбмена)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	Результат.Вставить("ИспользуютсяПравилаКонвертации",
		ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена"));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция УзелОбменаСуществует(УзелОбмена)
	
	Возврат ОбщегоНазначения.СсылкаСуществует(УзелОбмена);
	
КонецФункции

&НаКлиенте
Функция ТекущиеДанныеСпискаПриложений()
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если Не УзелОбменаСуществует(ТекущиеДанные.УзелИнформационнойБазы) Тогда
			ТекущиеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытий(ДействиеПриОбмене)
	
	ТекущиеДанные = ТекущиеДанныеСпискаПриложений();
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбновитьДанныеМонитораИнтерактивно();
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекущиеДанные.УзелИнформационнойБазы,
		ЭтотОбъект, ДействиеПриОбмене);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеМонитораИнтерактивно()
	
	ИндексСтрокиСписокПриложений = ПолучитьТекущийИндексСтроки();
	
	Если МодельСервиса Тогда
		ПриНачалеОбновленияДанныхМонитора();
	Иначе
		ОбновитьСписокПриложений();
		ВыполнитьПозиционированиеКурсора(ИндексСтрокиСписокПриложений);
		
		ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораВФоне", 60, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеМонитораВФоне()
	
	ИндексСтрокиСписокПриложений = ПолучитьТекущийИндексСтроки();
	
	ОбновитьПриложенияМоделиСервиса = МодельСервиса;
	ОбновитьСписокПриложений(ОбновитьПриложенияМоделиСервиса);
	
	Если МодельСервиса
		И ОбновитьПриложенияМоделиСервиса Тогда
		ПриНачалеОбновленияДанныхМонитораВФоне();
	Иначе
		ВыполнитьПозиционированиеКурсора(ИндексСтрокиСписокПриложений);
		
		ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораВФоне", 60, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеОбновленияДанныхМонитора()
	
	Если Не ПараметрыОбработчикаОжиданияПолученияСпискаПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаПолученияСпискаПриложений = Неопределено;
	ПродолжитьОжидание = Ложь;
	
	ПриНачалеПолученияСпискаПриложенийНаСервере(
		ПараметрыОбработчикаПолученияСпискаПриложений, ПродолжитьОжидание);
		
	Если ПродолжитьОжидание Тогда
		
		Элементы.ПанельСписокПриложений.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.КоманднаяПанель.Доступность = Ложь;
		
		ОбменДаннымиКлиент.ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений);
			
		ПодключитьОбработчикОжидания("ПриОжиданииОбновленияДанныхМонитора",
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений.ТекущийИнтервал, Истина);
		
	Иначе
		ПриЗавершенииОбновленияДанныхМонитора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииОбновленияДанныхМонитора()
	
	ПродолжитьОжидание = Ложь;
	ПриОжиданииПолученияСпискаПриложенийНаСервере(ПараметрыОбработчикаПолученияСпискаПриложений, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбменДаннымиКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПолученияСпискаПриложений);
		
		ПодключитьОбработчикОжидания("ПриОжиданииОбновленияДанныхМонитора",
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений.ТекущийИнтервал, Истина);
	Иначе
		ПараметрыОбработчикаОжиданияПолученияСпискаПриложений = Неопределено;
		ПриЗавершенииОбновленияДанныхМонитора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбновленияДанныхМонитора()
	
	ПриЗавершенииПолученияСпискаПриложенийНаСервере();
	ВыполнитьПозиционированиеКурсора(ИндексСтрокиСписокПриложений);
	
	Элементы.ПанельСписокПриложений.ТекущаяСтраница = Элементы.СтраницаСписокПриложений;
	Элементы.КоманднаяПанель.Доступность = Истина;
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораВФоне", 60, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеОбновленияДанныхМонитораВФоне()
	
	Если Не ПараметрыОбработчикаОжиданияПолученияСпискаПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаПолученияСпискаПриложений = Неопределено;
	ПродолжитьОжидание = Ложь;
	
	ПриНачалеПолученияСпискаПриложенийНаСервере(
		ПараметрыОбработчикаПолученияСпискаПриложений, ПродолжитьОжидание);
		
	Если ПродолжитьОжидание Тогда
		
		ОбменДаннымиКлиент.ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений);
			
		ПодключитьОбработчикОжидания("ПриОжиданииОбновленияДанныхМонитораВФоне",
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений.ТекущийИнтервал, Истина);
		
	Иначе
		ПриЗавершенииОбновленияДанныхМонитораВФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииОбновленияДанныхМонитораВФоне()
	
	ПродолжитьОжидание = Ложь;
	ПриОжиданииПолученияСпискаПриложенийНаСервере(ПараметрыОбработчикаПолученияСпискаПриложений, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбменДаннымиКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПолученияСпискаПриложений);
		
		ПодключитьОбработчикОжидания("ПриОжиданииОбновленияДанныхМонитораВФоне",
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений.ТекущийИнтервал, Истина);
	Иначе
		ПараметрыОбработчикаОжиданияПолученияСпискаПриложений = Неопределено;
		ПриЗавершенииОбновленияДанныхМонитораВФоне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбновленияДанныхМонитораВФоне()
	
	ПриЗавершенииПолученияСпискаПриложенийНаСервере();
	ВыполнитьПозиционированиеКурсора(ИндексСтрокиСписокПриложений);
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораВФоне", 60, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриНачалеПолученияСпискаПриложенийНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	МодульПомощникНастройки = ОбменДаннымиСервер.МодульПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете();
	
	Если МодульПомощникНастройки = Неопределено Тогда
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПомощника = Новый Структура("Режим", "НастроенныеОбмены");
	
	МодульПомощникНастройки.ПриНачалеПолученияСпискаПриложений(ПараметрыПомощника,
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОжиданииПолученияСпискаПриложенийНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	МодульПомощникНастройки = ОбменДаннымиСервер.МодульПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете();
	
	Если МодульПомощникНастройки = Неопределено Тогда
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
	МодульПомощникНастройки.ПриОжиданииПолученияСпискаПриложений(
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииПолученияСпискаПриложенийНаСервере()
	
	ПриложенияМоделиСервиса.Очистить();
	
	МодульПомощникНастройки = ОбменДаннымиСервер.МодульПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете();
	
	Если Не МодульПомощникНастройки = Неопределено Тогда
		СтатусЗавершения = Неопределено;
		МодульПомощникНастройки.ПриЗавершенииПолученияСпискаПриложений(
			ПараметрыОбработчикаПолученияСпискаПриложений, СтатусЗавершения);
			
		Если Не СтатусЗавершения.Отказ Тогда
			ТаблицаПриложений = СтатусЗавершения.Результат;
			ПриложенияМоделиСервиса.Загрузить(ТаблицаПриложений.Скопировать(, "Корреспондент, ОбластьДанных, НаименованиеПриложения"));
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокПриложений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПриложений(ОбновитьПриложенияМоделиСервиса = Ложь)
	
	Элементы.ПанельСписокПриложений.ТекущаяСтраница = Элементы.СтраницаСписокПриложений;
	Элементы.КоманднаяПанель.Доступность = Истина;
	
	ПланыОбменаБСП = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	ПриложенияДоОбновления = СписокПриложений.Выгрузить(, "УзелИнформационнойБазы").ВыгрузитьКолонку("УзелИнформационнойБазы");
	ТаблицаМонитора = ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ПланыОбменаБСП);
	ПриложенияПослеОбновления = ТаблицаМонитора.ВыгрузитьКолонку("УзелИнформационнойБазы");
	
	ЕстьНастроенныеОбмены = (ПриложенияПослеОбновления.Количество() > 0);
	
	Если ОбновитьПриложенияМоделиСервиса
		И ЕстьНастроенныеОбмены Тогда
		ОбновитьПриложенияМоделиСервиса = Ложь;
		Для Каждого Приложение Из ПриложенияПослеОбновления Цикл
			Если ПриложенияДоОбновления.Найти(Приложение) = Неопределено Тогда
				ОбновитьПриложенияМоделиСервиса = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокПриложений.Загрузить(ТаблицаМонитора);
	
	Для Каждого СтрокаПриложение Из СписокПриложений Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		СтрокаПриложение.НаименованиеКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаПриложение.УзелИнформационнойБазы, "Наименование");
		УстановитьПривилегированныйРежим(Ложь);
			
		СтрокиПриложениеМоделиСервиса = ПриложенияМоделиСервиса.НайтиСтроки(
			Новый Структура("Корреспондент", СтрокаПриложение.УзелИнформационнойБазы));
			
		Если СтрокиПриложениеМоделиСервиса.Количество() > 0 Тогда
			СтрокаПриложениеМоделиСервиса = СтрокиПриложениеМоделиСервиса[0];
			
			СтрокаПриложение.ЭтоОбменСПриложениемВСервисе = Истина;
			СтрокаПриложение.ОбластьДанных = СтрокаПриложениеМоделиСервиса.ОбластьДанных;
			СтрокаПриложение.НаименованиеКорреспондента = СтрокаПриложениеМоделиСервиса.НаименованиеПриложения;
		КонецЕсли;
		
		Если СтрокаПриложение.ЭтоОбменСПриложениемВСервисе Тогда
			
			СтрокаПриложение.РежимРаботыПриложения = 1;
			СтрокаПриложение.ДоступнаИнтерактивнаяОтправка = Истина;
			
		Иначе
			
			ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию(
				СтрокаПриложение.УзелИнформационнойБазы);
			
			Если ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS
				Или ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ВнешняяСистема Тогда
				СтрокаПриложение.РежимРаботыПриложения = 1; // сервис
			Иначе
				СтрокаПриложение.РежимРаботыПриложения = 0;
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(ВидТранспорта)
				Или (ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим) Тогда
				// Обмен с этой базой настроен через WS.
				СтрокаПриложение.ЗапускОбменаИзКорреспондента = Истина;
			КонецЕсли;
			
			СтрокаПриложение.ВнешняяСистема = (ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ВнешняяСистема);
			
			СтрокаПриложение.ДоступнаИнтерактивнаяОтправка =
				Не ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(СтрокаПриложение.ИмяПланаОбмена)
				И Не ОбменДаннымиПовтИсп.ЭтоУзелСтандартногоОбменаДанными(СтрокаПриложение.ИмяПланаОбмена)
				И Не СтрокаПриложение.ВнешняяСистема;
			
		КонецЕсли;
		
		СтрокаПриложение.ДоступнаИнтерактивнаяОтправка = СтрокаПриложение.ДоступнаИнтерактивнаяОтправка
			И Не (СтрокаПриложение.ВариантОбменаДанными = "ТолькоПолучение");
		
		СостояниеСинхронизации = СостояниеСинхронизацииДанных(СтрокаПриложение);
		СтрокаПриложение.СостояниеПредставление = СостояниеСинхронизации.Представление;
		СтрокаПриложение.СостояниеКартинка      = СостояниеСинхронизации.Картинка;
		
		Если ЗначениеЗаполнено(СтрокаПриложение.ДатаПоследнегоЗапуска) Тогда
			СтрокаПриложение.СостояниеВыгрузкиКартинка = КартинкаРезультатаВыполнения(СтрокаПриложение.РезультатПоследнейВыгрузкиДанных);
			
			Если Не СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				СтрокаПриложение.СостояниеЗагрузкиКартинка = КартинкаРезультатаВыполнения(СтрокаПриложение.РезультатПоследнейЗагрузкиДанных);
			КонецЕсли;
		Иначе
			// Не отображаем надпись "Никогда", если синхронизация еще ни разу не выполнялась,
			// чтобы не перегружать интерфейс.
			СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойВыгрузки = "";
			СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойЗагрузки = "";
		КонецЕсли;
		
		Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
			// Если получены данные для выполнения сопоставление, отображаем соответствующую дату получения сообщения.
			СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойЗагрузки = СтрокаПриложение.ПредставлениеДатыСообщенияДляСопоставленияДанных;
			СтрокаПриложение.СостояниеЗагрузкиКартинка = 5;
		КонецЕсли;
		
	КонецЦикла;
	
	ТребуетсяОбновление = ОбменДаннымиСервер.ТребуетсяУстановкаОбновления();
	
	УстановитьОтображениеЭлементовФормы();
	
	ОбновитьКомандуРезультатовСинхронизации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеСинхронизацииДанных(СтрокаПриложение)
	
	Состояние = Новый Структура;
	Состояние.Вставить("Представление", "");
	Состояние.Вставить("Картинка",      0);
	
	Если Не СтрокаПриложение.НастройкаЗавершена Тогда
		Состояние.Представление = НСтр("ru = 'Настройка не завершена'");
		Состояние.Картинка = 3;
		
		Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
			Состояние.Представление = НСтр("ru = 'Настройка не завершена, получены данные для сопоставления'");
		КонецЕсли;
	Иначе
		Если СтрокаПриложение.ДатаНачалаПоследнейЗагрузки > СтрокаПриложение.ДатаОкончанияПоследнейЗагрузки Тогда
			Состояние.Представление = НСтр("ru = 'Загрузка данных...'");
			Состояние.Картинка = 4;
		ИначеЕсли СтрокаПриложение.ДатаНачалаПоследнейВыгрузки > СтрокаПриложение.ДатаОкончанияПоследнейВыгрузки Тогда
			Состояние.Представление = НСтр("ru = 'Выгрузка данных...'");
			Состояние.Картинка = 4;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаПриложение.ДатаПоследнегоЗапуска) Тогда
			Состояние.Представление = НСтр("ru = 'Не запускалась'");
			
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				Состояние.Представление = НСтр("ru = 'Получены данные для сопоставления'");
			КонецЕсли;
		Иначе
			Состояние.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Прошлый запуск: %1'"),
				СтрокаПриложение.ПредставлениеДатыПоследнегоЗапуска);
				
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				Состояние.Представление = НСтр("ru = 'Получены данные для сопоставления'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаРезультатаВыполнения(РезультатВыполнения)
	
	Если РезультатВыполнения = 2 Тогда
		Возврат 3; // выполнено с предупреждениями
	ИначеЕсли РезультатВыполнения = 1 Тогда
		Возврат 2; // ошибка
	ИначеЕсли РезультатВыполнения = 0 Тогда
		Возврат 0; // успешно
	КонецЕсли;
	
	// без статуса
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ЕстьПраваНаАдминистрированиеОбменов   = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
	ЕстьПраваНаПросмотрЖурналаРегистрации = ПравоДоступа("ЖурналРегистрации", Метаданные);
	
	ЕстьПраваНаВыполнениеОбновленияКонфигурации = ПравоДоступа("ОбновлениеКонфигурацииБазыДанных", Метаданные);
	
	ПрефиксИБ = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	
	МодельСервиса = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЭлементовФормы()
	
	// Командная панель.
	Элементы.СписокПриложенийГруппаУправление.Видимость                 = ЕстьПраваНаАдминистрированиеОбменов;
	Элементы.СписокПриложенийГруппаИзменениеИСостав.Видимость           = ЕстьПраваНаАдминистрированиеОбменов И ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийГруппаВыполненияОбменаДанными.Видимость    = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийГруппаРасписаниеВыполненияОбмена.Видимость = ЕстьПраваНаАдминистрированиеОбменов И ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийГруппаСобытия.Видимость                    = ЕстьПраваНаПросмотрЖурналаРегистрации И ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийУдалитьНастройкуСинхронизации.Видимость    = ЕстьПраваНаАдминистрированиеОбменов И ЕстьНастроенныеОбмены;
	
	// Контекстное меню.
	Элементы.СписокПриложенийКонтекстноеМенюГруппаИзменениеИСостав.Видимость           = ЕстьПраваНаАдминистрированиеОбменов И ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаВыполненияОбменаДанными.Видимость    = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаРасписаниеВыполненияОбмена.Видимость = ЕстьПраваНаАдминистрированиеОбменов И ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаСобытия.Видимость                    = ЕстьПраваНаПросмотрЖурналаРегистрации И ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаУправление.Видимость                 = ЕстьПраваНаАдминистрированиеОбменов И ЕстьНастроенныеОбмены;
	
	// Видимость элементов в шапке формы.
	Элементы.ИнформационнаяПанельТребуетсяОбновление.Видимость = ТребуетсяОбновление;
	
	Если ЕстьПраваНаВыполнениеОбновленияКонфигурации Тогда
		Элементы.ПравоОбновленияСтраницы.ТекущаяСтраница = Элементы.ИнформацияОбменДаннымиПриостановленЕстьПравоОбновления;
	Иначе
		Элементы.ПравоОбновленияСтраницы.ТекущаяСтраница = Элементы.ИнформацияОбменДаннымиПриостановленНетПраваОбновления;
	КонецЕсли;
	
	// Доступность элементов в шапке формы.
	Элементы.ОткрытьРезультатыСинхронизацииДанных.Доступность = ЕстьНастроенныеОбмены;
	
	// Безусловное отключение видимости команд настройки расписания и загрузки правил в модели сервиса.
	Если МодельСервиса Тогда
		
		// Командная панель.
		Элементы.СписокПриложенийЗагрузитьПравилаСинхронизацииДанных.Видимость = Ложь;
		Элементы.СписокПриложенийГруппаРасписаниеВыполненияОбмена.Видимость    = Ложь;
		
		// Контекстное меню.
		Элементы.СписокПриложенийКонтекстноеМенюГруппаРасписаниеВыполненияОбмена.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандуРезультатовСинхронизации()
	
	СтруктураЗаголовка = ОбменДаннымиСервер.СтруктураЗаголовкаГиперссылкиМонитораПроблем(
		МассивИспользуемыхУзлов(СписокПриложений));
	ЗаполнитьЗначенияСвойств(Элементы.ОткрытьРезультатыСинхронизацииДанных, СтруктураЗаголовка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивИспользуемыхУзлов(ТаблицаМонитора)
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаМонитора Из ТаблицаМонитора Цикл
		Результат.Добавить(СтрокаМонитора.УзелИнформационнойБазы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийИндексСтроки()
	
	// Возвращаемое значение функции.
	ИндексСтроки = Неопределено;
	
	// При обновлении монитора выполняем позиционирование курсора.
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИндексСтроки = СписокПриложений.Индекс(ТекущиеДанные);
		
	КонецЕсли;
	
	Возврат ИндексСтроки;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПозиционированиеКурсора(ИндексСтроки)
	
	Если ИндексСтроки <> Неопределено Тогда
		
		// Выполняем проверки позиционирования курсора после получения новых данных.
		Если СписокПриложений.Количество() <> 0 Тогда
			
			Если ИндексСтроки > СписокПриложений.Количество() - 1 Тогда
				
				ИндексСтроки = СписокПриложений.Количество() - 1;
				
			КонецЕсли;
			
			// позиционируем курсор
			Элементы.СписокПриложений.ТекущаяСтрока = СписокПриложений[ИндексСтроки].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если спозиционировать строку не удалось, то устанавливаем текущей первую строку.
	Если Элементы.СписокПриложений.ТекущаяСтрока = Неопределено
		И СписокПриложений.Количество() <> 0 Тогда
		
		Элементы.СписокПриложений.ТекущаяСтрока = СписокПриложений[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодробнаяИнформацияНаСервере(УзелОбмена)
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена);
	
	ВариантНастройкиОбмена = ОбменДаннымиСервер.СохраненныйВариантНастройкиУзлаПланаОбмена(УзелОбмена);
	ВерсияКорреспондента   = ОбменДаннымиСервер.ВерсияКорреспондента(УзелОбмена);
	
	СсылкаНаПодробноеОписание = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(
		ИмяПланаОбмена, "ПодробнаяИнформацияПоОбмену", ВариантНастройкиОбмена, ВерсияКорреспондента);
	
	Возврат СсылкаНаПодробноеОписание;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПомощникИнтерактивнойСинхронизации(ДополнительныеПараметры)
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ДополнительныеПараметры.ЭтоОбменСПриложениемВСервисе);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  ДополнительныеПараметры.ОбластьДанныхКорреспондента);
	
	ПараметрыПомощника.Вставить("ОтправитьДанные", Не ДополнительныеПараметры.ЗапускОбменаИзКорреспондента);
	
	ПараметрыПомощника.Вставить("РежимДополненияВыгрузки",
		ДополнительныеПараметры.ИспользоватьДопОтборы Или ДополнительныеПараметры.ВариантОбменаДанными = "ПолучениеИОтправка");
	
	ПараметрыПомощника.Вставить("НастройкаРасписания", Ложь);
	
	ВспомогательныеПараметры = Новый Структура;
	ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
	
	ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(ДополнительныеПараметры.УзелОбмена,
		ЭтотОбъект, ВспомогательныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникАвтоматическойСинхронизации(ДополнительныеПараметры)
	
	ПараметрыПомощника = Новый Структура;	
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ДополнительныеПараметры.ЭтоОбменСПриложениемВСервисе);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  ДополнительныеПараметры.ОбластьДанныхКорреспондента);
		
	ВспомогательныеПараметры = Новый Структура;
	ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		
	ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(ДополнительныеПараметры.УзелОбмена,
		ЭтотОбъект, , Истина, ВспомогательныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеСинхронизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПолученоСообщениеДляСопоставленияДанных Тогда
		
		ОткрытьПомощникИнтерактивнойСинхронизации(ДополнительныеПараметры);
			
	Иначе
		
		Если Не ДополнительныеПараметры.ДоступнаИнтерактивнаяОтправка
			Или (ДополнительныеПараметры.ВариантОбменаДанными = "Синхронизация"
				И Не ДополнительныеПараметры.ИспользоватьДопОтборы) Тогда
			
			ОткрытьПомощникАвтоматическойСинхронизации(ДополнительныеПараметры);
			
		Иначе
			
			ОткрытьПомощникИнтерактивнойСинхронизации(ДополнительныеПараметры);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовместимостьПравилКонвертации(ОбработкаПродолжения)
	
	ОписаниеОшибки = Неопределено;
	Если ПравилаКонвертацииСовместимыСТекущейВерсией(ОбработкаПродолжения.ДополнительныеПараметры.ИмяПланаОбмена, ОписаниеОшибки) Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
		
	Иначе
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПерейтиКЗагрузкеПравил", НСтр("ru = 'Загрузить правила'"));
		Если ОписаниеОшибки.ВидОшибки <> "НекорректнаяКонфигурация" Тогда
			Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КонецЕсли;
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
		ДополнительныеПараметры.Вставить("ИмяПланаОбмена",       ОбработкаПродолжения.ДополнительныеПараметры.ИмяПланаОбмена);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПравилКонвертацииНаСовместимость", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыФормы.Картинка = ОписаниеОшибки.Картинка;
		ПараметрыФормы.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		Если ОписаниеОшибки.ВидОшибки = "НекорректнаяКонфигурация" Тогда
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных не может быть выполнена'");
		Иначе
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно'");
		КонецЕсли;
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ОписаниеОшибки.ТекстОшибки, Кнопки, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПравилКонвертацииНаСовместимость(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение = "Продолжить" Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения);
			
		ИначеЕсли Результат.Значение = "ПерейтиКЗагрузкеПравил" Тогда
			
			ОбменДаннымиКлиент.ЗагрузитьПравилаСинхронизацииДанных(ДополнительныеПараметры.ИмяПланаОбмена);
			
		КонецЕсли; // При "Отмена" ничего не делаем.
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена, ОписаниеОшибки)
	
	ДанныеОПравилах = Неопределено;
	Если Не ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ДанныеОПравилах) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПравилаДляОбменаДанными.ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена,
		ОписаниеОшибки, ДанныеОПравилах);
		
КонецФункции

&НаСервере
Функция ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ИнформацияОПравилах)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные,
	|	ПравилаДляОбменаДанными.ВидПравил
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.Файл)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)");
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПравил = Выборка.ПравилаЗачитанные.Получить().Конвертация; // Структура
		
		ИнформацияОПравилах = Новый Структура;
		ИнформацияОПравилах.Вставить("ИмяКонфигурации",              СтруктураПравил.Источник);
		ИнформацияОПравилах.Вставить("ВерсияКонфигурации",           СтруктураПравил.ВерсияКонфигурацииИсточника);
		ИнформацияОПравилах.Вставить("СинонимКонфигурацииВПравилах", СтруктураПравил.СинонимКонфигурацииИсточника);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолученоСообщениеДляСопоставленияДанных(УзелОбмена)
	
	Возврат ОбменДаннымиСервер.ПолученоСообщениеСДаннымиДляСопоставления(УзелОбмена);
	
КонецФункции

#КонецОбласти